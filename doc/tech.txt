--- Требования

1. Работа со сценой
  1.1 Основные объеты
    1.1.1. Entity
      1.1.1.1. Трансформации (перемещение, поворот, масштаб) +
      1.1.1.2. Создание иерархических связей +
      1.1.1.3. Обход потомков, visitor +
      1.1.1.4. Имя объекта, поиск потомков по имени +
      1.1.1.5. Создание связи с физической моделью (имя модели) -----
      1.1.1.6. Цвет проволочного представления (для вспомогательной ----------
               визуализации  камер,  источников   света,   хелперов   и   т.п.)
      1.1.1.7. Установка ограничивающего объёма ++
    1.1.2. Light (потомок Entity) +
      1.1.2.1. Цвет источника
      1.1.2.2. Тип источника (direct, spot, point) - сделать как enum
      1.1.2.3. Параметры источника (spot-angle, spot-exponent, attenuation)
    1.1.3. Camera (потомок Entity) +
      1.1.3.1. Получение  матрицы  проекции - virtual
    1.1.4. PerspectiveCamera +
      1.1.4.1. Параметры камеры (углы обзора, znear, zfar)
    1.1.5. OrthoCamera +
      1.1.5.1. Параметры камеры (размеры области, znear, zfar)
    1.1.6. VisualModel  +-
      1.1.6.1. Установка имени меша
      1.1.6.2. Работа  с  соединениями  (создание,  установка  имени  и  матриц
               преобразования, установка иерархических связей)
      1.1.6.3. Установка ограничивающего тела (AABB)
    1.1.7. Helper (примечание: возможно разделить на несколько классов) ----
      1.1.7.1. Присоединение вспомогательных объектов (боксы, цилиндры,  конусы,  сферы,
               стрелки, базисы, линии, надписи)
      1.1.7.2. Получение типа присоединённого объекта
      1.1.7.3. Получение параметров присоединённого объекта
    1.1.8. Listener (аналог камеры для проигрывания звука) +-
    ?? 1.1.9. Среды (опционально, требует детализации) -
    ?? 1.1.10. Комнаты (требует детализации) -
  1.2. Запросы к сцене +
    1.2.1. Обход объектов попадающих в указанный объём
    1.2.2. Регистрация следящих-объёмов: --
      1.2.2.1. Регистрация обработчиков сигнала перемещения/поворота/изменения масштаба объекта в объёме
      1.2.2.2. Регистрация обработчиков сигнала создания нового объекта в объёме
      1.2.2.3. Регистрация обработчиков сигнала удаления объекта из объёма
    1.2.3. Необходима реализация паттерна "Acyclic visitor"
  1.3. Загрузка / сохранение текущего состояния сцены ---
       * Описание: полноценная загрузка / сохранение игрового состояния на  данном
         уровне  невозможна.  Функциональность  загрузки  и  сохранения   здесь
         необходима для  импорта  частей  сцены  и  для  упрощения  дальнейшего
         написания игровой логики. Например, данный уровень служит для загрузки
         моделей.  Модели  (1.1.6.  VisualModel)   представляют   собой   место
         потенциального разрыва целостности данных, поскольку определение  AABB
         и склелета (набора соединений) возможно только  по  мешу,  который  на
         данном уровне описывается только именем, т.е. его  загрузка  здесь  не
         желательна. Для импорта таких данных о меше и используется загрузка  /
         сохранение.
         1.3.1. Расширяемый  класс  SceneSerializer:  регистрация  обработчиков
         сохранения и загрузки узлов
  1.4. Анимация entity??? (биндинг методов, вызываемых при изменении параметров
       анимации) --- (расписать!!!)

2. MediaLib
  2.1. Material +
    2.1.1. Базовые параметры
      2.1.1.1. Вещественный свойства (shininess, reflectivity, transparency, refraction_index)
      2.1.1.2. Флаги (two-sides, translucent, cast-shadows, recv-shadows, self-shadow, wire, lighting)
      2.1.1.3. Имя шейдера (текстовое)
    2.1.2. Цвета (diffuse, ambient, emission, specular)
    2.1.3. Карты (diffuse, bump, reflective, specular, emission)
      2.1.3.1. Имя текстуры
      2.1.3.2. Матрица преобразования текстурных координат
      2.1.3.3. Имя канала текстурных координат
      2.1.3.4. Параметры альфа-отсечения
    2.1.4. Параметры блендинга (формула, аргументы)
  2.2. Mesh +
    2.2.1. Поверхности
      2.2.1.1. Тип примитивов
      2.2.1.2. Массив вершин
      2.2.1.3. Массив индексов
      2.2.1.4. Имя материала
      2.2.1.5. Каналы текстурных координат (массив массивов)
      2.2.1.6. Каналы вершинных цветов (аналогично)
      2.2.1.7. Каналы  вершинных  весов  (аналогично)  -  продумать,  возможно
               достаточно одного канала
  2.3. SoundDeclaration (опционально) +
    2.3.1. Основные поля EAX (size, diffusion, air-absortion, room-lf, room-hf, room-rolloff,
           decay-time-lf, decay-time-hf, reflections, reflections-delay, reverb, reverb-delay)
  2.4. ImageList (список имён картинок) -!!!
    2.4.1. Массив имён картинок
    2.4.2. FPS
    2.4.3. Формат загрузки/сохранения: возможность указать  картинки  как  явно
           так и по маске
  2.5. 2D-анимация (расписать)

3. Render
  3.1. Основа
    * Описание: рендер состоит из 4-х уровней:
      - низкоуровневого устройства отрисовки, способного рисовать примитивы с
        заданными свойствами;
      - API  среднего  уровня,  решающее  след.  задачи:   загрузка и вывод   графических
      примитивов  (спрайты,  модели,  скин-модели),   вывод   текста   шрифтами
      MediaLib,  сокрытие  различий   конфигурации   оборудования,   работа   с
      освещением, областями вывода и задачи оптимизации вывода на низкоуровневое устройство.      
      - очереди отрисовки, каждым элементом которой является объект, получающий
        управление по запросу визуализации;
      - собственно рендера, получающего запросы отрисовки и передающего управление
        элементам очереди отрисовки.
  3.2. Устройство рендеринга (экспериментальное устройство - OpenGL + Win32, соответствует 1-му уровню)
    3.2.1. Инициализация устройства
    3.2.2. Рисование примитивов (меш, список спрайтов) с заданными  параметрами
    3.2.3. Реализация InputStage: настройка расположения геометрии в  вершинных
    и индексных буферах.
    3.2.4. Реализация RasterizerStage.
      3.2.4.1. Настройка растеризации геометрии (RasterizerDesc).
      3.2.4.2. Настройка области вывода (Viewport).
      3.2.4.3. Настройка области отсечения (Scissor).
    3.2.5. Реализация ShaderStage (возможно перепроектирование).
      3.2.5.1. Настройка освещения.
      3.2.5.2. Настройка афинных преобразований.
      3.2.5.3. Настройка проецирования и камеры.
      3.2.5.4. Настройка материала.
      3.2.5.5. Настройка текстур: Sampler + Texture.
      3.2.5.6.  Загрузка  и  установка  шейдеров   (необходимо   проектирование
      совместно с: 3.2.5.1, 3.2.5.4).
    3.2.6. Реализация OutputStage+
      3.2.6.1.  Настройка  работы  с  целевыми  буферами  вывода:   ColorBuffer
      и DepthStencilBuffer.
      3.2.6.2. Настройка работы ColorBuffer (BlendDesc).
      3.2.6.3. Настройка работы DepthStencilBuffer (DepthStencilDesc).
      3.2.6.4. Управление очисткой буферов (ColorBuffer, DepthStencilBuffer).
    3.2.7. Управление отрисовкой примитивов.
      3.2.7.1. Рисование индексированной и неиндексированной геометрии (Draw  и
      DrawIndexed).
      3.2.7.2. Реализация "Instancing" (опционально).
      3.2.7.3. Управление предикатами отрисовки.
    3.2.8. Сбор и  формирование  отчётов  по  статистике  отрисовки  (тайминги,
    количество вызовов, количество примитивов).
    3.2.9.  Кеширование   состояния   устройства   и   минимизация   количества
    переключения стейтов.
    3.2.10. Полное и частичное сохранение и восстановление состояния устройства
    отрисовки (опционально).
    3.2.11. Тестирование.
      3.2.11.1. Реализация каркаса тестирования графических приложений.
      3.2.11.2. Реализация  основных  тестов  RedBook  при  помощи  устройства
      отрисовки.
      3.2.11.3. Реализация комплексных демонстраций работы устройства отрисовки
      (2-3 штуки).
      3.2.11.4. Прогонка тестов на различных конфигурациях оборудования (25 < )
  3.3. Среднеуровневая система отрисовки.
    3.3.1. Загрузка ресурсов отрисовки.
      3.3.1.1. Загузрка моделей.
      3.3.1.2. Загрузка материалов.
      3.3.1.3. Загрузка текстур.
      3.3.1.4. Загрузка шрифтов.
    3.3.2. Рисование примитивов.
      3.3.2.1. Рисование мешей.
      3.3.2.2. Рисование спрайтов.
      3.3.2.3. Рисование хелперов (расписать).
      3.3.2.4. Вывод текста.
    3.3.3. Адаптация  под  различные  конфигурации  оборудования   (Materials,
    Shaders, Technique).
    3.3.4. Настройка параметров вывода примитивов отрисовки.
      3.3.4.1. Матрица афинных преобразований в пространстве.
      3.3.4.2. Настройка динамических параметров материала (цвет объекта, время
      анимации материала).
    3.3.5. Камеры и проекции.
  3.4. Менеджер рендеринга.
  3.5. Визуализация сцен - связь с SceneGraph


4. Проигрывание звука
  4.1. Привязка к Scene::Listener +
  4.2. Разделение  на  низкоуровневую  SoundDevice  и  высокоуровневую  систему
       проигрывания звука +
  4.3. Проигрывание звуков в 3D-пространстве (низкоуровневая часть)
    4.3.1. Задание положения источника звука +
    4.3.2. Задание направления источника звука +
    4.3.3. Задание скорости движения источника звука --
    4.3.4. Задание EAX-окружения источника звука (опционально) -
    4.3.5. Распределение доступных аппаратно каналов проигрывания звука +
    4.3.6. Установка уровня громкости (для каждого канала и всего устройства) +
    4.3.7. Проигрывание звуков, задаваемых сэмплами из medialib::SoundSample +
    4.3.8. Управление положением, направлением и скоростью (-) движения слушателя +
    4.3.9. Задание EAX-окружения слушателя -
    4.3.10. Команды управления проигрыванием звука +
  4.4. Проигрывание звуков сцены (высокоуровневая часть)
    4.4.1. Обнаружение источников звука, расположенных ближе всего к  слушателю
           (количество  таких  источников   ограничено   количество   доступных
           аппаратных каналов проигрывания звука) +-
    4.4.2. Установка обнаруженных звуков на проигрывание низкоуровневой части +
    4.4.3. Обнаружение  окружения  (SoundEnv),  в  котором  находится  слушатель  и
           проигрывание звука с учётом его параметров (опционально) -

5. Скриптовая подсистема (на основе Lua)
  5.1. Привязка функциональных объектов +
  5.2. Автоматическая генерация кода  извлечения  аргументов  из  стека  луа  и
       проверки их типов +
  5.3. Настройка сборщика мусора +

6. Экспорт функций движка в окружение луа
  6.1. Экспорт основных функций работы с математической библиотекой +
    * Примечание: возможно  имеет  смысл  реализовать  математику  на  луа  для
    уменьшения передач между C++ и lua.
  6.2. Экспорт функций scene-graph (раздел  1) --
    * Примечание: требуется  отдельный  список требований

7. Пользовательский интерфейс -
     * Примечания:  необходимы  исследования.  Желательно   использовать одну из
   middleware  библиотек.  В  качестве  запасного  варианта допустимо использовать
   наработки из уже существующей  подсистемы  "текстовых меню".
   7.1. Необходима надстройка над RenderDevice, которая бы  позволяла  выводить
        элементы пользовательского интерфейса
   7.2. Необходим вывод картинок-индикаторов
   7.3. Необходим вывод текста
   7.4. Необходим вывод меню (одноуровневое)

8. Дополнительная функциональность
  8.1. Свойства приложения (для регистрации в менеджере игр Windows Vista)
  8.2. Определение конфигурации системы (видеорежимы,  устройства  проигрывания
       звука и т.п.)
       
9. Утилиты
  9.1. Утилиты импорта данных сцены из Collada:
    9.1.1. Экспорт материалов
    9.1.2. Экспорт мешей
    9.1.3. Экспорт графа сцены
    
10. Устройства ввода???

--- WBS

1. Подготовка основы 
  Задача 1:
    - entity (1.1.1)
    - запросы к сцене (1.2)
      * Примечание: пока сделать без индексации  (octree).  Реализовать  "в  лоб"
      функции  проверки.  Дополнить  XTL  классом  visitor  (на   основе   кода
      библиотеки Loki, Александреску)
  Задача 2:
    - базовый код загрузки и сохранения (1.3.1)
  Задача 3:
    - скриптовая система (5)
2. Расширение функциональности сцены
  Задача 1:
    - light (1.1.2)
    - регистрация загрузки и сохранения light в 1.3.1
    - регистрация источника света в 1.2
    - регистрация источника света в  6.2
  Задача 2:
    - camera (1.1.3)
    - perspective camera (1.1.4)
    - ortho camera (1.1.5)
    - регистрация загрузки и сохранения камер в 1.3.1
    - регистрация камер в 1.2
    - регистрация камер в 6.2
  Задача 3:
    - visual model (1.1.6)
    - регистрация загрузки и сохранения моделей в 1.3.1
    - регистрация модели в 1.2
    - регистрация модели в 6.2
  Задача 4:
    - helper (1.1.7)
    - регистрация загрузки и сохранения хелперов не нужна
    - регистрация хелперов в 1.2
    - регистрация хелперов в 6.2
3. Ресурсы
  Задача 1:
    - material (2.1)
    - экспорт материалов из collada (9.1.1)
  Задача 2:
    - mesh (2.2)
    - экспорт мешей из collada (9.1.2)
  Задача 3:
    - imagelist (2.4)
  Задача 4 (опционально):
    - soundenv (2.3)
  Задача 5:
    - экспорт графа сцены (9.1.3)
4. Работа с низкоуровневыми устройствами
  Задача 1:
    - разработка низкоуровневого устройства отрисовки (3.2)
    - автоопределение конфигурации оборудования отрисовки (8.2) - опционально
  Задача 2:
    - разработка низкоуровневого устройства проигрывания звука (4.3)
    - автоопределение конфигурации оборудования проигрывания звука (8.2) - опционально
  Задача 3:
    - разработка низкоуровневого устройства ввода (???)
    - автоопределение конфигурации оборудования ввода (8.2) - опционально
5. Высокоуровневые системы отображения сцены
  Задача 1:
    - разработка основы системы визуализации (3.1)
    - разработка simple-render (3.3)
  Задача 2:
    - разработка высокоуровневой системы воспроизведения звука (4.4)
6. Разработка системы отображения пользовательского интерфейса (???)
7. Реализация дополнительной функциональности
  Задача 1:
    - использование свойств приложения для Windows Vista (8.1)
