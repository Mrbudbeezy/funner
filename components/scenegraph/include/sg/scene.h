#ifndef SCENE_GRAPH_SCENE_HEADER
#define SCENE_GRAPH_SCENE_HEADER

#include <sg/entity.h>

namespace scene_graph
{

//forward declarations
class SceneObject;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс менеджера сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class ISceneManager
{
  public:
    typedef const void* node_t;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с узлом сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual node_t CreateNode   (const void* user_data, const bound_volumes::aaboxf&) = 0;
    virtual void   RemoveNode   (node_t) = 0;
    virtual void   UpdateBounds (node_t, const bound_volumes::aaboxf&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление объектов находящихся в указанном объёме
///////////////////////////////////////////////////////////////////////////////////////////////////
    class IEnumerator
    {
      public:
        virtual void operator () (const void* node_user_data) = 0;
        virtual void operator () (size_t nodes_count, const void** user_datas); //для пакетной обработки
    };

    virtual void Traverse (const bound_volumes::aaboxf&, IEnumerator&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () {}
    virtual void Release () {}

  protected:
    virtual ~ISceneManager () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сцена
///////////////////////////////////////////////////////////////////////////////////////////////////
class Scene
{
  friend class Entity;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Scene  ();
    Scene  (ISceneManager*);
    ~Scene ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetName (const char* name);
    const char* Name    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Корень сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
          Node& Root (); //доработать!!!!
    const Node& Root () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество объектов в сцене
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t EntitiesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обход объектов, принадлежащих сцене
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (Entity&)>       TraverseFunction;
    typedef xtl::function<void (const Entity&)> ConstTraverseFunction;
    typedef xtl::basic_visitor<void>            Visitor;

    void Traverse  (const TraverseFunction&);
    void Traverse  (const ConstTraverseFunction&) const;
    void VisitEach (Visitor&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обход объектов, принадлежащих сцене и входящих в ограничивающий объём
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Traverse  (const bound_volumes::aaboxf&, const TraverseFunction&);
    void Traverse  (const bound_volumes::aaboxf&, const ConstTraverseFunction&) const;
    void VisitEach (const bound_volumes::aaboxf&, Visitor&) const;

  private:    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация объектов сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (SceneObject&);

  private:
    Scene (const Scene&); //no impl
    Scene& operator = (const Scene&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
