#ifndef SCENE_GRAPH_VISUAL_MODEL_HEADER
#define SCENE_GRAPH_VISUAL_MODEL_HEADER

#include <sg/entity.h>

namespace scene_graph
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отображаемая модель
///////////////////////////////////////////////////////////////////////////////////////////////////
class VisualModel: public Entity
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание модели
///////////////////////////////////////////////////////////////////////////////////////////////////
    static VisualModel* Create ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка имени меша модели
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetMeshName (const char* name);
    const char* MeshName    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка ограничивающий тел
///////////////////////////////////////////////////////////////////////////////////////////////////
    using Entity::SetBoundBox;
    using Entity::SetInfiniteBounds;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    VisualModel  ();
    ~VisualModel ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод, вызываемый при посещении данного объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
