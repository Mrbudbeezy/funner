#ifndef SCENE_GRAPH_CAMERA_HEADER
#define SCENE_GRAPH_CAMERA_HEADER

#include <sg/entity.h>

namespace sg
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Камера
///////////////////////////////////////////////////////////////////////////////////////////////////
class Camera : public Entity
{
  public: 
///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица проекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f& ProjectionMatrix ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка обновления матрицы проекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool NeedProjectionRecalc ();

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Camera  ();
    ~Camera ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица проекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const math::mat4f& GetProjectionMatrix () = 0;

  private:
    struct Impl;
    Impl* impl;
};

class PerspectiveCamera : public Camera
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    static PerspectiveCamera* Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetFovX  (float fov_x);
    float GetFovX  ();
    void  SetFovY  (float fov_y);
    float GetFovY  ();
    void  SetZNear (float z_near);
    float GetZNear ();
    void  SetZFar  (float z_far);
    float GetZFar  ();

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PerspectiveCamera  ();
    ~PerspectiveCamera ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица проекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f& GetProjectionMatrix ();

  private:
    struct Impl;
    Impl* impl;
};

class OrthoCamera
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    static OrthoCamera* Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetXMag  (float x_mag);
    float GetXMag  ();
    void  SetYMag  (float y_mag);
    float GetYMag  ();
    void  SetZNear (float z_near);
    float GetZNear ();
    void  SetZFar  (float z_far);
    float GetZFar  ();

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    OrthoCamera  ();
    ~OrthoCamera ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица проекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f& GetProjectionMatrix ();

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
