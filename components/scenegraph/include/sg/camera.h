#ifndef SCENE_GRAPH_CAMERA_HEADER
#define SCENE_GRAPH_CAMERA_HEADER

#include <mathlib.h>
#include <sg/entity.h>

namespace sg
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Камера
///////////////////////////////////////////////////////////////////////////////////////////////////
class Camera : public Entity
{
  public: 
    typedef Entity BaseClass;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица проекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f& ProjectionMatrix ();

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Camera  ();
    ~Camera ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Данный метод должны вызывать потомки при обновлении параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateNotify ();    

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Расчёт матрица проекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void ComputeProjectionMatrix (math::mat4f&) = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамическая диспетчеризация
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void AcceptCore (Visitor&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перспективная камера
///////////////////////////////////////////////////////////////////////////////////////////////////
class PerspectiveCamera : public Camera
{
  public:
    typedef Camera BaseClass;  
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    static PerspectiveCamera* Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetFovX  (float fov_x);
    void  SetFovY  (float fov_y);
    void  SetZNear (float z_near);
    void  SetZFar  (float z_far);        
    float FovX     () const;
    float FovY     () const;
    float ZNear    () const;
    float ZFar     () const;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PerspectiveCamera  ();
    ~PerspectiveCamera ();

  private:
    void ComputeProjectionMatrix (math::mat4f&);
    void AcceptCore (Visitor&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ортографическая камера
///////////////////////////////////////////////////////////////////////////////////////////////////
class OrthoCamera: public Camera
{
  public:
    typedef Camera BaseClass;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    static OrthoCamera* Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetLeft   (float left);
    void  SetRight  (float right);
    void  SetTop    (float top);
    void  SetBottom (float bottom);
    void  SetZNear  (float z_near);
    void  SetZFar   (float z_far);
    float Left      () const;
    float Right     () const;
    float Top       () const;
    float Bottom    () const;
    float ZNear     () const;
    float ZFar      () const;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    OrthoCamera  ();
    ~OrthoCamera ();

  private:
    void ComputeProjectionMatrix (math::mat4f&);
    void AcceptCore (Visitor&);

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
