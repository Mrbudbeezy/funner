#ifndef SCENE_GRAPH_LIGHT_HEADER
#define SCENE_GRAPH_LIGHT_HEADER

#include <mathlib.h>
#include <sg/entity.h>

namespace scene_graph
{

const float DEFAULT_LIGHT_RANGE = 1e9;  //радиус действия источника света по умолчанию

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
enum LightType
{
  LightType_Direct, //направленный
  LightType_Spot,   //конический
  LightType_Point   //точечный
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник света
///////////////////////////////////////////////////////////////////////////////////////////////////
class Light : public Entity
{
  public: 
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Light* Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                   SetType (LightType type);
    scene_graph::LightType Type    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет источника света
///////////////////////////////////////////////////////////////////////////////////////////////////          
    void               SetLightColor (const math::vec3f& color);
    const math::vec3f& LightColor    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetSpotAngle    (float angle);
    void  SetSpotExponent (float exponent);
    float SpotAngle       () const;
    float SpotExponent    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Затухание (constant, linear, quadratic)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetAttenuation (const math::vec3f& multiplier);
    const math::vec3f& Attenuation    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Расстояние действия источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetRange (float range);
    float Range    () const;    

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Light  ();
    ~Light ();    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод, вызываемый при посещении данного объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
