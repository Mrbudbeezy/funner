#ifndef SCENE_GRAPH_LIGHT_HEADER
#define SCENE_GRAPH_LIGHT_HEADER

#include <entity.h>
#include <mathlib.h>

namespace sg
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
enum LightType
{
  LightType_Direct, //направленный
  LightType_Spot,   //конический
  LightType_Point   //точечный
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип цвета источника света
///////////////////////////////////////////////////////////////////////////////////////////////////        
enum LightColor
{
  LightColor_Ambient,   //поглощённая состовляющая
  LightColor_Diffuse,   //рассеяная состовляющая
  LightColor_Specular  //отражённая состовляющая
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник света
///////////////////////////////////////////////////////////////////////////////////////////////////
class Light : public Entity
{
  public: 
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип источника света
///////////////////////////////////////////////////////////////////////////////////////////////////          
    void      SetLightType (LightType type);
    LightType GetLightType ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет источника света
///////////////////////////////////////////////////////////////////////////////////////////////////          
    void               SetLightColor (LightColor type,const math::vec3f& color);
    const math::vec3f& GetLightColor (LightColor type);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetSpotAngle    (float angle);
    float GetSpotAngle    ();
    void  SetSpotExponent (float exponent);    
    float GetSpotExponent ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Затухание
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetAttenuation (const math::vec3f& multiplier);
    const math::vec3f& GetAttenuation ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Расстояние действия источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetLightRange (float range);
    float GetLightRange ();

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Light  ();
    ~Light ();  

  private:
    Light (const Light&);             //no impl
    Light& operator = (const Light&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
