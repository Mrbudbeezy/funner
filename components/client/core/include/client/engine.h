#ifndef CLIENT_ENGINE_HEADER
#define CLIENT_ENGINE_HEADER

#include <stl/auto_ptr.h>

#include <common/var_registry.h>

#include <client/client.h>

namespace client
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсистема движка               
///////////////////////////////////////////////////////////////////////////////////////////////////
class IEngineSubsystem
{
  public:
    virtual const char* Name () = 0;

    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~IEngineSubsystem () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры запука движка
///////////////////////////////////////////////////////////////////////////////////////////////////
class IEngineStartupParams
{
  protected:
    virtual ~IEngineStartupParams () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Движок
///////////////////////////////////////////////////////////////////////////////////////////////////
class Engine
{
  public:
    typedef xtl::com_ptr<IEngineSubsystem>  SubsystemPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Engine (const char* configuration_branch_name, IEngineStartupParams* engine_startup_params = 0);
    ~Engine ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка клиента
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachClient (const Client& client);
    void DetachClient ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ConfigurationBranch () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
//    void LoadResource (const char* resource_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение тракейбла
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::trackable& GetTrackable () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор подсистем
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t            SubsystemsCount () const;
    IEngineSubsystem& Subsystem       (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление подсистем
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddSubsystem    (const SubsystemPointer subsystem);
    void RemoveSubsystem (const SubsystemPointer subsystem);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработка событий ввода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ProcessInputEvent (const char* attachment_name, const char* event) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа со слушателями событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachEventListener (IClientEventListener* listener);
    void DetachEventListener (IClientEventListener* listener);

  private:
    Engine (const Engine&);
    Engine& operator = (const Engine&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

xtl::trackable& get_trackable (const Engine& engine);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер запуска
///////////////////////////////////////////////////////////////////////////////////////////////////
class StartupManager
{
  public:
    typedef xtl::function<void (common::VarRegistry&, IEngineStartupParams*, Engine&)> StartupHandler;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление обработчиков
///////////////////////////////////////////////////////////////////////////////////////////////////
    //??????? Связь вложенных веток реестра и StartupHandler'ов
    static void RegisterStartupHandler       (const char* node_name, const StartupHandler& startup_handler, int order = 0); //чем ниже order, тем раньше запускается
    static void UnregisterStartupHandler     (const char* node_name);
    static void UnregisterAllStartupHandlers ();
};

}

#endif
