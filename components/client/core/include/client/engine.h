#ifndef CLIENT_ENGINE_HEADER
#define CLIENT_ENGINE_HEADER

#include <stl/auto_ptr.h>

#include <common/var_registry.h>

#include <client/engine_attachments.h>

namespace client
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Группы, указывающие порядок запуска подсистем движка
///////////////////////////////////////////////////////////////////////////////////////////////////
const size_t StartupGroup_Level0 = 0;
const size_t StartupGroup_Level1 = 10;
const size_t StartupGroup_Level2 = 20;
const size_t StartupGroup_Level3 = 30;
const size_t StartupGroup_Level4 = 40;
const size_t StartupGroup_Level5 = 50;
const size_t StartupGroup_LevelMax = ~0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсистема движка               
///////////////////////////////////////////////////////////////////////////////////////////////////
class IEngineSubsystem
{
  public:
    virtual const char* Name () = 0;

    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~IEngineSubsystem () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры запука движка
///////////////////////////////////////////////////////////////////////////////////////////////////
class IEngineStartupParams
{
  protected:
    virtual ~IEngineStartupParams () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Движок
///////////////////////////////////////////////////////////////////////////////////////////////////
class Engine
{
  public:
    typedef xtl::com_ptr<IEngineSubsystem>  SubsystemPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Engine  (const char* configuration_branch_name, size_t start_level = StartupGroup_LevelMax, IEngineStartupParams* engine_startup_params = 0);  //включая start_level
    ~Engine ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Запуск систем
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   Start      (size_t start_level, IEngineStartupParams* engine_startup_params = 0); //включая start_level
    size_t StartLevel () const; //текущий уровень запуска

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка точек привязки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (const EngineAttachments&);
    void Detach ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ConfigurationBranch () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
//    void LoadResource (const char* resource_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение тракейбла
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::trackable& GetTrackable () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор подсистем
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t            SubsystemsCount () const;
    IEngineSubsystem& Subsystem       (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление подсистем
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddSubsystem    (const SubsystemPointer subsystem);
    void RemoveSubsystem (const SubsystemPointer subsystem);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработка событий ввода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ProcessInputEvent (const char* attachment_name, const char* event) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа со слушателями событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (IEngineEventListener* listener);
    void Detach (IEngineEventListener* listener);

  private:
    Engine (const Engine&);
    Engine& operator = (const Engine&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

xtl::trackable& get_trackable (const Engine& engine);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер запуска
///////////////////////////////////////////////////////////////////////////////////////////////////
class StartupManager
{
  public:
    typedef xtl::function<void (common::VarRegistry&, IEngineStartupParams*, Engine&)> StartupHandler;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление обработчиков
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterStartupHandler       (const char* node_name, const StartupHandler& startup_handler, size_t order = 1); //чем ниже order, тем раньше запускается
    static void UnregisterStartupHandler     (const char* node_name);
    static void UnregisterAllStartupHandlers ();
};

}

#endif
