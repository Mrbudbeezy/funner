#ifndef CLIENT_ENGINE_ATTACHMENTS_HEADER
#define CLIENT_ENGINE_ATTACHMENTS_HEADER

#include <stl/auto_ptr.h>

#include <sg/listener.h>

#include <render/screen.h>

namespace client
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель событий движка
///////////////////////////////////////////////////////////////////////////////////////////////////
class IEngineEventListener
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///События установки/удаления экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnSetScreen    (const char* attachment_name, render::Screen* screen) {}
    virtual void OnRemoveScreen (const char* attachment_name) {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///События установки/удаления слушателя
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnSetListener    (const char* attachment_name, scene_graph::Listener* listener) {}
    virtual void OnRemoveListener (const char* attachment_name) {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Событие удаления клиента
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnDestroy () {}

  protected:
    virtual ~IEngineEventListener () {} 
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Точки привязки движка
///////////////////////////////////////////////////////////////////////////////////////////////////
class EngineAttachments
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    EngineAttachments  ();
    EngineAttachments  (const EngineAttachments&);
    ~EngineAttachments ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    EngineAttachments& operator = (const EngineAttachments&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с экранами
///////////////////////////////////////////////////////////////////////////////////////////////////
    void            SetScreen        (const char* attachment_name, render::Screen* screen);
    void            RemoveScreen     (const char* attachment_name);
    void            RemoveAllScreens ();
    render::Screen* FindScreen       (const char* attachment_name) const;

    size_t          ScreensCount () const;
    render::Screen* Screen       (size_t index) const;
    const char*     ScreenName   (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа со слушателями
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                   SetListener        (const char* attachment_name, scene_graph::Listener* listener);
    void                   RemoveListener     (const char* attachment_name);
    void                   RemoveAllListeners ();
    scene_graph::Listener* FindListener       (const char* attachment_name) const;

    size_t                 ListenersCount () const;
    scene_graph::Listener* Listener       (size_t index) const;
    const char*            ListenerName   (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с устройствами ввода
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* attachment_name, const char* command)> InputEventHandler;

    xtl::connection RegisterInputHandler (const InputEventHandler& input_handler);

    void SetInputTranslator        (const char* attachment_name, const char* translation_table);
    void RemoveInputTranslator     (const char* attachment_name);
    void RemoveAllInputTranslators ();

    void ProcessInputEvent (const char* attachment_name, const char* event) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа со слушателями событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (IEngineEventListener* listener);
    void Detach (IEngineEventListener* listener);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (EngineAttachments&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (EngineAttachments&, EngineAttachments&);

}

#endif
