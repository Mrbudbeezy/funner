#ifndef CLIENT_ENGINE_ATTACHMENTS_HEADER
#define CLIENT_ENGINE_ATTACHMENTS_HEADER

#include <sg/listener.h>

#include <render/screen.h>

namespace xtl
{

//forward declarations
template <class T> class iterator;

}

namespace client
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель событий движка
///////////////////////////////////////////////////////////////////////////////////////////////////
class IEngineEventListener
{
  public:
    typedef xtl::function<void (const char* command)> InputHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///События установки / удаления экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnSetScreen    (const char* attachment_name, render::Screen& screen) {}
    virtual void OnRemoveScreen (const char* attachment_name) {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///События установки / удаления слушателя
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnSetListener    (const char* attachment_name, scene_graph::Listener& listener) {}
    virtual void OnRemoveListener (const char* attachment_name) {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///События добавления / удаления точек привязки событий ввода
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnSetInputHandler    (const char* attachment_name, const InputHandler& handler) {}
    virtual void OnRemoveInputHandler (const char* attachment_name) {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Событие удаления клиента
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnDestroy () {}

  protected:
    virtual ~IEngineEventListener () {} 
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Точки привязки движка
///////////////////////////////////////////////////////////////////////////////////////////////////
class EngineAttachments
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    EngineAttachments  ();
    EngineAttachments  (const EngineAttachments&);
    ~EngineAttachments ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    EngineAttachments& operator = (const EngineAttachments&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с экранами
///////////////////////////////////////////////////////////////////////////////////////////////////
    void            SetScreen        (const char* attachment_name, render::Screen& screen);
    void            RemoveScreen     (const char* attachment_name);
    void            RemoveAllScreens ();
    render::Screen* FindScreen       (const char* attachment_name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа со слушателями
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                   SetListener        (const char* attachment_name, scene_graph::Listener& listener);
    void                   RemoveListener     (const char* attachment_name);
    void                   RemoveAllListeners ();
    scene_graph::Listener* FindListener       (const char* attachment_name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с устройствами ввода
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef IEngineEventListener::InputHandler InputHandler;

    void                SetInputHandler        (const char* attachment_name, const InputHandler& input_handler);
    void                RemoveInputHandler     (const char* attachment_name);
    void                RemoveAllInputHandlers ();
    const InputHandler* FindInputHandler       (const char* attachment_name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор объектов
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class T> struct IAttachment
    {
      virtual T&          Value () = 0;
      virtual const char* Name  () = 0;
    };

    typedef xtl::iterator<IAttachment<render::Screen> >        ScreenIterator;
    typedef xtl::iterator<IAttachment<scene_graph::Listener> > ListenerIterator;
    typedef xtl::iterator<IAttachment<const InputHandler> >    InputHandlerIterator;

    ScreenIterator       CreateScreenIterator       () const;
    ListenerIterator     CreateListenerIterator     () const;
    InputHandlerIterator CreateInputHandlerIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа со слушателями событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (IEngineEventListener* listener);
    void Detach (IEngineEventListener* listener);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (EngineAttachments&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (EngineAttachments&, EngineAttachments&);

}

#endif
