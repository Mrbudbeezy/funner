#ifndef INPUT_LOW_LEVEL_WINDOW_DRIVER_HEADER
#define INPUT_LOW_LEVEL_WINDOW_DRIVER_HEADER

namespace syslib
{

//forward declaration
class Window;

}

namespace input
{

namespace low_level
{

//forward declaration
class IDriver;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Window-драйвер ввода
///////////////////////////////////////////////////////////////////////////////////////////////////
class WindowDriver
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const char* Name ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
    static IDriver* Driver ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация окна как устройства ввода - драйвер регистрируется в DriverManager при первой
///регестрации устройстве и деригистрируется при деригистрации последнего
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterDevice       (const char* device_name, syslib::Window& window);
    static void RegisterDevice       (syslib::Window& window);  //регистрация устройства с именем заголовка окна
    static void UnregisterDevice     (const char* device_name);
    static void UnregisterAllDevices (syslib::Window& window);
    static void UnregisterAllDevices ();
};

}

}

#endif
