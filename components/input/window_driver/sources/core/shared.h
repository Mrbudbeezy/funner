#ifndef INPUT_LOW_LEVEL_WINDOW_DRIVER_SHARED_HEADER
#define INPUT_LOW_LEVEL_WINDOW_DRIVER_SHARED_HEADER

#include <cstdio>

#include <stl/algorithm>
#include <stl/vector>
#include <stl/string>
#include <stl/bitset>

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/connection.h>
#include <xtl/function.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>
#include <xtl/signal.h>
#include <xtl/string.h>
#include <xtl/trackable.h>

#include <common/singleton.h>
#include <common/utf_converter.h>

#include <syslib/window.h>
#include <syslib/keydefs.h>

#include <input/low_level/driver.h>
#include <input/low_level/device.h>
#include <input/low_level/window_driver.h>

namespace input
{

namespace low_level
{

namespace window
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Устройство обрабатывающее базовые события окна
///////////////////////////////////////////////////////////////////////////////////////////////////
class DefaultDevice : virtual public input::low_level::IDevice, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    DefaultDevice (syslib::Window* window, const char* name, const char* full_name);
    ~DefaultDevice ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Полное имя устройства (тип.имя.идентификатор)
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetFullName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени контрола
///////////////////////////////////////////////////////////////////////////////////////////////////
    const wchar_t* GetControlName (const char* control_id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::connection RegisterEventHandler (const input::low_level::IDevice::EventHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройки устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetProperties ();
    void        SetProperty   (const char* name, float value);
    float       GetProperty   (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef () { addref (this); }
    void Release () { release (this); }

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещение о событии
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Notify (const char* message);

  private:
    DefaultDevice (const DefaultDevice& source);             //no impl
    DefaultDevice& operator = (const DefaultDevice& source); //no impl

  private:
    struct Impl;
    Impl *impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Устройство обрабатывающее события iPhone окна
///////////////////////////////////////////////////////////////////////////////////////////////////
class IPhoneDevice : public DefaultDevice
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPhoneDevice (syslib::Window* window, const char* name, const char* full_name);
    ~IPhoneDevice ();

  private:
    struct Impl;
    Impl *impl;
};

#ifdef IPHONE
  typedef IPhoneDevice Device;
#else
  typedef DefaultDevice Device;
#endif

}

}

}

#endif
