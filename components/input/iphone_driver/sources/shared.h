#ifndef INPUT_LOW_LEVEL_IPHONE_DRIVER_SHARED_HEADER
#define INPUT_LOW_LEVEL_IPHONE_DRIVER_SHARED_HEADER

#include <stl/string>

#include <xtl/common_exceptions.h>
#include <xtl/function.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>
#include <xtl/signal.h>
#include <xtl/string.h>

#include <common/component.h>
#include <common/utf_converter.h>

#include <syslib/platform/iphone.h>

#include <input/low_level/device.h>
#include <input/low_level/driver.h>

namespace input
{

namespace low_level
{

namespace iphone_driver
{

enum KeyboardType
{
  KeyboardType_ASCII,
  KeyboardType_NumberPad,
  KeyboardType_NumbersAndPunctuation
};

enum AutocapitalizationType
{
  AutocapitalizationType_None,
  AutocapitalizationType_Sentences
};

class IPhoneKeyboard: virtual public input::low_level::IDevice, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPhoneKeyboard  (const char* name, const char* full_name, KeyboardType keyboard_type, AutocapitalizationType autocapitalization_type);
    ~IPhoneKeyboard ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Полное имя устройства (тип.имя.идентификатор)
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetFullName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени контрола
///////////////////////////////////////////////////////////////////////////////////////////////////
    const wchar_t* GetControlName (const char* control_id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::connection RegisterEventHandler (const input::low_level::IDevice::EventHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройки устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetProperties ();
    void        SetProperty   (const char* name, float value);
    float       GetProperty   (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef () { addref (this); }
    void Release () { release (this); }

  private:
    IPhoneKeyboard (const IPhoneKeyboard& source);             //no impl
    IPhoneKeyboard& operator = (const IPhoneKeyboard& source); //no impl

  private:
    struct Impl;
    Impl* impl;
};

class IPhoneAccelerometer: virtual public input::low_level::IDevice, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPhoneAccelerometer  (const char* name, const char* full_name);
    ~IPhoneAccelerometer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Полное имя устройства (тип.имя.идентификатор)
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetFullName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени контрола
///////////////////////////////////////////////////////////////////////////////////////////////////
    const wchar_t* GetControlName (const char* control_id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::connection RegisterEventHandler (const input::low_level::IDevice::EventHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройки устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetProperties ();
    void        SetProperty   (const char* name, float value);
    float       GetProperty   (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef () { addref (this); }
    void Release () { release (this); }

  private:
    IPhoneAccelerometer (const IPhoneAccelerometer& source);             //no impl
    IPhoneAccelerometer& operator = (const IPhoneAccelerometer& source); //no impl

  private:
    struct Impl;
    Impl* impl;
};

class IPhoneApplication: virtual public input::low_level::IDevice, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPhoneApplication  (const char* name, const char* full_name);
    ~IPhoneApplication ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Полное имя устройства (тип.имя.идентификатор)
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetFullName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени контрола
///////////////////////////////////////////////////////////////////////////////////////////////////
    const wchar_t* GetControlName (const char* control_id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::connection RegisterEventHandler (const input::low_level::IDevice::EventHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройки устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetProperties ();
    void        SetProperty   (const char* name, float value);
    float       GetProperty   (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef () { addref (this); }
    void Release () { release (this); }

  private:
    IPhoneApplication (const IPhoneApplication& source);             //no impl
    IPhoneApplication& operator = (const IPhoneApplication& source); //no impl

  private:
    struct Impl;
    Impl* impl;
};

}

}

}

#endif
