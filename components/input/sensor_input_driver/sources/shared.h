#ifndef INPUT_LOW_LEVEL_SENSOR_INPUT_DRIVER_SHARED_HEADER
#define INPUT_LOW_LEVEL_SENSOR_INPUT_DRIVER_SHARED_HEADER

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/connection.h>
#include <xtl/function.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>
#include <xtl/signal.h>
#include <xtl/trackable.h>

#include <common/component.h>
#include <common/strlib.h>
#include <common/utf_converter.h>

#include <syslib/sensor.h>

#include <input/low_level/device.h>
#include <input/low_level/driver.h>

namespace input
{

namespace low_level
{

namespace sensor_input_driver
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Драйвер устройств ввода сенсоров
///////////////////////////////////////////////////////////////////////////////////////////////////
class Driver: public IDriver, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Driver  ();
    ~Driver ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetDescription ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных устройств ввода
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      GetDevicesCount   ();
    const char* GetDeviceName     (size_t index);
    const char* GetDeviceFullName (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создаение устройства ввода
///////////////////////////////////////////////////////////////////////////////////////////////////
    IDevice* CreateDevice (const char* full_name, const char* init_string);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отладочное протоколирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    void              SetDebugLog (const LogHandler&);
    const LogHandler& GetDebugLog ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  ();
    void Release ();    
    
  private:
    LogHandler          debug_log;          //поток отладочного протоколирования
    common::StringArray devices_full_names; //полные имена устройств
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Устройство ввода
///////////////////////////////////////////////////////////////////////////////////////////////////
class Device: public IDevice, public xtl::reference_counter, public xtl::trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Device  (size_t sensor_index, const char* full_name);
    ~Device ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Полное имя устройства (тип.имя.идентификатор)
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetFullName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени контрола
///////////////////////////////////////////////////////////////////////////////////////////////////
    const wchar_t* GetControlName (const char* control_id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::connection RegisterEventHandler (const EventHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройки устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetProperties (); //список имён всех допустимых свойств
    void        SetProperty   (const char* name, float value);
    float       GetProperty   (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  ();
    void Release ();    
    
  private:
    void Notify (const syslib::SensorEvent&);
    
  private:
    typedef xtl::signal<EventHandler::signature_type> Signal;
    
  private:
    syslib::Sensor sensor;       //контролируемый сенсор
    Signal         signal;       //сигнал оповещения и наступлении события ввода
    stl::string    full_name;    //полное имя устройства
    stl::wstring   control_name; //имя контрола для временного хранения    
    stl::string    event_buffer; //буфер для строки события
    size_t         type_offset;  //смещение названия типа в буфере события
    stl::string    properties;   //свойств устройства
};

}

}

}

#endif
