#ifndef INPUT_LOW_LEVEL_SENSOR_INPUT_DRIVER_SHARED_HEADER
#define INPUT_LOW_LEVEL_SENSOR_INPUT_DRIVER_SHARED_HEADER

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/connection.h>
#include <xtl/function.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>
#include <xtl/signal.h>

#include <common/component.h>
#include <common/strlib.h>

#include <syslib/sensor.h>

#include <input/low_level/device.h>
#include <input/low_level/driver.h>

namespace input
{

namespace low_level
{

namespace sensor_input_driver
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Драйвер устройств ввода сенсоров
///////////////////////////////////////////////////////////////////////////////////////////////////
class Driver: public IDriver, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Driver  ();
    ~Driver ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetDescription ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных устройств ввода
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      GetDevicesCount   ();
    const char* GetDeviceName     (size_t index);
    const char* GetDeviceFullName (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создаение устройства ввода
///////////////////////////////////////////////////////////////////////////////////////////////////
    IDevice* CreateDevice (const char* full_name, const char* init_string);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отладочное протоколирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    void              SetDebugLog (const LogHandler&);
    const LogHandler& GetDebugLog ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  ();
    void Release ();
    
  private:
    LogHandler debug_log; //поток отладочного протоколирования
};

}

}

}

#endif
