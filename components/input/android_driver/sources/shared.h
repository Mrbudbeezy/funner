#ifndef INPUT_LOW_LEVEL_ANDROID_DRIVER_SHARED_HEADER
#define INPUT_LOW_LEVEL_ANDROID_DRIVER_SHARED_HEADER

#include <android/sensor.h>

#include <stl/string>
#include <stl/vector>

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/function.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>
#include <xtl/signal.h>
#include <xtl/string.h>

#include <common/component.h>
#include <common/log.h>
#include <common/singleton.h>
#include <common/utf_converter.h>

#include <syslib/platform/iphone.h>

#include <input/low_level/device.h>
#include <input/low_level/driver.h>

namespace input
{

namespace low_level
{

namespace android_driver
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сенсор
///////////////////////////////////////////////////////////////////////////////////////////////////
class Sensor: virtual public input::low_level::IDevice, public xtl::reference_counter, public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Sensor  (ASensorRef handle, const char* name);
    ~Sensor ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Полное имя устройства (тип.имя.идентификатор)
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetFullName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени контрола
///////////////////////////////////////////////////////////////////////////////////////////////////
    const wchar_t* GetControlName (const char* control_id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::connection RegisterEventHandler (const input::low_level::IDevice::EventHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройки устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetProperties ();
    void        SetProperty   (const char* name, float value);
    float       GetProperty   (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef () { addref (this); }
    void Release () { release (this); }

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менджер сенсоров
///////////////////////////////////////////////////////////////////////////////////////////////////
class SensorManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SensorManager  ();
    ~SensorManager ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество сенсоров
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t SensorsCount ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание сенсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    Sensor* CreateSensor (size_t index);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя сенсора
///////////////////////////////////////////////////////////////////////////////////////////////////    
    const char* SensorName     (size_t index);
    const char* SensorFullName (size_t index);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

typedef common::Singleton<SensorManager> SensorManagerSingleton;

}

}

}

#endif
