#ifndef INPUT_SYSTEM_CURSOR_HEADER
#define INPUT_SYSTEM_CURSOR_HEADER

#include <math/vector.h>

namespace input
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель событий курсора
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICursorListener
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещения
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnChangePosition (const math::vec2f& position) {}
    virtual void OnChangeVisible  (bool state) {}
    virtual void OnChangeImage    (const char* image_name) {}
    virtual void OnDestroy        () {}

  protected:
    virtual ~ICursorListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контрол, управляющий курсором
///////////////////////////////////////////////////////////////////////////////////////////////////
class Cursor
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Cursor  ();
    Cursor  (const Cursor&);
    ~Cursor ();
    
    Cursor& operator = (const Cursor&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка положения курсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void         SetPosition (float x, float y);
    void         SetPosition (const math::vec2f&);
    math::vec2f& Position    () const;
    float        GetX        () const;
    float        GetY        () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление видимостью курсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsVisible  () const;
    void SetVisible (bool state);
    void Show       () { SetVisible (true); }
    void Hide       () { SetVisible (false); }
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка изображения курсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetImage (const char* image_name);
    const char* Image    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление слушателей событий курсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (ICursorListener*);
    void Detach (ICursorListener*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Cursor&);
    
  private:
    struct Impl;
    Impl* impl;  
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Cursor&, Cursor&);

}

#endif

