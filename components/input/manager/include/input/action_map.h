#ifndef INPUT_SYSTEM_ACTION_MAP_HEADER
#define INPUT_SYSTEM_ACTION_MAP_HEADER

#include <xtl/functional_fwd>

namespace input
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Таблица обработчиков клиентских событий
///////////////////////////////////////////////////////////////////////////////////////////////////
class ActionMap
{
  public:
    typedef xtl::function<void (const char* event_id, size_t arguments_count, const char* arguments [])> EventHandler;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    ActionMap  ();
    ActionMap  (const ActionMap&);
    ~ActionMap ();

    ActionMap& operator = (const ActionMap&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление обработчиков клиентских событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Add    (const char* event_id, const EventHandler& handler);
    void Remove (const char* event_id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка таблицы
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработка события
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ProcessEvent (const char* event) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (ActionMap&);    

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (ActionMap&, ActionMap&);

}

#endif
