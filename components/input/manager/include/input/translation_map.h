#ifndef INPUT_SYSTEM_TRANSLATION_MAP_HEADER
#define INPUT_SYSTEM_TRANSLATION_MAP_HEADER

#include <xtl/functional_fwd>

#include <common/serializer_manager.h>

namespace xtl
{

//forward declarations
template <class T> class iterator;

}

namespace input
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Таблица трансляции команд низкоуровневых устройств ввода в клиентские события
///////////////////////////////////////////////////////////////////////////////////////////////////
class TranslationMap
{
  public:
    class ITranslator
    {
      public:
        virtual const char* InputEvent  () = 0;
        virtual const char* Replacement () = 0;
        virtual const char* Tag         () = 0;
        
      protected:
        virtual ~ITranslator () {}
    };

    typedef xtl::function<void (const char* event)> EventHandler;
    typedef xtl::iterator<ITranslator> Iterator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    TranslationMap  ();
    TranslationMap  (const char* file_name);
    TranslationMap  (const TranslationMap&);
    ~TranslationMap ();
    
    TranslationMap& operator = (const TranslationMap&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация трансляторов
///  (замены аргументов в клиентской подстановке через {1}, {2}, ...) 
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Add    (const char* input_event, const char* client_event_replacement, const char* tag="");
    void Remove (const char* tag);
    void Remove (const Iterator&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск транслятора по тэгу
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator Find (const char* tag) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор таблицы
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator CreateIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработка события
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ProcessEvent (const char* event, const EventHandler& handler) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / сохранение таблицы
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);
    void Save (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (TranslationMap&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (TranslationMap&, TranslationMap&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер таблиц трансляции
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef common::ResourceSerializerManager<void (const char* file_name, TranslationMap& map), 
                                          void (const char* file_name, const TranslationMap& map)> TranslationMapManager;

}

#endif
