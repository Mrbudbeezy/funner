#ifndef MATH_CURVES_BASIC_SPLINE_HEADER
#define MATH_CURVES_BASIC_SPLINE_HEADER

#include <cstddef>

namespace math
{

//forward declarations
template <class T, unsigned int Size> class vector;
template <class T>                    class quat;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Определение типа скаляров сплайнов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>                    struct spline_scalar_type                   { typedef T type; };
template <class T, unsigned int Size> struct spline_scalar_type<vector<T, Size> > { typedef T type; };
template <class T>                    struct spline_scalar_type<quat<T> >         { typedef T type; };

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый ключ сплайна
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> struct spline_key
{
  typedef T                                  value_type;
  typedef spline_scalar_type<T>::scalar_type scalar_type;
  typedef scalar_type                        time_type;

  time_type  time;      //время актуализации значения
  value_type value;     //значение

  spline_key ();
  spline_key (const time_type& time, const value_type& value);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ключ TCB сплайна
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> struct spline_tcb_key: public spline_key<T>
{
  typedef typename spline_key<T>::scalar_type scalar_type;

  scalar_type tension;    //напряженность кривой
  scalar_type bias;       //ассимметричность кривой
  scalar_type continuity; //пологость кривойывафыва

  spline_tcb_key ();
  spline_tcb_key (const time_type& time, const value_type& value);
  spline_tcb_key (const time_type& time, const value_type& value, const scalar_type& tension, const scalar_type& bias, const scalar_type& continuity);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ключ Безье сплайна
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> struct spline_bezier_key: public spline_key<T>
{
  typedef typename spline_key<T>::value_type value_type;

  value_type inner_value; //входящее значение
  value_type outer_value; //исходящее значение
  
  spline_bezier_key ();
  spline_bezier_key (const time_type& time, const value_type& value);
  spline_bezier_key (const time_type& time, const value_type& value, const value_type& inner_value, const value_type& outer_value);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поведение на границе сплайна
///////////////////////////////////////////////////////////////////////////////////////////////////
enum spline_wrap
{
  spline_wrap_clamp,  //обрезание
  spline_wrap_repeat, //повторение
  spline_wrap_mirror, //повторение с чередующимся отражением

  spline_wrap_default = spline_wrap_clamp
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс для сплайна
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Key>
class basic_spline
{
  public:
    typedef Key                            key_type;
    typedef typename key_type::value_type  value_type;    
    typedef typename key_type::scalar_type scalar_type;
    typedef typename key_type::time_type   time_type;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    basic_spline  ();
    basic_spline  (const basic_spline&);
    ~basic_spline ();

    basic_spline& operator = (const basic_spline&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    basic_spline clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поведение на границе
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        wrap       (spline_wrap begin_wrap, spline_wrap end_wrap);
    spline_wrap begin_wrap () const;
    spline_wrap end_wrap   () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество ключей / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t keys_count () const;
    bool   empty      () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование ключей
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   reserve  (size_t keys_count);
    size_t capacity () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение / обновление ключа
///////////////////////////////////////////////////////////////////////////////////////////////////
    const key_type& get_key (size_t index) const;
    void            set_key (size_t index, const key_type& key);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление ключа
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t add_keys (size_t keys_count, const key_type* keys);
    size_t add_key  (const key_type& key);
    size_t add_key  (const time_type& time, const value_type& value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление ключей
///////////////////////////////////////////////////////////////////////////////////////////////////
    void remove_key (size_t key_index);
    void clear      ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сортировка ключей для ускорения поиска
///////////////////////////////////////////////////////////////////////////////////////////////////
    void sort ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Расчёт значения в промежуточной точке
///////////////////////////////////////////////////////////////////////////////////////////////////
    void       eval (const time_type& time, value_type& out_value) const;
    value_type eval (const time_type& time) const;

    value_type operator () (const time_type& time) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void swap (basic_spline&);
    
  private:
    basic_spline (implementation*);

  private:
    struct implementation;
    implementation* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Key>
void swap (basic_spline<Key>&, basic_spline<Key>&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Переопределения типов
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef spline<float>             splinef;
typedef spline<vector<float, 2> > spline2f;
typedef spline<vector<float, 3> > spline3f;
typedef spline<vector<float, 4> > spline4f;
typedef spline<quat<float> >      rotation_splinef;

#ifndef MATH_CURVES_SPLINE_NO_DETAILS
  #include <stl/algorithm>
  #include <stl/vector>
  #include <xtl/common_exceptions.h>
  #include <xtl/reference_counter.h>
  
  #include <math/detail/basic_spline.inl>
#endif

}

#endif
