#ifndef MEDIALIB_SOUND_DECLARATION_HEADER
#define MEDIALIB_SOUND_DECLARATION_HEADER

#include <xtl/functional_fwd>
#include <xtl/intrusive_ptr.h>
#include <stl/auto_ptr.h>
#include <media/clone.h>

namespace xtl
{

//forward declaration
template <class T> class iterator;

}

namespace media
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры источника звука
///////////////////////////////////////////////////////////////////////////////////////////////////
enum SoundParam
{
  SoundParam_Gain,               //усиление
  SoundParam_MinimumGain,        //минимальное усиление
  SoundParam_MaximumGain,        //максимальное усиление
  SoundParam_InnerAngle,         //угол внутреннего конуса слышимости (угол "незатухаемости")
  SoundParam_OuterAngle,         //угол внешнего конуса слышимости (угол "тишины")
  SoundParam_OuterGain,          //усиление за пределами внешнего конуса
  SoundParam_ReferenceDistance,  //расстояние, до которого громкость равна gain
  SoundParam_MaximumDistance,    //максимальное расстояние, дальше которого громкость не уменьшается
  SoundParam_CullDistance,       //расстояние отсечения
  
  SoundParam_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объявление источника звука
///////////////////////////////////////////////////////////////////////////////////////////////////
class SoundDeclaration
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SoundDeclaration  ();
    SoundDeclaration  (const SoundDeclaration&, CloneMode = CloneMode_Instance);
    ~SoundDeclaration ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    SoundDeclaration& operator = (const SoundDeclaration&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetType (const char* type);
    const char* Type    () const;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Цикличность воспроизведения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetLooping (bool looping);
    bool Looping    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество сэмплов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t SamplesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение сэмпла
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Sample (size_t sample_index) const;    
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление сэмплов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddSample        (const char* sample_name);
    void   RemoveSample     (size_t sample_index);
    void   RemoveAllSamples ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetParam (SoundParam param, float value);
    float Param    (SoundParam param) const;
     
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (SoundDeclaration&);

  private:
    struct Impl;
    xtl::intrusive_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (SoundDeclaration&, SoundDeclaration&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека звуков
///////////////////////////////////////////////////////////////////////////////////////////////////
class SoundDeclarationLibrary
{
  public:
    typedef xtl::iterator<SoundDeclaration>       Iterator;
    typedef xtl::iterator<const SoundDeclaration> ConstIterator;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SoundDeclarationLibrary  ();
    SoundDeclarationLibrary  (const char* file_name);
    SoundDeclarationLibrary  (const SoundDeclarationLibrary&);
    ~SoundDeclarationLibrary ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    SoundDeclarationLibrary& operator = (const SoundDeclarationLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество источников в библиотеке / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size    () const;
    bool   IsEmpty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск
///////////////////////////////////////////////////////////////////////////////////////////////////
          SoundDeclaration* Find (const char* name);
    const SoundDeclaration* Find (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      CreateIterator ();
    ConstIterator CreateIterator () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя декларации по итератору
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ItemId (const Iterator&);
    const char* ItemId (const ConstIterator&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach    (const char* name, SoundDeclaration& decl, CloneMode mode = CloneMode_Instance);
    void Detach    (const char* name); //no throw
    void DetachAll ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / сохранение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);
    void Save (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (SoundDeclarationLibrary&);
  
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (SoundDeclarationLibrary&, SoundDeclarationLibrary&);

//////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер библиотек объявлений звуков
//////////////////////////////////////////////////////////////////////////////////////////////////
class SoundDeclarationLibraryManager
{
  public:
    typedef xtl::function<void (const char*,       SoundDeclarationLibrary&)> LoadHandler;
    typedef xtl::function<void (const char*, const SoundDeclarationLibrary&)> SaveHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с пользовательскими функциями загрузки и сохранения
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterLoader   (const char* extension, const LoadHandler& loader);
    static void RegisterSaver    (const char* extension, const SaveHandler& saver);
    static void UnregisterLoader (const char* extension);
    static void UnregisterSaver  (const char* extension);
    static void UnregisterAll    ();
};

}

#endif
