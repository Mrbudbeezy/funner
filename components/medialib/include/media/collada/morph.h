#ifndef MEDIALIB_COLLADA_MORPH_HEADER
#define MEDIALIB_COLLADA_MORPH_HEADER

#include <media/clone.h>
#include <media/collada/collection.h>
#include <xtl/intrusive_ptr.h>

namespace media
{

namespace collada
{

//forward declarations
class Morph;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод морфинга
///////////////////////////////////////////////////////////////////////////////////////////////////
enum MorphMethod
{
  MorphMethod_Normalized, //(Target1, Target2, ...)*(w1, w2, ...) = (1-w1-w2-...)*BaseMesh + w1*Target1 + w2*Target2 + ...
  MorphMethod_Relative    //(Target1, Target2, ...) + (w1, w2, ...) = BaseMesh + w1*Target1 + w2*Target2 + ...
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цель морфинга
///////////////////////////////////////////////////////////////////////////////////////////////////
class MorphTarget
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    MorphTarget  ();
    MorphTarget  (const MorphTarget&, media::CloneMode mode = media::CloneMode_Instance);
    ~MorphTarget ();
    
    MorphTarget& operator = (const MorphTarget&);
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Меш
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Mesh    () const;
    void        SetMesh (const char* mesh);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вес
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetWeight (float weight);
    float Weight    () const;

  private:
    struct Impl;
    xtl::intrusive_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Морфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class Morph
{
  public:
    typedef ICollection<MorphTarget> TargetList;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Morph  ();
    Morph  (const Morph&, media::CloneMode mode = media::CloneMode_Instance);
    ~Morph ();

    Morph& operator = (const Morph&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор морфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Id    () const;
    void        SetId (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод морфинга
///////////////////////////////////////////////////////////////////////////////////////////////////
    MorphMethod Method    () const;
    void        SetMethod (MorphMethod);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый меш
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* BaseMesh    () const;
    void        SetBaseMesh (const char* mesh);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список целей морфинга
///////////////////////////////////////////////////////////////////////////////////////////////////
          TargetList& Targets ();
    const TargetList& Targets () const;

  private:
    struct Impl;
    xtl::intrusive_ptr<Impl> impl;
};

}

}

#endif
