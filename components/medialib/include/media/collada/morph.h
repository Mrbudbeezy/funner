#ifndef MEDIALIB_COLLADA_MORPH_HEADER
#define MEDIALIB_COLLADA_MORPH_HEADER

#include <media/collada/geometry.h>
#include <math/mathlib.h>

namespace medialib
{

namespace collada
{

//forward declarations
class Morph;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Специализация библиотеки для создания морферов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <> class ILibrary<Morph>: public IItemLibrary<Morph>
{
  public:
    virtual Morph& Create (Mesh& base_mesh, const char* id = 0) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод морфинга
///////////////////////////////////////////////////////////////////////////////////////////////////
enum MorphMethod
{
  MorphMethod_Normalized, //(Target1, Target2, ...)*(w1, w2, ...) = (1-w1-w2-...)*BaseMesh + w1*Target1 + w2*Target2 + ...
  MorphMethod_Relative    //(Target1, Target2, ...) + (w1, w2, ...) = BaseMesh + w1*Target1 + w2*Target2 + ...
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цель морфинга
///////////////////////////////////////////////////////////////////////////////////////////////////
class MorphTarget
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Меш
///////////////////////////////////////////////////////////////////////////////////////////////////
          collada::Mesh& Mesh ();
    const collada::Mesh& Mesh () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вес
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetWeight (float weight);
    float Weight    () const;

  protected:
    MorphTarget  (collada::Mesh&);
    ~MorphTarget ();

  private:
    MorphTarget (const MorphTarget&); //no impl
    MorphTarget& operator = (const MorphTarget&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Коллекция целей морфинга
///////////////////////////////////////////////////////////////////////////////////////////////////
template <> class ICollection<MorphTarget>: public IItemCollection<MorphTarget>
{
  public:
    virtual MorphTarget& Create (Mesh& mesh) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Морфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class Morph: public Entity
{
  public:
    typedef ICollection<MorphTarget> TargetList;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод морфинга
///////////////////////////////////////////////////////////////////////////////////////////////////
    MorphMethod Method    () const;
    void        SetMethod (MorphMethod);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый меш
///////////////////////////////////////////////////////////////////////////////////////////////////
          Mesh& BaseMesh ();
    const Mesh& BaseMesh () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список целей морфинга
///////////////////////////////////////////////////////////////////////////////////////////////////
          TargetList& Targets ();
    const TargetList& Targets () const;

  protected:
    Morph  (Mesh& base_mesh, ModelImpl*, const char* id);
    ~Morph ();

  private:
    struct Impl;
    Impl* impl;
};

}

}

#endif
