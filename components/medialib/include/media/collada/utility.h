#ifndef MEDIALIB_COLLADA_UTILITY_HEADER
#define MEDIALIB_COLLADA_UTILITY_HEADER

#include <stddef.h>
#include <xtl/functional_fwd>
#include <common/exception.h>

namespace media
{

namespace collada
{

//forward declarations
struct ModelImpl;
class  Material;
class  Effect;
class  Entity;
class  IBasicCollection;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Исключение, генерируемое при несовместимости элементов
///////////////////////////////////////////////////////////////////////////////////////////////////
struct IncompatibleExceptionTag;

typedef common::DerivedException<common::ArgumentException, IncompatibleExceptionTag> IncompatibleException;

void raise_incompatible (const char* source, Entity&, Entity&);
void raise_incompatible (const char* source, Entity&, IBasicCollection&);
void raise_incompatible (const char* source, IBasicCollection&, Entity&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс контента коллады
///////////////////////////////////////////////////////////////////////////////////////////////////
class Entity
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Владелец
///////////////////////////////////////////////////////////////////////////////////////////////////  
    ModelImpl* Owner () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* EntityId () const;

  protected:
    Entity  (ModelImpl* owner, const char* id);
    ~Entity ();

  private:
    Entity (const Entity&); //no impl
    Entity& operator = (const Entity&); //no impl    

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс коллекции
///////////////////////////////////////////////////////////////////////////////////////////////////
class IBasicCollection
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Владелец
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ModelImpl* Owner () const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор коллекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* EntityId () const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество элементов / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Size    () const = 0;
    virtual bool   IsEmpty () const = 0;

  protected:
    virtual ~IBasicCollection () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Item> class IItemCollection: public IBasicCollection
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к элементу по индексу
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Item&       operator [] (size_t index) = 0;
    virtual const Item& operator [] (size_t index) const = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор элементов коллекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void ForEach (const xtl::function<void (Item&)>&) = 0;
    virtual void ForEach (const xtl::function<void (const Item&)>&) const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка коллекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Clear () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск элемента в коллекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual int Find (Item&) const = 0; //возвращает индекс элемента, либо -1 в случае неудачи

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление элементов из коллекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Remove (Item&) = 0;
    virtual void Remove (size_t index) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека с политикой хранения ссылок на объекты
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Item> class ICollection: public IItemCollection<Item>
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление элемента в коллекцию
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Insert (Item&) = 0; //возвращает индекс элемента в коллекции
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовая библиотека
///////////////////////////////////////////////////////////////////////////////////////////////////
class IBasicLibrary: public IBasicCollection
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс неиспользуемых элементов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Flush () = 0;
};

template <class Item> class IItemLibrary: public IBasicLibrary
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к элементу по имени (в случае отсутствия - исключение)
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Item&       operator [] (const char* id) = 0;
    virtual const Item& operator [] (const char* id) const = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск элемента по имени (в случае отсутствия возвращает 0)
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Item*       Find (const char* id) = 0;
    virtual const Item* Find (const char* id) const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор элементов библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void ForEach (const xtl::function<void (Item&)>&) = 0;
    virtual void ForEach (const xtl::function<void (const Item&)>&) const = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Item> class ILibrary: public IItemLibrary<Item>
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание элементов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Item& Create (const char* id = 0) = 0;
};

}

}

#endif
