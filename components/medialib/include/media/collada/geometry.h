#ifndef MEDIALIB_COLLADA_GEOMETRY_HEADER
#define MEDIALIB_COLLADA_GEOMETRY_HEADER

#include <media/collada/material.h>
#include <math/mathlib.h>

namespace medialib
{

namespace collada
{

//forward declarations
class Mesh;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека мешей
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef ILibrary<Mesh> MeshLibrary;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовые атрибуты вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Vertex
{
  math::vec3f coord;    //координаты вершины
  math::vec3f normal;   //нормаль в вершине
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Атрибуты текстурирования вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
struct TexVertex
{
  math::vec3f coord;    //текстурные координаты вершины
  math::vec3f tangent;  //касательная в texture space
  math::vec3f binormal; //бинормаль в texture space
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о соединениях действующих на вершину (используется совместно с Skin)
///////////////////////////////////////////////////////////////////////////////////////////////////
struct VertexInfluence
{
  size_t first_weight;  //индекс первого веса соединения действиющего на вершину
  size_t weights_count; //количество весов соединений действующих на вершину
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum PrimitiveType
{
  PrimitiveType_LineList,      //список отрезков
  PrimitiveType_LineStrip,     //цепочка отрезков
  PrimitiveType_TriangleList,  //список треугольников
  PrimitiveType_TriangleStrip, //цепочка треугольников
  PrimitiveType_TriangleFan    //вейер треугольников
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поверхность
///////////////////////////////////////////////////////////////////////////////////////////////////
class Surface
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Каналы данных поверхности
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class T> class IChannelList
    {
      public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество каналов
///////////////////////////////////////////////////////////////////////////////////////////////////      
        virtual size_t Size    () const = 0;
        virtual bool   IsEmpty () const = 0;
        
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание / удаление канала
///////////////////////////////////////////////////////////////////////////////////////////////////
        virtual size_t Create (const char* name) = 0;        
        virtual void   Remove (size_t channel) = 0;
        virtual void   Clear  () = 0;
        
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя канала
///////////////////////////////////////////////////////////////////////////////////////////////////
        virtual const char* Name (size_t channel) const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск канала по имени. Возвращает номер канала, или -1 в случае неудачи
///////////////////////////////////////////////////////////////////////////////////////////////////
        virtual int Find (const char* name) const = 0;
                
///////////////////////////////////////////////////////////////////////////////////////////////////
///Данные
///////////////////////////////////////////////////////////////////////////////////////////////////
        virtual       T* Data (size_t channel) = 0;
        virtual const T* Data (size_t channel) const = 0;

      protected:
        virtual ~IChannelList () {}
    };  
    
    typedef IChannelList<TexVertex>       TexVertexChannelList;
    typedef IChannelList<math::vec3f>     ColorChannelList;
    typedef IChannelList<VertexInfluence> InfluenceChannelList;   
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал поверхности
///////////////////////////////////////////////////////////////////////////////////////////////////
          collada::Material& Material ();
    const collada::Material& Material () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    collada::PrimitiveType PrimitiveType () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество вершин и индексов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t VerticesCount () const;
    size_t IndicesCount  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с вершинами
///////////////////////////////////////////////////////////////////////////////////////////////////
          Vertex* Vertices ();
    const Vertex* Vertices () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Индексы примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
          size_t* Indices ();
    const size_t* Indices () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с каналами вершинных цветов
///////////////////////////////////////////////////////////////////////////////////////////////////
          ColorChannelList& ColorChannels ();
    const ColorChannelList& ColorChannels () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с каналами текстурированных вершин
///////////////////////////////////////////////////////////////////////////////////////////////////
          TexVertexChannelList& TexVertexChannels ();
    const TexVertexChannelList& TexVertexChannels () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с каналами вершинных весов
///////////////////////////////////////////////////////////////////////////////////////////////////
          InfluenceChannelList& InfluenceChannels ();
    const InfluenceChannelList& InfluenceChannels () const;

  protected:
    Surface  (collada::Material& material, collada::PrimitiveType type, size_t verts_count, size_t indices_count);
    ~Surface ();

  private:
    Surface (const Surface&); //no impl
    Surface& operator = (const Surface&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Коллекция поверхностей
///////////////////////////////////////////////////////////////////////////////////////////////////
template <> class ICollection<Surface>: public IItemCollection<Surface>
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Surface& Create (Material& material, PrimitiveType type, size_t verts_count, size_t indices_count) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Меш
///////////////////////////////////////////////////////////////////////////////////////////////////
class Mesh: public Entity
{
  public:
    typedef ICollection<Surface> SurfaceList;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека
///////////////////////////////////////////////////////////////////////////////////////////////////
    MeshLibrary& Library () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с поверхностями
///////////////////////////////////////////////////////////////////////////////////////////////////
          SurfaceList& Surfaces ();
    const SurfaceList& Surfaces () const;

  protected:
    Mesh (MeshLibrary& library, const char* id);

  private:
    struct Impl;
    Impl* impl;
};

}

}

#endif
