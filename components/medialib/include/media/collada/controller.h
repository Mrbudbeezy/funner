#ifndef MEDIALIB_COLLADA_CONTROLLER_HEADER
#define MEDIALIB_COLLADA_CONTROLLER_HEADER

#include "base.h"
#include <math/mathlib.h>

namespace medialib
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип контроллера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ColladaControllerType
{
  COLLADA_CONTROLLER_SKIN,  //скин контроллер
  COLLADA_CONTROLLER_MORPH  //морф контроллер
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод морфинга
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ColladaMorphMethod
{
  COLLADA_MORPH_NORMALIZED, //(Target1, Target2, ...)*(w1, w2, ...) = (1-w1-w2-...)*BaseMesh + w1*Target1 + w2*Target2 + ...
  COLLADA_MORPH_RELATIVE    //(Target1, Target2, ...) + (w1, w2, ...) = BaseMesh + w1*Target1 + w2*Target2 + ...
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вес соединения
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ColladaJointWeight
{
  size_t joint;  //номер соединения
  float  weight; //вес соединения
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о соединениях действующих на вершину
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ColladaVertexInfluence
{
  size_t first_weight;  //индекс первого веса соединения действиющего на вершину
  size_t weights_count; //количество весов соединений действующих на вершину
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Скин
///////////////////////////////////////////////////////////////////////////////////////////////////
class ColladaSkin: public ColladaEntity
{
  friend class ColladaWrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый меш
///////////////////////////////////////////////////////////////////////////////////////////////////  
    ColladaMesh Mesh () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица фигуры 
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f& BindShapeMatrix () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с соединениями
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t             JointsCount    () const;
    const char*        JointName      (size_t joint_index) const;
    const math::mat4f& JointInvMatrix (size_t joint_index) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с весами
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                        InfluencesCount () const; //совпадает с количеством вершин в меше
    size_t                        WeightsCount    () const; 
    const ColladaJointWeight*     Weights         () const;
    const ColladaVertexInfluence* Influences      () const;
    
  private:
    ColladaSkin (const ColladaSkinImpl*);
    
  private:
    const ColladaSkinImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Морфирующая геометрия
///////////////////////////////////////////////////////////////////////////////////////////////////
class ColladaMorph: public ColladaEntity
{
  friend class ColladaWrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый меш
///////////////////////////////////////////////////////////////////////////////////////////////////  
    ColladaMesh Mesh () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод морфинга
///////////////////////////////////////////////////////////////////////////////////////////////////
    ColladaMorphMethod Method () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с целями морфинга
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      TargetsCount () const;
    float       TargetWeight (size_t index) const;
    ColladaMesh TargetMesh   (size_t index) const;
    
  private:
    ColladaMorph (const ColladaMorphImpl*);
    
  private:
    const ColladaMorphImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контроллер
///////////////////////////////////////////////////////////////////////////////////////////////////
class ColladaController: public ColladaEntity
{
  friend class ColladaWrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип контроллера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ColladaControllerType Type  () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Морф / скинв в зависимости от типа контроллера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ColladaMorph Morph () const;
    ColladaSkin  Skin  () const;
    
  private:
    ColladaController (const ColladaControllerImpl*);
    
  private:
    const ColladaControllerImpl* impl;
};

}

#endif
