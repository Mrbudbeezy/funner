#ifndef MEDIALIB_COLLADA_PARSER_HEADER
#define MEDIALIB_COLLADA_PARSER_HEADER

#include "scene.h"
#include "animation.h"
#include <common/parser.h>

namespace medialib
{

//доработать исключения!!!

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека контента коллады
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Item>
class ColladaLib
{
  public:
    ColladaLib (const Collada&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество элементов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Count () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к элементам
///////////////////////////////////////////////////////////////////////////////////////////////////
    Item operator [] (size_t index) const;
    Item operator [] (const char* id) const;

  private:
    const ColladaImpl *impl;
};

typedef ColladaLib<ColladaMesh>          ColladaMeshLib;
typedef ColladaLib<ColladaMaterial>      ColladaMaterialLib;
typedef ColladaLib<ColladaEffect>        ColladaEffectLib;
typedef ColladaLib<ColladaLight>         ColladaLightLib;
typedef ColladaLib<ColladaCamera>        ColladaCameraLib;
typedef ColladaLib<ColladaController>    ColladaControllerLib;
typedef ColladaLib<ColladaNode>          ColladaNodeLib;
typedef ColladaLib<ColladaVisualScene>   ColladaVisualSceneLib;
typedef ColladaLib<ColladaAnimation>     ColladaAnimationLib;
typedef ColladaLib<ColladaAnimationClip> ColladaAnimationClipLib;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Парсер коллада
///////////////////////////////////////////////////////////////////////////////////////////////////
class Collada
{
  friend class ColladaWrappers;
  template <class T> friend class ColladaLib;
  public: 
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
    Collada  (common::Parser::Log* log, const char* file_name);
    ~Collada ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Активная сцена
///////////////////////////////////////////////////////////////////////////////////////////////////
    ColladaVisualScene ActiveScene () const;
    
  private:
    Collada (ColladaImpl*);

  private:
    ColladaImpl* impl;
};

}

#endif
