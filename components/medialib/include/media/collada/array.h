#ifndef MEDIAILIB_COLLADA_ARRAY_HEADER
#define MEDIAILIB_COLLADA_ARRAY_HEADER

#include <stddef.h>

namespace medialib
{

namespace collada
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Массив. Используется вместо stl::vector по двум причинам:
///  - отсутствие интерфейсной зависимости от STL
///  - упрощённая реализация: данные не инициализируются
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Item> class Array
{
  public:
    Array  ();
    Array  (size_t size);
    Array  (const Array&);
    ~Array ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Array& operator = (const Array&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество элементов / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size  () const;
    bool   Empty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итераторов
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      Begin ();
    Iterator      End   ();
    ConstIterator Begin () const;
    ConstIterator End   () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к элементу
///////////////////////////////////////////////////////////////////////////////////////////////////
    Item&       operator [] (size_t index);
    const Item& operator [] (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Array&);

  private:
    Item*  data;
    size_t count;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Item>
void swap (Array<Item>&, Array<Item>&);

}

}

#endif
