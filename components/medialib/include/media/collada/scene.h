#ifndef MEDIALIB_COLLADA_SCENE_HEADER
#define MEDIALIB_COLLADA_SCENE_HEADER

#include <media/collada/controller.h>

namespace medialib
{

namespace collada
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
enum LightType
{
  LightType_Ambient, //рассеянное освещение
  LightType_Point,   //точечный источник света
  LightType_Spot,    //направленный конусоидальный источник света
  LightType_Direct   //направленный цилиндрический источник света
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
enum CameraType
{
  CameraType_Perspective, //перспективная камера
  CameraType_Orthographic //ортографическая камера
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник света
///////////////////////////////////////////////////////////////////////////////////////////////////
class Light: public Entity
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип источника
///////////////////////////////////////////////////////////////////////////////////////////////////
    LightType Type    () const;
    void      SetType (LightType type);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет источника
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::vec3f& Color    () const;
    void               SetColor (const math::vec3f& color);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры затухания
///////////////////////////////////////////////////////////////////////////////////////////////////
    float AttenuationConstant  () const;
    float AttenuationLinear    () const;
    float AttenuationQuadratic () const;
    float FalloffAngle         () const;
    float FalloffExponent      () const;

    void SetAttenuation (float constant, float linear, float quadratic);
    void SetFalloff     (float angle, float exponent);

  protected:
    Light  (Collada& owner, const char* id);
    ~Light ();

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Камера
///////////////////////////////////////////////////////////////////////////////////////////////////
class Camera: public Entity
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    CameraType Type    () const;
    void       SetType (CameraType type);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    float ZNear       () const;
    float ZFar        () const;
    float AspectRatio () const;
    float XFov        () const;
    float YFov        () const;
    float MagnitudeX  () const;
    float MagnitudeY  () const;
    
    void SetFov (float x_fov, float y_fov);
//    void 

   protected:
     Camera (Collada& owner, const char* id);

   private:
     struct Impl;
     Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Инстанцированный материал
///////////////////////////////////////////////////////////////////////////////////////////////////
class InstanceMaterial
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
    collada::Material& Material ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текстурные каналы
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* TextureChannelName (const char* texture_name) const;
    size_t      TextureChannel     (const char* texture_name) const;

  protected:
    InstanceMaterial (Collada& owner, const char* id);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Инстанцированный контроллер
///////////////////////////////////////////////////////////////////////////////////////////////////
class InstanceController
{
  friend class ColladaWrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Контроллер
///////////////////////////////////////////////////////////////////////////////////////////////////  
    ColladaController Controller () const;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Ссылки на корни поиска узлов для скининга
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      SkeletonsCount () const;
    ColladaNode Skeleton       (size_t skeleton_index) const;  

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск джойнта
///////////////////////////////////////////////////////////////////////////////////////////////////
    ColladaNode Joint (const char* name) const;

  private:
    ColladaInstanceController (const ColladaInstanceControllerImpl*);

  private:
    const ColladaInstanceControllerImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Узел сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class ColladaNode: public ColladaEntity
{
  friend class ColladaWrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор узла в пределах родительского узла / имя узла
///////////////////////////////////////////////////////////////////////////////////////////////////  
    const char* SubID () const;
    const char* Name  () const;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Преобразование узла
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f& GetTransform () const;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Потомки
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      ChildrenCount () const;
    ColladaNode Child         (size_t node_index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слои которым принадлежит узел
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      LayersCount () const;
    const char* Layer       (size_t layer_index) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t        CamerasCount () const;
    ColladaCamera Camera       (size_t camera_index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источники света
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t       LightsCount () const;
    ColladaLight Light       (size_t light_index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Меши
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                  MeshesCount  () const;
    ColladaMesh             Mesh         (size_t mesh_index) const;
    ColladaInstanceMaterial MeshMaterial (size_t mesh_index,const char* material_name) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Контроллеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                    ControllersCount   () const;
    ColladaInstanceController Controller         (size_t controller_index) const;
    ColladaInstanceMaterial   ControllerMaterial (size_t controller_index,const char* material_name) const;

  private:
    ColladaNode (const ColladaNodeImpl*);

  private:
    const ColladaNodeImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Визуальная сцена
///////////////////////////////////////////////////////////////////////////////////////////////////
class ColladaVisualScene: public ColladaEntity
{
  friend class ColladaWrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление узлов принадлежащих сцене
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      NodesCount ();
    ColladaNode Node       (size_t index);
    ColladaNode Node       (const char* name);
  
  private:
    ColladaVisualScene (const ColladaVisualSceneImpl*);

  private:
    const ColladaVisualSceneImpl* impl;    
};

}

}

#endif
