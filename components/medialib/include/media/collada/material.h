#ifndef MEDIALIB_COLLADA_MATERIAL_HEADER
#define MEDIALIB_COLLADA_MATERIAL_HEADER

#include "base.h"

namespace medialib
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ColladaShaderType
{
  COLLADA_SHADER_CONSTANT, //шейдер без интерполяции цвета по поверхности треугольника
  COLLADA_SHADER_LAMBERT,  //модель освещения Ламберта
  COLLADA_SHADER_PHONG,    //модель освещения Фонга
  COLLADA_SHADER_BLINN     //модель освещения Блинна
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Индекс доступных текстурных карт
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ColladaTextureMap
{
  COLLADA_MAP_DIFFUSE,     //базовая текстура (рассеянное освещение)
  COLLADA_MAP_AMBIENT,     //текстура поглощения света
  COLLADA_MAP_SPECULAR,    //текстура степени отражения света
  COLLADA_MAP_TRANSPARENT, //текстура прозрачности
  COLLADA_MAP_EMISSION,    //текстура эмиссии (self-illumination)
  COLLADA_MAP_REFLECTIVE,  //текстура карты отражения (env-map)
  COLLADA_MAP_BUMP,        //текстура рельефа поверхности
  
  COLLADA_MAP_NUM
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
class ColladaTexture: public ColladaEntity
{
  friend class ColladaWrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя картинки связанной с текстурой
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Image () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Степень влияния текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
    float              Amount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица преобразования текстурных координат
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f& Transform () const;
    
  private:
    ColladaTexture (const ColladaTextureImpl*);
  
  private:
    const ColladaTextureImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Эффект
///////////////////////////////////////////////////////////////////////////////////////////////////
class ColladaEffect: public ColladaEntity
{
  friend class ColladaWrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ColladaShaderType ShaderType () const;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с текстурными картами
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool               HasTexture (ColladaTextureMap map) const;
    ColladaTexture     Texture    (ColladaTextureMap map) const;
    bool               HasColor   (ColladaTextureMap map) const;
    const math::vec4f& MapColor   (ColladaTextureMap map) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры шейдинга
///////////////////////////////////////////////////////////////////////////////////////////////////
    float Reflectivity   () const; //степень отражения
    float Transparency   () const; //степень прозрачности
    float RefractonIndex () const; //индекс преломления
    float Shininess      () const; //степень "металличности"
    
  private:
    ColladaEffect (const ColladaEffectImpl*);
    
  private:
    const ColladaEffectImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
class ColladaMaterial: public ColladaEntity
{
  friend class ColladaWrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Эффект связанный с материалом
///////////////////////////////////////////////////////////////////////////////////////////////////
    ColladaEffect Effect () const;
    
  private:
    ColladaMaterial (const ColladaMaterialImpl*);
    
  private:
    const ColladaMaterialImpl* impl;
};

}

#endif
