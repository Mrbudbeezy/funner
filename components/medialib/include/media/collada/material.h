#ifndef MEDIALIB_COLLADA_MATERIAL_HEADER
#define MEDIALIB_COLLADA_MATERIAL_HEADER

#include <media/collada/utility.h>
#include <math/mathlib.h>

namespace medialib
{

namespace collada
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Специализация библиотеки для создания материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <> class ILibrary<Material>: public IItemLibrary<Material>
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание элементов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Material& Create (Effect& effect, const char* id = 0) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ShaderType
{
  ShaderType_Constant, //шейдер без интерполяции цвета по поверхности треугольника
  ShaderType_Lambert,  //модель освещения Ламберта
  ShaderType_Phong,    //модель освещения Фонга
  ShaderType_Blinn,    //модель освещения Блинна

  ShaderType_Default = ShaderType_Phong,

  ShaderType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметр эффекта
///////////////////////////////////////////////////////////////////////////////////////////////////
enum EffectParam
{
  EffectParam_Reflectivity,    //степень отражения
  EffectParam_Transparency,    //степень прозрачности
  EffectParam_RefractionIndex, //индекс преломления
  EffectParam_Shininess,       //степень "металличности"
  
  EffectParam_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Индекс доступных текстурных карт
///////////////////////////////////////////////////////////////////////////////////////////////////
enum TextureMap
{
  TextureMap_Diffuse,     //базовая текстура (рассеянное освещение)
  TextureMap_Ambient,     //текстура поглощения света
  TextureMap_Specular,    //текстура степени отражения света
  TextureMap_Transparent, //текстура прозрачности
  TextureMap_Emission,    //текстура эмиссии (self-illumination)
  TextureMap_Reflective,  //текстура карты отражения (env-map)
  TextureMap_Bump,        //текстура рельефа поверхности
  
  TextureMap_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
class Texture
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя картинки связанной с текстурой
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Image    () const;
    void        SetImage (const char* image_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вес текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
    float Amount    () const;
    void  SetAmount (float amount) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица преобразования текстурных координат
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f& Transform    () const;
    void               SetTransform (const math::mat4f&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя канала текстурных координат
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetTexcoordChannel (const char* name);
    const char* TexcoordChannel    () const;

  protected:
    Texture  ();
    ~Texture ();
    
  private:
    Texture (const Texture&); //no impl
    Texture& operator = (const Texture&); //no impl
  
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Эффект
///////////////////////////////////////////////////////////////////////////////////////////////////
class Effect: public Entity
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    collada::ShaderType ShaderType    () const;
    void                SetShaderType (collada::ShaderType type);
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с текстурными картами
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool                    HasTexture    (TextureMap map) const;
    const collada::Texture& Texture       (TextureMap map) const; //исключение, если текстура отсутствовала
    collada::Texture&       Texture       (TextureMap map);       //исключение, если текстура отсутствовала
    collada::Texture&       CreateTexture (TextureMap map);
    void                    RemoveTexture (TextureMap map);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с цветом карт
///////////////////////////////////////////////////////////////////////////////////////////////////    
    const math::vec4f& MapColor    (TextureMap map) const;
    void               SetMapColor (TextureMap map, const math::vec4f& color);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры эффекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    float Param    (EffectParam param) const;
    void  SetParam (EffectParam param, float value);
    
  protected:
    Effect  (ModelImpl*, const char* id);
    ~Effect ();
    
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
class Material: public Entity
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Эффект связанный с материалом
///////////////////////////////////////////////////////////////////////////////////////////////////
    const collada::Effect& Effect () const;
          collada::Effect& Effect ();

  protected:
    Material  (collada::Effect& effect, ModelImpl* owner, const char* id);
    ~Material ();

  private:
    struct Impl;
    Impl* impl;
};

}

}

#endif
