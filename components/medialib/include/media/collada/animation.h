#ifndef MEDIALIB_COLLADA_ANIMATION_HEADER
#define MEDIALIB_COLLADA_ANIMATION_HEADER

#include "base.h"

namespace media
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимационный канал
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ColladaAnimationParam
{
  COLLADA_ANIMATION_NODE_TRANSFORM,
  COLLADA_ANIMATION_CAMERA_HFOV,
  COLLADA_ANIMATION_CAMERA_VFOV
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сэмплы анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class SampleType>
class ColladaAnimationSamples
{
  public:
    typedef SampleType Sample;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ColladaAnimationSamples (size_t count,const Sample* samples);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество сэмплов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Count () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к сэмплам
///////////////////////////////////////////////////////////////////////////////////////////////////
    const Sample* Data        () const;
    const Sample& At          (size_t index) const;
    const Sample& operator [] (size_t index) const;

  private:
    const Sample* samples;
    size_t        count;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимационный канал
///////////////////////////////////////////////////////////////////////////////////////////////////
class ColladaAnimationChannel: public ColladaEntity
{
  friend class ColladaWrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя объекта / имя параметра анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char*           TargetName  () const;
    ColladaAnimationParam TargetParam () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с сэмплами
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class SampleType>
    const ColladaAnimationSamples<SampleType> Samples () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Диапозон времени анимированного канала
///////////////////////////////////////////////////////////////////////////////////////////////////
    float TimeStart () const;
    float TimeEnd   () const;
    
  private:
    ColladaAnimationChannel (const ColladaAnimationChannelImpl*);
    
  private:
    const ColladaAnimationChannelImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимация
///////////////////////////////////////////////////////////////////////////////////////////////////
class ColladaAnimation: public ColladaEntity
{
  friend class ColladaWrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с анимационными каналами
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                  ChannelsCount () const;
    ColladaAnimationChannel Channel      (size_t index) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с вложенными анимациями
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t           ChildrenCount () const;
    ColladaAnimation Child         (size_t index) const;
    
  private:
    ColladaAnimation (const ColladaAnimationImpl*);
    
  private:
    const ColladaAnimationImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимационный клип
///////////////////////////////////////////////////////////////////////////////////////////////////
class ColladaAnimationClip: public ColladaEntity
{
  friend class ColladaWrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Время начала и конца клипа
///////////////////////////////////////////////////////////////////////////////////////////////////
    float TimeStart () const;
    float TimeEnd   () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимации
///////////////////////////////////////////////////////////////////////////////////////////////////    
    size_t           AnimationsCount () const;
    ColladaAnimation Animation       (size_t animation_index) const;
    
  private:
    ColladaAnimationClip (const ColladaAnimationClipImpl*);
    
  private:
    const ColladaAnimationClipImpl* impl;
};

}

#endif
