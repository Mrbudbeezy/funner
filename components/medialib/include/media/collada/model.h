#ifndef MEDIALIB_COLLADA_MODEL_HEADER
#define MEDIALIB_COLLADA_MODEL_HEADER

#include <xtl/functional_fwd>
#include <media/collada/geometry.h> //??

namespace medialib
{

namespace collada
{

//implementation forwards
struct ModelImpl;

//typedef Library<ColladaMesh>          ColladaMeshLib;
//typedef Library<ColladaMaterial>      ColladaMaterialLib;
//typedef Library<ColladaEffect>        ColladaEffectLib;
//typedef Library<ColladaLight>         ColladaLightLib;
//typedef Library<ColladaCamera>        ColladaCameraLib;
//typedef Library<ColladaController>    ColladaControllerLib;
//typedef Library<ColladaNode>          ColladaNodeLib;
//typedef Library<ColladaVisualScene>   ColladaVisualSceneLib;
//typedef Library<ColladaAnimation>     ColladaAnimationLib;
//typedef Library<ColladaAnimationClip> ColladaAnimationClipLib;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Модель
///////////////////////////////////////////////////////////////////////////////////////////////////
class Model
{
  public:
    typedef xtl::function<void (const char*)> LogFunction;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Model  ();
    Model  (const char* file_name);
    Model  (const char* file_name, const LogFunction& log_func);
    ~Model ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя модели
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* new_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / сохранение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);
    void Load (const char* file_name, const LogFunction& log);
    void Save (const char* file_name);
    void Save (const char* file_name, const LogFunction& log);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработчики загрузки/сохранения по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void DefaultDaeLoader (const char* file_name, Model&, const LogFunction& log);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Активная сцена
///////////////////////////////////////////////////////////////////////////////////////////////////
//    VisualScene& ActiveScene () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
          collada::MaterialLibrary& Materials ();
          collada::EffectLibrary&   Effects   ();
          collada::MeshLibrary&     Meshes    ();
    const collada::MaterialLibrary& Materials () const;
    const collada::EffectLibrary&   Effects   () const;
    const collada::MeshLibrary&     Meshes    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Model&);
    
  private:
    Model  (const Model&); //no impl
    Model& operator = (const Model&); //no impl

  private:
    ModelImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Model&, Model&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система управления моделями
///////////////////////////////////////////////////////////////////////////////////////////////////
class ModelSystem
{
  public:
    typedef xtl::function<void (const char*,       Model&, const Model::LogFunction& log)> LoadFunction;
    typedef xtl::function<void (const char*, const Model&, const Model::LogFunction& log)> SaveFunction;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с пользовательскими функциями загрузки и сохранения
///  Register* возвращает true при успешной регистрации, и false,  если такое расширение уже
///  зарегестрировано
///////////////////////////////////////////////////////////////////////////////////////////////////
    static bool RegisterLoader   (const char* extension, const LoadFunction& loader);
    static bool RegisterSaver    (const char* extension, const SaveFunction& saver);
    static void UnregisterLoader (const char* extension);
    static void UnregisterSaver  (const char* extension);
    static void UnregisterAll    ();
};

}

}

#endif
