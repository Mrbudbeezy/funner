#ifndef MEDIALIB_MESH_HEADER
#define MEDIALIB_MESH_HEADER

#include <media/vertex_format.h>

namespace medialib
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим копирования буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum BufferCloneMode
{
  BufferCloneMode_Copy,     //копирование
  BufferCloneMode_Instance, //инстанцирование (увеличение числа ссылок)
  BufferCloneMode_Default   //сохраняется режим копирования источника
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Массив вершинных атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
class VertexStream
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexStream  (const VertexFormat& format);
    VertexStream  (const VertexFormat& format, size_t vertex_size);
    VertexStream  (size_t vertices_count, const VertexFormat& format);
    VertexStream  (size_t vertices_count, const VertexFormat& format, size_t vertex_size);
    VertexStream  (const VertexStream&, BufferCloneMode mode = BufferCloneMode_Default);
    ~VertexStream ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexStream& operator = (const VertexStream&);
    void          Assign     (const VertexStream&, BufferCloneMode mode = BufferCloneMode_Default);

//////////////////////////////////////////////////////////////////////////////////////////////////
///Формат
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexFormat& Format () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размер вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t VertexSize () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    const void* Data () const;
          void* Data ();
          
    template <class Vertex> const Vertex* Data () const;
    template <class Vertex>       Vertex* Data ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество вершин
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size   () const;
    void   Resize (size_t vertices_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка массива
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Capacity () const;
    void   Reserve  (size_t vertices_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (VertexStream&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (VertexStream&, VertexStream&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вершинный вес
///////////////////////////////////////////////////////////////////////////////////////////////////
struct VertexWeight
{
  size_t joint_index;  //индекс соединения
  float  joint_weight; //вес соединения
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Массив вершинных весов
///////////////////////////////////////////////////////////////////////////////////////////////////
class VertexWeightStream
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexWeightStream  ();
    VertexWeightStream  (size_t weights_count);
    VertexWeightStream  (const VertexWeightStream&, BufferCloneMode mode = BufferCloneMode_Default);
    ~VertexWeightStream ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexWeightStream& operator = (const VertexWeightStream&);
    void                Assign     (const VertexWeightStream&, BufferCloneMode mode = BufferCloneMode_Default);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexWeight* Data () const;
          VertexWeight* Data ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество вершин
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size   () const;
    void   Resize (size_t weights_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка массива
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Capacity () const;
    void   Reserve  (size_t weights_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (VertexWeightStream&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (VertexWeightStream&, VertexWeightStream&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вершинный буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class VertexBuffer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexBuffer  ();
    VertexBuffer  (const VertexBuffer&, BufferCloneMode mode = BufferCloneMode_Default);
    ~VertexBuffer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          Assign     (const VertexBuffer&, BufferCloneMode mode = BufferCloneMode_Default);
    VertexBuffer& operator = (const VertexBuffer&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество массивов вершинных атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t StreamsCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение массива
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexStream& Stream (size_t index) const;
          VertexStream& Stream (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение массива весов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexWeightStream& Weights () const;
          VertexWeightStream& Weights ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение/отсоединение массивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Attach        (VertexStream&, BufferCloneMode mode = BufferCloneMode_Instance); //return: индекс массива
    void   Detach        (size_t index); //nothrow
    void   AttachWeights (VertexWeightStream&, BufferCloneMode mode = BufferCloneMode_Instance);
    void   DetachWeights ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество вершин (минимум среди всех вершинных массивов)
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t VerticesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Суммарный размер вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t VertexSize () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (VertexBuffer&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (VertexBuffer&, VertexBuffer&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Индексный буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class IndexBuffer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    IndexBuffer  ();
    IndexBuffer  (size_t indices_count);
    IndexBuffer  (const IndexBuffer&, BufferCloneMode mode = BufferCloneMode_Default);
    ~IndexBuffer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    void         Assign     (const IndexBuffer&, BufferCloneMode mode = BufferCloneMode_Default);
    IndexBuffer& operator = (const IndexBuffer&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Данные
///////////////////////////////////////////////////////////////////////////////////////////////////
    const size_t* Data () const;
          size_t* Data ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество индексов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size   () const;
    void   Resize (size_t indices_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Capacity () const;
    void   Reserve  (size_t indices_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (IndexBuffer&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (IndexBuffer&, IndexBuffer&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum PrimitiveType
{
  PrimitiveType_LineList,      //список отрезков
  PrimitiveType_LineStrip,     //цепочка отрезков
  PrimitiveType_TriangleList,  //список треугольников
  PrimitiveType_TriangleStrip, //цепочка треугольников
  PrimitiveType_TriangleFan,   //вейер треугольников
  
  PrimitiveType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени типа примитива
///////////////////////////////////////////////////////////////////////////////////////////////////
const char* get_type_name (PrimitiveType);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Примитив
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Primitive
{
  PrimitiveType type;     //тип примитива
  size_t        first;    //индекс первой вершины/индекса
  size_t        count;    //количество примитивов
  const char*   material; //имя материала
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Меш
///////////////////////////////////////////////////////////////////////////////////////////////////
class Mesh
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Mesh  ();
    Mesh  (const Mesh&);
    ~Mesh ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Mesh& operator = (const Mesh&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя меша
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буферы
///////////////////////////////////////////////////////////////////////////////////////////////////
    const medialib::VertexBuffer& VertexBuffer () const;
          medialib::VertexBuffer& VertexBuffer ();
    const medialib::IndexBuffer&  IndexBuffer  () const;
          medialib::IndexBuffer&  IndexBuffer  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Статистика: количество вершин/индексов/весов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t VerticesCount () const;
    size_t IndicesCount  () const;
    size_t WeightsCount  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение/отсоединение буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (medialib::VertexBuffer&, BufferCloneMode mode = BufferCloneMode_Instance);
    void Attach (medialib::IndexBuffer&, BufferCloneMode mode = BufferCloneMode_Instance);

    void DetachVertexBuffer ();
    void DetachIndexBuffer  ();
    void DetachAllBuffers   (); //отсоединение всех буферов

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество примитивов / доступ к примитивам
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t           PrimitivesCount () const;
    const Primitive& Primitive       (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление примитивов примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddPrimitive        (PrimitiveType type, size_t first, size_t count, const char* material); //return: индекс примитива
    void   RemovePrimitive     (size_t primitive_index);
    void   RemoveAllPrimitives ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка меша
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Mesh&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Mesh&, Mesh&);

//добавить функцию проверки корректности меша

#include <media/detail/mesh.inl>

}

#endif
