#ifndef MEDIALIB_RFX_TEXTURE_HEADER
#define MEDIALIB_RFX_TEXTURE_HEADER

#include <mathlib.h>

namespace media
{

namespace rfx
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текстурные координаты
///////////////////////////////////////////////////////////////////////////////////////////////////
enum Texcoord
{
  Texcoord_S,
  Texcoord_T,
  Texcoord_Q,
  
  Texcoord_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник текстурных координат
///////////////////////////////////////////////////////////////////////////////////////////////////
enum TexcoordSource
{
  TexcoordSource_SphereMap     = -2,  //текстурные координаты генерируются сферически
  TexcoordSource_ReflectionMap = -1,  //текстурные координаты генерируются для отражения
  TexcoordSource_Channel0      =  0,  //текстурные координаты берутся из геометрии в соответствии с номером канала
  TexcoordSource_Channel1      =  1,
  TexcoordSource_Channel2      =  2,
  TexcoordSource_Channel3      =  3,
    //...
    
  TexcoordSource_Default = TexcoordSource_Channel0
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режимы свёртки
///////////////////////////////////////////////////////////////////////////////////////////////////
enum TexcoordWrap
{
  TexcoordWrap_Repeat,        //повторение
  TexcoordWrap_Mirror,        //зеркальное отражение
  TexcoordWrap_Clamp,         //отсечение
  TexcoordWrap_ClampToBorder, //отсечение по цвету границы
  
  TexcoordWrap_Default = TexcoordWrap_Repeat
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режимы фильтрации
///////////////////////////////////////////////////////////////////////////////////////////////////
enum TexmapFilter
{
  TexmapFilter_Min, //фильтр, используемый при уменьшении текстуры
  TexmapFilter_Mag, //фильтр, используемый при увеличении текстуры
  TexmapFilter_Mip, //фильтр, используемый при переходе между mip-уровнями
  
  TexmapFilter_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Типы фильтров
///////////////////////////////////////////////////////////////////////////////////////////////////
enum TexmapFilterType
{
  TexmapFilterType_Default,     //фильтрация выбирается в соответствии с предпочтениями устройства визуализации
  TexmapFilterType_Point,       //точечная фильтрация
  TexmapFilterType_Bilinear,    //билинейная фильтрация
  TexmapFilterType_Trilinear,   //трилинейная фильтрация
  TexmapFilterType_Anisotropic, //анизотропная фильтрация
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текстурная карта
///////////////////////////////////////////////////////////////////////////////////////////////////
class Texmap
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Texmap  ();
    Texmap  (const Texmap&);
    ~Texmap ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Texmap& operator = (const Texmap&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя картинки связанной с текстурой
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Image    () const;
    void        SetImage (const char* image_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица преобразования текстурных координат
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f& Transform    () const;
    void               SetTransform (const math::mat4f&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник текстурных координат
///////////////////////////////////////////////////////////////////////////////////////////////////
    int  Source    (Texcoord coord) const;
    void SetSource (Texcoord coord, int source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Свёртка текстурных координат на границе
///////////////////////////////////////////////////////////////////////////////////////////////////
    TexcoordWrap Wrap    (Texcoord coord) const;
    void         SetWrap (Texcoord coord, TexcoordWrap wrap);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режимы фильтрации
///////////////////////////////////////////////////////////////////////////////////////////////////
    TexmapFilterType FilterType    (TexmapFilter filter) const;
    void             SetFilterType (TexmapFilter filter, TexmapFilterType type);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Texmap&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Texmap&, Texmap&);

}

}

#endif
