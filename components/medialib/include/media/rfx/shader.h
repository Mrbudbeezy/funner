#ifndef MEDIALIB_RFX_SHADER_HEADER
#define MEDIALIB_RFX_SHADER_HEADER

#include <xtl/functional_fwd>
#include <xtl/intrusive_ptr.h>
#include <media/clone_mode.h>

namespace medialib
{

namespace rfx
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Логические свойства шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ShaderPin
{
  ShaderPin_TwoSided,       //двусторонний материал
  ShaderPin_Wireframe,      //проволочное представление
  ShaderPin_Lighting,       //освещение
  ShaderPin_CastShadows,    //геометрия, связанная с материалом, отбрасывает тень
  ShaderPin_ReceiveShadows, //геометрия, связанная с материалом, принимает тень
  ShaderPin_SelfShadow,     //самозатенение геометрии

  ShaderPin_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Шейдер
///////////////////////////////////////////////////////////////////////////////////////////////////
class Shader
{
  public:
    typedef xtl::com_ptr<Shader>       Pointer;
    typedef xtl::com_ptr<const Shader> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name     () const;
    size_t      NameHash () const; //хэш имени
    void        Rename   (const char*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамическая диспетчеризация
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::basic_visitor<void> Visitor;

    void Accept (Visitor&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  () const;
    void Release () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Pointer Clone (CloneMode mode = CloneMode_Default);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с логическими свойствами
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsEnabled (ShaderPin) const;
    void SetPin    (ShaderPin pin, bool state);
    void Enable    (ShaderPin pin) { SetPin (pin, true); }
    void Disable   (ShaderPin pin) { SetPin (pin, false); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
  protected:
            Shader  ();
            Shader  (const Shader&);
    virtual ~Shader ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация динамической диспетчеризации
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AcceptCore (Visitor&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Попытка диспетчеризации
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class T> static bool TryAccept (T&, Visitor&);

  private:    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация копирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Shader* CloneCore () const;    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Shader& operator = (const Shader&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

#include <media/rfx/detail/shader.inl>

}

}

#endif
