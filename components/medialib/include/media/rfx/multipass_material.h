#ifndef MEDIALIB_RFX_MULTIPASS_MATERIAL_HEADER
#define MEDIALIB_RFX_MULTIPASS_MATERIAL_HEADER

#include <media/rfx/material.h>

namespace media
{

namespace rfx
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние прохода
///////////////////////////////////////////////////////////////////////////////////////////////////
enum PassState
{
  PassState_Disabled, //проход запрещен
  PassState_Enabled,  //проход разрешен
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Многопроходный материал
///////////////////////////////////////////////////////////////////////////////////////////////////
class MultiPassMaterial: public Material
{
  public:
    typedef xtl::com_ptr<MultiPassMaterial>       Pointer;
    typedef xtl::com_ptr<const MultiPassMaterial> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество проходов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t PassesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
    Material::ConstPointer Material (size_t index) const;
    Material::Pointer      Material (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление проходов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddPass         (const Material::Pointer& material_ptr);
    void   InsertPass      (size_t index, const Material::Pointer& material_ptr);
    void   RemovePass      (size_t index); //no throw
    void   RemoveAllPasses (); //no throw

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetMaterial (size_t index, const Material::Pointer& material_ptr);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перемемещение прохода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void MovePass   (size_t source_index, size_t destination_index);
    void SwapPasses (size_t index1, size_t index2);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск материала по имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    Material::ConstPointer FindMaterial (const char* name) const;
    Material::Pointer      FindMaterial (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск прохода
///////////////////////////////////////////////////////////////////////////////////////////////////          
    int FindPass (const char* name) const; //возвращает -1 в случае неудачи

///////////////////////////////////////////////////////////////////////////////////////////////////
///Разрешение / запрещение проходов
///////////////////////////////////////////////////////////////////////////////////////////////////        
    void           SetPassState (size_t index, PassState state);
    rfx::PassState PassState    (size_t index) const;

    bool IsPassEnabled (size_t index) const { return PassState (index) == PassState_Enabled; }
    void EnablePass    (size_t index)       { SetPassState (index, PassState_Enabled);  }
    void DisablePass   (size_t index)       { SetPassState (index, PassState_Disabled); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление проходов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void VisitEachPass (Visitor&);

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    MultiPassMaterial  ();
    MultiPassMaterial  (const MultiPassMaterial&);
    ~MultiPassMaterial ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамическая диспетчеризация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация копирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    media::rfx::Material* CloneCore () const;

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

#endif
