#ifndef MEDIALIB_RFX_MATERIAL_LIBRARY_HEADER
#define MEDIALIB_RFX_MATERIAL_LIBRARY_HEADER

#include <media/rfx/material.h>
#include <stl/auto_ptr.h>

namespace xtl
{

//forward decalration
template <class T> class iterator;

}

namespace media
{

namespace rfx
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
class MaterialLibrary
{
  public:
    typedef xtl::iterator<Material>       Iterator;
    typedef xtl::iterator<const Material> ConstIterator;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    MaterialLibrary  ();
    MaterialLibrary  (const char* file_name);
    MaterialLibrary  (const MaterialLibrary&);
    ~MaterialLibrary ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    MaterialLibrary& operator = (const MaterialLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество материалов в библиотеке / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size    () const;
    bool   IsEmpty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      CreateIterator ();
    ConstIterator CreateIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск
///////////////////////////////////////////////////////////////////////////////////////////////////
          Material* Find (const char* name);
    const Material* Find (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach    (const char* name, Material& material, CloneMode mode = CloneMode_Instance);
    void Detach    (const char* name); //no throw
    void DetachAll ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / сохранение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);
    void Save (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (MaterialLibrary&);
  
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (MaterialLibrary&, MaterialLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер библиотек материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
class MaterialLibraryManager
{
  public:
    typedef xtl::function<void (const char*,       MaterialLibrary&)> LoadHandler;
    typedef xtl::function<void (const char*, const MaterialLibrary&)> SaveHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с пользовательскими функциями загрузки и сохранения
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterLoader   (const char* extension, const LoadHandler& loader);
    static void RegisterSaver    (const char* extension, const SaveHandler& saver);
    static void UnregisterLoader (const char* extension);
    static void UnregisterSaver  (const char* extension);
    static void UnregisterAll    ();
};

}

}

#endif
