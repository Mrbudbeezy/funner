#ifndef MEDIALIB_RFX_MATERIAL_HEADER
#define MEDIALIB_RFX_MATERIAL_HEADER

#include <media/rfx/shader.h>

namespace media
{

namespace rfx
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние прохода
///////////////////////////////////////////////////////////////////////////////////////////////////
enum PassState
{
  PassState_Disabled, //проход запрещен
  PassState_Enabled,  //проход разрешен
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
class Material
{  
  public:
    typedef media::rfx::Shader::Pointer      ShaderPointer;
    typedef media::rfx::Shader::ConstPointer ConstShaderPointer;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Material  ();
    Material  (const Material&, CloneMode = CloneMode_Default);
    ~Material ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Material& operator = (const Material&);
    void      Assign     (const Material&, CloneMode = CloneMode_Default);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество проходов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t PassesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение шейдеров
///////////////////////////////////////////////////////////////////////////////////////////////////
    const rfx::Shader& Shader (size_t index) const;
          rfx::Shader& Shader (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление проходов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddPass         (const ShaderPointer& shader_ptr, CloneMode = CloneMode_Instance);
    void   InsertPass      (size_t index, const ShaderPointer& shader_ptr, CloneMode = CloneMode_Instance);
    void   RemovePass      (size_t index); //no throw
    void   RemoveAllPasses (); //no throw

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetShader (size_t index, const ShaderPointer& shader_ptr, CloneMode = CloneMode_Instance);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перемемещение прохода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void MovePass   (size_t source_index, size_t destination_index);
    void SwapPasses (size_t index1, size_t index2);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск шейдеров
///////////////////////////////////////////////////////////////////////////////////////////////////
    ConstShaderPointer FindShader (const char* name) const;
    ShaderPointer      FindShader (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск прохода
///////////////////////////////////////////////////////////////////////////////////////////////////          
    int FindPass (const char* name) const; //возвращает -1 в случае неудачи

///////////////////////////////////////////////////////////////////////////////////////////////////
///Разрешение / запрещение проходов
///////////////////////////////////////////////////////////////////////////////////////////////////        
    void           SetPassState (size_t index, PassState state);
    rfx::PassState PassState    (size_t index) const;

    bool IsPassEnabled (size_t index) const { return PassState (index) == PassState_Enabled; }
    void EnablePass    (size_t index)       { SetPassState (index, PassState_Enabled);  }
    void DisablePass   (size_t index)       { SetPassState (index, PassState_Disabled); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление проходов
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef Shader::Visitor Visitor;

    void VisitEachPass (Visitor&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка логических свойств материала (результат определяется как логическое "ИЛИ" по всем проходам)
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsEnabled (ShaderPin) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка группы сортировки материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetSortGroup (int group);
    int  SortGroup    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Material&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Material&, Material&);

}

}

#endif
