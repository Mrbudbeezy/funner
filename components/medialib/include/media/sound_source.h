#ifndef MEDIALIB_SOUND_SOURCE_HEADER
#define MEDIALIB_SOUND_SOURCE_HEADER

#include <xtl/functional_fwd>
#include <media/clone_mode.h>

namespace media
{

enum SoundSourceParam
{
  SoundSourceParam_Gain,
  SoundSourceParam_MinimumGain,
  SoundSourceParam_MaximumGain,
  SoundSourceParam_InnerAngle,
  SoundSourceParam_OuterAngle,
  SoundSourceParam_OuterGain,
  SoundSourceParam_ReferenceDistance,
  SoundSourceParam_MaximumDistance,
  SoundSourceParam_CullDistance
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры источника звука
///////////////////////////////////////////////////////////////////////////////////////////////////
class SoundSource
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SoundSource  ();
    SoundSource  (const SoundSource&, CloneMode = CloneMode_Default);
    ~SoundSource ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    SoundSource& operator = (const SoundSource&);
    void         Assign     (const SoundSource&, CloneMode = CloneMode_Default);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetType (const char* type);
    const char* Type    () const;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Цикличность воспроизведения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetLooping (bool looping);
    bool Looping    () const;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление файла в список звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      AddSound        (const char* sound);
    size_t      SoundsCount     () const;
    const char* Sound           (size_t sound_index) const;
    void        RemoveSound     (size_t sound_index);
    void        RemoveAllSounds ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetParam (SoundSourceParam param, float value);
    float Param    (SoundSourceParam param) const;
     
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (SoundSource&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (SoundSource&, SoundSource&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека звуков
///////////////////////////////////////////////////////////////////////////////////////////////////
class SoundSourceLibrary
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SoundSourceLibrary  ();
    SoundSourceLibrary  (const char* file_name);
    SoundSourceLibrary  (const SoundSourceLibrary&);
    ~SoundSourceLibrary ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    SoundSourceLibrary& operator = (const SoundSourceLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество материалов в библиотеке
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t SoundSourceCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const media::SoundSource& SoundSource (size_t index) const;
          media::SoundSource& SoundSource (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Attach    (media::SoundSource& sound_source, CloneMode mode = CloneMode_Instance);
    void   Detach    (size_t index); //no throw
    void   DetachAll ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / сохранение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);
    void Save (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (SoundSourceLibrary&);
  
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (SoundSourceLibrary&, SoundSourceLibrary&);

//////////////////////////////////////////////////////////////////////////////////////////////////
///Система управления звуками
//////////////////////////////////////////////////////////////////////////////////////////////////
class SoundSourceSystem
{
  public:
    typedef xtl::function<void (const char*,       SoundSourceLibrary&)> LoadHandler;
    typedef xtl::function<void (const char*, const SoundSourceLibrary&)> SaveHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с пользовательскими функциями загрузки и сохранения
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterLoader   (const char* extension, const LoadHandler& loader);
    static void RegisterSaver    (const char* extension, const SaveHandler& saver);
    static void UnregisterLoader (const char* extension);
    static void UnregisterSaver  (const char* extension);
    static void UnregisterAll    ();
};

}

#endif
