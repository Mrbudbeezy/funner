#ifndef MEDIALIB_VERTEX_FORMAT_HEADER
#define MEDIALIB_VERTEX_FORMAT_HEADER

#include <stddef.h>
#include <common/singleton.h>

namespace medialib
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///»ндексы отрезка вершинных весов
///////////////////////////////////////////////////////////////////////////////////////////////////
struct VertexInfluence
{
  size_t first_joint, joints_count;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///—емантика атрибута вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
enum VertexAttributeSemantic
{
  VertexAttributeSemantic_Position,  //положение
  VertexAttributeSemantic_Normal,    //нормаль
  VertexAttributeSemantic_Color,     //цвет
  VertexAttributeSemantic_Tangent,   //касательна€
  VertexAttributeSemantic_Binormal,  //бинормаль
  VertexAttributeSemantic_TexCoord0, //каналы текстурных координат
  VertexAttributeSemantic_TexCoord1,
  VertexAttributeSemantic_TexCoord2,
  VertexAttributeSemantic_TexCoord3,
  VertexAttributeSemantic_TexCoord4,
  VertexAttributeSemantic_TexCoord5,
  VertexAttributeSemantic_TexCoord6,  
  VertexAttributeSemantic_TexCoord7,
  VertexAttributeSemantic_Influence, //индексы отрезка индексных весов
  
  VertexAttributeSemantic_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///“ип атрибута вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
enum VertexAttributeType
{
  VertexAttributeType_Float2,    //вектор из 2-х вещественных величин
  VertexAttributeType_Float3,    //вектор из 3-х вещественных величин
  VertexAttributeType_Float4,    //вектор из 4-х вещественных величин
  VertexAttributeType_Short2,    //вектор из 2-х целочисленных величин
  VertexAttributeType_Short3,    //вектор из 3-х целочисленных величин 
  VertexAttributeType_Short4,    //вектор из 4-х целочисленных величин
  VertexAttributeType_UByte4,    //вектор из 4-х беззнаковый байт
  VertexAttributeType_Influence, //см. структуру VertexInfluence
  
  VertexAttributeType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///јтрибут вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
struct VertexAttribute
{
  VertexAttributeSemantic semantic; //семантика
  VertexAttributeType     type;     //тип элементов
  size_t                  offset;   //смещение от начала вершины
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///‘ормат вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
class VertexFormat
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
/// онструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexFormat  ();
    VertexFormat  (const VertexFormat&);
    ~VertexFormat ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕрисваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexFormat& operator = (const VertexFormat&);
  
///////////////////////////////////////////////////////////////////////////////////////////////////
/// оличество атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AttributesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕолучение массива атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexAttribute* Attributes () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕолучение атрибута
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexAttribute& operator [] (size_t index) const;
          VertexAttribute& operator [] (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///ƒобавление атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddAttribute (VertexAttributeSemantic semantic, VertexAttributeType type, size_t offset); //return: индекс вершинного атрибута

///////////////////////////////////////////////////////////////////////////////////////////////////
///”даление атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RemoveAttribute (size_t position); //nothrow
    void RemoveAttribute (VertexAttributeSemantic); //nothrow
    void Clear (); //удаление всех атрибутов, nothrow

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕоиск атрибута по семантике
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexAttribute* FindAttribute (VertexAttributeSemantic) const; //nothrow
          VertexAttribute* FindAttribute (VertexAttributeSemantic); //nothrow

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕолучение минимального размера вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetMinimalVertexSize () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///ќбмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (VertexFormat&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///—равнение
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const VertexFormat&) const;
    bool operator != (const VertexFormat&) const;

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///ќбмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (VertexFormat&, VertexFormat&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕолучение характеристик
///////////////////////////////////////////////////////////////////////////////////////////////////
size_t      get_size           (VertexAttributeType);     //размер типа атрибута вершин в байтах
size_t      get_components_num (VertexAttributeType);     //количество компонентов
const char* get_semantic_name  (VertexAttributeSemantic); //им€ семантики
const char* get_type_name      (VertexAttributeType);     //им€ типа

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕолучение формата вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Vertex>
const VertexFormat& get_vertex_format ();

#include <media/mesh/detail/vertex_format.inl>

}

#endif
