#ifndef MEDIALIB_IMAGE_HEADER
#define MEDIALIB_IMAGE_HEADER

#include <stl/memory> // в будущем design/pointer.h
#include <tr1/functional_fwd>

namespace medialib
{

//implementation forwards
class ImageImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Формат пикселей
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ImagePixelFormat
{
  PF_DEFAULT,
  PF_RGB8,
  PF_RGB16,
  PF_BGR8,
  PF_RGBA8,
  PF_RGBA16,
  PF_BGRA8,
  PF_L8,
  PF_A8,
  PF_LA8  
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слои кубической карты
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ImageCubemapLayer
{
  CUBEMAP_POS_X,
  CUBEMAP_NEG_X,
  CUBEMAP_POS_Y,
  CUBEMAP_NEG_Y,
  CUBEMAP_POS_Z,
  CUBEMAP_NEG_Z
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Картинка
//////////////////////////////////////////////////////////////////////////////////////////////////
class Image
{
  public:
             Image  ();
             Image  (const Image& source);
             Image  (const Image& source,ImagePixelFormat format);
             Image  (size_t width,size_t height,size_t depth,ImagePixelFormat format,const void* data=0);
    explicit Image  (stl::auto_ptr <ImageImpl>&);
    explicit Image  (const char* file_name);
             ~Image ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / сохранение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);
    void Save (const char* file_name,ImagePixelFormat format=PF_DEFAULT);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработчики загрузки/сохранения по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void DefaultLoader (const char* file_name, Image& img);
    static void DefaultSaver  (const char* file_name, const Image& img, ImagePixelFormat format);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Image& operator = (const Image&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* new_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Формат данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    ImagePixelFormat Format () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Преобразование формата
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Convert (ImagePixelFormat new_format);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Width  () const;
    size_t Height () const;
    size_t Depth  () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение размера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Resize (size_t width,size_t height,size_t depth);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с образом картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void*       Bitmap (size_t z=0);
    const void* Bitmap (size_t z=0) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование образа с автоматическим преобразованием формата
///////////////////////////////////////////////////////////////////////////////////////////////////          
    void PutImage (size_t x,size_t y,size_t z,size_t width,size_t height,size_t depth,ImagePixelFormat format,const void* data);
    void GetImage (size_t x,size_t y,size_t z,size_t width,size_t height,size_t depth,ImagePixelFormat format,void* data) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Image&);

  private:
    Image (ImageImpl*);

    stl::auto_ptr<ImageImpl> impl;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
//////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Image&,Image&);

//////////////////////////////////////////////////////////////////////////////////////////////////
///Класс строящий многослойную картинку
//////////////////////////////////////////////////////////////////////////////////////////////////
class MultilayerImageBuilder
{
  public:
    MultilayerImageBuilder  ();
    MultilayerImageBuilder  (const MultilayerImageBuilder&);
    MultilayerImageBuilder  (const MultilayerImageBuilder& source,ImagePixelFormat format);
    MultilayerImageBuilder  (size_t width,size_t height,ImagePixelFormat format);
    ~MultilayerImageBuilder ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    MultilayerImageBuilder& operator = (const MultilayerImageBuilder&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество слоёв
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t LayersCount () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры слоёв
///////////////////////////////////////////////////////////////////////////////////////////////////    
    size_t           Width  () const;
    size_t           Height () const;
    ImagePixelFormat Format () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление слоёв
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t InsertLayer  (const Image& source);
    size_t InsertLayer  (const char* file_name);
    size_t InsertLayer  (size_t width,size_t height,ImagePixelFormat format,const void* data);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Захват картинки (без копирования). При любом результате выполнения операции source сбрасывается
///////////////////////////////////////////////////////////////////////////////////////////////////    
    size_t CaptureLayer (Image& source); //базовая гарантия безопасности

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление слоёв
///////////////////////////////////////////////////////////////////////////////////////////////////        
    void RemoveLayer     (size_t index);
    void RemoveAllLayers ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Построение многослойной картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Finish (Image&); //после выполнения MultilayerImageBuilder сбрасывается

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (MultilayerImageBuilder&);

  private:
    class Impl;

    MultilayerImageBuilder (stl::auto_ptr<Impl>&);

  private:
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (MultilayerImageBuilder&,MultilayerImageBuilder&);

class ImageSystem
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка пользовательской функции лога дебаг-сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef tr1::function<void (const char*)> DebugLogFunc;

    static void SetDebugLog (const DebugLogFunc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с пользовательскими функциями загрузки и сохранения
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef tr1::function<void (const char*,       Image&)>                   CodecLoadFunc;
    typedef tr1::function<void (const char*, const Image&, ImagePixelFormat)> CodecSaveFunc;

    static bool RegisterLoadCodec   (const char* extension, const CodecLoadFunc& codec);  //возвращает true при успешной регистрации, и false, 
    static bool RegisterSaveCodec   (const char* extension, const CodecSaveFunc& codec);  //если такое расширение уже зарегестрировано
    static void UnRegisterLoadCodec (const char* extension);
    static void UnRegisterSaveCodec (const char* extension);
    static void UnRegisterAllCodecs ();
};

}

#endif
