#ifndef MEDIALIB_GEOMETRY_MESH_MODEL_HEADER
#define MEDIALIB_GEOMETRY_MESH_MODEL_HEADER

#include <media/geometry/mesh.h>
#include <xtl/functional_fwd>

namespace medialib
{

namespace geometry
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Модель, состоящая из набора мешей
///////////////////////////////////////////////////////////////////////////////////////////////////
class MeshModel
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    MeshModel  ();
    MeshModel  (const char* file_name);
    MeshModel  (const MeshModel&);
    ~MeshModel ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    MeshModel& operator = (const MeshModel&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя модели
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char*);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество мешей
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t MeshesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение мешей
///////////////////////////////////////////////////////////////////////////////////////////////////
          geometry::Mesh& Mesh (size_t index);
    const geometry::Mesh& Mesh (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение мешей
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Attach    (geometry::Mesh&, CloneMode mode = CloneMode_Instance);
    void   Detach    (size_t index); //no throw
    void   DetachAll ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear () { DetachAll (); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / сохранение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);
    void Save (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (MeshModel&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (MeshModel&, MeshModel&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система управления мешами
///////////////////////////////////////////////////////////////////////////////////////////////////
class MeshSystem
{
  public:
    typedef xtl::function<void (const char*,       MeshModel&)> LoadHandler;
    typedef xtl::function<void (const char*, const MeshModel&)> SaveHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с пользовательскими функциями загрузки и сохранения
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterLoader   (const char* extension, const LoadHandler& loader);
    static void RegisterSaver    (const char* extension, const SaveHandler& saver);
    static void UnregisterLoader (const char* extension);
    static void UnregisterSaver  (const char* extension);
    static void UnregisterAll    ();  
};

}

}

#endif
