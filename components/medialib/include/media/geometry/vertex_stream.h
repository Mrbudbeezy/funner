#ifndef MEDIALIB_GEOMETRY_VERTEX_STREAM_HEADER
#define MEDIALIB_GEOMETRY_VERTEX_STREAM_HEADER

#include <media/geometry/defs.h>
#include <media/geometry/vertex_format.h>

namespace media
{

namespace geometry
{

//forward declarations
class VertexBuffer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объявление вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
class VertexDeclaration
{
  public:
    VertexDeclaration (const VertexFormat&);
    VertexDeclaration (const VertexFormat&, size_t vertex_size);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexFormat& Format     () const;
    size_t              VertexSize () const;

  private:
    const VertexFormat* format;
    size_t              vertex_size;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание объявления вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Vertex> VertexDeclaration make_vertex_declaration ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Массив вершинных атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
class VertexStream
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexStream  (const VertexDeclaration& declaration);
    VertexStream  (size_t vertices_count, const VertexDeclaration& declaration);
    VertexStream  (const VertexBuffer& source);
    VertexStream  (const VertexStream& source, const VertexDeclaration& declaration);
    VertexStream  (const VertexBuffer& source, const VertexDeclaration& declaration);
    VertexStream  (const VertexStream&, CloneMode mode = CloneMode_Default);
    ~VertexStream ();
    
    template <class Vertex> VertexStream (size_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexStream& operator = (const VertexStream&);
    VertexStream& operator = (const VertexBuffer&);
    void          Assign     (const VertexStream&, CloneMode mode = CloneMode_Default);    
    void          Assign     (const VertexBuffer&);
    void          Assign     (const VertexStream&, const VertexDeclaration& declaration);
    void          Assign     (const VertexBuffer&, const VertexDeclaration& declaration);

//////////////////////////////////////////////////////////////////////////////////////////////////
///Формат
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexFormat& Format () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размер вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t VertexSize () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    const void* Data () const;
          void* Data ();
          
    template <class Vertex> const Vertex* Data () const;
    template <class Vertex>       Vertex* Data ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество вершин
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size   () const;
    void   Resize (size_t vertices_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка массива
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Capacity () const;
    void   Reserve  (size_t vertices_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (VertexStream&);

  private:
    void Convert (const VertexStream&);
    void Convert (const VertexBuffer&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (VertexStream&, VertexStream&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Массив вершинных весов
///////////////////////////////////////////////////////////////////////////////////////////////////
class VertexWeightStream
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexWeightStream  ();
    VertexWeightStream  (size_t weights_count);
    VertexWeightStream  (const VertexWeightStream&, CloneMode mode = CloneMode_Default);
    ~VertexWeightStream ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexWeightStream& operator = (const VertexWeightStream&);
    void                Assign     (const VertexWeightStream&, CloneMode mode = CloneMode_Default);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexWeight* Data () const;
          VertexWeight* Data ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество вершин
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size   () const;
    void   Resize (size_t weights_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка массива
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Capacity () const;
    void   Reserve  (size_t weights_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (VertexWeightStream&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (VertexWeightStream&, VertexWeightStream&);

#include <media/geometry/detail/vertex_stream.inl>

}

}

#endif
