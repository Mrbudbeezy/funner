#ifndef MEDIALIB_GEOMETRY_VERTEX_BUFFER_HEADER
#define MEDIALIB_GEOMETRY_VERTEX_BUFFER_HEADER

#include <media/geometry/vertex_stream.h>

namespace medialib
{

namespace geometry
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вершинный буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class VertexBuffer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexBuffer  ();
    VertexBuffer  (const VertexBuffer&, BufferCloneMode mode = BufferCloneMode_Default);
    ~VertexBuffer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          Assign     (const VertexBuffer&, BufferCloneMode mode = BufferCloneMode_Default);
    VertexBuffer& operator = (const VertexBuffer&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество массивов вершинных атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t StreamsCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение массива
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexStream& Stream (size_t index) const;
          VertexStream& Stream (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение массива весов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexWeightStream& Weights () const;
          VertexWeightStream& Weights ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение/отсоединение массивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Attach        (VertexStream&, BufferCloneMode mode = BufferCloneMode_Instance); //return: индекс массива
    void   Detach        (size_t index); //nothrow
    void   AttachWeights (VertexWeightStream&, BufferCloneMode mode = BufferCloneMode_Instance);
    void   DetachWeights ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество вершин (минимум среди всех вершинных массивов)
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t VerticesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Суммарный размер вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t VertexSize () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (VertexBuffer&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (VertexBuffer&, VertexBuffer&);

}

}

#endif
