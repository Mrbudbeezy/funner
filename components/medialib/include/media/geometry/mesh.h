#ifndef MEDIALIB_GEOMETRY_MESH_HEADER
#define MEDIALIB_GEOMETRY_MESH_HEADER

#include <media/geometry/vertex_buffer.h>
#include <media/geometry/index_buffer.h>
#include <xtl/functional_fwd>

namespace media
{

namespace geometry
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum PrimitiveType
{
  PrimitiveType_LineList,      //список отрезков
  PrimitiveType_LineStrip,     //цепочка отрезков
  PrimitiveType_TriangleList,  //список треугольников
  PrimitiveType_TriangleStrip, //цепочка треугольников
  PrimitiveType_TriangleFan,   //вейер треугольников
  
  PrimitiveType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение характеристик
///////////////////////////////////////////////////////////////////////////////////////////////////
const char* get_type_name    (PrimitiveType); //имя типа примитива
size_t      get_points_count (PrimitiveType, size_t primitivies_count=1); //количество точек

//получение типа примитива по имени
PrimitiveType get_primitive_type (const char* name, PrimitiveType default_type = PrimitiveType_Num);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Примитив
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Primitive
{
  PrimitiveType type;     //тип примитива
  size_t        first;    //индекс первой вершины/индекса
  size_t        count;    //количество примитивов
  const char*   material; //имя материала
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Меш
///////////////////////////////////////////////////////////////////////////////////////////////////
class Mesh
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Mesh  ();
    Mesh  (const Mesh&, CloneMode = CloneMode_Default);
    ~Mesh ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Mesh& operator = (const Mesh&);
    void  Assign     (const Mesh&, CloneMode mode = CloneMode_Default);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор меша (уникальный)
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя меша
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буферы
///////////////////////////////////////////////////////////////////////////////////////////////////
    const geometry::VertexBuffer& VertexBuffer () const;
          geometry::VertexBuffer& VertexBuffer ();
    const geometry::IndexBuffer&  IndexBuffer  () const;
          geometry::IndexBuffer&  IndexBuffer  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Статистика: количество вершин/индексов/весов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t VerticesCount () const;
    size_t IndicesCount  () const;
    size_t WeightsCount  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение/отсоединение буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (geometry::VertexBuffer&, CloneMode mode = CloneMode_Instance);
    void Attach (geometry::IndexBuffer&, CloneMode mode = CloneMode_Instance);

    void DetachVertexBuffer ();
    void DetachIndexBuffer  ();
    void DetachAllBuffers   (); //отсоединение всех буферов

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество примитивов / доступ к примитивам
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t           PrimitivesCount () const;
    const Primitive& Primitive       (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление примитивов примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddPrimitive        (PrimitiveType type, size_t first, size_t count, const char* material); //return: индекс примитива
    void   RemovePrimitive     (size_t primitive_index);
    void   RemoveAllPrimitives ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка меша
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Mesh&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Mesh&, Mesh&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка корректности меша
///////////////////////////////////////////////////////////////////////////////////////////////////
bool check (const Mesh&, const xtl::function<void (const char*)>& log_fn);
bool check (const Mesh&, size_t joints_count, const xtl::function<void (const char*)>& log_fn);

}

}

#endif
