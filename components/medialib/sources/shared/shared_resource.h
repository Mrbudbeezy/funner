#ifndef MEDIALIB_SHARED_RESOURCE_INTERNAL_HEADER
#define MEDIALIB_SHARED_RESOURCE_INTERNAL_HEADER

#include <media/clone_mode.h>
#include <common/exception.h>

namespace media
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование / освобождение ресурса
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> T*   clone_resource   (T* resource, CloneMode mode, const char* source);
template <class T> void release_resource (T* resource);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Совместно используемый ресурс
///////////////////////////////////////////////////////////////////////////////////////////////////
class SharedResource 
{ 
  template <class T> friend T*   clone_resource   (T*, CloneMode, const char*);
  template <class T> friend void release_resource (T*);
  public:
    SharedResource ();
    SharedResource (const SharedResource&);

  private:
    SharedResource& operator = (const SharedResource&); //no impl

  private:  
    size_t ref_count; //счётчик ссылок
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаг, сигнализируюий о необходимости копирования ресурса
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ForceCloneFlag
{
  ForceClone
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обёртка для хранения совместно используемых ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class SharedResourceHolder
{
  public:
    typedef T ResourceType;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
    SharedResourceHolder (CloneMode mode = CloneMode_Default);
    SharedResourceHolder (const T&, CloneMode mode);
    SharedResourceHolder (const SharedResourceHolder&);
    SharedResourceHolder (const SharedResourceHolder&, ForceCloneFlag);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    SharedResourceHolder& operator = (const SharedResourceHolder&);
    void                  Assign     (const T&, CloneMode mode);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим копирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    media::CloneMode CloneMode () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Хранимый ресурс
///////////////////////////////////////////////////////////////////////////////////////////////////
    const ResourceType& Resource () const;
          ResourceType& Resource ();
          
  private:
    static void CheckMode (media::CloneMode mode, const char* source);

  private:
    T                resource;
    media::CloneMode clone_mode;
};

#include <shared/detail/shared_resource.inl>

}

#endif
