#ifndef MEDIALIB_RESOURCE_LIBRARY_HEADER
#define MEDIALIB_RESOURCE_LIBRARY_HEADER

#include <xtl/function.h>
#include <xtl/iterator.h>
#include <stl/hash_map>
#include <stl/string>
#include <media/clone.h>
#include <shared/resource_holder.h>
#include <common/exception.h>

namespace media
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class ResourceLibrary
{
  public:
    typedef T                         Item;
    typedef xtl::iterator<Item>       Iterator;
    typedef xtl::iterator<const Item> ConstIterator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    ResourceLibrary  ();
    ResourceLibrary  (const ResourceLibrary&);
    ~ResourceLibrary ();

    ResourceLibrary& operator = (const ResourceLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество элементов / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size    () const;
    bool   IsEmpty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      CreateIterator      ();
    ConstIterator CreateConstIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени ресурса по итератору
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const char* ItemId (const Iterator&);
    static const char* ItemId (const ConstIterator&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск элемента в библиотеке
///////////////////////////////////////////////////////////////////////////////////////////////////
          Item* Find (const char* name);
    const Item* Find (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление элементов из библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Insert (const char* name, Item& item, CloneMode mode = CloneMode_Instance);
    void Remove (const char* name);
    void Remove (Item&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (ResourceLibrary&);

  private:
    typedef stl::hash_map<stl::string, ResourceHolder<Item> > ItemMap;
   
  private:
    ItemMap items; //элементы данной библиотеки
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
void swap (ResourceLibrary<T>&, ResourceLibrary<T>&);

#include <shared/detail/resource_library.inl>

}

#endif
