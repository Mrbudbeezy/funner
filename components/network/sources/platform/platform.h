#ifndef NETWORK_PLATFORM_HEADER
#define NETWORK_PLATFORM_HEADER

#include <network/socket.h>

namespace network
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сокет
///////////////////////////////////////////////////////////////////////////////////////////////////
class SocketImpl
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Адреса сторон
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const SocketAddress& LocalAddress  () = 0;
    virtual const SocketAddress& RemoteAddress () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Протокол
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual SocketProtocol Protocol () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Закрытие каналов передачи данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool IsReceiveClosed () = 0;
    virtual bool IsSendClosed    () = 0;
    virtual void CloseReceive    () = 0;
    virtual void CloseSend       () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Соединение
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Bind    (const SocketAddress& address) = 0;
    virtual void Connect (const SocketAddress& address, size_t timeout) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Приём соединений
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void        Listen () = 0;
    virtual SocketImpl* Accept () = 0;
    virtual SocketImpl* TryAccept () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги сокета
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool IsConnected     () = 0;      //установлена ли связь
    virtual bool IsBound         () = 0;      //привязан ли сокет
    virtual bool IsKeepAlive     () = 0;      //установлен ли флаг SO_KEEPALIVE
    virtual bool IsOobInline     () = 0;      //установлен ли флаг OOBINLINE
    virtual bool IsReuseAddress  () = 0;      //установлен ли флаг SO_REUSEADDR
    virtual bool IsTcpNoDelay    () = 0;      //установлен ли флаг TCP_NODELAY
    virtual void SetKeepAlive    (bool state) = 0;
    virtual void SetOobInline    (bool state) = 0;
    virtual void SetReuseAddress (bool state) = 0;
    virtual void SetTcpNoDelay   (bool state) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры сокета
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void   SetReceiveBufferSize (size_t size) = 0;
    virtual void   SetSendBufferSize    (size_t size) = 0;
    virtual size_t ReceiveBufferSize    () = 0;
    virtual size_t SendBufferSize       () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение / запись данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Receive (void* buffer, size_t size, size_t timeout_in_milliseconds) = 0;
    virtual size_t Send    (const void* buffer, size_t size, size_t timeout_in_milliseconds) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество байт доступных для чтения без блокировки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t ReceiveAvailable () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~SocketImpl () {}
};

/*
    Платформо-зависимые интерфейсы
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Платформа Win32
///////////////////////////////////////////////////////////////////////////////////////////////////
class Win32Platform
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение ip-адреса по имени хоста
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void GetAddressByHostName (const char* host_name, size_t& address_size, unsigned char (&address) [16]);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание сокета
///////////////////////////////////////////////////////////////////////////////////////////////////
    static SocketImpl* CreateSocket (SocketDomain socket_domain, SocketProtocol protocol);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Unistd
///////////////////////////////////////////////////////////////////////////////////////////////////
class UnistdPlatform
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение ip-адреса по имени хоста
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void GetAddressByHostName (const char* host_name, size_t& address_size, unsigned char (&address) [16]);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание сокета
///////////////////////////////////////////////////////////////////////////////////////////////////
    static SocketImpl* CreateSocket (SocketDomain socket_domain, SocketProtocol protocol);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Указание текущей платформы
///////////////////////////////////////////////////////////////////////////////////////////////////
#ifdef _WIN32
  typedef Win32Platform Platform;
#elif defined __GNUC__
  typedef UnistdPlatform Platform;
#else
  #error Unknown compiler
#endif

}

#endif
