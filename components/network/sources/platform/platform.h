#ifndef NETWORK_PLATFORM_HEADER
#define NETWORK_PLATFORM_HEADER

namespace network
{

/*
    Платформо-зависимые интерфейсы
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Платформа Win32
///////////////////////////////////////////////////////////////////////////////////////////////////
class Win32Platform
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение ip-адреса по имени хоста
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void GetAddressByHostName (const char* host_name, size_t& address_size, unsigned char (&address) [16]);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Unistd
///////////////////////////////////////////////////////////////////////////////////////////////////
class UnistdPlatform
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение ip-адреса по имени хоста
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void GetAddressByHostName (const char* host_name, size_t& address_size, unsigned char (&address) [16]);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Указание текущей платформы
///////////////////////////////////////////////////////////////////////////////////////////////////
#ifdef _WIN32
  typedef Win32Platform Platform;
#elif defined __GNUC__
  typedef UnistdPlatform Platform;
#else
  #error Unknown compiler
#endif

}

#endif
