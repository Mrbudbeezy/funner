#ifndef NETWORK_TCP_CLIENT_HEADER
#define NETWORK_TCP_CLIENT_HEADER

#include <network/socket_address.h>

namespace network
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Простой клиент TCP
///////////////////////////////////////////////////////////////////////////////////////////////////
class TcpClient
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    TcpClient  ();
    TcpClient  (const SocketAddress& address, size_t timeout_in_milliseconds = 0, bool tcp_no_delay = false);
    TcpClient  (const InetAddress& address, unsigned short port, size_t timeout_in_milliseconds = 0, bool tcp_no_delay = false);
    TcpClient  (const TcpClient&);
    ~TcpClient ();

    TcpClient& operator = (const TcpClient&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Соединение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Connect (const SocketAddress& address, size_t timeout_in_milliseconds = 0, bool tcp_no_delay = false);
    void Connect (const InetAddress& address, unsigned short port, size_t timeout_in_milliseconds = 0, bool tcp_no_delay = false);
    void Close   ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Передача данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Send (const void* buffer, size_t size);
    void Send (const char* string);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Приём данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Receive        (void* buffer, size_t size, size_t timeout_in_milliseconds = 0);
    bool   ReceiveExactly (void* buffer, size_t size, size_t timeout_in_milliseconds = 0);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество байт доступных для чтения без блокировки
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t ReceiveAvailable () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры сокета
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetReceiveBufferSize (size_t size);
    void   SetSendBufferSize    (size_t size);
    size_t ReceiveBufferSize    () const;
    size_t SendBufferSize       () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги сокета
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsClosed      () const;      //закрыт ли сокет
    bool IsConnected   () const;      //установлена ли связь
    bool IsTcpNoDelay  () const;      //установлен ли флаг TCP_NODELAY
    void SetTcpNoDelay (bool state);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Асинхронный режим
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsAsyncSendingEnabled   () const;
    bool IsAsyncReceivingEnabled () const;
    void SwitchToAsyncReceiving  () const;
    void SwitchToAsyncSending    () const;

    typedef xtl::function<void (const void* buffer, size_t size)> AsyncReceivingHandler;

    xtl::connection RegisterAsyncReceivingEventHandler (const AsyncReceivingHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (TcpClient&);
  
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (TcpClient&, TcpClient&);

}

#endif
