#ifndef NETWORK_SOCKET_HEADER
#define NETWORK_SOCKET_HEADER

#include <network/socket_address.h>

namespace network
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Протокол, используемый при работе с сокетом
///////////////////////////////////////////////////////////////////////////////////////////////////
enum SocketProtocol
{
  SocketProtocol_Tcp, //TCP
  SocketProtocol_Udp, //UDP
  
  SocketProtocol_Default = SocketProtocol_Tcp
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сокет
///////////////////////////////////////////////////////////////////////////////////////////////////
class Socket
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Socket  ();
    Socket  (const InetAddress& inet_address, unsigned short port, SocketProtocol protocol = SocketProtocol_Default);
    Socket  (const SocketAddress& socket_address, SocketProtocol protocol = SocketProtocol_Default);
    Socket  (const Socket&);
    ~Socket ();    
    
    Socket& operator = (const Socket&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Закрытие сокета
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Close ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Адреса сторон
///////////////////////////////////////////////////////////////////////////////////////////////////
    const SocketAddress& LocalAddress  () const;
    const SocketAddress& RemoteAddress () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Протокол
///////////////////////////////////////////////////////////////////////////////////////////////////
    SocketProtocol Protocol () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Закрытие каналов передачи данных
///////////////////////////////////////////////////////////////////////////////////////////////////    
    bool IsReceiveClosed () const;
    bool IsSendClosed    () const;
    void CloseReceive    ();
    void CloseSend       ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Соединение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind    (const SocketAddress& address);
    void Connect (const SocketAddress& address, size_t timeout = 0);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги сокета
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsClosed        () const;      //закрыт ли сокет
    bool IsConnected     () const;      //установлена ли связь
    bool IsBound         () const;      //привязан ли сокет
    bool IsKeepAlive     () const;      //установлен ли флаг SO_KEEPALIVE
    bool IsOobInline     () const;      //установлен ли флаг OOBINLINE
    bool IsReuseAddress  () const;      //установлен ли флаг SO_REUSEADDR
    bool IsTcpNoDelay    () const;      //установлен ли флаг TCP_NODELAY
    void SetKeepAlive    (bool state);
    void SetOobInline    (bool state);
    void SetReuseAddress (bool state);
    void SetTcpNoDelay   (bool state);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры сокета
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetReceiveBufferSize (size_t size);
    void   SetSendBufferSize    (size_t size);
    size_t ReceiveBufferSize    () const;
    size_t SendBufferSize       () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение / запись данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Receive (void* buffer, size_t size, size_t timeout_in_milliseconds = 0);
    size_t Send    (const void* buffer, size_t size, size_t timeout_in_milliseconds = 0);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество байт доступных для чтения без блокировки
///////////////////////////////////////////////////////////////////////////////////////////////////    
    size_t ReceiveAvailable () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Socket&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Socket&, Socket&);

}

#endif
