#ifndef NETWORK_URL_HEADER
#define NETWORK_URL_HEADER

namespace network
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///URL
///////////////////////////////////////////////////////////////////////////////////////////////////
class Url
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Url  (const char* spec);
    Url  (const char* protocol, const char* host_name, int port, const char* file);
    Url  (const char* protocol, const char* host_name, const char* file);
    Url  (const Url&);
    ~Url ();

    Url& operator = (const Url&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры URL
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Authority () const;
    const char* Host      () const;
    int         Port      () const;
    const char* File      () const;
    const char* Query     () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление параметров запроса
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetRequestProperty         (const char* key, const char* value);
    const char* GetRequestProperty         (const char* key) const;
    void        RemoveRequestProperty      (const char* key);
    void        RemoveAllRequestProperties ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Приведение к строке
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ToString () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение двух URL
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const Url&) const;
    bool operator != (const Url&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Url&);
  
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void Swap (Url&, Url&);

}

#endif
