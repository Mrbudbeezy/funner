#ifndef NETWORK_URL_CONNECTION_HEADER
#define NETWORK_URL_CONNECTION_HEADER

#include <network/url.h>

namespace network
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Соединение для обмена URL ресурсами
///////////////////////////////////////////////////////////////////////////////////////////////////
class UrlConnection
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    UrlConnection  ();
    UrlConnection  (const network::Url&);
    UrlConnection  (const UrlConnection&);
    ~UrlConnection ();
    
    UrlConnection& operator = (const UrlConnection&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор ресурса
///////////////////////////////////////////////////////////////////////////////////////////////////
    const network::Url& Url () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Закрытие соединения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Close    ();
    bool IsClosed () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры содержимого
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      ContentLength   () const;
    const char* ContentEncoding () const;
    const char* ContentType     () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение / запись данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Receive (void* buffer, size_t size, size_t timeout_in_milliseconds = 0);
    size_t Send    (const void* buffer, size_t size, size_t timeout_in_milliseconds = 0);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество байт доступных для чтения без блокировки
///////////////////////////////////////////////////////////////////////////////////////////////////    
    size_t ReceiveAvailable () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (UrlConnection&);
  
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (UrlConnection&, UrlConnection&);


}

#endif
