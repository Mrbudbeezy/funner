#ifndef NETWORK_URL_CONNECTION_HEADER
#define NETWORK_URL_CONNECTION_HEADER

#include <xtl/functional_fwd>

#include <network/url.h>

namespace network
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Соединение для обмена URL ресурсами
///////////////////////////////////////////////////////////////////////////////////////////////////
class UrlConnection
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    UrlConnection  ();
    UrlConnection  (const network::Url& url, const char* params = "");
    UrlConnection  (const UrlConnection&);
    ~UrlConnection ();
    
    UrlConnection& operator = (const UrlConnection&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор ресурса
///////////////////////////////////////////////////////////////////////////////////////////////////
    const network::Url& Url () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Закрытие соединения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Close    ();
    bool IsClosed () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Закрытие каналов передачи данных
///////////////////////////////////////////////////////////////////////////////////////////////////    
    bool IsReceiveClosed () const;
    bool IsSendClosed    () const;
    void CloseReceive    ();
    void CloseSend       ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры содержимого
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      ContentLength   () const;
    const char* ContentEncoding () const;
    const char* ContentType     () const;
    const char* Status          () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение / запись данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Receive (void* buffer, size_t size);
    size_t Send    (const void* buffer, size_t size);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры окна приёма / передачи
///////////////////////////////////////////////////////////////////////////////////////////////////    
    size_t ReceiveAvailable () const; //количество байт доступных для чтения без блокировки
    size_t ReceivedDataSize () const; //общее число полученных байт
    size_t SendDataSize     () const; //общее число переданных байт

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (UrlConnection&);
  
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (UrlConnection&, UrlConnection&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///HTTP post request
///////////////////////////////////////////////////////////////////////////////////////////////////
class HttpPostConnection: public UrlConnection
{
  public:
    HttpPostConnection (const network::Url& url, size_t send_data_size);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поток URL соединения
///////////////////////////////////////////////////////////////////////////////////////////////////
class IUrlStream
{
  public:
    virtual ~IUrlStream () {}
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры потока
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t      GetContentLength   () = 0;
    virtual const char* GetContentEncoding () = 0;
    virtual const char* GetContentType     () = 0;
    virtual const char* GetStatus          () = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработчик обратной связи потока URL соединения
///////////////////////////////////////////////////////////////////////////////////////////////////
  class IListener
  {
    public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработка данных
///////////////////////////////////////////////////////////////////////////////////////////////////
      virtual void   WriteReceivedData (const void* buffer, size_t size) = 0;
      virtual size_t ReadSendData      (void* buffer, size_t size) = 0; //returns 0 - eof
      virtual void   FinishReceiveData () = 0;

    protected:
      virtual ~IListener () {}
  };
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер URL потоков
///////////////////////////////////////////////////////////////////////////////////////////////////
class UrlStreamManager
{
  public:
    typedef xtl::function<IUrlStream* (const char* url, const char* params, IUrlStream::IListener& stream)> StreamCreator;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация обработчиков URL запросов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterStreamCreator       (const char* url_wcmask, const StreamCreator& creator);
    static void UnregisterStreamCreator     (const char* url_wcmask);
    static void UnregisterAllStreamCreators ();
};

}

#endif
