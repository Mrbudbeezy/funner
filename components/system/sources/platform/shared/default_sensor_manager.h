#ifndef SYSLIB_DEFAULT_SENSOR_MANAGER_HEADER
#define SYSLIB_DEFAULT_SENSOR_MANAGER_HEADER

#include <syslib/sensor.h>

namespace syslib
{

struct sensor_handle;

typedef sensor_handle* sensor_t;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер сенсоров по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
class DefaultSensorManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество сенсоров
///////////////////////////////////////////////////////////////////////////////////////////////////
    static size_t GetSensorsCount ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание / удаление сенсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    static sensor_t CreateSensor  (size_t sensor_index);
    static void     DestroySensor (sensor_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя сенсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const char* GetSensorName (sensor_t);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Производитель сенсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const char* GetSensorVendor (sensor_t);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const char* GetSensorType (sensor_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Максимальное значение
///////////////////////////////////////////////////////////////////////////////////////////////////
    static float GetSensorMaxRange (sensor_t);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Частота обновления
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void  SetSensorUpdateRate (sensor_t, float rate);
    static float GetSensorUpdateRate (sensor_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение платформо-зависимого дескриптора экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const void* GetNativeSensorHandle (sensor_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение платформо-зависимых свойств экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void GetSensorProperties (sensor_t, common::PropertyMap& properties);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение событий сенсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void StartSensorPolling (sensor_t);
    static void StopSensorPolling  (sensor_t);
    static bool PollSensorEvent    (sensor_t, SensorEvent&);
};

}

#endif
