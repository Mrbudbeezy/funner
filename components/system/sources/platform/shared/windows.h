#ifndef SYSLIB_WINDOWS_PLATFORM_HEADER
#define SYSLIB_WINDOWS_PLATFORM_HEADER

#include <shared/default_cookie_manager.h>
#include <shared/default_screen_manager.h>
#include <shared/default_screen_keyboard_manager.h>
#include <shared/default_sensor_manager.h>
#include <shared/default_window_manager.h>
#include <shared/default_library_manager.h>
#include <shared/default_timer_manager.h>
#include <shared/default_application_manager.h>
#include <shared/default_thread_manager.h>
#include <shared/pthread_manager.h>

#ifdef LoadLibrary
#undef LoadLibrary
#endif

namespace syslib
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оконный менеджер Windows
///////////////////////////////////////////////////////////////////////////////////////////////////
class WindowsWindowManager: public DefaultWindowManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание/закрытие/уничтожение окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef void (*WindowMessageHandler)(window_t, WindowEvent, const WindowEventContext&, void* user_data);

    static window_t CreateWindow  (WindowStyle, WindowMessageHandler, const void* parent_handle, const char* init_string, void* user_data, const wchar_t* custom_class_name = 0);
    static void     CloseWindow   (window_t);
    static void     DestroyWindow (window_t);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Попытка изменения стиля окна (может быть проигнорирована)
///////////////////////////////////////////////////////////////////////////////////////////////////
    static bool ChangeWindowStyle (window_t, WindowStyle);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение платформо-зависимого дескриптора окна и дисплея
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const void* GetNativeWindowHandle  (window_t);
    static const void* GetNativeDisplayHandle (window_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Заголовок окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetWindowTitle (window_t, const wchar_t* title);
    static void GetWindowTitle (window_t, size_t buffer_size_in_chars, wchar_t* buffer);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область окна / клиентская область
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetWindowRect (window_t, const Rect&);
    static void SetClientRect (window_t, const Rect&);
    static void GetWindowRect (window_t, Rect&);
    static void GetClientRect (window_t, Rect&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка флагов окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetWindowFlag (window_t, WindowFlag flag, bool state);
    static bool GetWindowFlag (window_t, WindowFlag flag);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка родительского окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void        SetParentWindowHandle (window_t child, const void* parent_handle);
    static const void* GetParentWindowHandle (window_t child);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void InvalidateWindow (window_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Положение курсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void  SetCursorPosition (const Point& position);
    static Point GetCursorPosition ();
    static void  SetCursorPosition (window_t, const Point& client_position); //в клиентских координатах окна
    static Point GetCursorPosition (window_t);                               //в клиентских координатах окна

///////////////////////////////////////////////////////////////////////////////////////////////////
///Видимость курсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetCursorVisible (window_t, bool state);
    static bool GetCursorVisible (window_t);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Изображение курсора
///////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef WINCE
    static cursor_t CreateCursor  (const char* name, int hotspot_x, int hotspot_y); //hotspot_x/hotspot_y = -1 - default value
    static void     DestroyCursor (cursor_t);
    static void     SetCursor     (window_t window, cursor_t cursor);
#endif
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение multitouch режима
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetMultitouchEnabled (window_t window, bool state);
    static bool IsMultitouchEnabled  (window_t window);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет фона
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void  SetBackgroundColor (window_t window, const Color& color);
    static void  SetBackgroundState (window_t window, bool state);
    static Color GetBackgroundColor (window_t window);
    static bool  GetBackgroundState (window_t window);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени клавиши
///////////////////////////////////////////////////////////////////////////////////////////////////
    static size_t GetKeyName (ScanCode scan_code, size_t buffer_size, char* buffer); //возвращается длина строки без учёта '\0'

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание/уничтожение web-view
///////////////////////////////////////////////////////////////////////////////////////////////////
    static web_view_t CreateWebView  (IWebViewListener*);
    static void       DestroyWebView (web_view_t);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединенное окно
///////////////////////////////////////////////////////////////////////////////////////////////////  
    static window_t GetWindow (web_view_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void LoadRequest (web_view_t, const char* uri);
    static void LoadData    (web_view_t, const char* data, size_t data_size, const char* mime_type, const char* encoding, const char* base_url);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перезагрузка страницы / остановка загрузки / проверка наличия загрузки
///////////////////////////////////////////////////////////////////////////////////////////////////    
    static void Reload      (web_view_t);
    static void StopLoading (web_view_t);
    static bool IsLoading   (web_view_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Средства навигации
///////////////////////////////////////////////////////////////////////////////////////////////////
    static bool CanGoBack    (web_view_t);
    static bool CanGoForward (web_view_t);
    static void GoBack       (web_view_t);
    static void GoForward    (web_view_t);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер нитей Windows
///////////////////////////////////////////////////////////////////////////////////////////////////
class WindowsThreadManager: public DefaultThreadManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание / удаление нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    static thread_t CreateThread  (IThreadCallback*);
    static void     DestroyThread (thread_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ожидание завершения нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void JoinThread (thread_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение идентификатора нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    static size_t GetThreadId        (thread_t thread);
    static size_t GetCurrentThreadId ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка приоритета нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetThreadPriority (thread_t thread, ThreadPriority thread_priority);
    static void SetThreadAffinity (thread_t thread, size_t affinity);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с локальными данными нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    static tls_t CreateTls  (IThreadCleanupCallback* cleanup);
    static void  DestroyTls (tls_t tls);
    static void  SetTls     (tls_t tls, void* data);
    static void* GetTls     (tls_t tls);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с исключающими семафорами
///////////////////////////////////////////////////////////////////////////////////////////////////
    static mutex_t CreateMutex  ();
    static void    DestroyMutex (mutex_t);
    static void    LockMutex    (mutex_t);
    static bool    LockMutex    (mutex_t, size_t wait_in_milliseconds);
    static bool    TryLockMutex (mutex_t);
    static void    UnlockMutex  (mutex_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с семафорами
///////////////////////////////////////////////////////////////////////////////////////////////////
    static semaphore_t CreateSemaphore   (size_t initial_count);
    static void        DestroySemaphore  (semaphore_t);
    static void        WaitSemaphore     (semaphore_t);
    static bool        WaitSemaphore     (semaphore_t, size_t wait_in_milliseconds);
    static bool        TryWaitSemaphore  (semaphore_t);
    static void        PostSemaphore     (semaphore_t);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с условиями
///////////////////////////////////////////////////////////////////////////////////////////////////
    static condition_t CreateCondition    ();
    static void        DestroyCondition   (condition_t);
    static void        WaitCondition      (condition_t, mutex_t);
    static bool        WaitCondition      (condition_t, mutex_t, size_t wait_in_milliseconds);
    static void        NotifyCondition    (condition_t, bool broadcast);  
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер библиотек Windows
///////////////////////////////////////////////////////////////////////////////////////////////////
class WindowsLibraryManager: public DefaultLibraryManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка динамических библиотек
///////////////////////////////////////////////////////////////////////////////////////////////////
    static dll_t LoadLibrary   (const wchar_t* name);
    static void  UnloadLibrary (dll_t);
    static void* GetSymbol     (dll_t, const char* symbol_name);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер таймеров Windows
///////////////////////////////////////////////////////////////////////////////////////////////////
class WindowsTimerManager: public DefaultTimerManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание / уничтожение таймера
///////////////////////////////////////////////////////////////////////////////////////////////////
    static timer_t CreateTimer (size_t period_in_milliseconds, TimerHandler, void* user_data);
    static void    KillTimer   (timer_t handle);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер приложения Windows
///////////////////////////////////////////////////////////////////////////////////////////////////
class WindowsApplicationManager: public DefaultApplicationManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Приостановка выполнения нити на miliseconds милисекунд
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Sleep (size_t miliseconds);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Открытие URL во внешнем браузере
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void OpenUrl (const char* url);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение значения переменной окружения
///////////////////////////////////////////////////////////////////////////////////////////////////
    static stl::string GetEnvironmentVariable (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с очередью сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static IApplicationDelegate* CreateDefaultApplicationDelegate ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление энергосбережением
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetScreenSaverState (bool state);
    static bool GetScreenSaverState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработка системных сообщений нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void ProcessThreadMessages ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Экранный менеджер Windows
///////////////////////////////////////////////////////////////////////////////////////////////////
class WindowsScreenManager: public DefaultScreenManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление экранов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static size_t GetScreensCount ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание / удаление экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    static screen_t CreateScreen  (size_t screen_index);
    static void     DestroyScreen (screen_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const char* GetScreenName (screen_t);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение списка видео-режимов экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    static size_t GetScreenModesCount (screen_t);
    static void   GetScreenMode       (screen_t, size_t mode_index, ScreenModeDesc& mode_desc);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего видео-режима экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetScreenCurrentMode (screen_t, const ScreenModeDesc&);
    static void GetScreenCurrentMode (screen_t, ScreenModeDesc&);
    static void GetScreenDefaultMode (screen_t, ScreenModeDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление гамма-коррекцией экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetScreenGammaRamp (screen_t, const Color3f table [256]);
    static void GetScreenGammaRamp (screen_t, Color3f table [256]);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск экрана вмещающего окно
///////////////////////////////////////////////////////////////////////////////////////////////////
    static screen_t FindContainingScreen (const void* native_window_handle);    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение платформо-зависимого дескриптора экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const void* GetNativeScreenHandle (screen_t);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение платформо-зависимых свойств экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void GetScreenProperties (screen_t, common::PropertyMap& properties);    
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Платформа
///////////////////////////////////////////////////////////////////////////////////////////////////
class WindowsPlatform
 : public WindowsWindowManager
#ifdef WINCE
 , public PThreadManager
#else
 , public WindowsThreadManager
#endif
 , public WindowsLibraryManager
 , public WindowsTimerManager
 , public WindowsApplicationManager
 , public WindowsScreenManager
 , public DefaultSensorManager
 , public DefaultCookieManager
 , public DefaultScreenKeyboardManager
{
};

}

#endif
