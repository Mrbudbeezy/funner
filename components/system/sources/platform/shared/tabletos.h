#ifndef SYSLIB_TABLET_OS_PLATFORM_HEADER
#define SYSLIB_TABLET_OS_PLATFORM_HEADER

#include <shared/unistd.h>

namespace syslib
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оконный менеджер Tablet OS
///////////////////////////////////////////////////////////////////////////////////////////////////
class TabletOsWindowManager: public DefaultWindowManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание/закрытие/уничтожение окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    static window_t CreateWindow  (WindowStyle, WindowMessageHandler, const void* parent_handle, const char* init_string, void* user_data);
    static void     CloseWindow   (window_t);
    static void     DestroyWindow (window_t);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение платформо-зависимого дескриптора окна и дисплея
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const void* GetNativeWindowHandle  (window_t);
    static const void* GetNativeDisplayHandle (window_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Заголовок окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetWindowTitle (window_t, const wchar_t* title);
    static void GetWindowTitle (window_t, size_t buffer_size_in_chars, wchar_t* buffer);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область окна / клиентская область
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetWindowRect (window_t, const Rect&);
    static void SetClientRect (window_t, const Rect&);
    static void GetWindowRect (window_t, Rect&);
    static void GetClientRect (window_t, Rect&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка флагов окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetWindowFlag (window_t, WindowFlag flag, bool state);
    static bool GetWindowFlag (window_t, WindowFlag flag);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка родительского окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void        SetParentWindowHandle (window_t child, const void* parent_handle);
    static const void* GetParentWindowHandle (window_t child);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void InvalidateWindow (window_t);    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение multitouch режима
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetMultitouchEnabled (window_t window, bool state);
    static bool IsMultitouchEnabled  (window_t window);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет фона
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void  SetBackgroundColor (window_t window, const Color& color);
    static void  SetBackgroundState (window_t window, bool state);
    static Color GetBackgroundColor (window_t window);
    static bool  GetBackgroundState (window_t window);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер приложения TabletOS
///////////////////////////////////////////////////////////////////////////////////////////////////
class TabletOsApplicationManager: public UnistdApplicationManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Открытие URL во внешнем браузере
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void OpenUrl (const char* url);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с очередью сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static IApplicationDelegate* CreateDefaultApplicationDelegate ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение платформо-зависимых свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void GetSystemProperties (common::PropertyMap&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление энергосбережением
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetScreenSaverState (bool state);
    static bool GetScreenSaverState ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер сенсоров по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
class TabletOsSensorManager: public DefaultSensorManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество сенсоров
///////////////////////////////////////////////////////////////////////////////////////////////////
    static size_t GetSensorsCount ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание / удаление сенсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    static sensor_t CreateSensor  (size_t sensor_index);
    static void     DestroySensor (sensor_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя сенсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    static stl::string GetSensorName (sensor_t);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Производитель сенсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    static stl::string GetSensorVendor (sensor_t);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    static stl::string GetSensorType (sensor_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Максимальное значение
///////////////////////////////////////////////////////////////////////////////////////////////////
    static float GetSensorMaxRange (sensor_t);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Частота обновления
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void  SetSensorUpdateRate (sensor_t, float rate);
    static float GetSensorUpdateRate (sensor_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение платформо-зависимого дескриптора экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const void* GetNativeSensorHandle (sensor_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение платформо-зависимых свойств экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void GetSensorProperties (sensor_t, common::PropertyMap& properties);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение событий сенсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void StartSensorPolling (sensor_t, ISensorEventListener&);
    static void StopSensorPolling  (sensor_t);
    static void PollSensorEvents   (sensor_t);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Платформа
///////////////////////////////////////////////////////////////////////////////////////////////////
class TabletOsPlatform
 : public TabletOsWindowManager
 , public UnistdTimerManager 
 , public TabletOsApplicationManager 
 , public PThreadManager 
 , public UnistdLibraryManager
 , public DefaultScreenManager
 , public TabletOsSensorManager 
 , public DefaultCookieManager
 , public DefaultScreenKeyboardManager
{
};

}

#endif
