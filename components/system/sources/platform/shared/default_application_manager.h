#ifndef SYSLIB_DEFAULT_APPLICATION_MANAGER_HEADER
#define SYSLIB_DEFAULT_APPLICATION_MANAGER_HEADER

#include <stl/string>

namespace syslib
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер приложения по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
class DefaultApplicationManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Приостановка выполнения нити на miliseconds милисекунд
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Sleep (size_t miliseconds);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Открытие URL во внешнем браузере
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void OpenUrl (const char* url);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение значения переменной окружения
///////////////////////////////////////////////////////////////////////////////////////////////////
    static stl::string GetEnvironmentVariable (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с очередью сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static IApplicationDelegate* CreateDefaultApplicationDelegate ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление энергосбережением
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetScreenSaverState (bool state);
    static bool GetScreenSaverState ();
};

}

#endif
