#include <stl/hash_map>
#include <stl/string>

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/function.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>

#include <common/component.h>
#include <common/file.h>
#include <common/log.h>
#include <common/singleton.h>
#include <common/utf_converter.h>
#include <common/xml_writer.h>

#include <shared/platform.h>

#include <syslib/application.h>
#include <syslib/timer.h>

#include <Carbon/Carbon.h>
#include <CoreServices/CoreServices.h>
#include <IOKit/graphics/IOGraphicsLib.h>
#include <WebKit/CarbonUtils.h>
#include <WebKit/HIWebView.h>
#include <WebKit/WebPolicyDelegate.h>

namespace syslib
{

namespace macosx
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Устройство вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class CarbonScreen
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор / копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    CarbonScreen  (CGDirectDisplayID display_id);
    CarbonScreen  (const CarbonScreen&);
    ~CarbonScreen ();

    CarbonScreen& operator = (const CarbonScreen&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение списка видео-режимов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetModesCount ();
    void   GetMode       (size_t mode_index, ScreenModeDesc& mode_desc);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего видео-режима
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetCurrentMode (const ScreenModeDesc&);
    void GetCurrentMode (ScreenModeDesc&);
    void GetDefaultMode (ScreenModeDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Возвращение внутреннего дескриптора дисплея
///////////////////////////////////////////////////////////////////////////////////////////////////
    CGDirectDisplayID GetDisplayID ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (CarbonScreen& screen);

  private:
    struct Impl;
    Impl* impl;
};

//обмен
void swap (CarbonScreen& screen1, CarbonScreen& screen2);

//Проверка ошибок Carbon
void check_event_manager_error  (OSStatus error_code, const char* source, const char* message);
void check_window_manager_error (OSStatus error_code, const char* source, const char* message);
void check_quartz_error         (CGError  error_code, const char* source, const char* message);

//Преобразование процесса к приложению
void transform_process_type ();

}

}
