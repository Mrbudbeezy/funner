#ifndef SYSLIB_IPHONE_PLATFORM_SHARED_HEADER
#define SYSLIB_IPHONE_PLATFORM_SHARED_HEADER

#include <ctime>

#include <pthread.h>

#include <CFRunLoop.h>

#include <stl/queue>

#include <xtl/common_exceptions.h>

#include <common/log.h>
#include <common/singleton.h>
#include <common/strlib.h>

#include <platform/platform.h>

namespace syslib
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание реализации окна
///////////////////////////////////////////////////////////////////////////////////////////////////
struct WindowImpl
{
  void*                          user_data;       //указатель на пользовательские данные
  Platform::WindowMessageHandler message_handler; //функция обработки сообщений окна
  Platform::window_t             cocoa_window;    //окно

  //Конструктор/деструктор
  WindowImpl (Platform::WindowMessageHandler handler, void* in_user_data, void* new_window);
  ~WindowImpl ();

  //Посылка сообщений
  void Notify (WindowEvent event, const WindowEventContext& context);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сообщение окна
///////////////////////////////////////////////////////////////////////////////////////////////////
struct IPhoneMessage
{
  WindowEvent        event;
  WindowEventContext event_context;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Событие нити
///////////////////////////////////////////////////////////////////////////////////////////////////
class Condition
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Condition  ();
    ~Condition ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блокировка/освобождение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Wait      ();
    void Signal    ();
    void Broadcast ();

  private:
    Condition (const Condition&);             //no impl
    Condition& operator = (const Condition&); //no impl

  private:
    struct Impl;
    Impl*  impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Класс обеспечивающий работу приложения для iPhone
///////////////////////////////////////////////////////////////////////////////////////////////////
class IPhoneApplication
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/установка окна приложения
///////////////////////////////////////////////////////////////////////////////////////////////////
    static WindowImpl* GetWindow ();
    static void        SetWindow (WindowImpl*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с очередью сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static bool IsMessageQueueEmpty ();
    static void PushMessage         (const IPhoneMessage& message);
    static void GetOldestMessage    (IPhoneMessage& target);
    static void PopOldestMessage    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение события нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Condition& GetEventThreadCondition ();
};

}

#endif
