#ifndef SYSLIB_TLS_HEADER
#define SYSLIB_TLS_HEADER

namespace syslib
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Локальные данные нити
///////////////////////////////////////////////////////////////////////////////////////////////////
class ThreadLocalStorage
{
  public:
    typedef xtl::function<void (void* data)> CleanupHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ThreadLocalStorage  ();
    ThreadLocalStorage  (const CleanupHandler& cleanup);
    ThreadLocalStorage  (void (*cleanup)(void*));
    ~ThreadLocalStorage ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / чтение данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetValue (void* data);
    void* GetValue () const;

  private:
    ThreadLocalStorage (const ThreadLocalStorage&); //no impl
    ThreadLocalStorage& operator = (const ThreadLocalStorage&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

#endif
