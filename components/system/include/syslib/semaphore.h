#ifndef SYSLIB_SEMAPHORE_HEADER
#define SYSLIB_SEMAPHORE_HEADER

#include <cstddef>

#include <stl/auto_ptr.h>

namespace syslib
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Семафор
///////////////////////////////////////////////////////////////////////////////////////////////////
class Semaphore
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Semaphore  (size_t initial_value = 0);
    ~Semaphore ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ожидание новой задачи / посылка новой задачи
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Wait    ();
    void Wait    (size_t wait_in_milliseconds);
    bool TryWait ();
    bool TryWait (size_t wait_in_milliseconds);
    void Post    ();

  private:
    Semaphore (const Semaphore&); //no impl
    Semaphore& operator = (const Semaphore&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

#endif
