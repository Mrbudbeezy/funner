#ifndef SYSLIB_WEV_VIEW_HEADER
#define SYSLIB_WEV_VIEW_HEADER

#include <syslib/window.h>

namespace syslib
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Событие области вывода веб-данных
///////////////////////////////////////////////////////////////////////////////////////////////////
enum WebViewEvent
{
  WebViewEvent_OnLoadStarted,  //вызывается в начале загрузки данных
  WebViewEvent_OnLoadFinished, //вызывается в конце загрузки данных
  WebViewEvent_OnLoadFailed,   //вызывается в случае ошибки при загрузке данных
  
  WebViewEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода веб-данных
///////////////////////////////////////////////////////////////////////////////////////////////////
class WebView: public xtl::dynamic_cast_root //убрать!!!
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    WebView ();
    ~WebView ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединенное окно
///////////////////////////////////////////////////////////////////////////////////////////////////
    const syslib::Window& Window () const;
          syslib::Window& Window ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadRequest (const char* uri);
    void LoadData    (const char* data, const char* mime_type, const char* encoding, const char* base_url);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Перезагрузка страницы / остановка загрузки / проверка наличия загрузки
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void Reload      ();
    void StopLoading ();
    bool IsLoading   () const;    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Значение текущего запроса / статус выполнения запроса
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Request () const;
    const char* Status  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Средства навигации
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool CanGoBack    () const;
    bool CanGoForward () const;
    void GoBack       ();
    void GoForward    ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Фильтр контента
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<bool (WebView& view, const char* request)> Filter;

    xtl::connection RegisterFilter (const Filter& filter) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///События
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (WebView& view, WebViewEvent event)> EventHandler;

    xtl::connection RegisterEventHandler (WebViewEvent event, const EventHandler& handler) const;

  private:
    WebView (const WebView&); //no implementation
    WebView& operator = (const WebView&); //no implementation

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

#endif
