#ifndef SYSLIB_WINDOW_HEADER
#define SYSLIB_WINDOW_HEADER

#include <stl/auto_ptr.h>

#include <xtl/dynamic_cast_root.h>
#include <xtl/exception.h>
#include <xtl/functional_fwd>

#include <syslib/keydefs.h>

namespace syslib
{

//forward declarations
class Screen;

const size_t MAX_TOUCHES_COUNT = 16;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Стиль окна
///////////////////////////////////////////////////////////////////////////////////////////////////
enum WindowStyle
{
  WindowStyle_PopUp,      //окно без рамки
  WindowStyle_Overlapped, //окно с рамкой
  
  WindowStyle_Default = WindowStyle_Overlapped
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///События окна
///////////////////////////////////////////////////////////////////////////////////////////////////
enum WindowEvent
{
  WindowEvent_OnChangeHandle,            //изменён низкоуровневый дескриптор окна
  WindowEvent_OnDestroy,                 //окно уничтожено
  WindowEvent_OnClose,                   //посылается перед закрытием окна
  WindowEvent_OnActivate,                //окно стало активным
  WindowEvent_OnDeactivate,              //окно перестало быть активным
  WindowEvent_OnShow,                    //окно стало видимым
  WindowEvent_OnHide,                    //окно стало не видимым
  WindowEvent_OnSetFocus,                //окно получило фокус ввода
  WindowEvent_OnLostFocus,               //окно потеряло фокус ввода
  WindowEvent_OnPaint,                   //необходима перерисовка
  WindowEvent_OnSize,                    //изменились размеры окна
  WindowEvent_OnChangeViewport,          //изменилась область вывода окна
  WindowEvent_OnMove,                    //изменилось положение окна
  WindowEvent_OnMouseMove,               //курсор мыши переместился над областью окна
  WindowEvent_OnMouseLeave,              //курсор мыши покинул область окна
  WindowEvent_OnMouseVerticalWheel,      //изменилось положение вертикального колеса мыши
  WindowEvent_OnMouseHorisontalWheel,    //изменилось положение горизонтального колеса мыши
  WindowEvent_OnLeftButtonDown,          //нажата левая кнопка мыши
  WindowEvent_OnLeftButtonUp,            //отпущена левая кнопка мыши
  WindowEvent_OnLeftButtonDoubleClick,   //двойной щелчок левой клавишей мыши
  WindowEvent_OnRightButtonDown,         //нажата правая кнопка мыши
  WindowEvent_OnRightButtonUp,           //отпущена правая кнопка мыши
  WindowEvent_OnRightButtonDoubleClick,  //двойной щелчок правой клавишей мыши
  WindowEvent_OnMiddleButtonDown,        //нажата средняя кнопка мыши
  WindowEvent_OnMiddleButtonUp,          //отпущена средняя кнопка мыши
  WindowEvent_OnMiddleButtonDoubleClick, //двойной щелчок правой клавишей мыши
  WindowEvent_OnXButton1Down,            //нажата первая Х кнопка мыши
  WindowEvent_OnXButton1Up,              //отпущена первая Х кнопка мыши
  WindowEvent_OnXButton1DoubleClick,     //двойной щелчок первой Х клавишей мыши
  WindowEvent_OnXButton2Down,            //нажата вторая Х кнопка мыши
  WindowEvent_OnXButton2Up,              //отпущена вторая Х кнопка мыши
  WindowEvent_OnXButton2DoubleClick,     //двойной щелчок второй Х клавишей мыши
  WindowEvent_OnTouchesBegan,            //один или несколько пальцев дотронулись до окна
  WindowEvent_OnTouchesDoubletap,        //один или несколько пальцев сделали двойной тап
  WindowEvent_OnTouchesMoved,            //один или несколько пальцев двигаются в окне
  WindowEvent_OnTouchesEnded,            //один или несколько пальцев поднялись с окна
  WindowEvent_OnKeyDown,                 //нажата клавиша клавиатуры
  WindowEvent_OnKeyUp,                   //отпущена клавиша клавиатуры
  WindowEvent_OnChar,                    //в буфере ввода окна появился символ
  WindowEvent_OnScreenLock,              //экран заблокирован
  WindowEvent_OnScreenUnlock,            //экран разблокирован
  WindowEvent_OnChangeStyle,             //окно изменило стиль
  
  WindowEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Точка
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Point
{
  size_t x, y;

  Point ();
  Point (size_t x, size_t y);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Прямоугольник
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Rect
{
  size_t left, top, right, bottom;
  
  Rect ();
  Rect (size_t left, size_t top, size_t right, size_t bottom);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Color
{
  unsigned char red, green, blue;
  
  Color ();
  Color (unsigned char red, unsigned char green, unsigned char blue);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Касание
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Touch
{
  size_t touch_id; //идентификатор касания
  Point  position; //координаты
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст события
///////////////////////////////////////////////////////////////////////////////////////////////////
struct WindowEventContext
{
  const void*   handle;                          //дескриптор окна
  Point         cursor_position;                 //координаты курсора
  float         mouse_vertical_wheel_delta;      //изменение положения вертикального колеса мыши (в строках)
  float         mouse_horisontal_wheel_delta;    //изменение положения горизонтального колеса мыши (в строках)
  Touch         touches [MAX_TOUCHES_COUNT];     //сработавшие касания
  size_t        touches_count;                   //количество касаний в массиве touches
  Key           key;                             //клавиша клавиатуры
  ScanCode      key_scan_code;                   //скэн-код клавиши клавиатуры
  wchar_t       char_code;                       //код символа
  bool          mouse_left_button_pressed : 1;   //удерживается ли левая кнопка мыши
  bool          mouse_right_button_pressed : 1;  //удерживается ли правая кнопка мыши
  bool          mouse_middle_button_pressed : 1; //удерживается ли средняя кнопка мыши
  bool          keyboard_alt_pressed : 1;        //удерживается Alt
  bool          keyboard_control_pressed : 1;    //удерживается Control
  bool          keyboard_shift_pressed : 1;      //удерживается Shift
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Исключение: попытка работы с закрытым окном
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ClosedWindowException: virtual public xtl::exception {};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Курсор окна
///////////////////////////////////////////////////////////////////////////////////////////////////
class WindowCursor
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    WindowCursor  ();
    WindowCursor  (const char* image_name, int hotspot_x = -1, int hotspot_y = -1); //-1 - default value
    WindowCursor  (const WindowCursor&);
    ~WindowCursor ();

    WindowCursor& operator = (const WindowCursor&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изображение
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Image () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение низкоуровневого дескриптора курсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    const void* Handle () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (WindowCursor&);
    
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (WindowCursor&, WindowCursor&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Фасад для работы с окнами
///////////////////////////////////////////////////////////////////////////////////////////////////
class Window: public xtl::dynamic_cast_root //убрать!!
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор и деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Window  (const char* init_string = ""); //создаётся закрытое окно
    Window  (WindowStyle style, const char* init_string = "");
    Window  (WindowStyle style, size_t width, size_t height, const char* init_string = "");
    ~Window ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Init (WindowStyle style);
    void Init (WindowStyle style, size_t width, size_t height);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Закрытие окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Close       ();
    void CancelClose (); //может быть вызван одним из обработчиков события WindowEvent_OnClose
    void ForceClose  (); //вызовы CancelClose игнорируются
    
    bool IsClosed () const; //проверка: закрыто ли окно

///////////////////////////////////////////////////////////////////////////////////////////////////
///Заголовок окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char*    Title        () const;
    const wchar_t* TitleUnicode () const;
    void           SetTitle     (const char*);
    void           SetTitle     (const wchar_t*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Стиль окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    WindowStyle Style    () const;
    void        SetStyle (WindowStyle style);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Width           () const;
    size_t Height          () const;
    size_t ClientWidth     () const;
    size_t ClientHeight    () const;
    void   SetWidth        (size_t width);
    void   SetHeight       (size_t height);
    void   SetSize         (size_t width, size_t height);
    void   SetClientWidth  (size_t width);
    void   SetClientHeight (size_t height);
    void   SetClientSize   (size_t width, size_t height);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область окна / клиентская область
///////////////////////////////////////////////////////////////////////////////////////////////////
    Rect WindowRect () const;
    Rect ClientRect () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    Rect Viewport           () const; //возвращение области вывода
    void InvalidateViewport ();       //принудительное обновление области вывода

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработчик изменения области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (Window& window, Rect& viewport)> ViewportUpdateHandler;
    
    void                         SetViewportHandler (const ViewportUpdateHandler&);
    const ViewportUpdateHandler& ViewportHandler    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Положение окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    Point Position    () const;
    void  SetPosition (const Point& position);
    void  SetPosition (size_t x, size_t y);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Положение курсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    Point CursorPosition    () const;    
    void  SetCursorPosition (const Point&);
    void  SetCursorPosition (size_t x, size_t y);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Видимость курсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsCursorVisible  () const;
    void SetCursorVisible (bool state);
    void ShowCursor       () { SetCursorVisible (true); }
    void HideCursor       () { SetCursorVisible (false); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Захват курсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool CursorCaptureState    () const;
    void SetCursorCaptureState (bool state);
    void CaptureCursor         () { SetCursorCaptureState (true); }
    void ReleaseCursor         () { SetCursorCaptureState (false); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка изображения курсора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void         SetCursor (const WindowCursor&);
    WindowCursor Cursor    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение multitouch режима для окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetMultitouchEnabled (bool state);
    bool IsMultitouchEnabled  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Видимость окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsVisible  () const;
    void SetVisible (bool state);
    void Show       () { SetVisible (true);  }
    void Hide       () { SetVisible (false); }
    void Maximize   ();
    void Minimize   ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Активность окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsActive   () const;
    void SetActive  (bool state);
    void Activate   () { SetActive (true); }
    void Deactivate () { SetActive (false); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с фокусом ввода
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool HasFocus   () const;
    void SetFocus   (bool state = true);
    void KillFocus  () { SetFocus (false); }
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет фона
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetBackgroundColor  (const Color&);
    void  SetBackgroundState  (bool state);
    Color BackgroundColor     () const;
    bool  IsBackgroundEnabled () const;
    void  EnableBackground    () { SetBackgroundState (true); }
    void  DisableBackground   () { SetBackgroundState (false); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление содержимого окна (посылка OnPaint)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Invalidate ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение низкоуровневого дескриптора окна и дескриптора дисплея (для X11)
///////////////////////////////////////////////////////////////////////////////////////////////////
    const void* Handle        () const;
    const void* DisplayHandle () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор родительского окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetParentHandle (const void* handle);
    const void* ParentHandle    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск экрана вмещающего окно
///////////////////////////////////////////////////////////////////////////////////////////////////
           Screen ContainingScreen () const;
    static Screen ContainingScreen (const void* native_handle);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (Window&, WindowEvent, const WindowEventContext&)> EventHandler;

    xtl::connection RegisterEventHandler (WindowEvent event, const EventHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка пользовательской функции отладочного протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char*)> LogHandler;

    void              SetDebugLog (const LogHandler&);
    const LogHandler& DebugLog    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение объекта оповещения об удалении окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::trackable& Trackable () const;

  private:
    Window (const Window&); //no impl
    Window& operator = (const Window&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение объекта оповещения об удалении окна
///////////////////////////////////////////////////////////////////////////////////////////////////
xtl::trackable& get_trackable (const Window&);

#include <syslib/detail/window.inl>

}

#endif
