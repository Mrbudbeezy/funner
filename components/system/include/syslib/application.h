#ifndef SYSLIB_APPLICATION_HEADER
#define SYSLIB_APPLICATION_HEADER

#include <cstddef>

#include <stl/string_fwd>
#include <xtl/functional_fwd>

#include <syslib/application_delegate.h>

namespace common
{

//forward declaration
class PropertyMap;

}

namespace syslib
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///—обыти€ приложени€
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ApplicationEvent
{
  ApplicationEvent_OnExit,          //получен сигнал завершени€ приложени€
  ApplicationEvent_OnIdle,          //событие обработки пользовательских очередей сообщений
  ApplicationEvent_OnRunLoopEnter,  //событие входа в очередь обработки сообщений
  ApplicationEvent_OnRunLoopExit,   //событие выхода из очереди обработки сообщений
  ApplicationEvent_OnInitialize,    //событие иницализации приложени€
  ApplicationEvent_OnPause,         //приложение приостановлено
  ApplicationEvent_OnResume,        //приложение восстановлено
  ApplicationEvent_OnMemoryWarning, //приложение получило предупреждение об использовании большого объема пам€ти

  ApplicationEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕриложение
///////////////////////////////////////////////////////////////////////////////////////////////////
class Application
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///”становка делегата приложени€
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void BeginDelegate (IApplicationDelegate*);
    static void EndDelegate   ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///«апуск обработки очереди сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Run (IApplicationDelegate* delegate = 0);
    static bool IsMessageLoop ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕрекращение обработки очереди сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Exit        (int code);
    static int  GetExitCode ();  //получение кода завершени€

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕауза на заданное количество милисекунд
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Sleep (size_t milliseconds);

///////////////////////////////////////////////////////////////////////////////////////////////////
///ќткрытие URL во внешнем браузере
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void OpenUrl (const char* url);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕолучение значени€ переменной окружени€
///////////////////////////////////////////////////////////////////////////////////////////////////
    static stl::string GetEnvironmentVariable (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕодписка на событи€ приложени€
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void ()> EventHandler;

    static xtl::connection RegisterEventHandler (ApplicationEvent event, const EventHandler& handler);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕодписка на сообщени€ / посылка сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char*)> NotificationHandler;

    static xtl::connection RegisterNotificationHandler (const char* notification_wildcard, const NotificationHandler& handler);
    static void            PostNotification            (const char* notification);

///////////////////////////////////////////////////////////////////////////////////////////////////
///”правление энергосбережением
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetScreenSaverState (bool state);
    static void EnableScreenSaver   () { SetScreenSaverState (true); }
    static void DisableScreenSaver  () { SetScreenSaverState (false); }    
    static bool GetScreenSaverState ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕолучение платформо-зависимых системных свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    static common::PropertyMap SystemProperties ();
};

}

#endif
