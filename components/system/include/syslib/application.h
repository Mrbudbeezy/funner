#ifndef SYSLIB_APPLICATION_HEADER
#define SYSLIB_APPLICATION_HEADER

#include <xtl/functional_fwd>

namespace syslib
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///—обыти€ приложени€
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ApplicationEvent
{
  ApplicationEvent_OnExit,     //получен сигнал завершени€ приложени€
  ApplicationEvent_OnIdle,     //очередь сообщений пуста
  ApplicationEvent_OnDoEvents, //обработка пользовательских очередей сообщений
  
  ApplicationEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕриложение
///////////////////////////////////////////////////////////////////////////////////////////////////
class Application
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///ќбработка сообщений в очереди сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void DoEvents ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///ќповещение об отмене обработки системных событий в DoEvents
///  (может быть вызван в обработчике событи€ ApplicationEvent_OnDoEvents)
///////////////////////////////////////////////////////////////////////////////////////////////////    
    static void CancelSystemEventsProcess ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///«апуск обработки очереди сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Run ();
    static bool IsMessageLoop (); //находитс€ ли сейчас приложение в состо€нии обработки сообщений
    static bool HasUnprocessedMessages ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕрекращение обработки очереди сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Exit        (int code);
    static int  GetExitCode ();  //получение кода завершени€

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕауза на заданное количество милисекунд
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Sleep (size_t milliseconds);

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕодписка на событи€ приложени€
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void ()> EventHandler;
    typedef xtl::function<bool ()> SuspendHandler; //функци€, вызываема€ перед приостановкой нити приложени€

    static xtl::connection RegisterEventHandler   (ApplicationEvent event, const EventHandler& handler);
    static xtl::connection RegisterSuspendHandler (const SuspendHandler& handler);
};

}

#endif
