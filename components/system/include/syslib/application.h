#ifndef SYSLIB_APPLICATION_HEADER
#define SYSLIB_APPLICATION_HEADER

#include <cstddef>

#include <xtl/functional_fwd>

#include <syslib/application_delegate.h>

namespace syslib
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///—обыти€ приложени€
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ApplicationEvent
{
  ApplicationEvent_OnExit,          //получен сигнал завершени€ приложени€
  ApplicationEvent_OnIdle,          //событие обработки пользовательских очередей сообщений
  ApplicationEvent_OnRunLoopEnter,  //событие входа в очередь обработки сообщений
  ApplicationEvent_OnRunLoopExit,   //событие выхода из очереди обработки сообщений

  ApplicationEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕриложение
///////////////////////////////////////////////////////////////////////////////////////////////////
class Application
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///”становка делегата приложени€
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void PushDelegate (IApplicationDelegate*);
    static void PopDelegate  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///«апуск обработки очереди сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Run (IApplicationDelegate* delegate = 0);
    static bool IsMessageLoop ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕрекращение обработки очереди сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Exit        (int code);
    static int  GetExitCode ();  //получение кода завершени€

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕауза на заданное количество милисекунд
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Sleep (size_t milliseconds);

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕодписка на событи€ приложени€
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void ()> EventHandler;

    static xtl::connection RegisterEventHandler (ApplicationEvent event, const EventHandler& handler);
};

}

#endif
