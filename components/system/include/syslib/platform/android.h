#ifndef SYSLIB_PLATFORM_ANDROID_HEADER
#define SYSLIB_PLATFORM_ANDROID_HEADER

#include <syslib/window.h>

namespace syslib
{

namespace android
{

typedef int touch_t;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание одного касания
///////////////////////////////////////////////////////////////////////////////////////////////////
struct TouchDescription
{
  touch_t touch; //идентификатор касания
  float   x;     //текущее положение пальца относительно окна (0 - у левой границы окна, 1 - у правой)
  float   y;     //текущее положение пальца относительно окна (0 - у верхней границы окна, 1 - у нижней)
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс слушателя событий окна
///////////////////////////////////////////////////////////////////////////////////////////////////
class IWindowListener
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///События касания
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnTouchesBegan (size_t touches_count, const TouchDescription* touches) {} //один или несколько пальцев дотронулись до окна
    virtual void OnTouchesMoved (size_t touches_count, const TouchDescription* touches) {} //один или несколько пальцев двигаются в окне
    virtual void OnTouchesEnded (size_t touches_count, const TouchDescription* touches) {} //один или несколько пальцев поднялись с окна

  protected:
    virtual ~IWindowListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер окон
///////////////////////////////////////////////////////////////////////////////////////////////////
class WindowManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление подписчиков на события окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void AttachWindowListener (const Window& window, IWindowListener* listener);
    static void DetachWindowListener (const Window& window, IWindowListener* listener);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс слушателя событий приложения
///////////////////////////////////////////////////////////////////////////////////////////////////
class IApplicationListener
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///События
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnMemoryWarning () {}   //нехватка памяти
    virtual void OnPause         () {}   //приложение приостановлено (перешло в фон)
    virtual void OnResume        () {}   //приложение восстановлено (перешло на передний план)
    virtual void OnStop          () {}   //приложение остановлено

  protected:
    virtual ~IApplicationListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер приложения
///////////////////////////////////////////////////////////////////////////////////////////////////
class ApplicationManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление подписчиков на события приложения
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void AttachApplicationListener (IApplicationListener* listener);
    static void DetachApplicationListener (IApplicationListener* listener);
};

}

}

#endif
