#ifndef SYSLIB_PLATFORM_BADA_HEADER
#define SYSLIB_PLATFORM_BADA_HEADER

#include <FBase.h>
#include <FApp.h>

namespace syslib
{

namespace bada
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Приложение по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
class DefaultApplication: public Osp::App::Application
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////  
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    DefaultApplication  ();
    ~DefaultApplication ();

///////////////////////////////////////////////////////////////////////////////////////////////////  
///Создание экземпляра приложения
///////////////////////////////////////////////////////////////////////////////////////////////////  
    static Osp::App::Application* CreateInstance ();

///////////////////////////////////////////////////////////////////////////////////////////////////  
///Имя приложения
///////////////////////////////////////////////////////////////////////////////////////////////////  
    Osp::Base::String GetAppName () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////  
///Оповещения
///////////////////////////////////////////////////////////////////////////////////////////////////  
    bool OnAppInitializing     (Osp::App::AppRegistry& app_registry);
    bool OnAppTerminating      (Osp::App::AppRegistry& app_registry, bool forced_termination);
    void OnForeground          ();
    void OnBackground          ();
    void OnLowMemory           ();
    void OnBatteryLevelChanged (Osp::System::BatteryLevel battery_level);    

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор и секретный ключ приложения (по умолчанию)
///////////////////////////////////////////////////////////////////////////////////////////////////
    Osp::App::AppId     GetAppId     () const;
    Osp::App::AppSecret GetAppSecret () const;    
    
  private:
    DefaultApplication (const DefaultApplication&); //no impl
    DefaultApplication& operator = (const DefaultApplication&); //no impl
};

}

}

#endif
