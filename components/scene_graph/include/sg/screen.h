#ifndef SCENE_GRAPH_SCREEN_HEADER
#define SCENE_GRAPH_SCREEN_HEADER

#include <sg/viewport.h>

namespace scene_graph
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель событий рабочего стола
///////////////////////////////////////////////////////////////////////////////////////////////////
class IScreenListener
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///События
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnScreenChangeName       (const char* new_name) {}
    virtual void OnScreenChangeArea       (const Rect&) {}
    virtual void OnScreenChangeBackground (bool state, const math::vec4f& new_color) {}
    virtual void OnScreenAttachViewport   (Viewport&) {}
    virtual void OnScreenDetachViewport   (Viewport&) {}
    virtual void OnScreenDestroy          () {}

  protected:
    virtual ~IScreenListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Визуализируемое пространство - рабочий стол
///////////////////////////////////////////////////////////////////////////////////////////////////
class Screen
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Screen  ();
    Screen  (const Screen&); //политика копирования - подсчёт ссылок
    ~Screen ();

    Screen& operator = (const Screen&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор рабочего стола
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetName (const char* name);
    const char* Name    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рабочее пространство
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetArea   (const Rect& rect);
    void        SetArea   (int left, int top, int width, int height);
    void        SetOrigin (int left, int top);
    void        SetSize   (int width, int height);
    const Rect& Area      () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет фона
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetBackgroundColor (const math::vec4f& color);
    void               SetBackgroundColor (float red, float green, float blue, float alpha=0.0f);
    const math::vec4f& BackgroundColor    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Нужно ли очищать рабочий стол при каждой перерисовке
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetBackgroundState (bool state);
    void EnableBackground   () { SetBackgroundState (true); }
    void DisableBackground  () { SetBackgroundState (false); }
    bool BackgroundState    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление областей вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (const scene_graph::Viewport&);
    void Detach (const scene_graph::Viewport&);

    void DetachAllViewports ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество областей вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t ViewportsCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////    
          scene_graph::Viewport& Viewport (size_t index);
    const scene_graph::Viewport& Viewport (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа со слушателями
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachListener     (IScreenListener*) const;
    void DetachListener     (IScreenListener*) const;
    void DetachAllListeners () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Screen&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Screen&, Screen&);

}

#endif
