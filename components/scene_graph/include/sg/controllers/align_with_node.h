#ifndef SCENE_GRAPH_CONTROLLERS_ALIGN_WITH_NODE_HEADER
#define SCENE_GRAPH_CONTROLLERS_ALIGN_WITH_NODE_HEADER

#include <sg/controller.h>

namespace scene_graph
{

namespace controllers
{

///////////////////////////////////////////////////////////////////////////////////////////////////
/// онтроллер выравнивани€ ориентации одного узла по другому узлу
///////////////////////////////////////////////////////////////////////////////////////////////////
class AlignWithNode: public Controller
{
  public:
    typedef xtl::com_ptr<AlignWithNode>       Pointer;
    typedef xtl::com_ptr<const AlignWithNode> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///—оздание контроллера
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create (Node& node);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///”становка/получение функции рассчета углового ускорени€ узла
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<float (float current_velocity, float distance, float dt)> AccelerationFunction;

    void                        SetAccelerationHandler (const AccelerationFunction& acceleration_function);
    const AccelerationFunction& AccelerationHandler    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///«апуск выравнивани€ (ось target_node_axis в системе координат target_node, node_axis в системе
///координат узла контроллера)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Start (Node::ConstPointer target_node, const math::vec3f& target_node_axis, const math::vec3f& node_axis);

///////////////////////////////////////////////////////////////////////////////////////////////////
///ќстановка выравнивани€
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Stop ();

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
/// онструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    AlignWithNode  (Node& node);
    ~AlignWithNode ();
    
  private:
    void Update (float dt);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

#endif
