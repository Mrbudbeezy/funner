#ifndef SCENE_GRAPH_CONTROLLERS_WATER_HEADER
#define SCENE_GRAPH_CONTROLLERS_WATER_HEADER

#include <sg/controller.h>
#include <sg/height_map.h>

namespace scene_graph
{

namespace controllers
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контроллер водной поверхности
///////////////////////////////////////////////////////////////////////////////////////////////////
class Water: public Controller
{
  public:
    typedef xtl::com_ptr<Water>       Pointer;
    typedef xtl::com_ptr<const Water> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание контроллера
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create (HeightMap& map);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Вязкость
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetViscosity (float value);
    float Viscosity    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление возмущения
///////////////////////////////////////////////////////////////////////////////////////////////////
   void PutStorm      (const math::vec3f& position, float amplitude = 0.0005f, float radius = 0.05f); //в локальных кординатах
   void PutWorldStorm (const math::vec3f& position, float amplitude = 0.0005f, float radius = 0.05f); //в мировых координатах
    
  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Water  (HeightMap&);
    ~Water ();
    
  private:
    void Update (const TimeValue& dt);
    void OnNodeDetached ();
    void OnChangeSizes ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

#endif
