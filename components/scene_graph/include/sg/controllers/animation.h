#ifndef SCENE_GRAPH_CONTROLLERS_ANIMATION_HEADER
#define SCENE_GRAPH_CONTROLLERS_ANIMATION_HEADER

#include <sg/controller.h>

namespace media
{

namespace animation
{

//forward declaration
class Animation;

}

}

namespace scene_graph
{

namespace controllers
{

//forward declaration
class  AnimationManager;
struct AnimationImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///События анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
enum AnimationEvent
{
  AnimationEvent_OnPlay,    //срабатывает при запуске анимации
  AnimationEvent_OnStop,    //срабатывает при остановке анимации
  AnimationEvent_OnPause,   //срабатывает при паузе анимации
  AnimationEvent_OnUpdate,  //срабатывает при обновлении анимации  
  AnimationEvent_OnFinish,  //срабатывает в конце проигрывания анимации
  AnimationEvent_OnDestroy, //срабатывает при удалении анимации
  
  AnimationEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим позиционирования анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
enum AnimationSeekMode
{
  AnimationSeekMode_Set,      //установка относительно начала анимации
  AnimationSeekMode_Current,  //установка относительно текущего смещения анимации
  AnimationSeekMode_End,      //установка относительно конца анимации

  AnimationSeekMode_Default = AnimationSeekMode_Set
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимация
///////////////////////////////////////////////////////////////////////////////////////////////////
class Animation
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Animation  (AnimationImpl&);
    Animation  (const Animation&);
    ~Animation ();
    
    Animation& operator = (const Animation&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name () const;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Проигрывание анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Play      ();
    void Stop      ();
    void Pause     ();
    bool IsPlaying () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Длительность анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    float Duration () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Позиционирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  Seek (float offset, AnimationSeekMode seek_mode = AnimationSeekMode_Default);
    float Tell () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (AnimationEvent event, Animation& animation)> EventHandler;

    xtl::connection RegisterEventHandler (AnimationEvent event, const EventHandler& handler) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цикличность анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetLooping (bool state);
    bool IsLooping  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вес
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetWeight (float weight);
    float Weight    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Animation&);
    
  private:
    AnimationImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Animation&, Animation&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
class AnimationManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    AnimationManager  ();
    AnimationManager  (const AnimationManager&);
    ~AnimationManager ();
    
    AnimationManager& operator = (const AnimationManager&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    Animation CreateAnimation (const char* name, Node& root);
    Animation PlayAnimation   (const char* name, Node& root);
    Animation PlayAnimation   (const char* name, Node& root, const Animation::EventHandler& on_finish_handler);  

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление ресурсами
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadResource   (const char* name);
    void UnloadResource (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (AnimationManager&);
    
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (AnimationManager&, AnimationManager&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контроллер ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
class AnimationController: public Controller
{
  public:
    typedef xtl::com_ptr<AnimationController>       Pointer;
    typedef xtl::com_ptr<const AnimationController> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание контроллера
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create (Node& node, AnimationManager& manager);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработка событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (float time, const char* event)> EventHandler;

    xtl::connection RegisterEventHandler (const EventHandler&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор анимаций в очереди
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                              AnimationsCount () const;
    scene_graph::controllers::Animation Animation       (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проигрывание анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
    scene_graph::controllers::Animation PlayAnimation   (const char* name);
    scene_graph::controllers::Animation PlayAnimation   (const char* name, const Animation::EventHandler& on_finish_handler);
    scene_graph::controllers::Animation CreateAnimation (const char* name);
    scene_graph::controllers::Animation CreateAnimation (const media::animation::Animation&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Остановка всех анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
    void StopAllAnimations ();    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация отображения имён параметров анимации на имена узлов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetParameterMapping        (const char* channel_name, const char* property_name);
    static void RemoveParameterMapping     (const char* channel_name);
    static void RemoveAllParameterMappings ();

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    AnimationController  (Node&, AnimationManager&);
    ~AnimationController ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void Update (const TimeValue& value);
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

#endif

