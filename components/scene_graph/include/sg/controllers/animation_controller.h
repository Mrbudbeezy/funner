#ifndef SCENE_GRAPH_CONTROLLERS_ANIMATION_CONTROLLER_HEADER
#define SCENE_GRAPH_CONTROLLERS_ANIMATION_CONTROLLER_HEADER

#include <sg/controller.h>

namespace scene_graph
{

namespace controllers
{

//forward declaration
class AnimationManager;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимация
///////////////////////////////////////////////////////////////////////////////////////////////////
class Animation
{
  public:
    typedef xtl::function<void (Animation& animation)> AnimationHandler;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Animation  (const Animation&);
    ~Animation ();
    
    Animation& operator = (const Animation&);
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Проигрывание анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Play      ();
    void Stop      ();
    bool IsPlaying () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проигрывание анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                    SetStartHandler  (const AnimationHandler& handler);
    void                    SetFinishHandler (const AnimationHandler& handler);
    const AnimationHandler& StartHandler     () const;
    const AnimationHandler& FinishHandler    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Цикличность анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetLooping (bool state);
    bool IsLopping  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вес
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetWeight (float weight);
    float Weight    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Animation&);
    
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Animation&, Animation&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
class AnimationManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    AnimationManager  ();
    AnimationManager  (const AnimationManager&);
    ~AnimationManager ();
    
    AnimationManager& operator = (const AnimationManager&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    Animation CreateAnimation (const char* name, Node& root);
    Animation PlayAnimation   (const char* name, Node& root);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление ресурсами
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadResource   (const char* name);
    void UnloadResource (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (AnimationManager&);
    
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (AnimationManager&, AnimationManager&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контроллер ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
class AnimationController: public Controller
{
  public:
    typedef xtl::com_ptr<AnimationController>       Pointer;
    typedef xtl::com_ptr<const AnimationController> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание контроллера
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create (Node& node, AnimationManager& manager);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработка событий ????????
///////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор анимаций в очереди
///////////////////////////////////////////////////////////////////////////////////////////////////
          size_t                  AnimationsCount () const;
          scene_graph::Animation& Animation       (size_t index);
    const scene_graph::Animation& Animation       (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проигрывание анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
    scene_graph::Animation PlayAnimation   (const char*                        name,
                                            const Animation::AnimationHandler& on_start_handler = Animation::AnimationHandler (),
                                            const Animation::AnimationHandler& on_ned_handler = Animation::AnimationHandler ());
    scene_graph::Animation CreateAnimation (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Остановка всех анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
    void StopAllAnimations ();        

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    AnimationController  (Node&, AnimationManager&);
    ~AnimationController ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void Update (const TimeValue& value);
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

#endif

