#ifndef SCENE_GRAPH_CONTROLLERS_ACCELERATION_EVALUATORS_HEADER
#define SCENE_GRAPH_CONTROLLERS_ACCELERATION_EVALUATORS_HEADER

#include <sg/controller.h>

namespace scene_graph
{

namespace controllers
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///–ассчет ускорени€ с использованием ускорени€, замедлени€, максимальной скорости
///////////////////////////////////////////////////////////////////////////////////////////////////
class LinearAccelerationEvaluator
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
/// онструктор / деструктор / копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    LinearAccelerationEvaluator  ();
    LinearAccelerationEvaluator  (const LinearAccelerationEvaluator&);
    ~LinearAccelerationEvaluator ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///–ассчет ускорени€
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::vec3f& operator () (const math::vec3f& current_speed, const math::vec3f& distance, float dt) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///”становка/получение ускорени€ разгона
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetAcceleration (float acceleration);
    float Acceleration    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///”становка/получение ускорени€ замедлени€
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetDeceleration (float deceleration);
    float Deceleration    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///”становка/получение максимальной скорости
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetMaxSpeed (float max_speed);
    float MaxSpeed    () const;

  private:
    LinearAccelerationEvaluator& operator = (const LinearAccelerationEvaluator&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///–ассчет ускорени€ с использованием фиксированного времени достижени€ цели
///////////////////////////////////////////////////////////////////////////////////////////////////
class FixedTimeArrivalAccelerationEvaluator
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
/// онструктор / деструктор / копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    FixedTimeArrivalAccelerationEvaluator  ();
    FixedTimeArrivalAccelerationEvaluator  (const FixedTimeArrivalAccelerationEvaluator&);
    ~FixedTimeArrivalAccelerationEvaluator ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///–ассчет ускорени€
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::vec3f& operator () (const math::vec3f& current_speed, const math::vec3f& distance, float dt) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///”становка/получение времени прибыти€ в целевую точку
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetArrivalTime (float time);
    float ArrivalTime    () const;

  private:
    FixedTimeArrivalAccelerationEvaluator& operator = (const FixedTimeArrivalAccelerationEvaluator&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

}

}

#endif
