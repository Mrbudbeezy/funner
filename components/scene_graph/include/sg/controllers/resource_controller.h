#ifndef SCENE_GRAPH_CONTROLLERS_RESOURCE_CONTROLLER_HEADER
#define SCENE_GRAPH_CONTROLLERS_RESOURCE_CONTROLLER_HEADER

#include <sg/controller.h>

namespace media
{

namespace rms
{

//forward declaration
class Binding;

}

}

namespace scene_graph
{

namespace controllers
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контроллер ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
class ResourceController: public Controller
{
  public:
    typedef xtl::com_ptr<ResourceController>       Pointer;
    typedef xtl::com_ptr<const ResourceController> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание контроллера
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create (Node& node, media::rms::Binding&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание с группой ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                 SetBinding (media::rms::Binding&);
    media::rms::Binding& Binding    () const;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ResourceController  (Node&, media::rms::Binding&);
    ~ResourceController ();
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

#endif
