#ifndef SCENE_GRAPH_TEXT_LINE_HEADER
#define SCENE_GRAPH_TEXT_LINE_HEADER

#include <stl/auto_ptr.h>
#include <sg/entity.h>

namespace scene_graph
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Линия текста
///////////////////////////////////////////////////////////////////////////////////////////////////
class TextLine: public Entity
{
  public:
    typedef xtl::com_ptr<TextLine>       Pointer;
    typedef xtl::com_ptr<const TextLine> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание текстовой линии
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение текста
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetText (const char* text);
    const char* Text    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение имени шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetFont (const char* font_name);
    const char* Font    () const;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    TextLine  ();
    ~TextLine ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамическая диспетчеризация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

#endif
