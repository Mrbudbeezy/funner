#ifndef SCENE_GRAPH_CAMERA_HEADER
#define SCENE_GRAPH_CAMERA_HEADER

#include <math/matrix.h>
#include <bv/plane_list.h>
#include <sg/entity.h>

namespace scene_graph
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Камера
///////////////////////////////////////////////////////////////////////////////////////////////////
class Camera : public Entity
{
  public:  
    typedef xtl::com_ptr<Camera>       Pointer;
    typedef xtl::com_ptr<const Camera> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица проекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f& ProjectionMatrix () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение пирамиды видимости
///////////////////////////////////////////////////////////////////////////////////////////////////
    const bound_volumes::plane_listf& Frustum () const;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Camera  ();
    ~Camera ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Данный метод должны вызывать потомки при обновлении параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateNotify ();    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод, вызываемый при посещении данного объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Расчёт матрица проекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void ComputeProjectionMatrix (math::mat4f&) = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///События
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AfterUpdateWorldTransformEvent ();

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перспективная камера
///////////////////////////////////////////////////////////////////////////////////////////////////
class PerspectiveCamera : public Camera
{
  public:
    typedef xtl::com_ptr <PerspectiveCamera> Pointer;
    typedef xtl::com_ptr <const PerspectiveCamera> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                SetFovX  (const math::anglef& fov_x);
    void                SetFovY  (const math::anglef& fov_y);
    void                SetZNear (float z_near);
    void                SetZFar  (float z_far);
    const math::anglef& FovX     () const;
    const math::anglef& FovY     () const;
    float               ZNear    () const;
    float               ZFar     () const;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PerspectiveCamera  ();
    ~PerspectiveCamera ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод, вызываемый при посещении данного объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);

  private:
    void ComputeProjectionMatrix (math::mat4f&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рассчёт ограничивающего объёма
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateBoundsCore ();

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ортографическая камера (выбрана матрица проецирования, используемая gluOrtho2D)
///////////////////////////////////////////////////////////////////////////////////////////////////
class OrthoCamera: public Camera
{
  public:
    typedef xtl::com_ptr <OrthoCamera> Pointer;
    typedef xtl::com_ptr <const OrthoCamera> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetLeft   (float left);
    void  SetRight  (float right);
    void  SetTop    (float top);
    void  SetBottom (float bottom);
    void  SetZNear  (float z_near);
    void  SetZFar   (float z_far);
    float Left      () const;
    float Right     () const;
    float Top       () const;
    float Bottom    () const;
    float ZNear     () const;
    float ZFar      () const;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    OrthoCamera  ();
    ~OrthoCamera ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод, вызываемый при посещении данного объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);

  private:
    void ComputeProjectionMatrix (math::mat4f&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рассчёт ограничивающего объёма
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateBoundsCore ();

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
