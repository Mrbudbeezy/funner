#ifndef SCENE_GRAPH_HELPER_HEADER
#define SCENE_GRAPH_HELPER_HEADER

#include <sg/visual_model.h>

namespace scene_graph
{

namespace helpers
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вспомогательный объект
///////////////////////////////////////////////////////////////////////////////////////////////////
class Helper: public VisualModel
{
  public:
    typedef xtl::com_ptr<Helper>       Pointer;
    typedef xtl::com_ptr<const Helper> ConstPointer;    

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод, вызываемый при посещении данного объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параллелипиппед
///////////////////////////////////////////////////////////////////////////////////////////////////
class Box: public Helper
{
  public:
    typedef xtl::com_ptr <Box> Pointer;
    typedef xtl::com_ptr <const Box> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание (по умолчанию создаётся параллелепиппед [-1;-1;-1] - [1;1;1])
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ограничивающий объём для данного объекта настраивается явно
///////////////////////////////////////////////////////////////////////////////////////////////////
    using Helper::SetBoundBox;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод, вызываемый при посещении данного объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание свойств узла с методами узла
///////////////////////////////////////////////////////////////////////////////////////////////////
    void BindProperties (common::PropertyBindingMap& bindings);

  private:
    Box ();    
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сфера
///////////////////////////////////////////////////////////////////////////////////////////////////
class Sphere: public Helper
{
  public:
    typedef xtl::com_ptr <Sphere> Pointer;
    typedef xtl::com_ptr <const Sphere> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание (по умолчанию создаётся сфера с единичным радиусом)
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Радиус сферы
///////////////////////////////////////////////////////////////////////////////////////////////////
     void  SetRadius (float radius);
     float Radius    () const;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод, вызываемый при посещении данного объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание свойств узла с методами узла
///////////////////////////////////////////////////////////////////////////////////////////////////
    void BindProperties (common::PropertyBindingMap& bindings);

   private:
     Sphere  ();
     ~Sphere ();

   private:
     struct Impl;
     Impl* impl;
};

}

}

#endif
