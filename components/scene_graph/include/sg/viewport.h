#ifndef SCENE_GRAPH_VIEWPORT_HEADER
#define SCENE_GRAPH_VIEWPORT_HEADER

#include <xtl/rect.h>

#include <sg/camera.h>

namespace scene_graph
{

typedef xtl::rect<int> Rect;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель событий области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class IViewportListener
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///События
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnViewportChangeName       (const char* new_name) {}
    virtual void OnViewportChangeArea       (const Rect& new_area, float min_depth_range, float max_depth_range) {}
    virtual void OnViewportChangeCamera     (Camera* new_camera) {}
    virtual void OnViewportChangeZOrder     (int new_z_order) {}
    virtual void OnViewportChangeActive     (bool new_state) {}
    virtual void OnViewportChangeBackground (bool new_state, const math::vec4f& new_color) {}
    virtual void OnViewportChangeTechnique  (const char* new_technique) {}
    virtual void OnViewportChangeProperties (const common::PropertyMap& properties) {}
    virtual void OnViewportDestroy          () {}

  protected:
    virtual ~IViewportListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class Viewport
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Viewport  ();
    Viewport  (const Viewport&); //политика копирования - подсчёт ссылок
    ~Viewport ();

    Viewport& operator = (const Viewport&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetName (const char* name);
    const char* Name    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Техника рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetTechnique (const char* name);
    const char* Technique    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Границы области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetArea   (const Rect& rect);
    void        SetArea   (int left, int top, int width, int height);    
    void        SetOrigin (int left, int top);
    void        SetSize   (int width, int height);
    const Rect& Area      () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Ограничение по глубине
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetDepthRange (float min_depth, float max_depth);
    void  SetMinDepth   (float value);
    void  SetMaxDepth   (float value);
    float MinDepth      () const;
    float MaxDepth      () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление порядком отрисовки областей вывода (отрисовка от наименьших номеров по увеличению номера)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetZOrder (int z_order);
    int  ZOrder    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Камера, связанная с областью вывода (политика владения - weak-reference)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetCamera (scene_graph::Camera*);
    const scene_graph::Camera* Camera    () const;
          scene_graph::Camera* Camera    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление активностью области вывода (неакивные области не участвуют в отрисовке)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetActive  (bool state);
    bool IsActive   () const;
    void Activate   () { SetActive (true); }
    void Deactivate () { SetActive (false); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет фона
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetBackgroundColor (const math::vec4f& color);
    void               SetBackgroundColor (float red, float green, float blue, float alpha=0.0f);
    const math::vec4f& BackgroundColor    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Нужно ли очищать область вывода при каждой перерисовке
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetBackgroundState (bool state);
    void EnableBackground   () { SetBackgroundState (true); }
    void DisableBackground  () { SetBackgroundState (false); }
    bool BackgroundState    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка переменных области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetProperties (const common::PropertyMap&);
    const common::PropertyMap& Properties    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа со слушателями
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachListener     (IViewportListener*) const;
    void DetachListener     (IViewportListener*) const;
    void DetachAllListeners () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Viewport&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Viewport&, Viewport&);

}

#endif
