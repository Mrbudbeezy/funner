#ifndef SCENE_GRAPH_LISTENER_HEADER
#define SCENE_GRAPH_LISTENER_HEADER

#include <sg/entity.h>

namespace scene_graph
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель
///////////////////////////////////////////////////////////////////////////////////////////////////
class Listener : public Entity
{
  public:  
    typedef xtl::com_ptr <Listener> Pointer;
    typedef xtl::com_ptr <const Listener> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание слушателя
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Усиление
///////////////////////////////////////////////////////////////////////////////////////////////////
    float Gain    () const;
    void  SetGain (float gain);

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Listener  ();
    ~Listener ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод, вызываемый при посещении данного объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание свойств узла с методами узла
///////////////////////////////////////////////////////////////////////////////////////////////////
    void BindProperties (common::PropertyBindingMap& bindings);

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
