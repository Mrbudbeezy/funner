#ifndef SCENE_GRAPH_SCENE_PARSER_HEADER
#define SCENE_GRAPH_SCENE_PARSER_HEADER

#include <sg/scene_manager.h>

namespace common
{

//forward declarations
class ParseNode;

}

namespace scene_graph
{

//forward declarations
class Entity;
class Camera;
class OrthoCamera;
class PerspectiveCamera;
class Light;
class DirectLight;
class SpotLight;
class PointLight;
class VisualModel;
class Sprite;
class TextLine;
class Listener;
class SoundEmitter;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс парсера сцен
///////////////////////////////////////////////////////////////////////////////////////////////////
class ISceneParser
{
  public:
    virtual ~ISceneParser () {}
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение списка ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const ResourceGroup& Resources () = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void CreateScene (Node& parent, SceneContext& context, const SceneManager::LogHandler& log_handler) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Кэш парсера
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneParserCache
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneParserCache  ();
    SceneParserCache  (const SceneParserCache&);
    ~SceneParserCache ();
    
    SceneParserCache& operator = (const SceneParserCache&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка значения
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class T> void SetValue (const common::ParseNode& decl, const T& value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление значения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ResetValue (const common::ParseNode& decl);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск значения
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class T> T*       FindValue (const common::ParseNode& decl);
    template <class T> const T* FindValue (const common::ParseNode& decl) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (SceneParserCache&);

  private:
    void                      SetValueCore  (const common::ParseNode&, detail::ISceneAttachment*);
    detail::ISceneAttachment* FindValueCore (const common::ParseNode&) const;

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (SceneParserCache&, SceneParserCache&);

class XmlSceneParser: public ISceneParser
{
  public:
    typedef SceneManager::LogHandler LogHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание парсера
///////////////////////////////////////////////////////////////////////////////////////////////////  
    static ISceneParser* Create (const common::ParseNode&);
      
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение списка ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const ResourceGroup& Resources ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CreateScene (Node& parent, SceneContext& context, const LogHandler& log_handler);

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    XmlSceneParser  (const common::ParseNode&);
    ~XmlSceneParser ();    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Корневой узел
///////////////////////////////////////////////////////////////////////////////////////////////////
    const common::ParseNode& Root () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Кэш
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneParserCache& Cache ();
          
///////////////////////////////////////////////////////////////////////////////////////////////////
///Парсинг
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Parse (const common::ParseNode& decl, Node& node, SceneContext& context);
    void Parse (const common::ParseNode& decl, Node& node, Node& parent, SceneContext& context);
    void Parse (const common::ParseNode& decl, Entity& node, Node& parent, SceneContext& context);
    void Parse (const common::ParseNode& decl, Camera& node, Node& parent, SceneContext& context);
    void Parse (const common::ParseNode& decl, OrthoCamera& node, Node& parent, SceneContext& context);
    void Parse (const common::ParseNode& decl, PerspectiveCamera& node, Node& parent, SceneContext& context);
    void Parse (const common::ParseNode& decl, Light& node, Node& parent, SceneContext& context);
    void Parse (const common::ParseNode& decl, Listener& node, Node& parent, SceneContext& context);
    void Parse (const common::ParseNode& decl, SoundEmitter& node, Node& parent, SceneContext& context);    
    void Parse (const common::ParseNode& decl, DirectLight& node, Node& parent, SceneContext& context);
    void Parse (const common::ParseNode& decl, SpotLight& node, Node& parent, SceneContext& context);
    void Parse (const common::ParseNode& decl, PointLight& node, Node& parent, SceneContext& context);
    void Parse (const common::ParseNode& decl, VisualModel& node, Node& parent, SceneContext& context);
    void Parse (const common::ParseNode& decl, TextLine& node, Node& parent, SceneContext& context);
    void Parse (const common::ParseNode& decl, Sprite& node, Node& parent, SceneContext& context);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Разбор атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void ParseAttribute (const common::ParseNode& decl, const char* name, math::vec2f&);
    static void ParseAttribute (const common::ParseNode& decl, const char* name, math::vec3f&);
    static void ParseAttribute (const common::ParseNode& decl, const char* name, math::vec4f&);
    static void ParseAttribute (const common::ParseNode& decl, const char* name, math::mat2f&);
    static void ParseAttribute (const common::ParseNode& decl, const char* name, math::mat3f&);
    static void ParseAttribute (const common::ParseNode& decl, const char* name, math::mat4f&);    
    static void ParseAttribute (const common::ParseNode& decl, const char* name, math::quatf&);
    static void ParseAttribute (const common::ParseNode& decl, const char* name, size_t size, float* value);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация парсера узла определенного типа
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const common::ParseNode& decl, Node& parent, SceneContext& context)> ParseHandler;

    void RegisterParser       (const char* type, const ParseHandler& handler);
    void UnregisterParser     (const char* type);
    void UnregisterAllParsers ();

  private:
    template <class T> void CreateNode (const common::ParseNode& decl, Node& parent, SceneContext& context);
    template <>        void CreateNode<SoundEmitter> (const common::ParseNode& decl, Node& parent, SceneContext& context);

    void IncludeSubscene (const common::ParseNode& decl, Node& parent, SceneContext& context);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер парсинга XML сцен
///////////////////////////////////////////////////////////////////////////////////////////////////
class XmlSceneParserManager
{
  public:
    typedef xtl::function<ISceneParser* (const common::ParseNode&)> SceneParserCreator;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация парсеров
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterParser       (const char* version, const SceneParserCreator& creator);
    static void UnregisterParser     (const char* version);
    static void UnregisterAllParsers ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Версия парсера по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void        SetDefaultVersion (const char* version);
    static const char* DefaultVersion    ();
};

#include <sg/detail/scene_parser.inl>

}

#endif
