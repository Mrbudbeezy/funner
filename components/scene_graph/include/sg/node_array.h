#ifndef SCENE_GRAPH_NODE_ARRAY_HEADER
#define SCENE_GRAPH_NODE_ARRAY_HEADER

#include <cstddef>

namespace scene_graph
{

//forward declaration
class Node;
class NodeArrayImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Политика связывания элементов с коллекцией
///////////////////////////////////////////////////////////////////////////////////////////////////
enum NodeArrayLinkMode
{
  NodeArrayLinkMode_AddRef,  //политика подсчёта ссылок (захват)
  NodeArrayLinkMode_WeakRef, //слабая-ссылка, при удалении узла он автоматически удаляется из коллекции
  
  NodeArrayLinkMode_Default = NodeArrayLinkMode_AddRef,

  NodeArrayLinkMode_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Коллекция объектов сцены (политика владения - подсчёт ссылок)
///////////////////////////////////////////////////////////////////////////////////////////////////
class NodeArray
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    explicit NodeArray  (NodeArrayLinkMode link_mode = NodeArrayLinkMode_Default);
             NodeArray  (const NodeArray&);
             ~NodeArray ();

    NodeArray& operator = (const NodeArray&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Политика владения
///////////////////////////////////////////////////////////////////////////////////////////////////
    NodeArrayLinkMode LinkMode () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество элементов в коллекции / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size    () const;
    bool   IsEmpty () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение элемента коллекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    Node& Item (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление объектов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Add    (Node&);
    void   Remove (Node&);
    void   Remove (size_t index);
    void   Clear  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование места для хранения объектов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Capacity () const;
    void   Reserve  (size_t count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (NodeArray&);

  private:
    NodeArrayImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (NodeArray&, NodeArray&);

}

#endif
