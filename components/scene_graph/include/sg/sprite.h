#ifndef SCENE_GRAPH_SPRITE_HEADER
#define SCENE_GRAPH_SPRITE_HEADER

#include <stl/auto_ptr.h>
#include <sg/visual_model.h>

namespace scene_graph
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещение об обновлении спрайтов в модели
///////////////////////////////////////////////////////////////////////////////////////////////////
enum SpriteModelEvent
{
  SpriteModelEvent_AfterSpriteDescsUpdate, //срабатывает после изменения данных спрайтов

  SpriteModelEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Модель, состоящая из спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
class SpriteModel: public VisualModel
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор спрайта
///////////////////////////////////////////////////////////////////////////////////////////////////
    struct SpriteDesc
    {
      math::vec3f position; //положение в системе координат SpriteList
      math::vec2f size;     //размер спрайта
      math::vec4f color;    //цвет спрайта
      size_t      frame;    //номер кадра
    };
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество спрайтов / получение массива спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t            SpriteDescsCount () const;
    const SpriteDesc* SpriteDescs      () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetMaterial (const char* material);
    const char* Material    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметр, используемый для альфа-теста
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetAlphaReference (float value);
    float AlphaReference    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события модели
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (SpriteModel& sender, SpriteModelEvent event_id)> EventHandler;

    xtl::connection RegisterEventHandler (SpriteModelEvent event_id, const EventHandler& event_handler);
    
    using VisualModel::RegisterEventHandler;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SpriteModel  ();
    ~SpriteModel ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамическая диспетчеризация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещение об изменении данных спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateSpriteDescsNotify ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание свойств узла с методами узла
///////////////////////////////////////////////////////////////////////////////////////////////////
    void BindProperties (common::PropertyBindingMap& bindings);    

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация получения количества спрайтов и массива спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t            SpriteDescsCountCore () = 0;
    virtual const SpriteDesc* SpriteDescsCore      () = 0;
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Спрайт
///////////////////////////////////////////////////////////////////////////////////////////////////
class Sprite: public SpriteModel
{
  public:
    typedef xtl::com_ptr<Sprite>       Pointer;
    typedef xtl::com_ptr<const Sprite> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание спрайта
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет спрайта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetColor (const math::vec4f& color);
    void               SetColor (float red, float green, float blue);
    void               SetColor (float red, float green, float blue, float alpha);
    void               SetAlpha (float alpha);
    const math::vec4f& Color    () const;
    float              Alpha    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка номера кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetFrame (size_t frame);
    size_t Frame    () const;
    
  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Sprite  ();
    ~Sprite ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамическая диспетчеризация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание свойств узла с методами узла
///////////////////////////////////////////////////////////////////////////////////////////////////
    void BindProperties (common::PropertyBindingMap& bindings);    
    
  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация получения количества спрайтов и массива спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t            SpriteDescsCountCore ();
    const SpriteDesc* SpriteDescsCore      ();        

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
class SpriteList: public SpriteModel
{
  public:
    typedef xtl::com_ptr<SpriteList>       Pointer;
    typedef xtl::com_ptr<const SpriteList> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание списка спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размер массива спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t SpritesCount () const;    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение размера списка спрайтов / резервирование места для хранения спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Resize  (size_t count);
    void Reserve (size_t count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Массив спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const SpriteDesc* Sprites () const;
          SpriteDesc* Sprites ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление спрайтов в массив
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Insert (const SpriteDesc& sprite);
    void Insert (size_t sprites_count, const SpriteDesc* sprites);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка списка спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RemoveAll ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещение об обновлении данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Invalidate ();

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SpriteList  ();
    ~SpriteList ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамическая диспетчеризация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);
    
  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация получения количества спрайтов и массива спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t            SpriteDescsCountCore ();
    const SpriteDesc* SpriteDescsCore      ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

#endif
