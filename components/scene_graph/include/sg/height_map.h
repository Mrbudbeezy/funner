#ifndef SCENE_GRAPH_HEIGHT_MAP_HEADER
#define SCENE_GRAPH_HEIGHT_MAP_HEADER

#include <stl/auto_ptr.h>
#include <sg/visual_model.h>

namespace scene_graph
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///События карты высот
///////////////////////////////////////////////////////////////////////////////////////////////////
enum HeightMapEvent
{
  HeightMapEvent_OnSizesUpdate,    //обновились размеры поля
  HeightMapEvent_OnVerticesUpdate, //обновились вершины карты высот
  
  HeightMapEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Карта высот
///////////////////////////////////////////////////////////////////////////////////////////////////
class HeightMap: public VisualModel
{
  public:
    typedef xtl::com_ptr<HeightMap>       Pointer;
    typedef xtl::com_ptr<const HeightMap> ConstPointer;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
    struct VertexDesc
    {
      float       height;
      math::vec3f normal;
      math::vec4f color;
      
      VertexDesc () : height (0.f) {}
    };

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание карты
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры карты
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetRowsCount    (size_t rows_count);
    void   SetColumnsCount (size_t columns_count);
    void   SetCellsCount   (size_t rows_count, size_t columns_count);
    size_t RowsCount       () const;
    size_t ColumnsCount    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetMaterial (const char* material);
    const char* Material    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с вершинами
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexDesc* Vertices () const;
          VertexDesc* Vertices ();
    const VertexDesc& Vertex   (size_t row, size_t column) const;
          VertexDesc& Vertex   (size_t row, size_t column);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Групповые операции
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetVerticesHeight (float height);
    void SetVerticesNormal (const math::vec3f& normal);
    void SetVerticesColor  (const math::vec4f& color);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещение об обновлении вершин
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateVerticesNotify ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация обработчиков событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (HeightMap& sender, HeightMapEvent event_id)> EventHandler;    

    xtl::connection RegisterEventHandler (HeightMapEvent event, const EventHandler& handler);
    
    using VisualModel::RegisterEventHandler;    

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    HeightMap  ();
    ~HeightMap ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамическая диспетчеризация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

#endif
