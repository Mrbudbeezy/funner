#ifndef SCENE_GRAPH_CONTROLLER_BOX2D_PHYSICS_HEADER
#define SCENE_GRAPH_CONTROLLER_BOX2D_PHYSICS_HEADER

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/connection.h>
#include <xtl/function.h>

#include <common/component.h>

#include <sg/controller.h>
#include <sg/physics.h>

#include <Box2D.h>

namespace scene_graph
{

namespace physics
{

namespace box2d
{

///////////////////////////////////////////////////////////////////////////////////////////////////
/// онтроллер физического мира
///////////////////////////////////////////////////////////////////////////////////////////////////
class WorldController: public IController, public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
/// онструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    WorldController  (Node& root);
    ~WorldController ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///ќбновление мира
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (float dt);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///ќповещени€ о по€влении нового узла
///////////////////////////////////////////////////////////////////////////////////////////////////  
    void OnAttachChild (Node&);
    void OnDetachChild (Node&);

  private:
    b2World              world;           //физический мир
    Node&                root_node;       //корневой узел, сопоставленный физическому миру
    xtl::auto_connection on_attach_child; //соединение на событие по€влени€ потомка
    xtl::auto_connection on_detach_child; //соединение на событие удалени€ потомка
};

}

}

}

#endif
