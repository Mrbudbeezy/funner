#ifndef SCENE_GRAPH_CONTROLLER_BOX2D_PHYSICS_HEADER
#define SCENE_GRAPH_CONTROLLER_BOX2D_PHYSICS_HEADER

#include <cstdarg>

#include <stl/auto_ptr.h>
#include <stl/hash_map>

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/connection.h>
#include <xtl/function.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>

#include <common/component.h>
#include <common/log.h>
#include <common/parser.h>
#include <common/singleton.h>

#include <sg/controller.h>
#include <sg/physics.h>

#include <Box2D.h>

namespace scene_graph
{

namespace physics
{

namespace box2d
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Протокол физической подсистемы
///////////////////////////////////////////////////////////////////////////////////////////////////
class Log
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Log ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Печать сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Print   (const char* message) const;
    void Printf  (const char* message, ...) const;
    void VPrintf (const char* message, va_list list) const;

  private:
    common::Log log;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конфигурация
///////////////////////////////////////////////////////////////////////////////////////////////////
class Configuration: public xtl::noncopyable, public xtl::reference_counter
{
  public:
    typedef xtl::intrusive_ptr<Configuration> Pointer;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Configuration  (const char* file_name);
    ~Configuration ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
    const b2Vec2& GetGravity         () const; //гравитация
    bool          IsDoSleep          () const; //"засыпают" ли неактивные объекты
    size_t        GetIterationsCount () const; //количество итераций пересчёта физического мира

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер конфигураций
///////////////////////////////////////////////////////////////////////////////////////////////////
class ConfigurationManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка конфигурации
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Configuration::Pointer GetConfiguration (const char* file_name);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контроллер физического мира
///////////////////////////////////////////////////////////////////////////////////////////////////
class WorldController: public IController, public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    WorldController  (Node& root, const bound_volumes::aaboxf& bound_box, const Configuration::Pointer& configuration);
    ~WorldController ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление мира
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (float dt);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
