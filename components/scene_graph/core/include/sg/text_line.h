#ifndef SCENE_GRAPH_TEXT_LINE_HEADER
#define SCENE_GRAPH_TEXT_LINE_HEADER

#include <stl/auto_ptr.h>
#include <sg/entity.h>

namespace scene_graph
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим выравнивания
///////////////////////////////////////////////////////////////////////////////////////////////////
enum TextLineAlignment
{
  TextLineAlignment_Center = 0,   //по центру
  TextLineAlignment_Left = 1,     //по левому краю
  TextLineAlignment_Right = 2,    //по правому краю
  TextLineAlignment_Top = 1,      //по верхнему краю
  TextLineAlignment_Bottom = 2,   //по нижнему краю
  TextLineAlignment_BaseLine = 3, //по базовой линии

  TextLineAlignment_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Линия текста
///////////////////////////////////////////////////////////////////////////////////////////////////
class TextLine: public Entity
{
  public:
    typedef xtl::com_ptr<TextLine>       Pointer;
    typedef xtl::com_ptr<const TextLine> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание текстовой линии
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет текста
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetColor (const math::vec4f& color);
    void               SetColor (float red, float green, float blue);
    void               SetColor (float red, float green, float blue, float alpha);
    const math::vec4f& Color    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение текста
///////////////////////////////////////////////////////////////////////////////////////////////////
    void           SetText     (const char* text);
    void           SetText     (const wchar_t* text);
    const char*    Text        () const;
    const wchar_t* TextUnicode () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Хэш текста
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t TextHash        () const;
    size_t TextUnicodeHash () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение имени шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetFont (const char* font_name);
    const char* Font    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выравнивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    void              SetAlignment           (TextLineAlignment horizontal, TextLineAlignment vertical);
    void              SetHorizontalAlignment (TextLineAlignment alignment);
    void              SetVerticalAlignment   (TextLineAlignment alignment);
    TextLineAlignment VerticalAlignment      () const;
    TextLineAlignment HorizontalAlignment    () const;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    TextLine  ();
    ~TextLine ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамическая диспетчеризация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

#endif
