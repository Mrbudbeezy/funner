#ifndef SCENE_GRAPH_NODE_PROPERTIES
#define SCENE_GRAPH_NODE_PROPERTIES

#include <stl/string_fwd>

#include <xtl/dynamic_cast_root.h>
#include <xtl/intrusive_ptr.h>

namespace scene_graph
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип свойств узла
///////////////////////////////////////////////////////////////////////////////////////////////////
enum NodePropertyType
{
  NodePropertyType_String,
  NodePropertyType_Integer,
  NodePropertyType_Vector,  
  NodePropertyType_Matrix, 

  NodePropertyType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени типа
///////////////////////////////////////////////////////////////////////////////////////////////////
const char* get_name (NodePropertyType);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства узла
///////////////////////////////////////////////////////////////////////////////////////////////////
class NodeProperties: public xtl::dynamic_cast_root
{
  public:
    typedef xtl::com_ptr<NodeProperties>       Pointer;
    typedef xtl::com_ptr<const NodeProperties> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание свойств узла
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Хэш параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Hash () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
    NodePropertyType Type (size_t index) const;
    NodePropertyType Type (const char* name) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Смена типа
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetType (size_t index, NodePropertyType type);
    void SetType (const char* name, NodePropertyType type);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск индекса свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
    int  IndexOf   (const char* name) const;
    bool IsPresent (const char* name) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка свойства по имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetProperty (const char* name, const char* value);
    void SetProperty (const char* name, float value);    
    void SetProperty (const char* name, int value);
    void SetProperty (const char* name, const math::vec4f& value);   
    void SetProperty (const char* name, const math::mat4f& value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка свойства по индексу
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetProperty (size_t property_index, const char* value);
    void SetProperty (size_t property_index, float value);    
    void SetProperty (size_t property_index, int value);
    void SetProperty (size_t property_index, const math::vec4f& value);    
    void SetProperty (size_t property_index, const math::mat4f& value);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение свойства по имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetProperty (const char* name, stl::string& result);
    void GetProperty (const char* name, int& result);
    void GetProperty (const char* name, float& result);
    void GetProperty (const char* name, math::vec4f& result);
    void GetProperty (const char* name, math::mat4f& result);

    const char*        GetString  (const char* name) const;
    int                GetInteger (const char* name) const;
    float              GetFloat   (const char* name) const;
    const math::vec4f& GetVector  (const char* name) const;
    const math::mat4f& GetMatrix  (const char* name) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение свойства по индексу
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetProperty (size_t property_index, stl::string& result);
    void GetProperty (size_t property_index, int& result);
    void GetProperty (size_t property_index, float& result);
    void GetProperty (size_t property_index, math::vec4f& result);
    void GetProperty (size_t property_index, math::mat4f& result);

    const char*        GetString  (size_t property_index) const;
    int                GetInteger (size_t property_index) const;
    float              GetFloat   (size_t property_index) const;
    const math::vec4f& GetVector  (size_t property_index) const;
    const math::mat4f& GetMatrix  (size_t property_index) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove (const char* name);
    void Remove (size_t index);
    void Clear  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  ();
    void Release ();
  
  private:
    NodeProperties  ();    
    ~NodeProperties ();

    NodeProperties& NodeProperties (const NodeProperties&); //no impl
    NodeProperties& operator = (const NodeProperties&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
