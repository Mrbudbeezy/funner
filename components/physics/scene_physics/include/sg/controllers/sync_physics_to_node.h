#ifndef SCENE_GRAPH_CONTROLLERS_SYNC_PHYSICS_TO_NODE_HEADER
#define SCENE_GRAPH_CONTROLLERS_SYNC_PHYSICS_TO_NODE_HEADER

#include <sg/controller.h>

#include <physics/rigid_body.h>

namespace scene_graph
{

namespace controllers
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контроллер устанавливающий трансформацию узла в соответствии с трансформацией тела
///////////////////////////////////////////////////////////////////////////////////////////////////
class SyncPhysicsToNode: public Controller
{
  public:
    typedef xtl::com_ptr<SyncPhysicsToNode>       Pointer;
    typedef xtl::com_ptr<const SyncPhysicsToNode> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание контроллера
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create (Node& node, const physics::RigidBody& body);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тело, с которым связан контроллер
///////////////////////////////////////////////////////////////////////////////////////////////////
    const physics::RigidBody& AttachedBody () const;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SyncPhysicsToNode  (Node& node, const physics::RigidBody& body);
    ~SyncPhysicsToNode ();
    
  private:
    void Update (float dt);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

#endif
