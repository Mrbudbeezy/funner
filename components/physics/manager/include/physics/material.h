#ifndef PHYSICS_MANAGER_MATERIAL_HEADER
#define PHYSICS_MANAGER_MATERIAL_HEADER

namespace physics
{

//implementation forwards
class MaterialImpl;

class Material
{
  public:
    Material (const Material&);
    ~Material ();

    Material& operator = (const Material&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Material Clone () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление линейной/угловой аммортизацией
///////////////////////////////////////////////////////////////////////////////////////////////////
    float LinearDamping     () const;
    float AngularDamping    () const;
    void  SetLinearDamping  (float value);
    void  SetAngularDamping (float value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление трением
///////////////////////////////////////////////////////////////////////////////////////////////////
    float              Friction               () const;
    const math::vec3f& AnisotropicFriction    () const;
    void               SetFriction            (float value);
    void               SetAnisotropicFriction (const math::vec3f& value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление упругостью
///////////////////////////////////////////////////////////////////////////////////////////////////
    float Restitution    () const;
    void  SetRestitution (float value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Material&);

  protected:
    Material (MaterialImpl*);

  private:
    MaterialImpl* impl;
};

void swap (Material&, Material&);

}

#endif
