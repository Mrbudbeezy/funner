#ifndef PHYSICS_MANAGER_JOINT_HEADER
#define PHYSICS_MANAGER_JOINT_HEADER

#include <physics/rigid_body.h>

namespace physics
{

//implementation forwards
class JointImplProvider;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание точки привязки соединения в теле
///////////////////////////////////////////////////////////////////////////////////////////////////
struct JointBind
{
  RigidBody   body;   //тело
  math::vec3f anchor; //точка привязки соединений в системе координат тела
  math::vec3f axis;   //ось соединения в системе координат тела

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
  JointBind (const RigidBody& body, const math::vec3f& anchor = math::vec3f (), const math::vec3f& axis = math::vec3f ());
  JointBind (const RigidBody& body, const math::vec3f& axis);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Соединение тел
///////////////////////////////////////////////////////////////////////////////////////////////////
class Joint
{
  friend class JointImplProvider;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор / копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Joint (const Joint&);
    ~Joint ();
    
    Joint& operator = (const Joint&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение соединенных тел
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t BodiesCount () const;
    
    const RigidBody& Body (size_t index) const;
          RigidBody& Body (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Joint&);

  private:
    struct Impl;

  private:
    Joint (Impl*);
  
  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Joint&, Joint&);

}

#endif
