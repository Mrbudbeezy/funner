#ifndef PHYSICS_MANAGER_SHAPE_HEADER
#define PHYSICS_MANAGER_SHAPE_HEADER

#include <physics/common.h>

namespace physics
{

//implementation forwards
class ShapeImplProvider;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Геометрическое тело
///////////////////////////////////////////////////////////////////////////////////////////////////
class Shape
{
  friend class ShapeImplProvider;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор / копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Shape (const Shape&);
    ~Shape ();    

    Shape& operator = (const Shape&);  
          
///////////////////////////////////////////////////////////////////////////////////////////////////
///Толщина полей
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetMargin (float value);
    float Margin    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Shape&);

  private:
    struct Impl;

  private:
    Shape (Impl*);
    
  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Shape&, Shape&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание составного тела
///////////////////////////////////////////////////////////////////////////////////////////////////
class ShapeList
{
  public:
    ShapeList ();
    ShapeList (const ShapeList&);
    ~ShapeList ();

    ShapeList& operator = (ShapeList&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление тел
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Add    (const Shape&, const physics::Transform&);
    void Add    (const Shape&, const math::vec3f& position = math::vec3f (), const math::quatf& orientation = math::quatf ());
    void Add    (const Shape&, const math::quatf& orientation);
    void Remove (size_t index);
    void Clear  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение тел
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size () const;
    
          Shape& operator [] (size_t index);
    const Shape& operator [] (size_t index) const;

          physics::Transform& Transform (size_t index);
    const physics::Transform& Transform (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (ShapeList&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (ShapeList&, ShapeList&);

}

#endif
