#ifndef PHYSICS_MANAGER_SHARED_HEADER
#define PHYSICS_MANAGER_SHARED_HEADER

#include <xtl/common_exceptions.h>
#include <xtl/connection.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/iterator.h>
#include <xtl/reference_counter.h>

#include <stl/vector>

#include <media/physics/physics_library.h>

#include <physics/low_level/driver.h>
#include <physics/low_level/joints.h>
#include <physics/low_level/material.h>
#include <physics/low_level/scene.h>
#include <physics/low_level/shape.h>

#include <physics/manager.h>

namespace physics
{

typedef xtl::com_ptr<physics::low_level::IJoint> JointPtr;
typedef xtl::com_ptr<physics::low_level::IScene> ScenePtr;
typedef xtl::com_ptr<physics::low_level::IShape> ShapePtr;
typedef stl::vector<RigidBody>                   RigidBodyArray;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к внутренним данным материала
///////////////////////////////////////////////////////////////////////////////////////////////////
class MaterialImplProvider
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Material CreateMaterial (physics::low_level::IDriver* driver);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к внутренним данным соединения тел
///////////////////////////////////////////////////////////////////////////////////////////////////
class JointImplProvider
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Joint CreateJoint (JointPtr joint, const RigidBodyArray& bodies);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к внутренним данным физической сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneImplProvider
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Scene CreateScene (ScenePtr scene);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к внутренним данным геометрического тела
///////////////////////////////////////////////////////////////////////////////////////////////////
class ShapeImplProvider
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Shape CreateShape (ShapePtr shape);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение низкоуровневого тела
///////////////////////////////////////////////////////////////////////////////////////////////////
    static physics::low_level::IShape* LowLevelShape (const Shape& shape);
};

}

#endif
