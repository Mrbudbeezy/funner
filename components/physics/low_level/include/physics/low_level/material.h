#ifndef PHYSICS_LOW_LEVEL_MATERIAL_HEADER
#define PHYSICS_LOW_LEVEL_MATERIAL_HEADER

#include <math/vector.h>

#include <physics/low_level/object.h>

namespace physics
{

namespace low_level
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///“вердое тело
///////////////////////////////////////////////////////////////////////////////////////////////////
class IMaterial : virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///”правление линейной/угловой аммортизацией
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const math::vec3f& LinearDamping     () = 0;
    virtual const math::vec3f& AngularDamping    () = 0;
    virtual void               SetLinearDamping  (const math::vec3f& value) = 0;
    virtual void               SetAngularDamping (const math::vec3f& value) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///”правление трением
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual float Friction               () = 0;
    virtual float AnisotropicFriction    () = 0;
    virtual void  SetFriction            (float value) = 0;
    virtual void  SetAnisotropicFriction (float value) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///”правление упругостью
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual float Restitution    () = 0;
    virtual void  SetRestitution (float value) = 0;
};

}

}

#endif
