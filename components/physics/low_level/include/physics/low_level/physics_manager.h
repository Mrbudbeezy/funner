#ifndef PHYSICS_LOW_LEVEL_PHYSICS_HEADER
#define PHYSICS_LOW_LEVEL_PHYSICS_HEADER

#include <math/matrix.h>
#include <math/vector.h>

namespace physics
{

namespace low_level
{

//forward declarations
class IScene;
class IShape;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Физическая система
///////////////////////////////////////////////////////////////////////////////////////////////////
class IPhysics : virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IScene* CreateScene () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание геометрических тел
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IShape* CreateBoxShape          (const math::vec3f& half_dimensions) = 0;
    virtual IShape* CreateSphereShape       (float radius) = 0;
    virtual IShape* CreateCapsuleShape      (float radius, float height) = 0;
    virtual IShape* CreatePlaneShape        (const math::vec3f& normal, float d) = 0;
    virtual IShape* CreateConvexShape       (size_t vertices_count, math::vec3f* vertices) = 0;
    virtual IShape* CreateTriangleMeshShape (size_t vertices_count, math::vec3f* vertices, size_t triangles_count, int* triangles) = 0;
    virtual IShape* CreateCompoundShape     (size_t shapes_count, IShape* shapes, math::mat4f* local_transforms) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер физической системы
///////////////////////////////////////////////////////////////////////////////////////////////////
class PhysicsManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация систем
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterPhysics      (const char* name, IPhysics* driver);
    static void UnregisterPhysics    (const char* name);
    static void UnregisterAllPhysics ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск системы по имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    static IPhysics* FindPhysics (const char* name);
};

}

}

#endif
