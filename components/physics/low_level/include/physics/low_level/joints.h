#ifndef PHYSICS_LOW_LEVEL_JOINTS_HEADER
#define PHYSICS_LOW_LEVEL_JOINTS_HEADER

#include <cstddef>

#include <physics/low_level/object.h>

namespace physics
{

namespace low_level
{

//forward declarations
class IRigidBody;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройки соединения
///////////////////////////////////////////////////////////////////////////////////////////////////
struct JointDesc
{
  math::vec3f anchor [2]; //точки привязки соединений в системе координат тел
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройки сферичиеского соединения
///////////////////////////////////////////////////////////////////////////////////////////////////
struct SphericalJointDesc: public JointDesc {};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройки hinge / prismatic соединений
///////////////////////////////////////////////////////////////////////////////////////////////////
struct JointWithAxisesDesc: public JointDesc
{
  math::vec3f axis [2]; //оси в системе координат тел
};

struct HingeJointDesc: public JointWithAxisesDesc {};
struct PrismaticJointDesc: public JointWithAxisesDesc {};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройки конического соединения
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ConeTwistJointDesc: public JointWithAxisesDesc
{
  float swing_limit;  //максимальный размах в градусах
  float twist_limit;  //максимальный поворот вокруг оси в градусах
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Соединение тел
///////////////////////////////////////////////////////////////////////////////////////////////////
class IJoint : virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение объектов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t      ObjectsCount () = 0;
    virtual IRigidBody* GetObject    (size_t index) = 0;
};

}

}

#endif
