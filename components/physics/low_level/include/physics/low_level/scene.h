#ifndef PHYSICS_LOW_LEVEL_SCENE_HEADER
#define PHYSICS_LOW_LEVEL_SCENE_HEADER

#include <math/matrix.h>
#include <math/vector.h>

namespace physics
{

namespace low_level
{

//forward declarations
class IJoint;
class IDebugRenderable;
class IRigidBody;
class IShape;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Физическая сцена
///////////////////////////////////////////////////////////////////////////////////////////////////
class IScene : virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение данных для отладочной отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IDebugRenderable* DebugRenderable () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление гравитацией
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const math::vec3f& Gravity    () = 0;
    virtual void               SetGravity (const math::vec3f&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Симуляция
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual float SimulationStep    () = 0;
    virtual void  SetSimulationStep (float) = 0;

    virtual void  PreformSimulation (float dt) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание/удаление тел в сцене
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IRigidBody* CreateRigidBody (IShape* shape, float mass, const math::mat4f& world_position) = 0;
    virtual void        DeleteRigidBody (IRigidBody*) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание соединений между телами
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IJoint* CreateSphericalJoint (IRigidBody* body1, IRigidBody* body2, const math::vec3f& body1_anchor, const math::vec3f& body2_anchor) = 0;
    virtual IJoint* CreateHingeJoint     (IRigidBody* body1, IRigidBody* body2, const math::vec3f& body1_anchor, const math::vec3f& body2_anchor, const math::vec3f& body1_axis, const math::vec3f& body2_axis) = 0;
    virtual IJoint* CreatePrismaticJoint (IRigidBody* body1, IRigidBody* body2, const math::vec3f& body1_anchor, const math::vec3f& body2_anchor, const math::vec3f& body1_axis, const math::vec3f& body2_axis) = 0;
    virtual void    DeleteJoint          (IJoint*) = 0;
};

}

}

#endif
