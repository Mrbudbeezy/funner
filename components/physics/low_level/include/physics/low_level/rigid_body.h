#ifndef PHYSICS_LOW_LEVEL_RIGID_BODY_HEADER
#define PHYSICS_LOW_LEVEL_RIGID_BODY_HEADER

#include <cstddef>

#include <math/matrix.h>
#include <math/quat.h>
#include <math/vector.h>

#include <physics/low_level/common.h>

namespace physics
{

namespace low_level
{

//forward declarations
class IShape;
class IMaterial;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги поведения тела
///////////////////////////////////////////////////////////////////////////////////////////////////
enum RigidBodyFlag
{
  RigidBodyFlag_FrozenPositionX = 1,                   //Не передвигается по оси Х
  RigidBodyFlag_FrozenPositionY = 1 << 1,              //Не передвигается по оси Y
  RigidBodyFlag_FrozenPositionZ = 1 << 2,              //Не передвигается по оси Z
  RigidBodyFlag_FrozenPosition  = RigidBodyFlag_FrozenPositionX | RigidBodyFlag_FrozenPositionY | RigidBodyFlag_FrozenPositionZ,
  RigidBodyFlag_FrozenRotationX = 1 << 3,              //Не вращается вокруг оси Х
  RigidBodyFlag_FrozenRotationY = 1 << 4,              //Не вращается вокруг оси Y
  RigidBodyFlag_FrozenRotationZ = 1 << 5,              //Не вращается вокруг оси Z
  RigidBodyFlag_FrozenRotation  = RigidBodyFlag_FrozenRotationX | RigidBodyFlag_FrozenRotationY | RigidBodyFlag_FrozenRotationZ,
  RigidBodyFlag_Kinematic       = 1 << 6,              //Другие объекты отталкиваются от тела не оказывая на него влияния
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Твердое тело
///////////////////////////////////////////////////////////////////////////////////////////////////
class IRigidBody : virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Геометрическое представление
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IShape* Shape () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IMaterial* Material    () = 0;
    virtual void       SetMaterial (IMaterial* material) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги поведения
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Flags    () = 0;
    virtual void   SetFlags (size_t flags) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Приложение силы/импульса/вращения
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddForce   (const math::vec3f& force,   const math::vec3f& relative_position = 0) = 0;
    virtual void AddImpulse (const math::vec3f& impulse, const math::vec3f& relative_position = 0) = 0;
    virtual void AddTorque  (const math::vec3f& torgue) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление линейной/угловой скоростями
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const math::vec3f& LinearVelocity     () = 0;
    virtual const math::vec3f& AngularVelocity    () = 0;
    virtual void               SetLinearVelocity  (const math::vec3f& velocity) = 0;
    virtual void               SetAngularVelocity (const math::vec3f& velocity) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление массой
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual float Mass    () = 0;
    virtual void  SetMass (float mass) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление тензором
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const math::vec3f&  MassSpaceInertiaTensor    () = 0;
    virtual void                SetMassSpaceInertiaTensor (const math::vec3f& value) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление сном
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual float SleepLinearVelocity     () = 0;
    virtual float SleepAngularVelocity    () = 0;
    virtual void  SetSleepLinearVelocity  (float value) = 0;
    virtual void  SetSleepAngularVelocity (float value) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление пороговым значением скорости перехода в режим непрерывного движения
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual float CcdMotionThreshold    () = 0;
    virtual void  SetCcdMotionThreshold (float) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Согласование объекта с группой
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t CollisionGroup    () = 0;
    virtual void   SetCollisionGroup (size_t group_number) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Мировое положение
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const Transform& WorldTransform    () = 0;
    virtual void             SetWorldTransform (const Transform& transform) = 0;
};

}

}

#endif
