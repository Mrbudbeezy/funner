Results of add_const_test:
expression add_const<bool const>::type=bool const
expression add_const<char const>::type=char const
expression add_const<wchar_t const>::type=wchar_t const
expression add_const<signed char const>::type=signed char const
expression add_const<unsigned char const>::type=unsigned char const
expression add_const<short const>::type=short const
expression add_const<unsigned short const>::type=unsigned short const
expression add_const<int const>::type=int const
expression add_const<unsigned int const>::type=unsigned int const
expression add_const<long const>::type=long const
expression add_const<unsigned long const>::type=unsigned long const
expression add_const<float const>::type=float const
expression add_const<long double const>::type=long double const
expression add_const<double const>::type=double const
expression add_const<UDT const>::type=UDT const
expression add_const<enum1 const>::type=enum1 const
expression add_const<bool volatile>::type=bool volatile const
expression add_const<char volatile>::type=char volatile const
expression add_const<wchar_t volatile>::type=wchar_t volatile const
expression add_const<signed char volatile>::type=signed char volatile const
expression add_const<unsigned char volatile>::type=unsigned char volatile const
expression add_const<short volatile>::type=short volatile const
expression add_const<unsigned short volatile>::type=unsigned short volatile const
expression add_const<int volatile>::type=int volatile const
expression add_const<unsigned int volatile>::type=unsigned int volatile const
expression add_const<long volatile>::type=long volatile const
expression add_const<unsigned long volatile>::type=unsigned long volatile const
expression add_const<float volatile>::type=float volatile const
expression add_const<long double volatile>::type=long double volatile const
expression add_const<double volatile>::type=double volatile const
expression add_const<UDT volatile>::type=UDT volatile const
expression add_const<enum1 volatile>::type=enum1 volatile const
expression add_const<bool *>::type=bool *const
expression add_const<char *>::type=char *const
expression add_const<wchar_t *>::type=wchar_t *const
expression add_const<signed char *>::type=signed char *const
expression add_const<unsigned char *>::type=unsigned char *const
expression add_const<short *>::type=short *const
expression add_const<unsigned short *>::type=unsigned short *const
expression add_const<int *>::type=int *const
expression add_const<unsigned int *>::type=unsigned int *const
expression add_const<long *>::type=long *const
expression add_const<unsigned long *>::type=unsigned long *const
expression add_const<float *>::type=float *const
expression add_const<long double *>::type=long double *const
expression add_const<double *>::type=double *const
expression add_const<UDT *>::type=UDT *const
expression add_const<enum1 *>::type=enum1 *const
expression add_const<bool >::type=bool const
expression add_const<char >::type=char const
expression add_const<wchar_t >::type=wchar_t const
expression add_const<signed char >::type=signed char const
expression add_const<unsigned char >::type=unsigned char const
expression add_const<short >::type=short const
expression add_const<unsigned short >::type=unsigned short const
expression add_const<int >::type=int const
expression add_const<unsigned int >::type=unsigned int const
expression add_const<long >::type=long const
expression add_const<unsigned long >::type=unsigned long const
expression add_const<float >::type=float const
expression add_const<long double >::type=long double const
expression add_const<double >::type=double const
expression add_const<UDT >::type=UDT const
expression add_const<enum1 >::type=enum1 const
expression add_const<bool *volatile>::type=bool *volatile const
expression add_const<char *volatile>::type=char *volatile const
expression add_const<wchar_t *volatile>::type=wchar_t *volatile const
expression add_const<signed char *volatile>::type=signed char *volatile const
expression add_const<unsigned char *volatile>::type=unsigned char *volatile const
expression add_const<short *volatile>::type=short *volatile const
expression add_const<unsigned short *volatile>::type=unsigned short *volatile const
expression add_const<int *volatile>::type=int *volatile const
expression add_const<unsigned int *volatile>::type=unsigned int *volatile const
expression add_const<long *volatile>::type=long *volatile const
expression add_const<unsigned long *volatile>::type=unsigned long *volatile const
expression add_const<float *volatile>::type=float *volatile const
expression add_const<long double *volatile>::type=long double *volatile const
expression add_const<double *volatile>::type=double *volatile const
expression add_const<UDT *volatile>::type=UDT *volatile const
expression add_const<enum1 *volatile>::type=enum1 *volatile const
expression add_const<bool const*>::type=bool const*const
expression add_const<char const*>::type=char const*const
expression add_const<wchar_t const*>::type=wchar_t const*const
expression add_const<signed char const*>::type=signed char const*const
expression add_const<unsigned char const*>::type=unsigned char const*const
expression add_const<short const*>::type=short const*const
expression add_const<unsigned short const*>::type=unsigned short const*const
expression add_const<int const*>::type=int const*const
expression add_const<unsigned int const*>::type=unsigned int const*const
expression add_const<long const*>::type=long const*const
expression add_const<unsigned long const*>::type=unsigned long const*const
expression add_const<float const*>::type=float const*const
expression add_const<long double const*>::type=long double const*const
expression add_const<double const*>::type=double const*const
expression add_const<UDT const*>::type=UDT const*const
expression add_const<enum1 const*>::type=enum1 const*const
expression add_const<bool volatile*>::type=bool volatile*const
expression add_const<char volatile*>::type=char volatile*const
expression add_const<wchar_t volatile*>::type=wchar_t volatile*const
expression add_const<signed char volatile*>::type=signed char volatile*const
expression add_const<unsigned char volatile*>::type=unsigned char volatile*const
expression add_const<short volatile*>::type=short volatile*const
expression add_const<unsigned short volatile*>::type=unsigned short volatile*const
expression add_const<int volatile*>::type=int volatile*const
expression add_const<unsigned int volatile*>::type=unsigned int volatile*const
expression add_const<long volatile*>::type=long volatile*const
expression add_const<unsigned long volatile*>::type=unsigned long volatile*const
expression add_const<float volatile*>::type=float volatile*const
expression add_const<long double volatile*>::type=long double volatile*const
expression add_const<double volatile*>::type=double volatile*const
expression add_const<UDT volatile*>::type=UDT volatile*const
expression add_const<enum1 volatile*>::type=enum1 volatile*const
expression add_const<bool const &>::type=bool const&
expression add_const<char const &>::type=char const&
expression add_const<wchar_t const &>::type=wchar_t const&
expression add_const<signed char const &>::type=signed char const&
expression add_const<unsigned char const &>::type=unsigned char const&
expression add_const<short const &>::type=short const&
expression add_const<unsigned short const &>::type=unsigned short const&
expression add_const<int const &>::type=int const&
expression add_const<unsigned int const &>::type=unsigned int const&
expression add_const<long const &>::type=long const&
expression add_const<unsigned long const &>::type=unsigned long const&
expression add_const<float const &>::type=float const&
expression add_const<long double const &>::type=long double const&
expression add_const<double const &>::type=double const&
expression add_const<UDT const &>::type=UDT const&
expression add_const<enum1 const &>::type=enum1 const&
expression add_const<bool &>::type=bool &
expression add_const<char &>::type=char &
expression add_const<wchar_t &>::type=wchar_t &
expression add_const<signed char &>::type=signed char &
expression add_const<unsigned char &>::type=unsigned char &
expression add_const<short &>::type=short &
expression add_const<unsigned short &>::type=unsigned short &
expression add_const<int &>::type=int &
expression add_const<unsigned int &>::type=unsigned int &
expression add_const<long &>::type=long &
expression add_const<unsigned long &>::type=unsigned long &
expression add_const<float &>::type=float &
expression add_const<long double &>::type=long double &
expression add_const<double &>::type=double &
expression add_const<UDT &>::type=UDT &
expression add_const<enum1 &>::type=enum1 &
expression add_const<bool const [2]>::type=bool const [2]
expression add_const<char const [2]>::type=char const [2]
expression add_const<wchar_t const [2]>::type=wchar_t const [2]
expression add_const<signed char const [2]>::type=signed char const [2]
expression add_const<unsigned char const [2]>::type=unsigned char const [2]
expression add_const<short const [2]>::type=short const [2]
expression add_const<unsigned short const [2]>::type=unsigned short const [2]
expression add_const<int const [2]>::type=int const [2]
expression add_const<unsigned int const [2]>::type=unsigned int const [2]
expression add_const<long const [2]>::type=long const [2]
expression add_const<unsigned long const [2]>::type=unsigned long const [2]
expression add_const<float const [2]>::type=float const [2]
expression add_const<long double const [2]>::type=long double const [2]
expression add_const<double const [2]>::type=double const [2]
expression add_const<UDT const [2]>::type=UDT const [2]
expression add_const<enum1 const [2]>::type=enum1 const [2]
expression add_const<bool volatile &>::type=bool volatile&
expression add_const<char volatile &>::type=char volatile&
expression add_const<wchar_t volatile &>::type=wchar_t volatile&
expression add_const<signed char volatile &>::type=signed char volatile&
expression add_const<unsigned char volatile &>::type=unsigned char volatile&
expression add_const<short volatile &>::type=short volatile&
expression add_const<unsigned short volatile &>::type=unsigned short volatile&
expression add_const<int volatile &>::type=int volatile&
expression add_const<unsigned int volatile &>::type=unsigned int volatile&
expression add_const<long volatile &>::type=long volatile&
expression add_const<unsigned long volatile &>::type=unsigned long volatile&
expression add_const<float volatile &>::type=float volatile&
expression add_const<long double volatile &>::type=long double volatile&
expression add_const<double volatile &>::type=double volatile&
expression add_const<UDT volatile &>::type=UDT volatile&
expression add_const<enum1 volatile &>::type=enum1 volatile&
expression add_const<bool [2][3]>::type=bool const[2][3]
expression add_const<char [2][3]>::type=char const[2][3]
expression add_const<wchar_t [2][3]>::type=wchar_t const[2][3]
expression add_const<signed char [2][3]>::type=signed char const[2][3]
expression add_const<unsigned char [2][3]>::type=unsigned char const[2][3]
expression add_const<short [2][3]>::type=short const[2][3]
expression add_const<unsigned short [2][3]>::type=unsigned short const[2][3]
expression add_const<int [2][3]>::type=int const[2][3]
expression add_const<unsigned int [2][3]>::type=unsigned int const[2][3]
expression add_const<long [2][3]>::type=long const[2][3]
expression add_const<unsigned long [2][3]>::type=unsigned long const[2][3]
expression add_const<float [2][3]>::type=float const[2][3]
expression add_const<long double [2][3]>::type=long double const[2][3]
expression add_const<double [2][3]>::type=double const[2][3]
expression add_const<UDT [2][3]>::type=UDT const[2][3]
expression add_const<enum1 [2][3]>::type=enum1 const[2][3]
expression add_const<bool (&)[2]>::type=bool (&)[2]
expression add_const<char (&)[2]>::type=char (&)[2]
expression add_const<wchar_t (&)[2]>::type=wchar_t (&)[2]
expression add_const<signed char (&)[2]>::type=signed char (&)[2]
expression add_const<unsigned char (&)[2]>::type=unsigned char (&)[2]
expression add_const<short (&)[2]>::type=short (&)[2]
expression add_const<unsigned short (&)[2]>::type=unsigned short (&)[2]
expression add_const<int (&)[2]>::type=int (&)[2]
expression add_const<unsigned int (&)[2]>::type=unsigned int (&)[2]
expression add_const<long (&)[2]>::type=long (&)[2]
expression add_const<unsigned long (&)[2]>::type=unsigned long (&)[2]
expression add_const<float (&)[2]>::type=float (&)[2]
expression add_const<long double (&)[2]>::type=long double (&)[2]
expression add_const<double (&)[2]>::type=double (&)[2]
expression add_const<UDT (&)[2]>::type=UDT (&)[2]
expression add_const<enum1 (&)[2]>::type=enum1 (&)[2]
Results of add_cv_test:
expression add_cv<bool const>::type=bool const volatile
expression add_cv<char const>::type=char const volatile
expression add_cv<wchar_t const>::type=wchar_t const volatile
expression add_cv<signed char const>::type=signed char const volatile
expression add_cv<unsigned char const>::type=unsigned char const volatile
expression add_cv<short const>::type=short const volatile
expression add_cv<unsigned short const>::type=unsigned short const volatile
expression add_cv<int const>::type=int const volatile
expression add_cv<unsigned int const>::type=unsigned int const volatile
expression add_cv<long const>::type=long const volatile
expression add_cv<unsigned long const>::type=unsigned long const volatile
expression add_cv<float const>::type=float const volatile
expression add_cv<long double const>::type=long double const volatile
expression add_cv<double const>::type=double const volatile
expression add_cv<UDT const>::type=UDT const volatile
expression add_cv<enum1 const>::type=enum1 const volatile
expression add_cv<bool volatile>::type=bool volatile const
expression add_cv<char volatile>::type=char volatile const
expression add_cv<wchar_t volatile>::type=wchar_t volatile const
expression add_cv<signed char volatile>::type=signed char volatile const
expression add_cv<unsigned char volatile>::type=unsigned char volatile const
expression add_cv<short volatile>::type=short volatile const
expression add_cv<unsigned short volatile>::type=unsigned short volatile const
expression add_cv<int volatile>::type=int volatile const
expression add_cv<unsigned int volatile>::type=unsigned int volatile const
expression add_cv<long volatile>::type=long volatile const
expression add_cv<unsigned long volatile>::type=unsigned long volatile const
expression add_cv<float volatile>::type=float volatile const
expression add_cv<long double volatile>::type=long double volatile const
expression add_cv<double volatile>::type=double volatile const
expression add_cv<UDT volatile>::type=UDT volatile const
expression add_cv<enum1 volatile>::type=enum1 volatile const
expression add_cv<bool *>::type=bool *const volatile
expression add_cv<char *>::type=char *const volatile
expression add_cv<wchar_t *>::type=wchar_t *const volatile
expression add_cv<signed char *>::type=signed char *const volatile
expression add_cv<unsigned char *>::type=unsigned char *const volatile
expression add_cv<short *>::type=short *const volatile
expression add_cv<unsigned short *>::type=unsigned short *const volatile
expression add_cv<int *>::type=int *const volatile
expression add_cv<unsigned int *>::type=unsigned int *const volatile
expression add_cv<long *>::type=long *const volatile
expression add_cv<unsigned long *>::type=unsigned long *const volatile
expression add_cv<float *>::type=float *const volatile
expression add_cv<long double *>::type=long double *const volatile
expression add_cv<double *>::type=double *const volatile
expression add_cv<UDT *>::type=UDT *const volatile
expression add_cv<enum1 *>::type=enum1 *const volatile
expression add_cv<bool >::type=bool const volatile
expression add_cv<char >::type=char const volatile
expression add_cv<wchar_t >::type=wchar_t const volatile
expression add_cv<signed char >::type=signed char const volatile
expression add_cv<unsigned char >::type=unsigned char const volatile
expression add_cv<short >::type=short const volatile
expression add_cv<unsigned short >::type=unsigned short const volatile
expression add_cv<int >::type=int const volatile
expression add_cv<unsigned int >::type=unsigned int const volatile
expression add_cv<long >::type=long const volatile
expression add_cv<unsigned long >::type=unsigned long const volatile
expression add_cv<float >::type=float const volatile
expression add_cv<long double >::type=long double const volatile
expression add_cv<double >::type=double const volatile
expression add_cv<UDT >::type=UDT const volatile
expression add_cv<enum1 >::type=enum1 const volatile
expression add_cv<bool *volatile>::type=bool *volatile const
expression add_cv<char *volatile>::type=char *volatile const
expression add_cv<wchar_t *volatile>::type=wchar_t *volatile const
expression add_cv<signed char *volatile>::type=signed char *volatile const
expression add_cv<unsigned char *volatile>::type=unsigned char *volatile const
expression add_cv<short *volatile>::type=short *volatile const
expression add_cv<unsigned short *volatile>::type=unsigned short *volatile const
expression add_cv<int *volatile>::type=int *volatile const
expression add_cv<unsigned int *volatile>::type=unsigned int *volatile const
expression add_cv<long *volatile>::type=long *volatile const
expression add_cv<unsigned long *volatile>::type=unsigned long *volatile const
expression add_cv<float *volatile>::type=float *volatile const
expression add_cv<long double *volatile>::type=long double *volatile const
expression add_cv<double *volatile>::type=double *volatile const
expression add_cv<UDT *volatile>::type=UDT *volatile const
expression add_cv<enum1 *volatile>::type=enum1 *volatile const
expression add_cv<bool const*>::type=bool const*const volatile
expression add_cv<char const*>::type=char const*const volatile
expression add_cv<wchar_t const*>::type=wchar_t const*const volatile
expression add_cv<signed char const*>::type=signed char const*const volatile
expression add_cv<unsigned char const*>::type=unsigned char const*const volatile
expression add_cv<short const*>::type=short const*const volatile
expression add_cv<unsigned short const*>::type=unsigned short const*const volatile
expression add_cv<int const*>::type=int const*const volatile
expression add_cv<unsigned int const*>::type=unsigned int const*const volatile
expression add_cv<long const*>::type=long const*const volatile
expression add_cv<unsigned long const*>::type=unsigned long const*const volatile
expression add_cv<float const*>::type=float const*const volatile
expression add_cv<long double const*>::type=long double const*const volatile
expression add_cv<double const*>::type=double const*const volatile
expression add_cv<UDT const*>::type=UDT const*const volatile
expression add_cv<enum1 const*>::type=enum1 const*const volatile
expression add_cv<bool volatile*>::type=bool volatile*const volatile
expression add_cv<char volatile*>::type=char volatile*const volatile
expression add_cv<wchar_t volatile*>::type=wchar_t volatile*const volatile
expression add_cv<signed char volatile*>::type=signed char volatile*const volatile
expression add_cv<unsigned char volatile*>::type=unsigned char volatile*const volatile
expression add_cv<short volatile*>::type=short volatile*const volatile
expression add_cv<unsigned short volatile*>::type=unsigned short volatile*const volatile
expression add_cv<int volatile*>::type=int volatile*const volatile
expression add_cv<unsigned int volatile*>::type=unsigned int volatile*const volatile
expression add_cv<long volatile*>::type=long volatile*const volatile
expression add_cv<unsigned long volatile*>::type=unsigned long volatile*const volatile
expression add_cv<float volatile*>::type=float volatile*const volatile
expression add_cv<long double volatile*>::type=long double volatile*const volatile
expression add_cv<double volatile*>::type=double volatile*const volatile
expression add_cv<UDT volatile*>::type=UDT volatile*const volatile
expression add_cv<enum1 volatile*>::type=enum1 volatile*const volatile
expression add_cv<bool const &>::type=bool const&
expression add_cv<char const &>::type=char const&
expression add_cv<wchar_t const &>::type=wchar_t const&
expression add_cv<signed char const &>::type=signed char const&
expression add_cv<unsigned char const &>::type=unsigned char const&
expression add_cv<short const &>::type=short const&
expression add_cv<unsigned short const &>::type=unsigned short const&
expression add_cv<int const &>::type=int const&
expression add_cv<unsigned int const &>::type=unsigned int const&
expression add_cv<long const &>::type=long const&
expression add_cv<unsigned long const &>::type=unsigned long const&
expression add_cv<float const &>::type=float const&
expression add_cv<long double const &>::type=long double const&
expression add_cv<double const &>::type=double const&
expression add_cv<UDT const &>::type=UDT const&
expression add_cv<enum1 const &>::type=enum1 const&
expression add_cv<bool &>::type=bool &
expression add_cv<char &>::type=char &
expression add_cv<wchar_t &>::type=wchar_t &
expression add_cv<signed char &>::type=signed char &
expression add_cv<unsigned char &>::type=unsigned char &
expression add_cv<short &>::type=short &
expression add_cv<unsigned short &>::type=unsigned short &
expression add_cv<int &>::type=int &
expression add_cv<unsigned int &>::type=unsigned int &
expression add_cv<long &>::type=long &
expression add_cv<unsigned long &>::type=unsigned long &
expression add_cv<float &>::type=float &
expression add_cv<long double &>::type=long double &
expression add_cv<double &>::type=double &
expression add_cv<UDT &>::type=UDT &
expression add_cv<enum1 &>::type=enum1 &
expression add_cv<bool const [2]>::type=bool const volatile [2]
expression add_cv<char const [2]>::type=char const volatile [2]
expression add_cv<wchar_t const [2]>::type=wchar_t const volatile [2]
expression add_cv<signed char const [2]>::type=signed char const volatile [2]
expression add_cv<unsigned char const [2]>::type=unsigned char const volatile [2]
expression add_cv<short const [2]>::type=short const volatile [2]
expression add_cv<unsigned short const [2]>::type=unsigned short const volatile [2]
expression add_cv<int const [2]>::type=int const volatile [2]
expression add_cv<unsigned int const [2]>::type=unsigned int const volatile [2]
expression add_cv<long const [2]>::type=long const volatile [2]
expression add_cv<unsigned long const [2]>::type=unsigned long const volatile [2]
expression add_cv<float const [2]>::type=float const volatile [2]
expression add_cv<long double const [2]>::type=long double const volatile [2]
expression add_cv<double const [2]>::type=double const volatile [2]
expression add_cv<UDT const [2]>::type=UDT const volatile [2]
expression add_cv<enum1 const [2]>::type=enum1 const volatile [2]
expression add_cv<bool volatile &>::type=bool volatile&
expression add_cv<char volatile &>::type=char volatile&
expression add_cv<wchar_t volatile &>::type=wchar_t volatile&
expression add_cv<signed char volatile &>::type=signed char volatile&
expression add_cv<unsigned char volatile &>::type=unsigned char volatile&
expression add_cv<short volatile &>::type=short volatile&
expression add_cv<unsigned short volatile &>::type=unsigned short volatile&
expression add_cv<int volatile &>::type=int volatile&
expression add_cv<unsigned int volatile &>::type=unsigned int volatile&
expression add_cv<long volatile &>::type=long volatile&
expression add_cv<unsigned long volatile &>::type=unsigned long volatile&
expression add_cv<float volatile &>::type=float volatile&
expression add_cv<long double volatile &>::type=long double volatile&
expression add_cv<double volatile &>::type=double volatile&
expression add_cv<UDT volatile &>::type=UDT volatile&
expression add_cv<enum1 volatile &>::type=enum1 volatile&
expression add_cv<bool [2][3]>::type=bool const volatile[2][3]
expression add_cv<char [2][3]>::type=char const volatile[2][3]
expression add_cv<wchar_t [2][3]>::type=wchar_t const volatile[2][3]
expression add_cv<signed char [2][3]>::type=signed char const volatile[2][3]
expression add_cv<unsigned char [2][3]>::type=unsigned char const volatile[2][3]
expression add_cv<short [2][3]>::type=short const volatile[2][3]
expression add_cv<unsigned short [2][3]>::type=unsigned short const volatile[2][3]
expression add_cv<int [2][3]>::type=int const volatile[2][3]
expression add_cv<unsigned int [2][3]>::type=unsigned int const volatile[2][3]
expression add_cv<long [2][3]>::type=long const volatile[2][3]
expression add_cv<unsigned long [2][3]>::type=unsigned long const volatile[2][3]
expression add_cv<float [2][3]>::type=float const volatile[2][3]
expression add_cv<long double [2][3]>::type=long double const volatile[2][3]
expression add_cv<double [2][3]>::type=double const volatile[2][3]
expression add_cv<UDT [2][3]>::type=UDT const volatile[2][3]
expression add_cv<enum1 [2][3]>::type=enum1 const volatile[2][3]
expression add_cv<bool (&)[2]>::type=bool (&)[2]
expression add_cv<char (&)[2]>::type=char (&)[2]
expression add_cv<wchar_t (&)[2]>::type=wchar_t (&)[2]
expression add_cv<signed char (&)[2]>::type=signed char (&)[2]
expression add_cv<unsigned char (&)[2]>::type=unsigned char (&)[2]
expression add_cv<short (&)[2]>::type=short (&)[2]
expression add_cv<unsigned short (&)[2]>::type=unsigned short (&)[2]
expression add_cv<int (&)[2]>::type=int (&)[2]
expression add_cv<unsigned int (&)[2]>::type=unsigned int (&)[2]
expression add_cv<long (&)[2]>::type=long (&)[2]
expression add_cv<unsigned long (&)[2]>::type=unsigned long (&)[2]
expression add_cv<float (&)[2]>::type=float (&)[2]
expression add_cv<long double (&)[2]>::type=long double (&)[2]
expression add_cv<double (&)[2]>::type=double (&)[2]
expression add_cv<UDT (&)[2]>::type=UDT (&)[2]
expression add_cv<enum1 (&)[2]>::type=enum1 (&)[2]
Results of add_pointer_test:
expression add_pointer<bool const>::type=bool const*
expression add_pointer<char const>::type=char const*
expression add_pointer<wchar_t const>::type=wchar_t const*
expression add_pointer<signed char const>::type=signed char const*
expression add_pointer<unsigned char const>::type=unsigned char const*
expression add_pointer<short const>::type=short const*
expression add_pointer<unsigned short const>::type=unsigned short const*
expression add_pointer<int const>::type=int const*
expression add_pointer<unsigned int const>::type=unsigned int const*
expression add_pointer<long const>::type=long const*
expression add_pointer<unsigned long const>::type=unsigned long const*
expression add_pointer<float const>::type=float const*
expression add_pointer<long double const>::type=long double const*
expression add_pointer<double const>::type=double const*
expression add_pointer<UDT const>::type=UDT const*
expression add_pointer<enum1 const>::type=enum1 const*
expression add_pointer<bool volatile>::type=bool volatile*
expression add_pointer<char volatile>::type=char volatile*
expression add_pointer<wchar_t volatile>::type=wchar_t volatile*
expression add_pointer<signed char volatile>::type=signed char volatile*
expression add_pointer<unsigned char volatile>::type=unsigned char volatile*
expression add_pointer<short volatile>::type=short volatile*
expression add_pointer<unsigned short volatile>::type=unsigned short volatile*
expression add_pointer<int volatile>::type=int volatile*
expression add_pointer<unsigned int volatile>::type=unsigned int volatile*
expression add_pointer<long volatile>::type=long volatile*
expression add_pointer<unsigned long volatile>::type=unsigned long volatile*
expression add_pointer<float volatile>::type=float volatile*
expression add_pointer<long double volatile>::type=long double volatile*
expression add_pointer<double volatile>::type=double volatile*
expression add_pointer<UDT volatile>::type=UDT volatile*
expression add_pointer<enum1 volatile>::type=enum1 volatile*
expression add_pointer<bool *>::type=bool **
expression add_pointer<char *>::type=char **
expression add_pointer<wchar_t *>::type=wchar_t **
expression add_pointer<signed char *>::type=signed char **
expression add_pointer<unsigned char *>::type=unsigned char **
expression add_pointer<short *>::type=short **
expression add_pointer<unsigned short *>::type=unsigned short **
expression add_pointer<int *>::type=int **
expression add_pointer<unsigned int *>::type=unsigned int **
expression add_pointer<long *>::type=long **
expression add_pointer<unsigned long *>::type=unsigned long **
expression add_pointer<float *>::type=float **
expression add_pointer<long double *>::type=long double **
expression add_pointer<double *>::type=double **
expression add_pointer<UDT *>::type=UDT **
expression add_pointer<enum1 *>::type=enum1 **
expression add_pointer<bool >::type=bool *
expression add_pointer<char >::type=char *
expression add_pointer<wchar_t >::type=wchar_t *
expression add_pointer<signed char >::type=signed char *
expression add_pointer<unsigned char >::type=unsigned char *
expression add_pointer<short >::type=short *
expression add_pointer<unsigned short >::type=unsigned short *
expression add_pointer<int >::type=int *
expression add_pointer<unsigned int >::type=unsigned int *
expression add_pointer<long >::type=long *
expression add_pointer<unsigned long >::type=unsigned long *
expression add_pointer<float >::type=float *
expression add_pointer<long double >::type=long double *
expression add_pointer<double >::type=double *
expression add_pointer<UDT >::type=UDT *
expression add_pointer<enum1 >::type=enum1 *
expression add_pointer<bool *volatile>::type=bool *volatile*
expression add_pointer<char *volatile>::type=char *volatile*
expression add_pointer<wchar_t *volatile>::type=wchar_t *volatile*
expression add_pointer<signed char *volatile>::type=signed char *volatile*
expression add_pointer<unsigned char *volatile>::type=unsigned char *volatile*
expression add_pointer<short *volatile>::type=short *volatile*
expression add_pointer<unsigned short *volatile>::type=unsigned short *volatile*
expression add_pointer<int *volatile>::type=int *volatile*
expression add_pointer<unsigned int *volatile>::type=unsigned int *volatile*
expression add_pointer<long *volatile>::type=long *volatile*
expression add_pointer<unsigned long *volatile>::type=unsigned long *volatile*
expression add_pointer<float *volatile>::type=float *volatile*
expression add_pointer<long double *volatile>::type=long double *volatile*
expression add_pointer<double *volatile>::type=double *volatile*
expression add_pointer<UDT *volatile>::type=UDT *volatile*
expression add_pointer<enum1 *volatile>::type=enum1 *volatile*
expression add_pointer<bool const*>::type=bool const**
expression add_pointer<char const*>::type=char const**
expression add_pointer<wchar_t const*>::type=wchar_t const**
expression add_pointer<signed char const*>::type=signed char const**
expression add_pointer<unsigned char const*>::type=unsigned char const**
expression add_pointer<short const*>::type=short const**
expression add_pointer<unsigned short const*>::type=unsigned short const**
expression add_pointer<int const*>::type=int const**
expression add_pointer<unsigned int const*>::type=unsigned int const**
expression add_pointer<long const*>::type=long const**
expression add_pointer<unsigned long const*>::type=unsigned long const**
expression add_pointer<float const*>::type=float const**
expression add_pointer<long double const*>::type=long double const**
expression add_pointer<double const*>::type=double const**
expression add_pointer<UDT const*>::type=UDT const**
expression add_pointer<enum1 const*>::type=enum1 const**
expression add_pointer<bool volatile*>::type=bool volatile**
expression add_pointer<char volatile*>::type=char volatile**
expression add_pointer<wchar_t volatile*>::type=wchar_t volatile**
expression add_pointer<signed char volatile*>::type=signed char volatile**
expression add_pointer<unsigned char volatile*>::type=unsigned char volatile**
expression add_pointer<short volatile*>::type=short volatile**
expression add_pointer<unsigned short volatile*>::type=unsigned short volatile**
expression add_pointer<int volatile*>::type=int volatile**
expression add_pointer<unsigned int volatile*>::type=unsigned int volatile**
expression add_pointer<long volatile*>::type=long volatile**
expression add_pointer<unsigned long volatile*>::type=unsigned long volatile**
expression add_pointer<float volatile*>::type=float volatile**
expression add_pointer<long double volatile*>::type=long double volatile**
expression add_pointer<double volatile*>::type=double volatile**
expression add_pointer<UDT volatile*>::type=UDT volatile**
expression add_pointer<enum1 volatile*>::type=enum1 volatile**
Results of add_reference_test:
expression add_reference<bool const>::type=bool const&
expression add_reference<char const>::type=char const&
expression add_reference<wchar_t const>::type=wchar_t const&
expression add_reference<signed char const>::type=signed char const&
expression add_reference<unsigned char const>::type=unsigned char const&
expression add_reference<short const>::type=short const&
expression add_reference<unsigned short const>::type=unsigned short const&
expression add_reference<int const>::type=int const&
expression add_reference<unsigned int const>::type=unsigned int const&
expression add_reference<long const>::type=long const&
expression add_reference<unsigned long const>::type=unsigned long const&
expression add_reference<float const>::type=float const&
expression add_reference<long double const>::type=long double const&
expression add_reference<double const>::type=double const&
expression add_reference<UDT const>::type=UDT const&
expression add_reference<enum1 const>::type=enum1 const&
expression add_reference<bool volatile>::type=bool volatile&
expression add_reference<char volatile>::type=char volatile&
expression add_reference<wchar_t volatile>::type=wchar_t volatile&
expression add_reference<signed char volatile>::type=signed char volatile&
expression add_reference<unsigned char volatile>::type=unsigned char volatile&
expression add_reference<short volatile>::type=short volatile&
expression add_reference<unsigned short volatile>::type=unsigned short volatile&
expression add_reference<int volatile>::type=int volatile&
expression add_reference<unsigned int volatile>::type=unsigned int volatile&
expression add_reference<long volatile>::type=long volatile&
expression add_reference<unsigned long volatile>::type=unsigned long volatile&
expression add_reference<float volatile>::type=float volatile&
expression add_reference<long double volatile>::type=long double volatile&
expression add_reference<double volatile>::type=double volatile&
expression add_reference<UDT volatile>::type=UDT volatile&
expression add_reference<enum1 volatile>::type=enum1 volatile&
expression add_reference<bool *>::type=bool *&
expression add_reference<char *>::type=char *&
expression add_reference<wchar_t *>::type=wchar_t *&
expression add_reference<signed char *>::type=signed char *&
expression add_reference<unsigned char *>::type=unsigned char *&
expression add_reference<short *>::type=short *&
expression add_reference<unsigned short *>::type=unsigned short *&
expression add_reference<int *>::type=int *&
expression add_reference<unsigned int *>::type=unsigned int *&
expression add_reference<long *>::type=long *&
expression add_reference<unsigned long *>::type=unsigned long *&
expression add_reference<float *>::type=float *&
expression add_reference<long double *>::type=long double *&
expression add_reference<double *>::type=double *&
expression add_reference<UDT *>::type=UDT *&
expression add_reference<enum1 *>::type=enum1 *&
expression add_reference<bool >::type=bool &
expression add_reference<char >::type=char &
expression add_reference<wchar_t >::type=wchar_t &
expression add_reference<signed char >::type=signed char &
expression add_reference<unsigned char >::type=unsigned char &
expression add_reference<short >::type=short &
expression add_reference<unsigned short >::type=unsigned short &
expression add_reference<int >::type=int &
expression add_reference<unsigned int >::type=unsigned int &
expression add_reference<long >::type=long &
expression add_reference<unsigned long >::type=unsigned long &
expression add_reference<float >::type=float &
expression add_reference<long double >::type=long double &
expression add_reference<double >::type=double &
expression add_reference<UDT >::type=UDT &
expression add_reference<enum1 >::type=enum1 &
expression add_reference<bool const &>::type=bool const&
expression add_reference<char const &>::type=char const&
expression add_reference<wchar_t const &>::type=wchar_t const&
expression add_reference<signed char const &>::type=signed char const&
expression add_reference<unsigned char const &>::type=unsigned char const&
expression add_reference<short const &>::type=short const&
expression add_reference<unsigned short const &>::type=unsigned short const&
expression add_reference<int const &>::type=int const&
expression add_reference<unsigned int const &>::type=unsigned int const&
expression add_reference<long const &>::type=long const&
expression add_reference<unsigned long const &>::type=unsigned long const&
expression add_reference<float const &>::type=float const&
expression add_reference<long double const &>::type=long double const&
expression add_reference<double const &>::type=double const&
expression add_reference<UDT const &>::type=UDT const&
expression add_reference<enum1 const &>::type=enum1 const&
expression add_reference<bool &>::type=bool &
expression add_reference<char &>::type=char &
expression add_reference<wchar_t &>::type=wchar_t &
expression add_reference<signed char &>::type=signed char &
expression add_reference<unsigned char &>::type=unsigned char &
expression add_reference<short &>::type=short &
expression add_reference<unsigned short &>::type=unsigned short &
expression add_reference<int &>::type=int &
expression add_reference<unsigned int &>::type=unsigned int &
expression add_reference<long &>::type=long &
expression add_reference<unsigned long &>::type=unsigned long &
expression add_reference<float &>::type=float &
expression add_reference<long double &>::type=long double &
expression add_reference<double &>::type=double &
expression add_reference<UDT &>::type=UDT &
expression add_reference<enum1 &>::type=enum1 &
expression add_reference<bool *volatile>::type=bool *volatile&
expression add_reference<char *volatile>::type=char *volatile&
expression add_reference<wchar_t *volatile>::type=wchar_t *volatile&
expression add_reference<signed char *volatile>::type=signed char *volatile&
expression add_reference<unsigned char *volatile>::type=unsigned char *volatile&
expression add_reference<short *volatile>::type=short *volatile&
expression add_reference<unsigned short *volatile>::type=unsigned short *volatile&
expression add_reference<int *volatile>::type=int *volatile&
expression add_reference<unsigned int *volatile>::type=unsigned int *volatile&
expression add_reference<long *volatile>::type=long *volatile&
expression add_reference<unsigned long *volatile>::type=unsigned long *volatile&
expression add_reference<float *volatile>::type=float *volatile&
expression add_reference<long double *volatile>::type=long double *volatile&
expression add_reference<double *volatile>::type=double *volatile&
expression add_reference<UDT *volatile>::type=UDT *volatile&
expression add_reference<enum1 *volatile>::type=enum1 *volatile&
expression add_reference<bool const [2]>::type=bool const (&)[2]
expression add_reference<char const [2]>::type=char const (&)[2]
expression add_reference<wchar_t const [2]>::type=wchar_t const (&)[2]
expression add_reference<signed char const [2]>::type=signed char const (&)[2]
expression add_reference<unsigned char const [2]>::type=unsigned char const (&)[2]
expression add_reference<short const [2]>::type=short const (&)[2]
expression add_reference<unsigned short const [2]>::type=unsigned short const (&)[2]
expression add_reference<int const [2]>::type=int const (&)[2]
expression add_reference<unsigned int const [2]>::type=unsigned int const (&)[2]
expression add_reference<long const [2]>::type=long const (&)[2]
expression add_reference<unsigned long const [2]>::type=unsigned long const (&)[2]
expression add_reference<float const [2]>::type=float const (&)[2]
expression add_reference<long double const [2]>::type=long double const (&)[2]
expression add_reference<double const [2]>::type=double const (&)[2]
expression add_reference<UDT const [2]>::type=UDT const (&)[2]
expression add_reference<enum1 const [2]>::type=enum1 const (&)[2]
expression add_reference<bool const &>::type=bool const&
expression add_reference<char const &>::type=char const&
expression add_reference<wchar_t const &>::type=wchar_t const&
expression add_reference<signed char const &>::type=signed char const&
expression add_reference<unsigned char const &>::type=unsigned char const&
expression add_reference<short const &>::type=short const&
expression add_reference<unsigned short const &>::type=unsigned short const&
expression add_reference<int const &>::type=int const&
expression add_reference<unsigned int const &>::type=unsigned int const&
expression add_reference<long const &>::type=long const&
expression add_reference<unsigned long const &>::type=unsigned long const&
expression add_reference<float const &>::type=float const&
expression add_reference<long double const &>::type=long double const&
expression add_reference<double const &>::type=double const&
expression add_reference<UDT const &>::type=UDT const&
expression add_reference<enum1 const &>::type=enum1 const&
expression add_reference<bool const*>::type=bool const*&
expression add_reference<char const*>::type=char const*&
expression add_reference<wchar_t const*>::type=wchar_t const*&
expression add_reference<signed char const*>::type=signed char const*&
expression add_reference<unsigned char const*>::type=unsigned char const*&
expression add_reference<short const*>::type=short const*&
expression add_reference<unsigned short const*>::type=unsigned short const*&
expression add_reference<int const*>::type=int const*&
expression add_reference<unsigned int const*>::type=unsigned int const*&
expression add_reference<long const*>::type=long const*&
expression add_reference<unsigned long const*>::type=unsigned long const*&
expression add_reference<float const*>::type=float const*&
expression add_reference<long double const*>::type=long double const*&
expression add_reference<double const*>::type=double const*&
expression add_reference<UDT const*>::type=UDT const*&
expression add_reference<enum1 const*>::type=enum1 const*&
expression add_reference<bool volatile*>::type=bool volatile*&
expression add_reference<char volatile*>::type=char volatile*&
expression add_reference<wchar_t volatile*>::type=wchar_t volatile*&
expression add_reference<signed char volatile*>::type=signed char volatile*&
expression add_reference<unsigned char volatile*>::type=unsigned char volatile*&
expression add_reference<short volatile*>::type=short volatile*&
expression add_reference<unsigned short volatile*>::type=unsigned short volatile*&
expression add_reference<int volatile*>::type=int volatile*&
expression add_reference<unsigned int volatile*>::type=unsigned int volatile*&
expression add_reference<long volatile*>::type=long volatile*&
expression add_reference<unsigned long volatile*>::type=unsigned long volatile*&
expression add_reference<float volatile*>::type=float volatile*&
expression add_reference<long double volatile*>::type=long double volatile*&
expression add_reference<double volatile*>::type=double volatile*&
expression add_reference<UDT volatile*>::type=UDT volatile*&
expression add_reference<enum1 volatile*>::type=enum1 volatile*&
expression add_reference<bool const[2][3]>::type=bool const (&)[2][3]
expression add_reference<char const[2][3]>::type=char const (&)[2][3]
expression add_reference<wchar_t const[2][3]>::type=wchar_t const (&)[2][3]
expression add_reference<signed char const[2][3]>::type=signed char const (&)[2][3]
expression add_reference<unsigned char const[2][3]>::type=unsigned char const (&)[2][3]
expression add_reference<short const[2][3]>::type=short const (&)[2][3]
expression add_reference<unsigned short const[2][3]>::type=unsigned short const (&)[2][3]
expression add_reference<int const[2][3]>::type=int const (&)[2][3]
expression add_reference<unsigned int const[2][3]>::type=unsigned int const (&)[2][3]
expression add_reference<long const[2][3]>::type=long const (&)[2][3]
expression add_reference<unsigned long const[2][3]>::type=unsigned long const (&)[2][3]
expression add_reference<float const[2][3]>::type=float const (&)[2][3]
expression add_reference<long double const[2][3]>::type=long double const (&)[2][3]
expression add_reference<double const[2][3]>::type=double const (&)[2][3]
expression add_reference<UDT const[2][3]>::type=UDT const (&)[2][3]
expression add_reference<enum1 const[2][3]>::type=enum1 const (&)[2][3]
expression add_reference<bool (&)[2]>::type=bool (&)[2]
expression add_reference<char (&)[2]>::type=char (&)[2]
expression add_reference<wchar_t (&)[2]>::type=wchar_t (&)[2]
expression add_reference<signed char (&)[2]>::type=signed char (&)[2]
expression add_reference<unsigned char (&)[2]>::type=unsigned char (&)[2]
expression add_reference<short (&)[2]>::type=short (&)[2]
expression add_reference<unsigned short (&)[2]>::type=unsigned short (&)[2]
expression add_reference<int (&)[2]>::type=int (&)[2]
expression add_reference<unsigned int (&)[2]>::type=unsigned int (&)[2]
expression add_reference<long (&)[2]>::type=long (&)[2]
expression add_reference<unsigned long (&)[2]>::type=unsigned long (&)[2]
expression add_reference<float (&)[2]>::type=float (&)[2]
expression add_reference<long double (&)[2]>::type=long double (&)[2]
expression add_reference<double (&)[2]>::type=double (&)[2]
expression add_reference<UDT (&)[2]>::type=UDT (&)[2]
expression add_reference<enum1 (&)[2]>::type=enum1 (&)[2]
Results of add_volatile_test:
expression add_volatile<bool const>::type=bool const volatile
expression add_volatile<char const>::type=char const volatile
expression add_volatile<wchar_t const>::type=wchar_t const volatile
expression add_volatile<signed char const>::type=signed char const volatile
expression add_volatile<unsigned char const>::type=unsigned char const volatile
expression add_volatile<short const>::type=short const volatile
expression add_volatile<unsigned short const>::type=unsigned short const volatile
expression add_volatile<int const>::type=int const volatile
expression add_volatile<unsigned int const>::type=unsigned int const volatile
expression add_volatile<long const>::type=long const volatile
expression add_volatile<unsigned long const>::type=unsigned long const volatile
expression add_volatile<float const>::type=float const volatile
expression add_volatile<long double const>::type=long double const volatile
expression add_volatile<double const>::type=double const volatile
expression add_volatile<UDT const>::type=UDT const volatile
expression add_volatile<enum1 const>::type=enum1 const volatile
expression add_volatile<bool volatile>::type=bool volatile
expression add_volatile<char volatile>::type=char volatile
expression add_volatile<wchar_t volatile>::type=wchar_t volatile
expression add_volatile<signed char volatile>::type=signed char volatile
expression add_volatile<unsigned char volatile>::type=unsigned char volatile
expression add_volatile<short volatile>::type=short volatile
expression add_volatile<unsigned short volatile>::type=unsigned short volatile
expression add_volatile<int volatile>::type=int volatile
expression add_volatile<unsigned int volatile>::type=unsigned int volatile
expression add_volatile<long volatile>::type=long volatile
expression add_volatile<unsigned long volatile>::type=unsigned long volatile
expression add_volatile<float volatile>::type=float volatile
expression add_volatile<long double volatile>::type=long double volatile
expression add_volatile<double volatile>::type=double volatile
expression add_volatile<UDT volatile>::type=UDT volatile
expression add_volatile<enum1 volatile>::type=enum1 volatile
expression add_volatile<bool *>::type=bool *volatile
expression add_volatile<char *>::type=char *volatile
expression add_volatile<wchar_t *>::type=wchar_t *volatile
expression add_volatile<signed char *>::type=signed char *volatile
expression add_volatile<unsigned char *>::type=unsigned char *volatile
expression add_volatile<short *>::type=short *volatile
expression add_volatile<unsigned short *>::type=unsigned short *volatile
expression add_volatile<int *>::type=int *volatile
expression add_volatile<unsigned int *>::type=unsigned int *volatile
expression add_volatile<long *>::type=long *volatile
expression add_volatile<unsigned long *>::type=unsigned long *volatile
expression add_volatile<float *>::type=float *volatile
expression add_volatile<long double *>::type=long double *volatile
expression add_volatile<double *>::type=double *volatile
expression add_volatile<UDT *>::type=UDT *volatile
expression add_volatile<enum1 *>::type=enum1 *volatile
expression add_volatile<bool >::type=bool volatile
expression add_volatile<char >::type=char volatile
expression add_volatile<wchar_t >::type=wchar_t volatile
expression add_volatile<signed char >::type=signed char volatile
expression add_volatile<unsigned char >::type=unsigned char volatile
expression add_volatile<short >::type=short volatile
expression add_volatile<unsigned short >::type=unsigned short volatile
expression add_volatile<int >::type=int volatile
expression add_volatile<unsigned int >::type=unsigned int volatile
expression add_volatile<long >::type=long volatile
expression add_volatile<unsigned long >::type=unsigned long volatile
expression add_volatile<float >::type=float volatile
expression add_volatile<long double >::type=long double volatile
expression add_volatile<double >::type=double volatile
expression add_volatile<UDT >::type=UDT volatile
expression add_volatile<enum1 >::type=enum1 volatile
expression add_volatile<bool *volatile>::type=bool *volatile
expression add_volatile<char *volatile>::type=char *volatile
expression add_volatile<wchar_t *volatile>::type=wchar_t *volatile
expression add_volatile<signed char *volatile>::type=signed char *volatile
expression add_volatile<unsigned char *volatile>::type=unsigned char *volatile
expression add_volatile<short *volatile>::type=short *volatile
expression add_volatile<unsigned short *volatile>::type=unsigned short *volatile
expression add_volatile<int *volatile>::type=int *volatile
expression add_volatile<unsigned int *volatile>::type=unsigned int *volatile
expression add_volatile<long *volatile>::type=long *volatile
expression add_volatile<unsigned long *volatile>::type=unsigned long *volatile
expression add_volatile<float *volatile>::type=float *volatile
expression add_volatile<long double *volatile>::type=long double *volatile
expression add_volatile<double *volatile>::type=double *volatile
expression add_volatile<UDT *volatile>::type=UDT *volatile
expression add_volatile<enum1 *volatile>::type=enum1 *volatile
expression add_volatile<bool const*>::type=bool const*volatile
expression add_volatile<char const*>::type=char const*volatile
expression add_volatile<wchar_t const*>::type=wchar_t const*volatile
expression add_volatile<signed char const*>::type=signed char const*volatile
expression add_volatile<unsigned char const*>::type=unsigned char const*volatile
expression add_volatile<short const*>::type=short const*volatile
expression add_volatile<unsigned short const*>::type=unsigned short const*volatile
expression add_volatile<int const*>::type=int const*volatile
expression add_volatile<unsigned int const*>::type=unsigned int const*volatile
expression add_volatile<long const*>::type=long const*volatile
expression add_volatile<unsigned long const*>::type=unsigned long const*volatile
expression add_volatile<float const*>::type=float const*volatile
expression add_volatile<long double const*>::type=long double const*volatile
expression add_volatile<double const*>::type=double const*volatile
expression add_volatile<UDT const*>::type=UDT const*volatile
expression add_volatile<enum1 const*>::type=enum1 const*volatile
expression add_volatile<bool volatile*>::type=bool volatile*volatile
expression add_volatile<char volatile*>::type=char volatile*volatile
expression add_volatile<wchar_t volatile*>::type=wchar_t volatile*volatile
expression add_volatile<signed char volatile*>::type=signed char volatile*volatile
expression add_volatile<unsigned char volatile*>::type=unsigned char volatile*volatile
expression add_volatile<short volatile*>::type=short volatile*volatile
expression add_volatile<unsigned short volatile*>::type=unsigned short volatile*volatile
expression add_volatile<int volatile*>::type=int volatile*volatile
expression add_volatile<unsigned int volatile*>::type=unsigned int volatile*volatile
expression add_volatile<long volatile*>::type=long volatile*volatile
expression add_volatile<unsigned long volatile*>::type=unsigned long volatile*volatile
expression add_volatile<float volatile*>::type=float volatile*volatile
expression add_volatile<long double volatile*>::type=long double volatile*volatile
expression add_volatile<double volatile*>::type=double volatile*volatile
expression add_volatile<UDT volatile*>::type=UDT volatile*volatile
expression add_volatile<enum1 volatile*>::type=enum1 volatile*volatile
expression add_volatile<bool const &>::type=bool const&
expression add_volatile<char const &>::type=char const&
expression add_volatile<wchar_t const &>::type=wchar_t const&
expression add_volatile<signed char const &>::type=signed char const&
expression add_volatile<unsigned char const &>::type=unsigned char const&
expression add_volatile<short const &>::type=short const&
expression add_volatile<unsigned short const &>::type=unsigned short const&
expression add_volatile<int const &>::type=int const&
expression add_volatile<unsigned int const &>::type=unsigned int const&
expression add_volatile<long const &>::type=long const&
expression add_volatile<unsigned long const &>::type=unsigned long const&
expression add_volatile<float const &>::type=float const&
expression add_volatile<long double const &>::type=long double const&
expression add_volatile<double const &>::type=double const&
expression add_volatile<UDT const &>::type=UDT const&
expression add_volatile<enum1 const &>::type=enum1 const&
expression add_volatile<bool &>::type=bool &
expression add_volatile<char &>::type=char &
expression add_volatile<wchar_t &>::type=wchar_t &
expression add_volatile<signed char &>::type=signed char &
expression add_volatile<unsigned char &>::type=unsigned char &
expression add_volatile<short &>::type=short &
expression add_volatile<unsigned short &>::type=unsigned short &
expression add_volatile<int &>::type=int &
expression add_volatile<unsigned int &>::type=unsigned int &
expression add_volatile<long &>::type=long &
expression add_volatile<unsigned long &>::type=unsigned long &
expression add_volatile<float &>::type=float &
expression add_volatile<long double &>::type=long double &
expression add_volatile<double &>::type=double &
expression add_volatile<UDT &>::type=UDT &
expression add_volatile<enum1 &>::type=enum1 &
expression add_volatile<bool const [2]>::type=bool const volatile [2]
expression add_volatile<char const [2]>::type=char const volatile [2]
expression add_volatile<wchar_t const [2]>::type=wchar_t const volatile [2]
expression add_volatile<signed char const [2]>::type=signed char const volatile [2]
expression add_volatile<unsigned char const [2]>::type=unsigned char const volatile [2]
expression add_volatile<short const [2]>::type=short const volatile [2]
expression add_volatile<unsigned short const [2]>::type=unsigned short const volatile [2]
expression add_volatile<int const [2]>::type=int const volatile [2]
expression add_volatile<unsigned int const [2]>::type=unsigned int const volatile [2]
expression add_volatile<long const [2]>::type=long const volatile [2]
expression add_volatile<unsigned long const [2]>::type=unsigned long const volatile [2]
expression add_volatile<float const [2]>::type=float const volatile [2]
expression add_volatile<long double const [2]>::type=long double const volatile [2]
expression add_volatile<double const [2]>::type=double const volatile [2]
expression add_volatile<UDT const [2]>::type=UDT const volatile [2]
expression add_volatile<enum1 const [2]>::type=enum1 const volatile [2]
expression add_volatile<bool volatile &>::type=bool volatile&
expression add_volatile<char volatile &>::type=char volatile&
expression add_volatile<wchar_t volatile &>::type=wchar_t volatile&
expression add_volatile<signed char volatile &>::type=signed char volatile&
expression add_volatile<unsigned char volatile &>::type=unsigned char volatile&
expression add_volatile<short volatile &>::type=short volatile&
expression add_volatile<unsigned short volatile &>::type=unsigned short volatile&
expression add_volatile<int volatile &>::type=int volatile&
expression add_volatile<unsigned int volatile &>::type=unsigned int volatile&
expression add_volatile<long volatile &>::type=long volatile&
expression add_volatile<unsigned long volatile &>::type=unsigned long volatile&
expression add_volatile<float volatile &>::type=float volatile&
expression add_volatile<long double volatile &>::type=long double volatile&
expression add_volatile<double volatile &>::type=double volatile&
expression add_volatile<UDT volatile &>::type=UDT volatile&
expression add_volatile<enum1 volatile &>::type=enum1 volatile&
expression add_volatile<bool [2][3]>::type=bool volatile[2][3]
expression add_volatile<char [2][3]>::type=char volatile[2][3]
expression add_volatile<wchar_t [2][3]>::type=wchar_t volatile[2][3]
expression add_volatile<signed char [2][3]>::type=signed char volatile[2][3]
expression add_volatile<unsigned char [2][3]>::type=unsigned char volatile[2][3]
expression add_volatile<short [2][3]>::type=short volatile[2][3]
expression add_volatile<unsigned short [2][3]>::type=unsigned short volatile[2][3]
expression add_volatile<int [2][3]>::type=int volatile[2][3]
expression add_volatile<unsigned int [2][3]>::type=unsigned int volatile[2][3]
expression add_volatile<long [2][3]>::type=long volatile[2][3]
expression add_volatile<unsigned long [2][3]>::type=unsigned long volatile[2][3]
expression add_volatile<float [2][3]>::type=float volatile[2][3]
expression add_volatile<long double [2][3]>::type=long double volatile[2][3]
expression add_volatile<double [2][3]>::type=double volatile[2][3]
expression add_volatile<UDT [2][3]>::type=UDT volatile[2][3]
expression add_volatile<enum1 [2][3]>::type=enum1 volatile[2][3]
expression add_volatile<bool (&)[2]>::type=bool (&)[2]
expression add_volatile<char (&)[2]>::type=char (&)[2]
expression add_volatile<wchar_t (&)[2]>::type=wchar_t (&)[2]
expression add_volatile<signed char (&)[2]>::type=signed char (&)[2]
expression add_volatile<unsigned char (&)[2]>::type=unsigned char (&)[2]
expression add_volatile<short (&)[2]>::type=short (&)[2]
expression add_volatile<unsigned short (&)[2]>::type=unsigned short (&)[2]
expression add_volatile<int (&)[2]>::type=int (&)[2]
expression add_volatile<unsigned int (&)[2]>::type=unsigned int (&)[2]
expression add_volatile<long (&)[2]>::type=long (&)[2]
expression add_volatile<unsigned long (&)[2]>::type=unsigned long (&)[2]
expression add_volatile<float (&)[2]>::type=float (&)[2]
expression add_volatile<long double (&)[2]>::type=long double (&)[2]
expression add_volatile<double (&)[2]>::type=double (&)[2]
expression add_volatile<UDT (&)[2]>::type=UDT (&)[2]
expression add_volatile<enum1 (&)[2]>::type=enum1 (&)[2]
Results of alignment_of_test:
expression alignment_of<void>::value=false
expression alignment_of<char>::value=true
expression alignment_of<short>::value=true
expression alignment_of<int>::value=true
expression alignment_of<long>::value=true
expression alignment_of<float>::value=true
expression alignment_of<double>::value=true
expression alignment_of<long double>::value=true
expression alignment_of<int[4]>::value=true
expression alignment_of<int(*)(int)>::value=true
expression alignment_of<int*>::value=true
expression alignment_of<VB>::value=true
expression alignment_of<VD>::value=true
expression alignment_of<enum_UDT>::value=true
expression alignment_of<mf2>::value=true
expression alignment_of<POD_UDT>::value=true
expression alignment_of<empty_UDT>::value=true
expression alignment_of<union_UDT>::value=true
Results of extent_test:
expression extent<int>::value=false
expression extent<int[]>::value=false
expression extent<int[][10]>::value=false
expression extent<int[5][10]>::value=true
expression extent<int[5][10][40]>::value=true
expression extent<int (&)[5][10]>::value=false
expression extent<int (*)[5][10]>::value=false
expression (extent<int,1>::value)=false
expression (extent<int[],1>::value)=false
expression (extent<int[][10],1>::value)=true
expression (extent<int[5][10],1>::value)=true
expression (extent<int[5][10][40],1>::value)=true
expression (extent<int (&)[5][10],1>::value)=false
expression (extent<int (*)[5][10],1>::value)=false
expression (extent<int[5][10],2>::value)=false
expression (extent<int[5][10][40],2>::value)=true
expression (extent<int[5][10][40],3>::value)=false
Results of has_nothrow_assign_test:
expression has_nothrow_assign<bool>::value=true
expression has_nothrow_assign<signed char>::value=true
expression has_nothrow_assign<unsigned char>::value=true
expression has_nothrow_assign<char>::value=true
expression has_nothrow_assign<unsigned short>::value=true
expression has_nothrow_assign<short>::value=true
expression has_nothrow_assign<unsigned int>::value=true
expression has_nothrow_assign<int>::value=true
expression has_nothrow_assign<unsigned long>::value=true
expression has_nothrow_assign<long>::value=true
expression has_nothrow_assign<float>::value=true
expression has_nothrow_assign<double>::value=true
expression has_nothrow_assign<long double>::value=true
expression has_nothrow_assign<int>::value=true
expression has_nothrow_assign<void*>::value=true
expression has_nothrow_assign<f1>::value=true
expression has_nothrow_assign<f2>::value=true
expression has_nothrow_assign<f3>::value=true
expression has_nothrow_assign<mf1>::value=true
expression has_nothrow_assign<mf2>::value=true
expression has_nothrow_assign<mf3>::value=true
expression has_nothrow_assign<mp>::value=true
expression has_nothrow_assign<cmf>::value=true
expression has_nothrow_assign<enum_UDT>::value=true
expression has_nothrow_assign<int&>::value=false
expression has_nothrow_assign<const int&>::value=false
expression has_nothrow_assign<int[2]>::value=true
expression has_nothrow_assign<int[3][2]>::value=true
expression has_nothrow_assign<int[2][4][5][6][3]>::value=true
expression has_nothrow_assign<UDT>::value=false
expression has_nothrow_assign<empty_UDT>::value=false
expression has_nothrow_assign<void>::value=true
expression has_nothrow_assign<nothrow_copy_UDT>::value=false
expression has_nothrow_assign<nothrow_construct_UDT>::value=false
expression has_nothrow_assign<test_abc1>::value=false
Results of has_nothrow_consr_test:
expression has_nothrow_constructor<bool>::value=true
expression has_nothrow_constructor<bool const>::value=true
expression has_nothrow_constructor<bool volatile>::value=true
expression has_nothrow_constructor<bool const volatile>::value=true
expression has_nothrow_constructor<signed char>::value=true
expression has_nothrow_constructor<signed char const>::value=true
expression has_nothrow_constructor<signed char volatile>::value=true
expression has_nothrow_constructor<signed char const volatile>::value=true
expression has_nothrow_constructor<unsigned char>::value=true
expression has_nothrow_constructor<char>::value=true
expression has_nothrow_constructor<unsigned char const>::value=true
expression has_nothrow_constructor<char const>::value=true
expression has_nothrow_constructor<unsigned char volatile>::value=true
expression has_nothrow_constructor<char volatile>::value=true
expression has_nothrow_constructor<unsigned char const volatile>::value=true
expression has_nothrow_constructor<char const volatile>::value=true
expression has_nothrow_constructor<unsigned short>::value=true
expression has_nothrow_constructor<short>::value=true
expression has_nothrow_constructor<unsigned short const>::value=true
expression has_nothrow_constructor<short const>::value=true
expression has_nothrow_constructor<unsigned short volatile>::value=true
expression has_nothrow_constructor<short volatile>::value=true
expression has_nothrow_constructor<unsigned short const volatile>::value=true
expression has_nothrow_constructor<short const volatile>::value=true
expression has_nothrow_constructor<unsigned int>::value=true
expression has_nothrow_constructor<int>::value=true
expression has_nothrow_constructor<unsigned int const>::value=true
expression has_nothrow_constructor<int const>::value=true
expression has_nothrow_constructor<unsigned int volatile>::value=true
expression has_nothrow_constructor<int volatile>::value=true
expression has_nothrow_constructor<unsigned int const volatile>::value=true
expression has_nothrow_constructor<int const volatile>::value=true
expression has_nothrow_constructor<unsigned long>::value=true
expression has_nothrow_constructor<long>::value=true
expression has_nothrow_constructor<unsigned long const>::value=true
expression has_nothrow_constructor<long const>::value=true
expression has_nothrow_constructor<unsigned long volatile>::value=true
expression has_nothrow_constructor<long volatile>::value=true
expression has_nothrow_constructor<unsigned long const volatile>::value=true
expression has_nothrow_constructor<long const volatile>::value=true
expression has_nothrow_constructor<float>::value=true
expression has_nothrow_constructor<float const>::value=true
expression has_nothrow_constructor<float volatile>::value=true
expression has_nothrow_constructor<float const volatile>::value=true
expression has_nothrow_constructor<double>::value=true
expression has_nothrow_constructor<double const>::value=true
expression has_nothrow_constructor<double volatile>::value=true
expression has_nothrow_constructor<double const volatile>::value=true
expression has_nothrow_constructor<long double>::value=true
expression has_nothrow_constructor<long double const>::value=true
expression has_nothrow_constructor<long double volatile>::value=true
expression has_nothrow_constructor<long double const volatile>::value=true
expression has_nothrow_constructor<int>::value=true
expression has_nothrow_constructor<void*>::value=true
expression has_nothrow_constructor<int*const>::value=true
expression has_nothrow_constructor<f1>::value=true
expression has_nothrow_constructor<f2>::value=true
expression has_nothrow_constructor<f3>::value=true
expression has_nothrow_constructor<mf1>::value=true
expression has_nothrow_constructor<mf2>::value=true
expression has_nothrow_constructor<mf3>::value=true
expression has_nothrow_constructor<mp>::value=true
expression has_nothrow_constructor<cmf>::value=true
expression has_nothrow_constructor<enum_UDT>::value=true
expression has_nothrow_constructor<int&>::value=false
expression has_nothrow_constructor<const int&>::value=false
expression has_nothrow_constructor<int[2]>::value=true
expression has_nothrow_constructor<int[3][2]>::value=true
expression has_nothrow_constructor<int[2][4][5][6][3]>::value=true
expression has_nothrow_constructor<UDT>::value=false
expression has_nothrow_constructor<empty_UDT>::value=false
expression has_nothrow_constructor<void>::value=true
expression has_nothrow_constructor<nothrow_assign_UDT>::value=false
expression has_nothrow_constructor<nothrow_copy_UDT>::value=false
expression has_nothrow_constructor<test_abc1>::value=false
Results of has_nothrow_copy_test:
expression has_nothrow_copy<bool>::value=true
expression has_nothrow_copy<bool const>::value=true
expression has_nothrow_copy<signed char>::value=true
expression has_nothrow_copy<signed char const>::value=true
expression has_nothrow_copy<unsigned char>::value=true
expression has_nothrow_copy<char>::value=true
expression has_nothrow_copy<unsigned char const>::value=true
expression has_nothrow_copy<char const>::value=true
expression has_nothrow_copy<unsigned short>::value=true
expression has_nothrow_copy<short>::value=true
expression has_nothrow_copy<unsigned short const>::value=true
expression has_nothrow_copy<short const>::value=true
expression has_nothrow_copy<unsigned int>::value=true
expression has_nothrow_copy<int>::value=true
expression has_nothrow_copy<unsigned int const>::value=true
expression has_nothrow_copy<int const>::value=true
expression has_nothrow_copy<unsigned long>::value=true
expression has_nothrow_copy<long>::value=true
expression has_nothrow_copy<unsigned long const>::value=true
expression has_nothrow_copy<long const>::value=true
expression has_nothrow_copy<float>::value=true
expression has_nothrow_copy<float const>::value=true
expression has_nothrow_copy<double>::value=true
expression has_nothrow_copy<double const>::value=true
expression has_nothrow_copy<long double>::value=true
expression has_nothrow_copy<long double const>::value=true
expression has_nothrow_copy<int>::value=true
expression has_nothrow_copy<void*>::value=true
expression has_nothrow_copy<int*const>::value=true
expression has_nothrow_copy<f1>::value=true
expression has_nothrow_copy<f2>::value=true
expression has_nothrow_copy<f3>::value=true
expression has_nothrow_copy<mf1>::value=true
expression has_nothrow_copy<mf2>::value=true
expression has_nothrow_copy<mf3>::value=true
expression has_nothrow_copy<mp>::value=true
expression has_nothrow_copy<cmf>::value=true
expression has_nothrow_copy<enum_UDT>::value=true
expression has_nothrow_copy<int&>::value=false
expression has_nothrow_copy<const int&>::value=false
expression has_nothrow_copy<int[2]>::value=true
expression has_nothrow_copy<int[3][2]>::value=true
expression has_nothrow_copy<int[2][4][5][6][3]>::value=true
expression has_nothrow_copy<UDT>::value=false
expression has_nothrow_copy<void>::value=true
expression has_nothrow_copy<nothrow_assign_UDT>::value=false
expression has_nothrow_copy<nothrow_construct_UDT>::value=false
expression has_nothrow_copy<test_abc1>::value=false
Results of has_trivial_assign_test:
expression has_trivial_assign<bool>::value=true
expression has_trivial_assign<signed char>::value=true
expression has_trivial_assign<unsigned char>::value=true
expression has_trivial_assign<char>::value=true
expression has_trivial_assign<unsigned short>::value=true
expression has_trivial_assign<short>::value=true
expression has_trivial_assign<unsigned int>::value=true
expression has_trivial_assign<int>::value=true
expression has_trivial_assign<unsigned long>::value=true
expression has_trivial_assign<long>::value=true
expression has_trivial_assign<float>::value=true
expression has_trivial_assign<double>::value=true
expression has_trivial_assign<long double>::value=true
expression has_trivial_assign<int>::value=true
expression has_trivial_assign<void*>::value=true
expression has_trivial_assign<f1>::value=true
expression has_trivial_assign<f2>::value=true
expression has_trivial_assign<f3>::value=true
expression has_trivial_assign<mf1>::value=true
expression has_trivial_assign<mf2>::value=true
expression has_trivial_assign<mf3>::value=true
expression has_trivial_assign<mp>::value=true
expression has_trivial_assign<cmf>::value=true
expression has_trivial_assign<enum_UDT>::value=true
expression has_trivial_assign<int&>::value=false
expression has_trivial_assign<const int&>::value=false
expression has_trivial_assign<int[2]>::value=true
expression has_trivial_assign<int[3][2]>::value=true
expression has_trivial_assign<int[2][4][5][6][3]>::value=true
expression has_trivial_assign<UDT>::value=false
expression has_trivial_assign<empty_UDT>::value=false
expression has_trivial_assign<void>::value=true
expression has_trivial_assign<trivial_except_assign>::value=false
expression has_trivial_assign<wrap<trivial_except_assign> >::value=false
expression has_trivial_assign<test_abc1>::value=false
Results of has_trivial_constr_test:
expression has_trivial_constructor<bool>::value=true
expression has_trivial_constructor<bool const>::value=true
expression has_trivial_constructor<bool volatile>::value=true
expression has_trivial_constructor<bool const volatile>::value=true
expression has_trivial_constructor<signed char>::value=true
expression has_trivial_constructor<signed char const>::value=true
expression has_trivial_constructor<signed char volatile>::value=true
expression has_trivial_constructor<signed char const volatile>::value=true
expression has_trivial_constructor<unsigned char>::value=true
expression has_trivial_constructor<char>::value=true
expression has_trivial_constructor<unsigned char const>::value=true
expression has_trivial_constructor<char const>::value=true
expression has_trivial_constructor<unsigned char volatile>::value=true
expression has_trivial_constructor<char volatile>::value=true
expression has_trivial_constructor<unsigned char const volatile>::value=true
expression has_trivial_constructor<char const volatile>::value=true
expression has_trivial_constructor<unsigned short>::value=true
expression has_trivial_constructor<short>::value=true
expression has_trivial_constructor<unsigned short const>::value=true
expression has_trivial_constructor<short const>::value=true
expression has_trivial_constructor<unsigned short volatile>::value=true
expression has_trivial_constructor<short volatile>::value=true
expression has_trivial_constructor<unsigned short const volatile>::value=true
expression has_trivial_constructor<short const volatile>::value=true
expression has_trivial_constructor<unsigned int>::value=true
expression has_trivial_constructor<int>::value=true
expression has_trivial_constructor<unsigned int const>::value=true
expression has_trivial_constructor<int const>::value=true
expression has_trivial_constructor<unsigned int volatile>::value=true
expression has_trivial_constructor<int volatile>::value=true
expression has_trivial_constructor<unsigned int const volatile>::value=true
expression has_trivial_constructor<int const volatile>::value=true
expression has_trivial_constructor<unsigned long>::value=true
expression has_trivial_constructor<long>::value=true
expression has_trivial_constructor<unsigned long const>::value=true
expression has_trivial_constructor<long const>::value=true
expression has_trivial_constructor<unsigned long volatile>::value=true
expression has_trivial_constructor<long volatile>::value=true
expression has_trivial_constructor<unsigned long const volatile>::value=true
expression has_trivial_constructor<long const volatile>::value=true
expression has_trivial_constructor<float>::value=true
expression has_trivial_constructor<float const>::value=true
expression has_trivial_constructor<float volatile>::value=true
expression has_trivial_constructor<float const volatile>::value=true
expression has_trivial_constructor<double>::value=true
expression has_trivial_constructor<double const>::value=true
expression has_trivial_constructor<double volatile>::value=true
expression has_trivial_constructor<double const volatile>::value=true
expression has_trivial_constructor<long double>::value=true
expression has_trivial_constructor<long double const>::value=true
expression has_trivial_constructor<long double volatile>::value=true
expression has_trivial_constructor<long double const volatile>::value=true
expression has_trivial_constructor<int>::value=true
expression has_trivial_constructor<void*>::value=true
expression has_trivial_constructor<int*const>::value=true
expression has_trivial_constructor<f1>::value=true
expression has_trivial_constructor<f2>::value=true
expression has_trivial_constructor<f3>::value=true
expression has_trivial_constructor<mf1>::value=true
expression has_trivial_constructor<mf2>::value=true
expression has_trivial_constructor<mf3>::value=true
expression has_trivial_constructor<mp>::value=true
expression has_trivial_constructor<cmf>::value=true
expression has_trivial_constructor<enum_UDT>::value=true
expression has_trivial_constructor<int&>::value=false
expression has_trivial_constructor<const int&>::value=false
expression has_trivial_constructor<int[2]>::value=true
expression has_trivial_constructor<int[3][2]>::value=true
expression has_trivial_constructor<int[2][4][5][6][3]>::value=true
expression has_trivial_constructor<UDT>::value=false
expression has_trivial_constructor<empty_UDT>::value=false
expression has_trivial_constructor<void>::value=true
expression has_trivial_constructor<trivial_except_construct>::value=false
expression has_trivial_constructor<wrap<trivial_except_construct> >::value=false
expression has_trivial_constructor<test_abc1>::value=false
Results of has_trivial_copy_test:
expression has_trivial_copy<bool>::value=true
expression has_trivial_copy<bool const>::value=true
expression has_trivial_copy<signed char>::value=true
expression has_trivial_copy<signed char const>::value=true
expression has_trivial_copy<unsigned char>::value=true
expression has_trivial_copy<char>::value=true
expression has_trivial_copy<unsigned char const>::value=true
expression has_trivial_copy<char const>::value=true
expression has_trivial_copy<unsigned short>::value=true
expression has_trivial_copy<short>::value=true
expression has_trivial_copy<unsigned short const>::value=true
expression has_trivial_copy<short const>::value=true
expression has_trivial_copy<unsigned int>::value=true
expression has_trivial_copy<int>::value=true
expression has_trivial_copy<unsigned int const>::value=true
expression has_trivial_copy<int const>::value=true
expression has_trivial_copy<unsigned long>::value=true
expression has_trivial_copy<long>::value=true
expression has_trivial_copy<unsigned long const>::value=true
expression has_trivial_copy<long const>::value=true
expression has_trivial_copy<float>::value=true
expression has_trivial_copy<float const>::value=true
expression has_trivial_copy<double>::value=true
expression has_trivial_copy<double const>::value=true
expression has_trivial_copy<long double>::value=true
expression has_trivial_copy<long double const>::value=true
expression has_trivial_copy<int>::value=true
expression has_trivial_copy<void*>::value=true
expression has_trivial_copy<int*const>::value=true
expression has_trivial_copy<f1>::value=true
expression has_trivial_copy<f2>::value=true
expression has_trivial_copy<f3>::value=true
expression has_trivial_copy<mf1>::value=true
expression has_trivial_copy<mf2>::value=true
expression has_trivial_copy<mf3>::value=true
expression has_trivial_copy<mp>::value=true
expression has_trivial_copy<cmf>::value=true
expression has_trivial_copy<enum_UDT>::value=true
expression has_trivial_copy<int&>::value=false
expression has_trivial_copy<const int&>::value=false
expression has_trivial_copy<int[2]>::value=true
expression has_trivial_copy<int[3][2]>::value=true
expression has_trivial_copy<int[2][4][5][6][3]>::value=true
expression has_trivial_copy<UDT>::value=false
expression has_trivial_copy<void>::value=true
expression has_trivial_copy<trivial_except_copy>::value=false
expression has_trivial_copy<wrap<trivial_except_copy> >::value=false
expression has_trivial_copy<test_abc1>::value=false
Results of has_trivial_destructor_test:
expression has_trivial_destructor<bool>::value=true
expression has_trivial_destructor<bool const>::value=true
expression has_trivial_destructor<bool volatile>::value=true
expression has_trivial_destructor<bool const volatile>::value=true
expression has_trivial_destructor<signed char>::value=true
expression has_trivial_destructor<signed char const>::value=true
expression has_trivial_destructor<signed char volatile>::value=true
expression has_trivial_destructor<signed char const volatile>::value=true
expression has_trivial_destructor<unsigned char>::value=true
expression has_trivial_destructor<char>::value=true
expression has_trivial_destructor<unsigned char const>::value=true
expression has_trivial_destructor<char const>::value=true
expression has_trivial_destructor<unsigned char volatile>::value=true
expression has_trivial_destructor<char volatile>::value=true
expression has_trivial_destructor<unsigned char const volatile>::value=true
expression has_trivial_destructor<char const volatile>::value=true
expression has_trivial_destructor<unsigned short>::value=true
expression has_trivial_destructor<short>::value=true
expression has_trivial_destructor<unsigned short const>::value=true
expression has_trivial_destructor<short const>::value=true
expression has_trivial_destructor<unsigned short volatile>::value=true
expression has_trivial_destructor<short volatile>::value=true
expression has_trivial_destructor<unsigned short const volatile>::value=true
expression has_trivial_destructor<short const volatile>::value=true
expression has_trivial_destructor<unsigned int>::value=true
expression has_trivial_destructor<int>::value=true
expression has_trivial_destructor<unsigned int const>::value=true
expression has_trivial_destructor<int const>::value=true
expression has_trivial_destructor<unsigned int volatile>::value=true
expression has_trivial_destructor<int volatile>::value=true
expression has_trivial_destructor<unsigned int const volatile>::value=true
expression has_trivial_destructor<int const volatile>::value=true
expression has_trivial_destructor<unsigned long>::value=true
expression has_trivial_destructor<long>::value=true
expression has_trivial_destructor<unsigned long const>::value=true
expression has_trivial_destructor<long const>::value=true
expression has_trivial_destructor<unsigned long volatile>::value=true
expression has_trivial_destructor<long volatile>::value=true
expression has_trivial_destructor<unsigned long const volatile>::value=true
expression has_trivial_destructor<long const volatile>::value=true
expression has_trivial_destructor<float>::value=true
expression has_trivial_destructor<float const>::value=true
expression has_trivial_destructor<float volatile>::value=true
expression has_trivial_destructor<float const volatile>::value=true
expression has_trivial_destructor<double>::value=true
expression has_trivial_destructor<double const>::value=true
expression has_trivial_destructor<double volatile>::value=true
expression has_trivial_destructor<double const volatile>::value=true
expression has_trivial_destructor<long double>::value=true
expression has_trivial_destructor<long double const>::value=true
expression has_trivial_destructor<long double volatile>::value=true
expression has_trivial_destructor<long double const volatile>::value=true
expression has_trivial_destructor<int>::value=true
expression has_trivial_destructor<void*>::value=true
expression has_trivial_destructor<int*const>::value=true
expression has_trivial_destructor<f1>::value=true
expression has_trivial_destructor<f2>::value=true
expression has_trivial_destructor<f3>::value=true
expression has_trivial_destructor<mf1>::value=true
expression has_trivial_destructor<mf2>::value=true
expression has_trivial_destructor<mf3>::value=true
expression has_trivial_destructor<mp>::value=true
expression has_trivial_destructor<cmf>::value=true
expression has_trivial_destructor<enum_UDT>::value=true
expression has_trivial_destructor<int[2]>::value=true
expression has_trivial_destructor<int[3][2]>::value=true
expression has_trivial_destructor<int[2][4][5][6][3]>::value=true
expression has_trivial_destructor<UDT>::value=false
expression has_trivial_destructor<empty_UDT>::value=false
expression has_trivial_destructor<void>::value=true
expression has_trivial_destructor<trivial_except_destroy>::value=false
expression has_trivial_destructor<wrap<trivial_except_destroy> >::value=false
Results of has_virtual_destructor_test:
expression has_virtual_destructor<int>::value=false
expression has_virtual_destructor<const int>::value=false
expression has_virtual_destructor<volatile int>::value=false
expression has_virtual_destructor<int*>::value=false
expression has_virtual_destructor<int* const>::value=false
expression has_virtual_destructor<int[2]>::value=false
expression has_virtual_destructor<int&>::value=false
expression has_virtual_destructor<mf4>::value=false
expression has_virtual_destructor<f1>::value=false
expression has_virtual_destructor<enum_UDT>::value=false
expression has_virtual_destructor<UDT>::value=false
expression has_virtual_destructor<empty_UDT>::value=false
expression has_virtual_destructor<UDT*>::value=false
expression has_virtual_destructor<UDT[2]>::value=false
expression has_virtual_destructor<UDT&>::value=false
expression has_virtual_destructor<void>::value=false
expression has_virtual_destructor<polymorphic_no_virtual_destructor>::value=false
Results of is_abstract_test:
expression (is_abstract<TestA>::value)=false
expression (is_abstract<TestB>::value)=true
expression (is_abstract<TestC>::value)=true
expression (is_abstract<TestD>::value)=false
expression (is_abstract<TestE>::value)=true
expression (is_abstract<TestF>::value)=true
expression (is_abstract<TestG>::value)=false
expression (is_abstract<TestH>::value)=false
expression (is_abstract<TestI>::value)=true
expression (is_abstract<TestJ>::value)=false
expression (is_abstract<TestK>::value)=true
expression (is_abstract<TestL>::value)=false
expression (is_abstract<TestM>::value)=true
expression (is_abstract<TestN>::value)=true
expression (is_abstract<TestO>::value)=true
expression (is_abstract<TestP>::value)=false
expression (is_abstract<TestQ>::value)=true
expression (is_abstract<TestR>::value)=true
expression (is_abstract<TestS>::value)=false
expression (is_abstract<TestT>::value)=false
expression (is_abstract<TestU>::value)=true
expression (is_abstract<TestV>::value)=false
expression (is_abstract<TestW>::value)=true
expression (is_abstract<TestX>::value)=false
expression (is_abstract<TestY>::value)=true
expression (is_abstract<TestZ>::value)=true
expression (is_abstract<TestAA>::value)=true
expression (is_abstract<TestAB>::value)=false
expression (is_abstract<TestAC>::value)=true
expression (is_abstract<TestAD>::value)=true
expression (is_abstract<TestAE>::value)=false
expression (is_abstract<TestAF>::value)=false
expression (is_abstract<TestAG>::value)=false
expression (is_abstract<const TestA>::value)=false
expression (is_abstract<const TestB>::value)=true
expression (is_abstract<const TestC>::value)=true
expression (is_abstract<const TestD>::value)=false
expression (is_abstract<const TestE>::value)=true
expression (is_abstract<const TestF>::value)=true
expression (is_abstract<const TestG>::value)=false
expression (is_abstract<const TestH>::value)=false
expression (is_abstract<const TestI>::value)=true
expression (is_abstract<const TestJ>::value)=false
expression (is_abstract<const TestK>::value)=true
expression (is_abstract<const TestL>::value)=false
expression (is_abstract<const TestM>::value)=true
expression (is_abstract<const TestN>::value)=true
expression (is_abstract<const TestO>::value)=true
expression (is_abstract<const TestP>::value)=false
expression (is_abstract<const TestQ>::value)=true
expression (is_abstract<const TestR>::value)=true
expression (is_abstract<const TestS>::value)=false
expression (is_abstract<const TestT>::value)=false
expression (is_abstract<const TestU>::value)=true
expression (is_abstract<const TestV>::value)=false
expression (is_abstract<const TestW>::value)=true
expression (is_abstract<const TestX>::value)=false
expression (is_abstract<const TestY>::value)=true
expression (is_abstract<const TestZ>::value)=true
expression (is_abstract<const TestAA>::value)=true
expression (is_abstract<const TestAB>::value)=false
expression (is_abstract<const TestAC>::value)=true
expression (is_abstract<const TestAD>::value)=true
expression (is_abstract<const TestAE>::value)=false
expression (is_abstract<const TestAF>::value)=false
expression (is_abstract<const TestAG>::value)=false
expression (is_abstract<volatile TestA>::value)=false
expression (is_abstract<volatile TestB>::value)=true
expression (is_abstract<volatile TestC>::value)=true
expression (is_abstract<volatile TestD>::value)=false
expression (is_abstract<volatile TestE>::value)=true
expression (is_abstract<volatile TestF>::value)=true
expression (is_abstract<volatile TestG>::value)=false
expression (is_abstract<volatile TestH>::value)=false
expression (is_abstract<volatile TestI>::value)=true
expression (is_abstract<volatile TestJ>::value)=false
expression (is_abstract<volatile TestK>::value)=true
expression (is_abstract<volatile TestL>::value)=false
expression (is_abstract<volatile TestM>::value)=true
expression (is_abstract<volatile TestN>::value)=true
expression (is_abstract<volatile TestO>::value)=true
expression (is_abstract<volatile TestP>::value)=false
expression (is_abstract<volatile TestQ>::value)=true
expression (is_abstract<volatile TestR>::value)=true
expression (is_abstract<volatile TestS>::value)=false
expression (is_abstract<volatile TestT>::value)=false
expression (is_abstract<volatile TestU>::value)=true
expression (is_abstract<volatile TestV>::value)=false
expression (is_abstract<volatile TestW>::value)=true
expression (is_abstract<volatile TestX>::value)=false
expression (is_abstract<volatile TestY>::value)=true
expression (is_abstract<volatile TestZ>::value)=true
expression (is_abstract<volatile TestAA>::value)=true
expression (is_abstract<volatile TestAB>::value)=false
expression (is_abstract<volatile TestAC>::value)=true
expression (is_abstract<volatile TestAD>::value)=true
expression (is_abstract<volatile TestAE>::value)=false
expression (is_abstract<volatile TestAF>::value)=false
expression (is_abstract<volatile TestAG>::value)=false
expression (is_abstract<volatile const TestA>::value)=false
expression (is_abstract<volatile const TestB>::value)=true
expression (is_abstract<volatile const TestC>::value)=true
expression (is_abstract<volatile const TestD>::value)=false
expression (is_abstract<volatile const TestE>::value)=true
expression (is_abstract<volatile const TestF>::value)=true
expression (is_abstract<volatile const TestG>::value)=false
expression (is_abstract<volatile const TestH>::value)=false
expression (is_abstract<volatile const TestI>::value)=true
expression (is_abstract<volatile const TestJ>::value)=false
expression (is_abstract<volatile const TestK>::value)=true
expression (is_abstract<volatile const TestL>::value)=false
expression (is_abstract<volatile const TestM>::value)=true
expression (is_abstract<volatile const TestN>::value)=true
expression (is_abstract<volatile const TestO>::value)=true
expression (is_abstract<volatile const TestP>::value)=false
expression (is_abstract<volatile const TestQ>::value)=true
expression (is_abstract<volatile const TestR>::value)=true
expression (is_abstract<volatile const TestS>::value)=false
expression (is_abstract<volatile const TestT>::value)=false
expression (is_abstract<volatile const TestU>::value)=true
expression (is_abstract<volatile const TestV>::value)=false
expression (is_abstract<volatile const TestW>::value)=true
expression (is_abstract<volatile const TestX>::value)=false
expression (is_abstract<volatile const TestY>::value)=true
expression (is_abstract<volatile const TestZ>::value)=true
expression (is_abstract<volatile const TestAA>::value)=true
expression (is_abstract<volatile const TestAB>::value)=false
expression (is_abstract<volatile const TestAC>::value)=true
expression (is_abstract<volatile const TestAD>::value)=true
expression (is_abstract<volatile const TestAE>::value)=false
expression (is_abstract<volatile const TestAF>::value)=false
expression (is_abstract<volatile const TestAG>::value)=false
expression (is_abstract<TestA&>::value)=false
expression (is_abstract<TestB&>::value)=false
expression (is_abstract<TestC&>::value)=false
expression (is_abstract<TestD&>::value)=false
expression (is_abstract<TestE&>::value)=false
expression (is_abstract<TestF&>::value)=false
expression (is_abstract<TestG&>::value)=false
expression (is_abstract<TestH&>::value)=false
expression (is_abstract<TestI&>::value)=false
expression (is_abstract<TestJ&>::value)=false
expression (is_abstract<TestK&>::value)=false
expression (is_abstract<TestL&>::value)=false
expression (is_abstract<TestM&>::value)=false
expression (is_abstract<TestN&>::value)=false
expression (is_abstract<TestO&>::value)=false
expression (is_abstract<TestP&>::value)=false
expression (is_abstract<TestQ&>::value)=false
expression (is_abstract<TestR&>::value)=false
expression (is_abstract<TestS&>::value)=false
expression (is_abstract<TestT&>::value)=false
expression (is_abstract<TestU&>::value)=false
expression (is_abstract<TestV&>::value)=false
expression (is_abstract<TestW&>::value)=false
expression (is_abstract<TestX&>::value)=false
expression (is_abstract<TestY&>::value)=false
expression (is_abstract<TestZ&>::value)=false
expression (is_abstract<TestAA&>::value)=false
expression (is_abstract<TestAB&>::value)=false
expression (is_abstract<TestAC&>::value)=false
expression (is_abstract<TestAD&>::value)=false
expression (is_abstract<TestAE&>::value)=false
expression (is_abstract<TestAF&>::value)=false
expression (is_abstract<TestAG&>::value)=false
expression (is_abstract<TTestA<int> >::value)=false
expression (is_abstract<TTestB<int> >::value)=true
expression (is_abstract<TTestC<int> >::value)=true
expression (is_abstract<TTestD<int> >::value)=false
expression (is_abstract<TTestE<int> >::value)=true
expression (is_abstract<TTestF<int> >::value)=true
expression (is_abstract<TTestG<int> >::value)=false
expression (is_abstract<TTestH<int> >::value)=false
expression (is_abstract<TTestI<int> >::value)=true
expression (is_abstract<TTestJ<int> >::value)=false
expression (is_abstract<TTestK<int> >::value)=true
expression (is_abstract<TTestL<int> >::value)=false
expression (is_abstract<TTestM<int> >::value)=true
expression (is_abstract<TTestN<int> >::value)=true
expression (is_abstract<TTestO<int> >::value)=true
expression (is_abstract<TTestP<int> >::value)=false
expression (is_abstract<TTestQ<int> >::value)=true
expression (is_abstract<TTestR<int> >::value)=true
expression (is_abstract<TTestS<int> >::value)=false
expression (is_abstract<TTestT<int> >::value)=false
expression (is_abstract<TTestU<int> >::value)=true
expression (is_abstract<TTestV<int> >::value)=false
expression (is_abstract<TTestW<int> >::value)=true
expression (is_abstract<TTestX<int> >::value)=false
expression (is_abstract<TTestY<int> >::value)=true
expression (is_abstract<TTestZ<int> >::value)=true
expression (is_abstract<TTestAA<int> >::value)=true
expression (is_abstract<TTestAB<int> >::value)=false
expression (is_abstract<TTestAC<int> >::value)=true
expression (is_abstract<TTestAD<int> >::value)=true
expression (is_abstract<TTestAE<int> >::value)=false
expression (is_abstract<TTestAF<int> >::value)=false
expression (is_abstract<TTestAG<int> >::value)=false
expression (is_abstract<const TTestA<int> >::value)=false
expression (is_abstract<const TTestB<int> >::value)=true
expression (is_abstract<const TTestC<int> >::value)=true
expression (is_abstract<const TTestD<int> >::value)=false
expression (is_abstract<const TTestE<int> >::value)=true
expression (is_abstract<const TTestF<int> >::value)=true
expression (is_abstract<const TTestG<int> >::value)=false
expression (is_abstract<const TTestH<int> >::value)=false
expression (is_abstract<const TTestI<int> >::value)=true
expression (is_abstract<const TTestJ<int> >::value)=false
expression (is_abstract<const TTestK<int> >::value)=true
expression (is_abstract<const TTestL<int> >::value)=false
expression (is_abstract<const TTestM<int> >::value)=true
expression (is_abstract<const TTestN<int> >::value)=true
expression (is_abstract<const TTestO<int> >::value)=true
expression (is_abstract<const TTestP<int> >::value)=false
expression (is_abstract<const TTestQ<int> >::value)=true
expression (is_abstract<const TTestR<int> >::value)=true
expression (is_abstract<const TTestS<int> >::value)=false
expression (is_abstract<const TTestT<int> >::value)=false
expression (is_abstract<const TTestU<int> >::value)=true
expression (is_abstract<const TTestV<int> >::value)=false
expression (is_abstract<const TTestW<int> >::value)=true
expression (is_abstract<const TTestX<int> >::value)=false
expression (is_abstract<const TTestY<int> >::value)=true
expression (is_abstract<const TTestZ<int> >::value)=true
expression (is_abstract<const TTestAA<int> >::value)=true
expression (is_abstract<const TTestAB<int> >::value)=false
expression (is_abstract<const TTestAC<int> >::value)=true
expression (is_abstract<const TTestAD<int> >::value)=true
expression (is_abstract<const TTestAE<int> >::value)=false
expression (is_abstract<const TTestAF<int> >::value)=false
expression (is_abstract<const TTestAG<int> >::value)=false
expression (is_abstract<volatile TTestA<int> >::value)=false
expression (is_abstract<volatile TTestB<int> >::value)=true
expression (is_abstract<volatile TTestC<int> >::value)=true
expression (is_abstract<volatile TTestD<int> >::value)=false
expression (is_abstract<volatile TTestE<int> >::value)=true
expression (is_abstract<volatile TTestF<int> >::value)=true
expression (is_abstract<volatile TTestG<int> >::value)=false
expression (is_abstract<volatile TTestH<int> >::value)=false
expression (is_abstract<volatile TTestI<int> >::value)=true
expression (is_abstract<volatile TTestJ<int> >::value)=false
expression (is_abstract<volatile TTestK<int> >::value)=true
expression (is_abstract<volatile TTestL<int> >::value)=false
expression (is_abstract<volatile TTestM<int> >::value)=true
expression (is_abstract<volatile TTestN<int> >::value)=true
expression (is_abstract<volatile TTestO<int> >::value)=true
expression (is_abstract<volatile TTestP<int> >::value)=false
expression (is_abstract<volatile TTestQ<int> >::value)=true
expression (is_abstract<volatile TTestR<int> >::value)=true
expression (is_abstract<volatile TTestS<int> >::value)=false
expression (is_abstract<volatile TTestT<int> >::value)=false
expression (is_abstract<volatile TTestU<int> >::value)=true
expression (is_abstract<volatile TTestV<int> >::value)=false
expression (is_abstract<volatile TTestW<int> >::value)=true
expression (is_abstract<volatile TTestX<int> >::value)=false
expression (is_abstract<volatile TTestY<int> >::value)=true
expression (is_abstract<volatile TTestZ<int> >::value)=true
expression (is_abstract<volatile TTestAA<int> >::value)=true
expression (is_abstract<volatile TTestAB<int> >::value)=false
expression (is_abstract<volatile TTestAC<int> >::value)=true
expression (is_abstract<volatile TTestAD<int> >::value)=true
expression (is_abstract<volatile TTestAE<int> >::value)=false
expression (is_abstract<volatile TTestAF<int> >::value)=false
expression (is_abstract<volatile TTestAG<int> >::value)=false
expression (is_abstract<volatile const TTestA<int> >::value)=false
expression (is_abstract<volatile const TTestB<int> >::value)=true
expression (is_abstract<volatile const TTestC<int> >::value)=true
expression (is_abstract<volatile const TTestD<int> >::value)=false
expression (is_abstract<volatile const TTestE<int> >::value)=true
expression (is_abstract<volatile const TTestF<int> >::value)=true
expression (is_abstract<volatile const TTestG<int> >::value)=false
expression (is_abstract<volatile const TTestH<int> >::value)=false
expression (is_abstract<volatile const TTestI<int> >::value)=true
expression (is_abstract<volatile const TTestJ<int> >::value)=false
expression (is_abstract<volatile const TTestK<int> >::value)=true
expression (is_abstract<volatile const TTestL<int> >::value)=false
expression (is_abstract<volatile const TTestM<int> >::value)=true
expression (is_abstract<volatile const TTestN<int> >::value)=true
expression (is_abstract<volatile const TTestO<int> >::value)=true
expression (is_abstract<volatile const TTestP<int> >::value)=false
expression (is_abstract<volatile const TTestQ<int> >::value)=true
expression (is_abstract<volatile const TTestR<int> >::value)=true
expression (is_abstract<volatile const TTestS<int> >::value)=false
expression (is_abstract<volatile const TTestT<int> >::value)=false
expression (is_abstract<volatile const TTestU<int> >::value)=true
expression (is_abstract<volatile const TTestV<int> >::value)=false
expression (is_abstract<volatile const TTestW<int> >::value)=true
expression (is_abstract<volatile const TTestX<int> >::value)=false
expression (is_abstract<volatile const TTestY<int> >::value)=true
expression (is_abstract<volatile const TTestZ<int> >::value)=true
expression (is_abstract<volatile const TTestAA<int> >::value)=true
expression (is_abstract<volatile const TTestAB<int> >::value)=false
expression (is_abstract<volatile const TTestAC<int> >::value)=true
expression (is_abstract<volatile const TTestAD<int> >::value)=true
expression (is_abstract<volatile const TTestAE<int> >::value)=false
expression (is_abstract<volatile const TTestAF<int> >::value)=false
expression (is_abstract<volatile const TTestAG<int> >::value)=false
expression (is_abstract<TTestA<int>& >::value)=false
expression (is_abstract<TTestB<int>& >::value)=false
expression (is_abstract<TTestC<int>& >::value)=false
expression (is_abstract<TTestD<int>& >::value)=false
expression (is_abstract<TTestE<int>& >::value)=false
expression (is_abstract<TTestF<int>& >::value)=false
expression (is_abstract<TTestG<int>& >::value)=false
expression (is_abstract<TTestH<int>& >::value)=false
expression (is_abstract<TTestI<int>& >::value)=false
expression (is_abstract<TTestJ<int>& >::value)=false
expression (is_abstract<TTestK<int>& >::value)=false
expression (is_abstract<TTestL<int>& >::value)=false
expression (is_abstract<TTestM<int>& >::value)=false
expression (is_abstract<TTestN<int>& >::value)=false
expression (is_abstract<TTestO<int>& >::value)=false
expression (is_abstract<TTestP<int>& >::value)=false
expression (is_abstract<TTestQ<int>& >::value)=false
expression (is_abstract<TTestR<int>& >::value)=false
expression (is_abstract<TTestS<int>& >::value)=false
expression (is_abstract<TTestT<int>& >::value)=false
expression (is_abstract<TTestU<int>& >::value)=false
expression (is_abstract<TTestV<int>& >::value)=false
expression (is_abstract<TTestW<int>& >::value)=false
expression (is_abstract<TTestX<int>& >::value)=false
expression (is_abstract<TTestY<int>& >::value)=false
expression (is_abstract<TTestZ<int>& >::value)=false
expression (is_abstract<TTestAA<int>& >::value)=false
expression (is_abstract<TTestAB<int>& >::value)=false
expression (is_abstract<TTestAC<int>& >::value)=false
expression (is_abstract<TTestAD<int>& >::value)=false
expression (is_abstract<TTestAE<int>& >::value)=false
expression (is_abstract<TTestAF<int>& >::value)=false
expression (is_abstract<TTestAG<int>& >::value)=false
Results of is_arithmetic_test:
expression is_arithmetic<bool>::value=true
expression is_arithmetic<bool const>::value=true
expression is_arithmetic<bool volatile>::value=true
expression is_arithmetic<bool const volatile>::value=true
expression is_arithmetic<signed char>::value=true
expression is_arithmetic<signed char const>::value=true
expression is_arithmetic<signed char volatile>::value=true
expression is_arithmetic<signed char const volatile>::value=true
expression is_arithmetic<unsigned char>::value=true
expression is_arithmetic<char>::value=true
expression is_arithmetic<unsigned char const>::value=true
expression is_arithmetic<char const>::value=true
expression is_arithmetic<unsigned char volatile>::value=true
expression is_arithmetic<char volatile>::value=true
expression is_arithmetic<unsigned char const volatile>::value=true
expression is_arithmetic<char const volatile>::value=true
expression is_arithmetic<unsigned short>::value=true
expression is_arithmetic<short>::value=true
expression is_arithmetic<unsigned short const>::value=true
expression is_arithmetic<short const>::value=true
expression is_arithmetic<unsigned short volatile>::value=true
expression is_arithmetic<short volatile>::value=true
expression is_arithmetic<unsigned short const volatile>::value=true
expression is_arithmetic<short const volatile>::value=true
expression is_arithmetic<unsigned int>::value=true
expression is_arithmetic<int>::value=true
expression is_arithmetic<unsigned int const>::value=true
expression is_arithmetic<int const>::value=true
expression is_arithmetic<unsigned int volatile>::value=true
expression is_arithmetic<int volatile>::value=true
expression is_arithmetic<unsigned int const volatile>::value=true
expression is_arithmetic<int const volatile>::value=true
expression is_arithmetic<unsigned long>::value=true
expression is_arithmetic<long>::value=true
expression is_arithmetic<unsigned long const>::value=true
expression is_arithmetic<long const>::value=true
expression is_arithmetic<unsigned long volatile>::value=true
expression is_arithmetic<long volatile>::value=true
expression is_arithmetic<unsigned long const volatile>::value=true
expression is_arithmetic<long const volatile>::value=true
expression is_arithmetic<float>::value=true
expression is_arithmetic<float const>::value=true
expression is_arithmetic<float volatile>::value=true
expression is_arithmetic<float const volatile>::value=true
expression is_arithmetic<double>::value=true
expression is_arithmetic<double const>::value=true
expression is_arithmetic<double volatile>::value=true
expression is_arithmetic<double const volatile>::value=true
expression is_arithmetic<long double>::value=true
expression is_arithmetic<long double const>::value=true
expression is_arithmetic<long double volatile>::value=true
expression is_arithmetic<long double const volatile>::value=true
expression is_arithmetic<void>::value=false
expression is_arithmetic<UDT>::value=false
expression is_arithmetic<test_abc1>::value=false
expression is_arithmetic<empty_UDT>::value=false
expression is_arithmetic<float*>::value=false
expression is_arithmetic<float&>::value=false
expression is_arithmetic<const float&>::value=false
expression is_arithmetic<float[2]>::value=false
expression is_arithmetic<foo0_t>::value=false
expression is_arithmetic<incomplete_type>::value=false
Results of is_array_test:
expression is_array<int>::value=false
expression is_array<int*>::value=false
expression is_array<const int*>::value=false
expression is_array<const volatile int*>::value=false
expression is_array<int*const>::value=false
expression is_array<const int*volatile>::value=false
expression is_array<const volatile int*const>::value=false
expression is_array<int[2]>::value=true
expression is_array<const int[2]>::value=true
expression is_array<const volatile int[2]>::value=true
expression is_array<int[2][3]>::value=true
expression is_array<UDT[2]>::value=true
expression is_array<int(&)[2]>::value=false
expression is_array<f1>::value=false
expression is_array<void>::value=false
expression is_array<test_abc1>::value=false
expression is_array<convertible_to_pointer>::value=false
expression is_array<test_abc1>::value=false
expression is_array<foo0_t>::value=false
expression is_array<incomplete_type>::value=false
Results of is_class_test:
expression is_class<int>::value=false
expression is_class<const int>::value=false
expression is_class<volatile int>::value=false
expression is_class<int*>::value=false
expression is_class<int* const>::value=false
expression is_class<int[2]>::value=false
expression is_class<int const[2]>::value=false
expression is_class<int&>::value=false
expression is_class<mf4>::value=false
expression is_class<f1>::value=false
expression is_class<enum_UDT>::value=false
expression is_class<union_UDT>::value=false
expression is_class<POD_union_UDT>::value=false
expression is_class<empty_union_UDT>::value=false
expression is_class<empty_POD_union_UDT>::value=false
expression is_class<UDT>::value=true
expression is_class<UDT const>::value=true
expression is_class<UDT volatile>::value=true
expression is_class<empty_UDT>::value=true
expression is_class<test_abc1>::value=true
expression is_class<test_abc1 const>::value=true
expression is_class<UDT*>::value=false
expression is_class<UDT[2]>::value=false
expression is_class<UDT&>::value=false
expression is_class<void>::value=false
Results of is_compound_test:
expression is_compound<UDT>::value=true
expression is_compound<void*>::value=true
expression is_compound<void>::value=false
expression is_compound<int>::value=false
expression is_compound<test_abc1>::value=true
Results of is_const_test:
expression is_const<void>::value=false
expression is_const<const void>::value=true
expression is_const<test_abc1>::value=false
expression is_const<const test_abc1>::value=true
expression is_const<int>::value=false
expression is_const<const int>::value=true
expression is_const<const UDT>::value=true
expression is_const<const volatile UDT>::value=true
expression is_const<const int&>::value=false
expression is_const<cr_type>::value=false
expression is_const<incomplete_type>::value=false
expression is_const<foo0_t>::value=false
expression is_const<const int[2]>::value=true
expression is_const<int[2]>::value=false
expression is_const<volatile int[2]>::value=false
expression is_const<const volatile int[2]>::value=true
expression is_const<const volatile int[]>::value=true
expression is_const<volatile int[]>::value=false
expression is_const<const int[]>::value=true
expression is_const<int[]>::value=false
expression is_const<const volatile int[3][4][5]>::value=true
Results of is_convertible_test:
expression (is_convertible<Derived,Base>::value)=true
expression (is_convertible<Derived,Derived>::value)=true
expression (is_convertible<Base,Base>::value)=true
expression (is_convertible<Base,Derived>::value)=false
expression (is_convertible<Derived,Derived>::value)=true
expression (is_convertible<NonDerived,Base>::value)=false
expression (is_convertible<float,int>::value)=true
expression (is_convertible<virtual_inherit2,virtual_inherit1>::value)=true
expression (is_convertible<VD,VB>::value)=true
expression (is_convertible<polymorphic_derived1,polymorphic_base>::value)=true
expression (is_convertible<polymorphic_derived2,polymorphic_base>::value)=true
expression (is_convertible<polymorphic_base,polymorphic_derived1>::value)=false
expression (is_convertible<polymorphic_base,polymorphic_derived2>::value)=false
expression (is_convertible<test_abc1,test_abc1>::value)=false
expression (is_convertible<Base,test_abc1>::value)=false
expression (is_convertible<polymorphic_derived2,test_abc1>::value)=false
expression (is_convertible<int,test_abc1>::value)=false
expression (is_convertible<float,void>::value)=true
expression (is_convertible<void,void>::value)=true
expression (is_convertible<void,float>::value)=false
expression (is_convertible<enum1, int>::value)=true
expression (is_convertible<Derived*, Base*>::value)=true
expression (is_convertible<Base*, Derived*>::value)=false
expression (is_convertible<Derived&, Base&>::value)=true
expression (is_convertible<Base&, Derived&>::value)=false
expression (is_convertible<const Derived*, const Base*>::value)=true
expression (is_convertible<const Base*, const Derived*>::value)=false
expression (is_convertible<const Derived&, const Base&>::value)=true
expression (is_convertible<const Base&, const Derived&>::value)=false
expression (is_convertible<const int *, int*>::value)=false
expression (is_convertible<const int&, int&>::value)=false
expression (is_convertible<const int*, int[3]>::value)=false
expression (is_convertible<const int&, int>::value)=true
expression (is_convertible<int(&)[4], const int*>::value)=true
expression (is_convertible<int(&)(int), int(*)(int)>::value)=true
expression (is_convertible<int *, const int*>::value)=true
expression (is_convertible<int&, const int&>::value)=true
expression (is_convertible<int[2], int*>::value)=true
expression (is_convertible<int[2], const int*>::value)=true
expression (is_convertible<const int[2], int*>::value)=false
expression (is_convertible<int*, int[3]>::value)=false
expression (is_convertible<test_abc3, const test_abc1&>::value)=true
expression (is_convertible<non_pointer, void*>::value)=true
expression (is_convertible<non_pointer, int*>::value)=false
expression (is_convertible<non_int_pointer, int*>::value)=true
expression (is_convertible<non_int_pointer, void*>::value)=true
expression (is_convertible<test_abc1&, test_abc2&>::value)=false
expression (is_convertible<test_abc1&, int_constructible>::value)=false
expression (is_convertible<int_constructible, test_abc1&>::value)=false
expression (is_convertible<test_abc1&, test_abc2>::value)=false
expression (is_convertible<int, int_constructible>::value)=true
expression (is_convertible<float,convertible_from<float> >::value)=true
expression (is_convertible<float,convertible_from<float const&> >::value)=true
expression (is_convertible<float,convertible_from<float&> >::value)=true
expression (is_convertible<float,convertible_from<char> >::value)=true
expression (is_convertible<float,convertible_from<char const&> >::value)=true
expression (is_convertible<float,convertible_from<char&> >::value)=false
expression (is_convertible<char,convertible_from<char> >::value)=true
expression (is_convertible<char,convertible_from<char const&> >::value)=true
expression (is_convertible<char,convertible_from<char&> >::value)=true
expression (is_convertible<float&,convertible_from<float> >::value)=true
expression (is_convertible<float const&,convertible_from<float> >::value)=true
expression (is_convertible<float&,convertible_from<float&> >::value)=true
expression (is_convertible<float const&,convertible_from<float const&> >::value)=true
expression (is_convertible<float&,convertible_from<float const&> >::value)=true
expression (is_convertible<float,int>::value)=true
expression (is_convertible<double,int>::value)=true
expression (is_convertible<double,float>::value)=true
expression (is_convertible<long,int>::value)=true
expression (is_convertible<int,char>::value)=true
Results of is_empty_test:
expression is_empty<int>::value=false
expression is_empty<int*>::value=false
expression is_empty<int&>::value=false
expression is_empty<void>::value=false
expression is_empty<int[2]>::value=false
expression is_empty<f1>::value=false
expression is_empty<mf1>::value=false
expression is_empty<UDT>::value=false
expression is_empty<enum_UDT>::value=false
expression is_empty<non_empty>::value=false
expression is_empty<const non_empty&>::value=false
expression is_empty<foo4_t>::value=false
Results of is_enum_test:
expression is_enum<int>::value=false
expression is_enum<enum_UDT>::value=true
expression is_enum<int_convertible>::value=false
expression is_enum<int&>::value=false
expression is_enum<void>::value=false
expression is_enum<test_abc1>::value=false
Results of is_floating_point_test:
expression is_floating_point<float>::value=true
expression is_floating_point<float const>::value=true
expression is_floating_point<float volatile>::value=true
expression is_floating_point<float const volatile>::value=true
expression is_floating_point<double>::value=true
expression is_floating_point<double const>::value=true
expression is_floating_point<double volatile>::value=true
expression is_floating_point<double const volatile>::value=true
expression is_floating_point<long double>::value=true
expression is_floating_point<long double const>::value=true
expression is_floating_point<long double volatile>::value=true
expression is_floating_point<long double const volatile>::value=true
expression is_floating_point<void>::value=false
expression is_floating_point<int>::value=false
expression is_floating_point<UDT>::value=false
expression is_floating_point<test_abc1>::value=false
expression is_floating_point<empty_UDT>::value=false
expression is_floating_point<float*>::value=false
expression is_floating_point<float&>::value=false
expression is_floating_point<const float&>::value=false
expression is_floating_point<float[2]>::value=false
expression is_floating_point<test_abc1>::value=false
expression is_floating_point<foo0_t>::value=false
expression is_floating_point<foo1_t>::value=false
expression is_floating_point<foo2_t>::value=false
expression is_floating_point<foo3_t>::value=false
expression is_floating_point<foo4_t>::value=false
expression is_floating_point<incomplete_type>::value=false
Results of is_function_test:
expression is_function<foo0_t>::value=true
expression is_function<foo1_t>::value=true
expression is_function<foo2_t>::value=true
expression is_function<foo3_t>::value=true
expression is_function<foo4_t>::value=true
expression is_function<void>::value=false
expression is_function<int>::value=false
expression is_function<int&>::value=false
expression is_function<int*>::value=false
expression is_function<int[]>::value=false
expression is_function<test_abc1>::value=false
expression is_function<int (*)(int)>::value=false
Results of is_fundamental_test:
expression is_fundamental<void>::value=true
expression is_fundamental<void const>::value=true
expression is_fundamental<void volatile>::value=true
expression is_fundamental<void const volatile>::value=true
expression is_fundamental<bool>::value=true
expression is_fundamental<bool const>::value=true
expression is_fundamental<bool volatile>::value=true
expression is_fundamental<bool const volatile>::value=true
expression is_fundamental<signed char>::value=true
expression is_fundamental<signed char const>::value=true
expression is_fundamental<signed char volatile>::value=true
expression is_fundamental<signed char const volatile>::value=true
expression is_fundamental<unsigned char>::value=true
expression is_fundamental<char>::value=true
expression is_fundamental<unsigned char const>::value=true
expression is_fundamental<char const>::value=true
expression is_fundamental<unsigned char volatile>::value=true
expression is_fundamental<char volatile>::value=true
expression is_fundamental<unsigned char const volatile>::value=true
expression is_fundamental<char const volatile>::value=true
expression is_fundamental<unsigned short>::value=true
expression is_fundamental<short>::value=true
expression is_fundamental<unsigned short const>::value=true
expression is_fundamental<short const>::value=true
expression is_fundamental<unsigned short volatile>::value=true
expression is_fundamental<short volatile>::value=true
expression is_fundamental<unsigned short const volatile>::value=true
expression is_fundamental<short const volatile>::value=true
expression is_fundamental<unsigned int>::value=true
expression is_fundamental<int>::value=true
expression is_fundamental<unsigned int const>::value=true
expression is_fundamental<int const>::value=true
expression is_fundamental<unsigned int volatile>::value=true
expression is_fundamental<int volatile>::value=true
expression is_fundamental<unsigned int const volatile>::value=true
expression is_fundamental<int const volatile>::value=true
expression is_fundamental<unsigned long>::value=true
expression is_fundamental<long>::value=true
expression is_fundamental<unsigned long const>::value=true
expression is_fundamental<long const>::value=true
expression is_fundamental<unsigned long volatile>::value=true
expression is_fundamental<long volatile>::value=true
expression is_fundamental<unsigned long const volatile>::value=true
expression is_fundamental<long const volatile>::value=true
expression is_fundamental<float>::value=true
expression is_fundamental<float const>::value=true
expression is_fundamental<float volatile>::value=true
expression is_fundamental<float const volatile>::value=true
expression is_fundamental<double>::value=true
expression is_fundamental<double const>::value=true
expression is_fundamental<double volatile>::value=true
expression is_fundamental<double const volatile>::value=true
expression is_fundamental<long double>::value=true
expression is_fundamental<long double const>::value=true
expression is_fundamental<long double volatile>::value=true
expression is_fundamental<long double const volatile>::value=true
expression is_fundamental<UDT>::value=false
expression is_fundamental<test_abc1>::value=false
expression is_fundamental<empty_UDT>::value=false
expression is_fundamental<float*>::value=false
expression is_fundamental<float&>::value=false
expression is_fundamental<const float&>::value=false
expression is_fundamental<float[2]>::value=false
expression is_fundamental<incomplete_type>::value=false
expression is_fundamental<foo0_t>::value=false
Results of is_integral_test:
expression is_integral<bool>::value=true
expression is_integral<bool const>::value=true
expression is_integral<bool volatile>::value=true
expression is_integral<bool const volatile>::value=true
expression is_integral<signed char>::value=true
expression is_integral<signed char const>::value=true
expression is_integral<signed char volatile>::value=true
expression is_integral<signed char const volatile>::value=true
expression is_integral<unsigned char>::value=true
expression is_integral<char>::value=true
expression is_integral<unsigned char const>::value=true
expression is_integral<char const>::value=true
expression is_integral<unsigned char volatile>::value=true
expression is_integral<char volatile>::value=true
expression is_integral<unsigned char const volatile>::value=true
expression is_integral<char const volatile>::value=true
expression is_integral<unsigned short>::value=true
expression is_integral<short>::value=true
expression is_integral<unsigned short const>::value=true
expression is_integral<short const>::value=true
expression is_integral<unsigned short volatile>::value=true
expression is_integral<short volatile>::value=true
expression is_integral<unsigned short const volatile>::value=true
expression is_integral<short const volatile>::value=true
expression is_integral<unsigned int>::value=true
expression is_integral<int>::value=true
expression is_integral<unsigned int const>::value=true
expression is_integral<int const>::value=true
expression is_integral<unsigned int volatile>::value=true
expression is_integral<int volatile>::value=true
expression is_integral<unsigned int const volatile>::value=true
expression is_integral<int const volatile>::value=true
expression is_integral<unsigned long>::value=true
expression is_integral<long>::value=true
expression is_integral<unsigned long const>::value=true
expression is_integral<long const>::value=true
expression is_integral<unsigned long volatile>::value=true
expression is_integral<long volatile>::value=true
expression is_integral<unsigned long const volatile>::value=true
expression is_integral<long const volatile>::value=true
expression is_integral<void>::value=false
expression is_integral<float>::value=false
expression is_integral<UDT>::value=false
expression is_integral<test_abc1>::value=false
expression is_integral<empty_UDT>::value=false
expression is_integral<int*>::value=false
expression is_integral<int&>::value=false
expression is_integral<const int&>::value=false
expression is_integral<int[2]>::value=false
expression is_integral<test_abc1>::value=false
expression is_integral<foo0_t>::value=false
expression is_integral<foo1_t>::value=false
expression is_integral<foo2_t>::value=false
expression is_integral<foo3_t>::value=false
expression is_integral<foo4_t>::value=false
expression is_integral<incomplete_type>::value=false
Results of is_member_func_test:
expression is_member_function_pointer<f1>::value=false
expression is_member_function_pointer<f2>::value=false
expression is_member_function_pointer<f3>::value=false
expression is_member_function_pointer<void*>::value=false
expression is_member_function_pointer<mf1>::value=true
expression is_member_function_pointer<mf2>::value=true
expression is_member_function_pointer<mf3>::value=true
expression is_member_function_pointer<mf4>::value=true
expression is_member_function_pointer<cmf>::value=true
expression is_member_function_pointer<mp>::value=false
expression is_member_function_pointer<void>::value=false
expression is_member_function_pointer<test_abc1>::value=false
expression is_member_function_pointer<foo0_t>::value=false
expression is_member_function_pointer<int&>::value=false
expression is_member_function_pointer<const int&>::value=false
expression is_member_function_pointer<const int[2] >::value=false
expression is_member_function_pointer<const int[] >::value=false
expression is_member_function_pointer<void>::value=false
Results of is_member_obj_test:
expression is_member_object_pointer<f1>::value=false
expression is_member_object_pointer<f2>::value=false
expression is_member_object_pointer<f3>::value=false
expression is_member_object_pointer<void*>::value=false
expression is_member_object_pointer<mf1>::value=false
expression is_member_object_pointer<mf2>::value=false
expression is_member_object_pointer<mf3>::value=false
expression is_member_object_pointer<mf4>::value=false
expression is_member_object_pointer<cmf>::value=false
expression is_member_object_pointer<mp>::value=true
expression is_member_object_pointer<mp2>::value=true
expression is_member_object_pointer<void>::value=false
expression is_member_object_pointer<test_abc1>::value=false
expression is_member_object_pointer<foo0_t>::value=false
Results of is_member_pointer_test:
expression is_member_pointer<f1>::value=false
expression is_member_pointer<f2>::value=false
expression is_member_pointer<f3>::value=false
expression is_member_pointer<void*>::value=false
expression is_member_pointer<mf1>::value=true
expression is_member_pointer<mf2>::value=true
expression is_member_pointer<mf3>::value=true
expression is_member_pointer<mf4>::value=true
expression is_member_pointer<cmf>::value=true
expression is_member_pointer<mp>::value=true
expression is_member_pointer<void>::value=false
expression is_member_pointer<test_abc1>::value=false
expression is_member_pointer<foo0_t>::value=false
Results of is_object_test:
expression is_object<int>::value=true
expression is_object<UDT>::value=true
expression is_object<int&>::value=false
expression is_object<void>::value=false
expression is_object<foo4_t>::value=false
expression is_object<test_abc1>::value=true
expression is_object<incomplete_type>::value=true
Results of is_pod_test:
expression is_pod<bool>::value=true
expression is_pod<bool const>::value=true
expression is_pod<bool volatile>::value=true
expression is_pod<bool const volatile>::value=true
expression is_pod<signed char>::value=true
expression is_pod<signed char const>::value=true
expression is_pod<signed char volatile>::value=true
expression is_pod<signed char const volatile>::value=true
expression is_pod<unsigned char>::value=true
expression is_pod<char>::value=true
expression is_pod<unsigned char const>::value=true
expression is_pod<char const>::value=true
expression is_pod<unsigned char volatile>::value=true
expression is_pod<char volatile>::value=true
expression is_pod<unsigned char const volatile>::value=true
expression is_pod<char const volatile>::value=true
expression is_pod<unsigned short>::value=true
expression is_pod<short>::value=true
expression is_pod<unsigned short const>::value=true
expression is_pod<short const>::value=true
expression is_pod<unsigned short volatile>::value=true
expression is_pod<short volatile>::value=true
expression is_pod<unsigned short const volatile>::value=true
expression is_pod<short const volatile>::value=true
expression is_pod<unsigned int>::value=true
expression is_pod<int>::value=true
expression is_pod<unsigned int const>::value=true
expression is_pod<int const>::value=true
expression is_pod<unsigned int volatile>::value=true
expression is_pod<int volatile>::value=true
expression is_pod<unsigned int const volatile>::value=true
expression is_pod<int const volatile>::value=true
expression is_pod<unsigned long>::value=true
expression is_pod<long>::value=true
expression is_pod<unsigned long const>::value=true
expression is_pod<long const>::value=true
expression is_pod<unsigned long volatile>::value=true
expression is_pod<long volatile>::value=true
expression is_pod<unsigned long const volatile>::value=true
expression is_pod<long const volatile>::value=true
expression is_pod<float>::value=true
expression is_pod<float const>::value=true
expression is_pod<float volatile>::value=true
expression is_pod<float const volatile>::value=true
expression is_pod<double>::value=true
expression is_pod<double const>::value=true
expression is_pod<double volatile>::value=true
expression is_pod<double const volatile>::value=true
expression is_pod<long double>::value=true
expression is_pod<long double const>::value=true
expression is_pod<long double volatile>::value=true
expression is_pod<long double const volatile>::value=true
expression is_pod<int>::value=true
expression is_pod<void*>::value=true
expression is_pod<int*const>::value=true
expression is_pod<f1>::value=true
expression is_pod<f2>::value=true
expression is_pod<f3>::value=true
expression is_pod<mf1>::value=true
expression is_pod<mf2>::value=true
expression is_pod<mf3>::value=true
expression is_pod<mp>::value=true
expression is_pod<cmf>::value=true
expression is_pod<enum_UDT>::value=true
expression is_pod<int&>::value=false
expression is_pod<const int&>::value=false
expression is_pod<int[2]>::value=true
expression is_pod<int[3][2]>::value=true
expression is_pod<int[2][4][5][6][3]>::value=true
expression is_pod<UDT>::value=false
expression is_pod<empty_UDT>::value=false
expression is_pod<void>::value=true
expression is_pod<test_abc1>::value=false
expression is_pod<trivial_except_copy>::value=false
expression is_pod<trivial_except_destroy>::value=false
expression is_pod<trivial_except_assign>::value=false
expression is_pod<trivial_except_construct>::value=false
expression is_pod<wrap<trivial_except_copy> >::value=false
expression is_pod<wrap<trivial_except_assign> >::value=false
expression is_pod<wrap<trivial_except_destroy> >::value=false
expression is_pod<wrap<trivial_except_construct> >::value=false
Results of is_pointer_test:
expression is_pointer<int>::value=false
expression is_pointer<int&>::value=false
expression is_pointer<int*>::value=true
expression is_pointer<const int*>::value=true
expression is_pointer<volatile int*>::value=true
expression is_pointer<non_pointer*>::value=true
expression is_pointer<int*const>::value=true
expression is_pointer<int*volatile>::value=true
expression is_pointer<int*const volatile>::value=true
expression is_pointer<non_pointer>::value=false
expression is_pointer<int*&>::value=false
expression is_pointer<int(&)[2]>::value=false
expression is_pointer<int[2]>::value=false
expression is_pointer<char[sizeof(void*)]>::value=false
expression is_pointer<void>::value=false
expression is_pointer<f1>::value=true
expression is_pointer<f2>::value=true
expression is_pointer<f3>::value=true
expression is_pointer<mf1>::value=false
expression is_pointer<mf2>::value=false
expression is_pointer<mf3>::value=false
expression is_pointer<mf4>::value=false
expression is_pointer<test_abc1>::value=false
expression is_pointer<foo0_t>::value=false
expression is_pointer<foo1_t>::value=false
expression is_pointer<foo2_t>::value=false
expression is_pointer<foo3_t>::value=false
expression is_pointer<foo4_t>::value=false
expression is_pointer<test_abc1>::value=false
Results of is_polymorphic_test:
expression is_polymorphic<int>::value=false
expression is_polymorphic<const int>::value=false
expression is_polymorphic<volatile int>::value=false
expression is_polymorphic<int*>::value=false
expression is_polymorphic<int* const>::value=false
expression is_polymorphic<int[2]>::value=false
expression is_polymorphic<int&>::value=false
expression is_polymorphic<mf4>::value=false
expression is_polymorphic<f1>::value=false
expression is_polymorphic<enum_UDT>::value=false
expression is_polymorphic<UDT>::value=false
expression is_polymorphic<empty_UDT>::value=false
expression is_polymorphic<UDT*>::value=false
expression is_polymorphic<UDT[2]>::value=false
expression is_polymorphic<UDT&>::value=false
expression is_polymorphic<void>::value=false
expression is_polymorphic<VB>::value=true
expression is_polymorphic<VD>::value=true
expression is_polymorphic<test_abc1>::value=true
expression is_polymorphic<test_abc2>::value=true
expression is_polymorphic<std::exception>::value=true
expression is_polymorphic<std::bad_alloc>::value=true
expression is_polymorphic<std::runtime_error>::value=true
expression is_polymorphic<std::out_of_range>::value=true
expression is_polymorphic<std::range_error>::value=true
expression is_polymorphic<poly_bug>::value=true
Results of is_reference_test:
expression is_reference<int&>::value=true
expression is_reference<const int&>::value=true
expression is_reference<volatile int &>::value=true
expression is_reference<const volatile int &>::value=true
expression is_reference<r_type>::value=true
expression is_reference<cr_type>::value=true
expression is_reference<UDT&>::value=true
expression is_reference<const UDT&>::value=true
expression is_reference<volatile UDT&>::value=true
expression is_reference<const volatile UDT&>::value=true
expression is_reference<int (&)(int)>::value=true
expression is_reference<int (&)[2]>::value=true
expression is_reference<int [2]>::value=false
expression is_reference<const int [2]>::value=false
expression is_reference<volatile int [2]>::value=false
expression is_reference<const volatile int [2]>::value=false
expression is_reference<bool>::value=false
expression is_reference<void>::value=false
expression is_reference<test_abc1>::value=false
expression is_reference<foo0_t>::value=false
expression is_reference<incomplete_type>::value=false
Results of is_same_test:
expression (is_same<int, int>::value)=true
expression (is_same<int, const int>::value)=false
expression (is_same<int, int&>::value)=false
expression (is_same<const int, int&>::value)=false
expression (is_same<int, const int&>::value)=false
expression (is_same<int*, const int*>::value)=false
expression (is_same<int*, int*const>::value)=false
expression (is_same<int, int[2]>::value)=false
expression (is_same<int*, int[2]>::value)=false
expression (is_same<int[4], int[2]>::value)=false
Results of is_scalar_test:
expression is_scalar<bool>::value=true
expression is_scalar<bool const>::value=true
expression is_scalar<bool volatile>::value=true
expression is_scalar<bool const volatile>::value=true
expression is_scalar<signed char>::value=true
expression is_scalar<signed char const>::value=true
expression is_scalar<signed char volatile>::value=true
expression is_scalar<signed char const volatile>::value=true
expression is_scalar<unsigned char>::value=true
expression is_scalar<char>::value=true
expression is_scalar<unsigned char const>::value=true
expression is_scalar<char const>::value=true
expression is_scalar<unsigned char volatile>::value=true
expression is_scalar<char volatile>::value=true
expression is_scalar<unsigned char const volatile>::value=true
expression is_scalar<char const volatile>::value=true
expression is_scalar<unsigned short>::value=true
expression is_scalar<short>::value=true
expression is_scalar<unsigned short const>::value=true
expression is_scalar<short const>::value=true
expression is_scalar<unsigned short volatile>::value=true
expression is_scalar<short volatile>::value=true
expression is_scalar<unsigned short const volatile>::value=true
expression is_scalar<short const volatile>::value=true
expression is_scalar<unsigned int>::value=true
expression is_scalar<int>::value=true
expression is_scalar<unsigned int const>::value=true
expression is_scalar<int const>::value=true
expression is_scalar<unsigned int volatile>::value=true
expression is_scalar<int volatile>::value=true
expression is_scalar<unsigned int const volatile>::value=true
expression is_scalar<int const volatile>::value=true
expression is_scalar<unsigned long>::value=true
expression is_scalar<long>::value=true
expression is_scalar<unsigned long const>::value=true
expression is_scalar<long const>::value=true
expression is_scalar<unsigned long volatile>::value=true
expression is_scalar<long volatile>::value=true
expression is_scalar<unsigned long const volatile>::value=true
expression is_scalar<long const volatile>::value=true
expression is_scalar<float>::value=true
expression is_scalar<float const>::value=true
expression is_scalar<float volatile>::value=true
expression is_scalar<float const volatile>::value=true
expression is_scalar<double>::value=true
expression is_scalar<double const>::value=true
expression is_scalar<double volatile>::value=true
expression is_scalar<double const volatile>::value=true
expression is_scalar<long double>::value=true
expression is_scalar<long double const>::value=true
expression is_scalar<long double volatile>::value=true
expression is_scalar<long double const volatile>::value=true
expression is_scalar<int>::value=true
expression is_scalar<void*>::value=true
expression is_scalar<int*const>::value=true
expression is_scalar<f1>::value=true
expression is_scalar<f2>::value=true
expression is_scalar<f3>::value=true
expression is_scalar<mf1>::value=true
expression is_scalar<mf2>::value=true
expression is_scalar<mf3>::value=true
expression is_scalar<mp>::value=true
expression is_scalar<cmf>::value=true
expression is_scalar<enum_UDT>::value=true
expression is_scalar<void>::value=false
expression is_scalar<UDT>::value=false
expression is_scalar<int&>::value=false
expression is_scalar<test_abc1>::value=false
Resuts of is_signed_test:
expression is_signed<int>::value=true
expression is_signed<long>::value=true
expression is_signed<short>::value=true
expression is_signed<signed char>::value=true
expression is_signed<unsigned int>::value=false
expression is_signed<unsigned long>::value=false
expression is_signed<unsigned short>::value=false
expression is_signed<unsigned char>::value=false
expression is_signed<UDT>::value=false
expression is_signed<int&>::value=false
expression is_signed<int*>::value=false
expression is_signed<int[2]>::value=false
Results of is_union_test:
expression is_union<int>::value=false
expression is_union<const int>::value=false
expression is_union<volatile int>::value=false
expression is_union<int*>::value=false
expression is_union<int* const>::value=false
expression is_union<int[2]>::value=false
expression is_union<int&>::value=false
expression is_union<mf4>::value=false
expression is_union<f1>::value=false
expression is_union<enum_UDT>::value=false
expression is_union<union_UDT>::value=true
expression is_union<POD_union_UDT>::value=true
expression is_union<empty_union_UDT>::value=true
expression is_union<empty_POD_union_UDT>::value=true
expression is_union<union_UDT const>::value=true
expression is_union<POD_union_UDT volatile>::value=true
expression is_union<empty_union_UDT const volatile>::value=true
expression is_union<empty_POD_union_UDT const>::value=true
expression is_union<UDT>::value=false
expression is_union<UDT const>::value=false
expression is_union<UDT volatile>::value=false
expression is_union<empty_UDT>::value=false
expression is_union<UDT*>::value=false
expression is_union<UDT[2]>::value=false
expression is_union<UDT&>::value=false
expression is_union<void>::value=false
expression is_union<test_abc1>::value=false
expression is_union<foo0_t>::value=false
expression is_union<foo1_t>::value=false
expression is_union<foo2_t>::value=false
expression is_union<foo3_t>::value=false
expression is_union<foo4_t>::value=false
expression is_union<incomplete_type>::value=false
Results of is_unsigned_test:
expression is_unsigned<int>::value=false
expression is_unsigned<long>::value=false
expression is_unsigned<short>::value=false
expression is_unsigned<signed char>::value=false
expression is_unsigned<unsigned int>::value=true
expression is_unsigned<unsigned long>::value=true
expression is_unsigned<unsigned short>::value=true
expression is_unsigned<unsigned char>::value=true
expression is_unsigned<UDT>::value=false
expression is_unsigned<int&>::value=false
expression is_unsigned<int*>::value=false
expression is_unsigned<int[2]>::value=false
Results of is_void_test:
expression is_void<void>::value=true
expression is_void<void const>::value=true
expression is_void<void volatile>::value=true
expression is_void<void const volatile>::value=true
expression is_void<void*>::value=false
expression is_void<int>::value=false
expression is_void<test_abc1>::value=false
expression is_void<foo0_t>::value=false
expression is_void<foo1_t>::value=false
expression is_void<foo2_t>::value=false
expression is_void<foo3_t>::value=false
expression is_void<foo4_t>::value=false
expression is_void<incomplete_type>::value=false
Results of is_volatile_test:
expression is_volatile<void>::value=false
expression is_volatile<volatile void>::value=true
expression is_volatile<test_abc1>::value=false
expression is_volatile<volatile test_abc1>::value=true
expression is_volatile<int>::value=false
expression is_volatile<volatile int>::value=true
expression is_volatile<volatile UDT>::value=true
expression is_volatile<volatile const UDT>::value=true
expression is_volatile<incomplete_type>::value=false
expression is_volatile<foo0_t>::value=false
expression is_volatile<volatile int[2]>::value=true
expression is_volatile<int[2]>::value=false
expression is_volatile<const int[2]>::value=false
expression is_volatile<const volatile int[2]>::value=true
expression is_volatile<const volatile int[]>::value=true
expression is_volatile<const int[]>::value=false
expression is_volatile<volatile int[]>::value=true
expression is_volatile<int[]>::value=false
expression is_const<const volatile int[3][4][5]>::value=true
Results of rank_test:
expression rank<int>::value=false
expression rank<int[]>::value=true
expression rank<int[][10]>::value=true
expression rank<int[5][10]>::value=true
expression rank<int[5][10][40]>::value=true
expression rank<int (&)[5][10]>::value=false
expression rank<int (*)[5][10]>::value=false
Results of remove_all_extents_test:
expression remove_all_extents<bool const>::type=bool const
expression remove_all_extents<char const>::type=char const
expression remove_all_extents<wchar_t const>::type=wchar_t const
expression remove_all_extents<signed char const>::type=signed char const
expression remove_all_extents<unsigned char const>::type=unsigned char const
expression remove_all_extents<short const>::type=short const
expression remove_all_extents<unsigned short const>::type=unsigned short const
expression remove_all_extents<int const>::type=int const
expression remove_all_extents<unsigned int const>::type=unsigned int const
expression remove_all_extents<long const>::type=long const
expression remove_all_extents<unsigned long const>::type=unsigned long const
expression remove_all_extents<float const>::type=float const
expression remove_all_extents<long double const>::type=long double const
expression remove_all_extents<double const>::type=double const
expression remove_all_extents<UDT const>::type=UDT const
expression remove_all_extents<enum1 const>::type=enum1 const
expression remove_all_extents<bool volatile>::type=bool volatile
expression remove_all_extents<char volatile>::type=char volatile
expression remove_all_extents<wchar_t volatile>::type=wchar_t volatile
expression remove_all_extents<signed char volatile>::type=signed char volatile
expression remove_all_extents<unsigned char volatile>::type=unsigned char volatile
expression remove_all_extents<short volatile>::type=short volatile
expression remove_all_extents<unsigned short volatile>::type=unsigned short volatile
expression remove_all_extents<int volatile>::type=int volatile
expression remove_all_extents<unsigned int volatile>::type=unsigned int volatile
expression remove_all_extents<long volatile>::type=long volatile
expression remove_all_extents<unsigned long volatile>::type=unsigned long volatile
expression remove_all_extents<float volatile>::type=float volatile
expression remove_all_extents<long double volatile>::type=long double volatile
expression remove_all_extents<double volatile>::type=double volatile
expression remove_all_extents<UDT volatile>::type=UDT volatile
expression remove_all_extents<enum1 volatile>::type=enum1 volatile
expression remove_all_extents<bool [2]>::type=bool
expression remove_all_extents<char [2]>::type=char
expression remove_all_extents<wchar_t [2]>::type=wchar_t
expression remove_all_extents<signed char [2]>::type=signed char
expression remove_all_extents<unsigned char [2]>::type=unsigned char
expression remove_all_extents<short [2]>::type=short
expression remove_all_extents<unsigned short [2]>::type=unsigned short
expression remove_all_extents<int [2]>::type=int
expression remove_all_extents<unsigned int [2]>::type=unsigned int
expression remove_all_extents<long [2]>::type=long
expression remove_all_extents<unsigned long [2]>::type=unsigned long
expression remove_all_extents<float [2]>::type=float
expression remove_all_extents<long double [2]>::type=long double
expression remove_all_extents<double [2]>::type=double
expression remove_all_extents<UDT [2]>::type=UDT
expression remove_all_extents<enum1 [2]>::type=enum1
expression remove_all_extents<bool >::type=bool
expression remove_all_extents<char >::type=char
expression remove_all_extents<wchar_t >::type=wchar_t
expression remove_all_extents<signed char >::type=signed char
expression remove_all_extents<unsigned char >::type=unsigned char
expression remove_all_extents<short >::type=short
expression remove_all_extents<unsigned short >::type=unsigned short
expression remove_all_extents<int >::type=int
expression remove_all_extents<unsigned int >::type=unsigned int
expression remove_all_extents<long >::type=long
expression remove_all_extents<unsigned long >::type=unsigned long
expression remove_all_extents<float >::type=float
expression remove_all_extents<long double >::type=long double
expression remove_all_extents<double >::type=double
expression remove_all_extents<UDT >::type=UDT
expression remove_all_extents<enum1 >::type=enum1
expression remove_all_extents<bool const &>::type=bool const&
expression remove_all_extents<char const &>::type=char const&
expression remove_all_extents<wchar_t const &>::type=wchar_t const&
expression remove_all_extents<signed char const &>::type=signed char const&
expression remove_all_extents<unsigned char const &>::type=unsigned char const&
expression remove_all_extents<short const &>::type=short const&
expression remove_all_extents<unsigned short const &>::type=unsigned short const&
expression remove_all_extents<int const &>::type=int const&
expression remove_all_extents<unsigned int const &>::type=unsigned int const&
expression remove_all_extents<long const &>::type=long const&
expression remove_all_extents<unsigned long const &>::type=unsigned long const&
expression remove_all_extents<float const &>::type=float const&
expression remove_all_extents<long double const &>::type=long double const&
expression remove_all_extents<double const &>::type=double const&
expression remove_all_extents<UDT const &>::type=UDT const&
expression remove_all_extents<enum1 const &>::type=enum1 const&
expression remove_all_extents<bool *>::type=bool *
expression remove_all_extents<char *>::type=char *
expression remove_all_extents<wchar_t *>::type=wchar_t *
expression remove_all_extents<signed char *>::type=signed char *
expression remove_all_extents<unsigned char *>::type=unsigned char *
expression remove_all_extents<short *>::type=short *
expression remove_all_extents<unsigned short *>::type=unsigned short *
expression remove_all_extents<int *>::type=int *
expression remove_all_extents<unsigned int *>::type=unsigned int *
expression remove_all_extents<long *>::type=long *
expression remove_all_extents<unsigned long *>::type=unsigned long *
expression remove_all_extents<float *>::type=float *
expression remove_all_extents<long double *>::type=long double *
expression remove_all_extents<double *>::type=double *
expression remove_all_extents<UDT *>::type=UDT *
expression remove_all_extents<enum1 *>::type=enum1 *
expression remove_all_extents<bool *volatile>::type=bool *volatile
expression remove_all_extents<char *volatile>::type=char *volatile
expression remove_all_extents<wchar_t *volatile>::type=wchar_t *volatile
expression remove_all_extents<signed char *volatile>::type=signed char *volatile
expression remove_all_extents<unsigned char *volatile>::type=unsigned char *volatile
expression remove_all_extents<short *volatile>::type=short *volatile
expression remove_all_extents<unsigned short *volatile>::type=unsigned short *volatile
expression remove_all_extents<int *volatile>::type=int *volatile
expression remove_all_extents<unsigned int *volatile>::type=unsigned int *volatile
expression remove_all_extents<long *volatile>::type=long *volatile
expression remove_all_extents<unsigned long *volatile>::type=unsigned long *volatile
expression remove_all_extents<float *volatile>::type=float *volatile
expression remove_all_extents<long double *volatile>::type=long double *volatile
expression remove_all_extents<double *volatile>::type=double *volatile
expression remove_all_extents<UDT *volatile>::type=UDT *volatile
expression remove_all_extents<enum1 *volatile>::type=enum1 *volatile
expression remove_all_extents<bool const [2]>::type=bool const
expression remove_all_extents<char const [2]>::type=char const
expression remove_all_extents<wchar_t const [2]>::type=wchar_t const
expression remove_all_extents<signed char const [2]>::type=signed char const
expression remove_all_extents<unsigned char const [2]>::type=unsigned char const
expression remove_all_extents<short const [2]>::type=short const
expression remove_all_extents<unsigned short const [2]>::type=unsigned short const
expression remove_all_extents<int const [2]>::type=int const
expression remove_all_extents<unsigned int const [2]>::type=unsigned int const
expression remove_all_extents<long const [2]>::type=long const
expression remove_all_extents<unsigned long const [2]>::type=unsigned long const
expression remove_all_extents<float const [2]>::type=float const
expression remove_all_extents<long double const [2]>::type=long double const
expression remove_all_extents<double const [2]>::type=double const
expression remove_all_extents<UDT const [2]>::type=UDT const
expression remove_all_extents<enum1 const [2]>::type=enum1 const
expression remove_all_extents<bool const &>::type=bool const&
expression remove_all_extents<char const &>::type=char const&
expression remove_all_extents<wchar_t const &>::type=wchar_t const&
expression remove_all_extents<signed char const &>::type=signed char const&
expression remove_all_extents<unsigned char const &>::type=unsigned char const&
expression remove_all_extents<short const &>::type=short const&
expression remove_all_extents<unsigned short const &>::type=unsigned short const&
expression remove_all_extents<int const &>::type=int const&
expression remove_all_extents<unsigned int const &>::type=unsigned int const&
expression remove_all_extents<long const &>::type=long const&
expression remove_all_extents<unsigned long const &>::type=unsigned long const&
expression remove_all_extents<float const &>::type=float const&
expression remove_all_extents<long double const &>::type=long double const&
expression remove_all_extents<double const &>::type=double const&
expression remove_all_extents<UDT const &>::type=UDT const&
expression remove_all_extents<enum1 const &>::type=enum1 const&
expression remove_all_extents<bool const*>::type=bool const*
expression remove_all_extents<char const*>::type=char const*
expression remove_all_extents<wchar_t const*>::type=wchar_t const*
expression remove_all_extents<signed char const*>::type=signed char const*
expression remove_all_extents<unsigned char const*>::type=unsigned char const*
expression remove_all_extents<short const*>::type=short const*
expression remove_all_extents<unsigned short const*>::type=unsigned short const*
expression remove_all_extents<int const*>::type=int const*
expression remove_all_extents<unsigned int const*>::type=unsigned int const*
expression remove_all_extents<long const*>::type=long const*
expression remove_all_extents<unsigned long const*>::type=unsigned long const*
expression remove_all_extents<float const*>::type=float const*
expression remove_all_extents<long double const*>::type=long double const*
expression remove_all_extents<double const*>::type=double const*
expression remove_all_extents<UDT const*>::type=UDT const*
expression remove_all_extents<enum1 const*>::type=enum1 const*
expression remove_all_extents<bool volatile*>::type=bool volatile*
expression remove_all_extents<char volatile*>::type=char volatile*
expression remove_all_extents<wchar_t volatile*>::type=wchar_t volatile*
expression remove_all_extents<signed char volatile*>::type=signed char volatile*
expression remove_all_extents<unsigned char volatile*>::type=unsigned char volatile*
expression remove_all_extents<short volatile*>::type=short volatile*
expression remove_all_extents<unsigned short volatile*>::type=unsigned short volatile*
expression remove_all_extents<int volatile*>::type=int volatile*
expression remove_all_extents<unsigned int volatile*>::type=unsigned int volatile*
expression remove_all_extents<long volatile*>::type=long volatile*
expression remove_all_extents<unsigned long volatile*>::type=unsigned long volatile*
expression remove_all_extents<float volatile*>::type=float volatile*
expression remove_all_extents<long double volatile*>::type=long double volatile*
expression remove_all_extents<double volatile*>::type=double volatile*
expression remove_all_extents<UDT volatile*>::type=UDT volatile*
expression remove_all_extents<enum1 volatile*>::type=enum1 volatile*
expression remove_all_extents<bool const[2][3]>::type=bool const
expression remove_all_extents<char const[2][3]>::type=char const
expression remove_all_extents<wchar_t const[2][3]>::type=wchar_t const
expression remove_all_extents<signed char const[2][3]>::type=signed char const
expression remove_all_extents<unsigned char const[2][3]>::type=unsigned char const
expression remove_all_extents<short const[2][3]>::type=short const
expression remove_all_extents<unsigned short const[2][3]>::type=unsigned short const
expression remove_all_extents<int const[2][3]>::type=int const
expression remove_all_extents<unsigned int const[2][3]>::type=unsigned int const
expression remove_all_extents<long const[2][3]>::type=long const
expression remove_all_extents<unsigned long const[2][3]>::type=unsigned long const
expression remove_all_extents<float const[2][3]>::type=float const
expression remove_all_extents<long double const[2][3]>::type=long double const
expression remove_all_extents<double const[2][3]>::type=double const
expression remove_all_extents<UDT const[2][3]>::type=UDT const
expression remove_all_extents<enum1 const[2][3]>::type=enum1 const
expression remove_all_extents<bool (&)[2]>::type=bool (&)[2]
expression remove_all_extents<char (&)[2]>::type=char (&)[2]
expression remove_all_extents<wchar_t (&)[2]>::type=wchar_t (&)[2]
expression remove_all_extents<signed char (&)[2]>::type=signed char (&)[2]
expression remove_all_extents<unsigned char (&)[2]>::type=unsigned char (&)[2]
expression remove_all_extents<short (&)[2]>::type=short (&)[2]
expression remove_all_extents<unsigned short (&)[2]>::type=unsigned short (&)[2]
expression remove_all_extents<int (&)[2]>::type=int (&)[2]
expression remove_all_extents<unsigned int (&)[2]>::type=unsigned int (&)[2]
expression remove_all_extents<long (&)[2]>::type=long (&)[2]
expression remove_all_extents<unsigned long (&)[2]>::type=unsigned long (&)[2]
expression remove_all_extents<float (&)[2]>::type=float (&)[2]
expression remove_all_extents<long double (&)[2]>::type=long double (&)[2]
expression remove_all_extents<double (&)[2]>::type=double (&)[2]
expression remove_all_extents<UDT (&)[2]>::type=UDT (&)[2]
expression remove_all_extents<enum1 (&)[2]>::type=enum1 (&)[2]
expression remove_all_extents<bool []>::type=bool
expression remove_all_extents<char []>::type=char
expression remove_all_extents<wchar_t []>::type=wchar_t
expression remove_all_extents<signed char []>::type=signed char
expression remove_all_extents<unsigned char []>::type=unsigned char
expression remove_all_extents<short []>::type=short
expression remove_all_extents<unsigned short []>::type=unsigned short
expression remove_all_extents<int []>::type=int
expression remove_all_extents<unsigned int []>::type=unsigned int
expression remove_all_extents<long []>::type=long
expression remove_all_extents<unsigned long []>::type=unsigned long
expression remove_all_extents<float []>::type=float
expression remove_all_extents<long double []>::type=long double
expression remove_all_extents<double []>::type=double
expression remove_all_extents<UDT []>::type=UDT
expression remove_all_extents<enum1 []>::type=enum1
expression remove_all_extents<bool const []>::type=bool const
expression remove_all_extents<char const []>::type=char const
expression remove_all_extents<wchar_t const []>::type=wchar_t const
expression remove_all_extents<signed char const []>::type=signed char const
expression remove_all_extents<unsigned char const []>::type=unsigned char const
expression remove_all_extents<short const []>::type=short const
expression remove_all_extents<unsigned short const []>::type=unsigned short const
expression remove_all_extents<int const []>::type=int const
expression remove_all_extents<unsigned int const []>::type=unsigned int const
expression remove_all_extents<long const []>::type=long const
expression remove_all_extents<unsigned long const []>::type=unsigned long const
expression remove_all_extents<float const []>::type=float const
expression remove_all_extents<long double const []>::type=long double const
expression remove_all_extents<double const []>::type=double const
expression remove_all_extents<UDT const []>::type=UDT const
expression remove_all_extents<enum1 const []>::type=enum1 const
expression remove_all_extents<bool const[][3]>::type=bool const
expression remove_all_extents<char const[][3]>::type=char const
expression remove_all_extents<wchar_t const[][3]>::type=wchar_t const
expression remove_all_extents<signed char const[][3]>::type=signed char const
expression remove_all_extents<unsigned char const[][3]>::type=unsigned char const
expression remove_all_extents<short const[][3]>::type=short const
expression remove_all_extents<unsigned short const[][3]>::type=unsigned short const
expression remove_all_extents<int const[][3]>::type=int const
expression remove_all_extents<unsigned int const[][3]>::type=unsigned int const
expression remove_all_extents<long const[][3]>::type=long const
expression remove_all_extents<unsigned long const[][3]>::type=unsigned long const
expression remove_all_extents<float const[][3]>::type=float const
expression remove_all_extents<long double const[][3]>::type=long double const
expression remove_all_extents<double const[][3]>::type=double const
expression remove_all_extents<UDT const[][3]>::type=UDT const
expression remove_all_extents<enum1 const[][3]>::type=enum1 const
Results of remove_const_test:
expression remove_const<bool const>::type=bool
expression remove_const<char const>::type=char
expression remove_const<wchar_t const>::type=wchar_t
expression remove_const<signed char const>::type=signed char
expression remove_const<unsigned char const>::type=unsigned char
expression remove_const<short const>::type=short
expression remove_const<unsigned short const>::type=unsigned short
expression remove_const<int const>::type=int
expression remove_const<unsigned int const>::type=unsigned int
expression remove_const<long const>::type=long
expression remove_const<unsigned long const>::type=unsigned long
expression remove_const<float const>::type=float
expression remove_const<long double const>::type=long double
expression remove_const<double const>::type=double
expression remove_const<UDT const>::type=UDT
expression remove_const<enum1 const>::type=enum1
expression remove_const<bool volatile>::type=bool volatile
expression remove_const<char volatile>::type=char volatile
expression remove_const<wchar_t volatile>::type=wchar_t volatile
expression remove_const<signed char volatile>::type=signed char volatile
expression remove_const<unsigned char volatile>::type=unsigned char volatile
expression remove_const<short volatile>::type=short volatile
expression remove_const<unsigned short volatile>::type=unsigned short volatile
expression remove_const<int volatile>::type=int volatile
expression remove_const<unsigned int volatile>::type=unsigned int volatile
expression remove_const<long volatile>::type=long volatile
expression remove_const<unsigned long volatile>::type=unsigned long volatile
expression remove_const<float volatile>::type=float volatile
expression remove_const<long double volatile>::type=long double volatile
expression remove_const<double volatile>::type=double volatile
expression remove_const<UDT volatile>::type=UDT volatile
expression remove_const<enum1 volatile>::type=enum1 volatile
expression remove_const<bool const volatile>::type=bool volatile
expression remove_const<char const volatile>::type=char volatile
expression remove_const<wchar_t const volatile>::type=wchar_t volatile
expression remove_const<signed char const volatile>::type=signed char volatile
expression remove_const<unsigned char const volatile>::type=unsigned char volatile
expression remove_const<short const volatile>::type=short volatile
expression remove_const<unsigned short const volatile>::type=unsigned short volatile
expression remove_const<int const volatile>::type=int volatile
expression remove_const<unsigned int const volatile>::type=unsigned int volatile
expression remove_const<long const volatile>::type=long volatile
expression remove_const<unsigned long const volatile>::type=unsigned long volatile
expression remove_const<float const volatile>::type=float volatile
expression remove_const<long double const volatile>::type=long double volatile
expression remove_const<double const volatile>::type=double volatile
expression remove_const<UDT const volatile>::type=UDT volatile
expression remove_const<enum1 const volatile>::type=enum1 volatile
expression remove_const<bool >::type=bool
expression remove_const<char >::type=char
expression remove_const<wchar_t >::type=wchar_t
expression remove_const<signed char >::type=signed char
expression remove_const<unsigned char >::type=unsigned char
expression remove_const<short >::type=short
expression remove_const<unsigned short >::type=unsigned short
expression remove_const<int >::type=int
expression remove_const<unsigned int >::type=unsigned int
expression remove_const<long >::type=long
expression remove_const<unsigned long >::type=unsigned long
expression remove_const<float >::type=float
expression remove_const<long double >::type=long double
expression remove_const<double >::type=double
expression remove_const<UDT >::type=UDT
expression remove_const<enum1 >::type=enum1
expression remove_const<bool *const>::type=bool *
expression remove_const<char *const>::type=char *
expression remove_const<wchar_t *const>::type=wchar_t *
expression remove_const<signed char *const>::type=signed char *
expression remove_const<unsigned char *const>::type=unsigned char *
expression remove_const<short *const>::type=short *
expression remove_const<unsigned short *const>::type=unsigned short *
expression remove_const<int *const>::type=int *
expression remove_const<unsigned int *const>::type=unsigned int *
expression remove_const<long *const>::type=long *
expression remove_const<unsigned long *const>::type=unsigned long *
expression remove_const<float *const>::type=float *
expression remove_const<long double *const>::type=long double *
expression remove_const<double *const>::type=double *
expression remove_const<UDT *const>::type=UDT *
expression remove_const<enum1 *const>::type=enum1 *
expression remove_const<bool *volatile>::type=bool *volatile
expression remove_const<char *volatile>::type=char *volatile
expression remove_const<wchar_t *volatile>::type=wchar_t *volatile
expression remove_const<signed char *volatile>::type=signed char *volatile
expression remove_const<unsigned char *volatile>::type=unsigned char *volatile
expression remove_const<short *volatile>::type=short *volatile
expression remove_const<unsigned short *volatile>::type=unsigned short *volatile
expression remove_const<int *volatile>::type=int *volatile
expression remove_const<unsigned int *volatile>::type=unsigned int *volatile
expression remove_const<long *volatile>::type=long *volatile
expression remove_const<unsigned long *volatile>::type=unsigned long *volatile
expression remove_const<float *volatile>::type=float *volatile
expression remove_const<long double *volatile>::type=long double *volatile
expression remove_const<double *volatile>::type=double *volatile
expression remove_const<UDT *volatile>::type=UDT *volatile
expression remove_const<enum1 *volatile>::type=enum1 *volatile
expression remove_const<bool *const volatile>::type=bool *volatile
expression remove_const<char *const volatile>::type=char *volatile
expression remove_const<wchar_t *const volatile>::type=wchar_t *volatile
expression remove_const<signed char *const volatile>::type=signed char *volatile
expression remove_const<unsigned char *const volatile>::type=unsigned char *volatile
expression remove_const<short *const volatile>::type=short *volatile
expression remove_const<unsigned short *const volatile>::type=unsigned short *volatile
expression remove_const<int *const volatile>::type=int *volatile
expression remove_const<unsigned int *const volatile>::type=unsigned int *volatile
expression remove_const<long *const volatile>::type=long *volatile
expression remove_const<unsigned long *const volatile>::type=unsigned long *volatile
expression remove_const<float *const volatile>::type=float *volatile
expression remove_const<long double *const volatile>::type=long double *volatile
expression remove_const<double *const volatile>::type=double *volatile
expression remove_const<UDT *const volatile>::type=UDT *volatile
expression remove_const<enum1 *const volatile>::type=enum1 *volatile
expression remove_const<bool *>::type=bool *
expression remove_const<char *>::type=char *
expression remove_const<wchar_t *>::type=wchar_t *
expression remove_const<signed char *>::type=signed char *
expression remove_const<unsigned char *>::type=unsigned char *
expression remove_const<short *>::type=short *
expression remove_const<unsigned short *>::type=unsigned short *
expression remove_const<int *>::type=int *
expression remove_const<unsigned int *>::type=unsigned int *
expression remove_const<long *>::type=long *
expression remove_const<unsigned long *>::type=unsigned long *
expression remove_const<float *>::type=float *
expression remove_const<long double *>::type=long double *
expression remove_const<double *>::type=double *
expression remove_const<UDT *>::type=UDT *
expression remove_const<enum1 *>::type=enum1 *
expression remove_const<bool volatile*>::type=bool volatile*
expression remove_const<char volatile*>::type=char volatile*
expression remove_const<wchar_t volatile*>::type=wchar_t volatile*
expression remove_const<signed char volatile*>::type=signed char volatile*
expression remove_const<unsigned char volatile*>::type=unsigned char volatile*
expression remove_const<short volatile*>::type=short volatile*
expression remove_const<unsigned short volatile*>::type=unsigned short volatile*
expression remove_const<int volatile*>::type=int volatile*
expression remove_const<unsigned int volatile*>::type=unsigned int volatile*
expression remove_const<long volatile*>::type=long volatile*
expression remove_const<unsigned long volatile*>::type=unsigned long volatile*
expression remove_const<float volatile*>::type=float volatile*
expression remove_const<long double volatile*>::type=long double volatile*
expression remove_const<double volatile*>::type=double volatile*
expression remove_const<UDT volatile*>::type=UDT volatile*
expression remove_const<enum1 volatile*>::type=enum1 volatile*
expression remove_const<bool const[2]>::type=bool [2]
expression remove_const<char const[2]>::type=char [2]
expression remove_const<wchar_t const[2]>::type=wchar_t [2]
expression remove_const<signed char const[2]>::type=signed char [2]
expression remove_const<unsigned char const[2]>::type=unsigned char [2]
expression remove_const<short const[2]>::type=short [2]
expression remove_const<unsigned short const[2]>::type=unsigned short [2]
expression remove_const<int const[2]>::type=int [2]
expression remove_const<unsigned int const[2]>::type=unsigned int [2]
expression remove_const<long const[2]>::type=long [2]
expression remove_const<unsigned long const[2]>::type=unsigned long [2]
expression remove_const<float const[2]>::type=float [2]
expression remove_const<long double const[2]>::type=long double [2]
expression remove_const<double const[2]>::type=double [2]
expression remove_const<UDT const[2]>::type=UDT [2]
expression remove_const<enum1 const[2]>::type=enum1 [2]
expression remove_const<bool volatile[2]>::type=bool volatile[2]
expression remove_const<char volatile[2]>::type=char volatile[2]
expression remove_const<wchar_t volatile[2]>::type=wchar_t volatile[2]
expression remove_const<signed char volatile[2]>::type=signed char volatile[2]
expression remove_const<unsigned char volatile[2]>::type=unsigned char volatile[2]
expression remove_const<short volatile[2]>::type=short volatile[2]
expression remove_const<unsigned short volatile[2]>::type=unsigned short volatile[2]
expression remove_const<int volatile[2]>::type=int volatile[2]
expression remove_const<unsigned int volatile[2]>::type=unsigned int volatile[2]
expression remove_const<long volatile[2]>::type=long volatile[2]
expression remove_const<unsigned long volatile[2]>::type=unsigned long volatile[2]
expression remove_const<float volatile[2]>::type=float volatile[2]
expression remove_const<long double volatile[2]>::type=long double volatile[2]
expression remove_const<double volatile[2]>::type=double volatile[2]
expression remove_const<UDT volatile[2]>::type=UDT volatile[2]
expression remove_const<enum1 volatile[2]>::type=enum1 volatile[2]
expression remove_const<bool const volatile[2]>::type=bool volatile[2]
expression remove_const<char const volatile[2]>::type=char volatile[2]
expression remove_const<wchar_t const volatile[2]>::type=wchar_t volatile[2]
expression remove_const<signed char const volatile[2]>::type=signed char volatile[2]
expression remove_const<unsigned char const volatile[2]>::type=unsigned char volatile[2]
expression remove_const<short const volatile[2]>::type=short volatile[2]
expression remove_const<unsigned short const volatile[2]>::type=unsigned short volatile[2]
expression remove_const<int const volatile[2]>::type=int volatile[2]
expression remove_const<unsigned int const volatile[2]>::type=unsigned int volatile[2]
expression remove_const<long const volatile[2]>::type=long volatile[2]
expression remove_const<unsigned long const volatile[2]>::type=unsigned long volatile[2]
expression remove_const<float const volatile[2]>::type=float volatile[2]
expression remove_const<long double const volatile[2]>::type=long double volatile[2]
expression remove_const<double const volatile[2]>::type=double volatile[2]
expression remove_const<UDT const volatile[2]>::type=UDT volatile[2]
expression remove_const<enum1 const volatile[2]>::type=enum1 volatile[2]
expression remove_const<bool [2]>::type=bool [2]
expression remove_const<char [2]>::type=char [2]
expression remove_const<wchar_t [2]>::type=wchar_t [2]
expression remove_const<signed char [2]>::type=signed char [2]
expression remove_const<unsigned char [2]>::type=unsigned char [2]
expression remove_const<short [2]>::type=short [2]
expression remove_const<unsigned short [2]>::type=unsigned short [2]
expression remove_const<int [2]>::type=int [2]
expression remove_const<unsigned int [2]>::type=unsigned int [2]
expression remove_const<long [2]>::type=long [2]
expression remove_const<unsigned long [2]>::type=unsigned long [2]
expression remove_const<float [2]>::type=float [2]
expression remove_const<long double [2]>::type=long double [2]
expression remove_const<double [2]>::type=double [2]
expression remove_const<UDT [2]>::type=UDT [2]
expression remove_const<enum1 [2]>::type=enum1 [2]
expression remove_const<bool const*>::type=bool const*
expression remove_const<char const*>::type=char const*
expression remove_const<wchar_t const*>::type=wchar_t const*
expression remove_const<signed char const*>::type=signed char const*
expression remove_const<unsigned char const*>::type=unsigned char const*
expression remove_const<short const*>::type=short const*
expression remove_const<unsigned short const*>::type=unsigned short const*
expression remove_const<int const*>::type=int const*
expression remove_const<unsigned int const*>::type=unsigned int const*
expression remove_const<long const*>::type=long const*
expression remove_const<unsigned long const*>::type=unsigned long const*
expression remove_const<float const*>::type=float const*
expression remove_const<long double const*>::type=long double const*
expression remove_const<double const*>::type=double const*
expression remove_const<UDT const*>::type=UDT const*
expression remove_const<enum1 const*>::type=enum1 const*
expression remove_const<bool const*const>::type=bool const*
expression remove_const<char const*const>::type=char const*
expression remove_const<wchar_t const*const>::type=wchar_t const*
expression remove_const<signed char const*const>::type=signed char const*
expression remove_const<unsigned char const*const>::type=unsigned char const*
expression remove_const<short const*const>::type=short const*
expression remove_const<unsigned short const*const>::type=unsigned short const*
expression remove_const<int const*const>::type=int const*
expression remove_const<unsigned int const*const>::type=unsigned int const*
expression remove_const<long const*const>::type=long const*
expression remove_const<unsigned long const*const>::type=unsigned long const*
expression remove_const<float const*const>::type=float const*
expression remove_const<long double const*const>::type=long double const*
expression remove_const<double const*const>::type=double const*
expression remove_const<UDT const*const>::type=UDT const*
expression remove_const<enum1 const*const>::type=enum1 const*
expression remove_const<bool const[]>::type=bool []
expression remove_const<char const[]>::type=char []
expression remove_const<wchar_t const[]>::type=wchar_t []
expression remove_const<signed char const[]>::type=signed char []
expression remove_const<unsigned char const[]>::type=unsigned char []
expression remove_const<short const[]>::type=short []
expression remove_const<unsigned short const[]>::type=unsigned short []
expression remove_const<int const[]>::type=int []
expression remove_const<unsigned int const[]>::type=unsigned int []
expression remove_const<long const[]>::type=long []
expression remove_const<unsigned long const[]>::type=unsigned long []
expression remove_const<float const[]>::type=float []
expression remove_const<long double const[]>::type=long double []
expression remove_const<double const[]>::type=double []
expression remove_const<UDT const[]>::type=UDT []
expression remove_const<enum1 const[]>::type=enum1 []
expression remove_const<bool const volatile []>::type=bool volatile []
expression remove_const<char const volatile []>::type=char volatile []
expression remove_const<wchar_t const volatile []>::type=wchar_t volatile []
expression remove_const<signed char const volatile []>::type=signed char volatile []
expression remove_const<unsigned char const volatile []>::type=unsigned char volatile []
expression remove_const<short const volatile []>::type=short volatile []
expression remove_const<unsigned short const volatile []>::type=unsigned short volatile []
expression remove_const<int const volatile []>::type=int volatile []
expression remove_const<unsigned int const volatile []>::type=unsigned int volatile []
expression remove_const<long const volatile []>::type=long volatile []
expression remove_const<unsigned long const volatile []>::type=unsigned long volatile []
expression remove_const<float const volatile []>::type=float volatile []
expression remove_const<long double const volatile []>::type=long double volatile []
expression remove_const<double const volatile []>::type=double volatile []
expression remove_const<UDT const volatile []>::type=UDT volatile []
expression remove_const<enum1 const volatile []>::type=enum1 volatile []
expression remove_const<bool volatile []>::type=bool volatile []
expression remove_const<char volatile []>::type=char volatile []
expression remove_const<wchar_t volatile []>::type=wchar_t volatile []
expression remove_const<signed char volatile []>::type=signed char volatile []
expression remove_const<unsigned char volatile []>::type=unsigned char volatile []
expression remove_const<short volatile []>::type=short volatile []
expression remove_const<unsigned short volatile []>::type=unsigned short volatile []
expression remove_const<int volatile []>::type=int volatile []
expression remove_const<unsigned int volatile []>::type=unsigned int volatile []
expression remove_const<long volatile []>::type=long volatile []
expression remove_const<unsigned long volatile []>::type=unsigned long volatile []
expression remove_const<float volatile []>::type=float volatile []
expression remove_const<long double volatile []>::type=long double volatile []
expression remove_const<double volatile []>::type=double volatile []
expression remove_const<UDT volatile []>::type=UDT volatile []
expression remove_const<enum1 volatile []>::type=enum1 volatile []
expression remove_const<bool []>::type=bool []
expression remove_const<char []>::type=char []
expression remove_const<wchar_t []>::type=wchar_t []
expression remove_const<signed char []>::type=signed char []
expression remove_const<unsigned char []>::type=unsigned char []
expression remove_const<short []>::type=short []
expression remove_const<unsigned short []>::type=unsigned short []
expression remove_const<int []>::type=int []
expression remove_const<unsigned int []>::type=unsigned int []
expression remove_const<long []>::type=long []
expression remove_const<unsigned long []>::type=unsigned long []
expression remove_const<float []>::type=float []
expression remove_const<long double []>::type=long double []
expression remove_const<double []>::type=double []
expression remove_const<UDT []>::type=UDT []
expression remove_const<enum1 []>::type=enum1 []
Results of remove_cv_test:
expression remove_cv<bool const>::type=bool
expression remove_cv<char const>::type=char
expression remove_cv<wchar_t const>::type=wchar_t
expression remove_cv<signed char const>::type=signed char
expression remove_cv<unsigned char const>::type=unsigned char
expression remove_cv<short const>::type=short
expression remove_cv<unsigned short const>::type=unsigned short
expression remove_cv<int const>::type=int
expression remove_cv<unsigned int const>::type=unsigned int
expression remove_cv<long const>::type=long
expression remove_cv<unsigned long const>::type=unsigned long
expression remove_cv<float const>::type=float
expression remove_cv<long double const>::type=long double
expression remove_cv<double const>::type=double
expression remove_cv<UDT const>::type=UDT
expression remove_cv<enum1 const>::type=enum1
expression remove_cv<bool volatile>::type=bool
expression remove_cv<char volatile>::type=char
expression remove_cv<wchar_t volatile>::type=wchar_t
expression remove_cv<signed char volatile>::type=signed char
expression remove_cv<unsigned char volatile>::type=unsigned char
expression remove_cv<short volatile>::type=short
expression remove_cv<unsigned short volatile>::type=unsigned short
expression remove_cv<int volatile>::type=int
expression remove_cv<unsigned int volatile>::type=unsigned int
expression remove_cv<long volatile>::type=long
expression remove_cv<unsigned long volatile>::type=unsigned long
expression remove_cv<float volatile>::type=float
expression remove_cv<long double volatile>::type=long double
expression remove_cv<double volatile>::type=double
expression remove_cv<UDT volatile>::type=UDT
expression remove_cv<enum1 volatile>::type=enum1
expression remove_cv<bool const volatile>::type=bool
expression remove_cv<char const volatile>::type=char
expression remove_cv<wchar_t const volatile>::type=wchar_t
expression remove_cv<signed char const volatile>::type=signed char
expression remove_cv<unsigned char const volatile>::type=unsigned char
expression remove_cv<short const volatile>::type=short
expression remove_cv<unsigned short const volatile>::type=unsigned short
expression remove_cv<int const volatile>::type=int
expression remove_cv<unsigned int const volatile>::type=unsigned int
expression remove_cv<long const volatile>::type=long
expression remove_cv<unsigned long const volatile>::type=unsigned long
expression remove_cv<float const volatile>::type=float
expression remove_cv<long double const volatile>::type=long double
expression remove_cv<double const volatile>::type=double
expression remove_cv<UDT const volatile>::type=UDT
expression remove_cv<enum1 const volatile>::type=enum1
expression remove_cv<bool >::type=bool
expression remove_cv<char >::type=char
expression remove_cv<wchar_t >::type=wchar_t
expression remove_cv<signed char >::type=signed char
expression remove_cv<unsigned char >::type=unsigned char
expression remove_cv<short >::type=short
expression remove_cv<unsigned short >::type=unsigned short
expression remove_cv<int >::type=int
expression remove_cv<unsigned int >::type=unsigned int
expression remove_cv<long >::type=long
expression remove_cv<unsigned long >::type=unsigned long
expression remove_cv<float >::type=float
expression remove_cv<long double >::type=long double
expression remove_cv<double >::type=double
expression remove_cv<UDT >::type=UDT
expression remove_cv<enum1 >::type=enum1
expression remove_cv<bool const &>::type=bool const&
expression remove_cv<char const &>::type=char const&
expression remove_cv<wchar_t const &>::type=wchar_t const&
expression remove_cv<signed char const &>::type=signed char const&
expression remove_cv<unsigned char const &>::type=unsigned char const&
expression remove_cv<short const &>::type=short const&
expression remove_cv<unsigned short const &>::type=unsigned short const&
expression remove_cv<int const &>::type=int const&
expression remove_cv<unsigned int const &>::type=unsigned int const&
expression remove_cv<long const &>::type=long const&
expression remove_cv<unsigned long const &>::type=unsigned long const&
expression remove_cv<float const &>::type=float const&
expression remove_cv<long double const &>::type=long double const&
expression remove_cv<double const &>::type=double const&
expression remove_cv<UDT const &>::type=UDT const&
expression remove_cv<enum1 const &>::type=enum1 const&
expression remove_cv<bool *const>::type=bool *
expression remove_cv<char *const>::type=char *
expression remove_cv<wchar_t *const>::type=wchar_t *
expression remove_cv<signed char *const>::type=signed char *
expression remove_cv<unsigned char *const>::type=unsigned char *
expression remove_cv<short *const>::type=short *
expression remove_cv<unsigned short *const>::type=unsigned short *
expression remove_cv<int *const>::type=int *
expression remove_cv<unsigned int *const>::type=unsigned int *
expression remove_cv<long *const>::type=long *
expression remove_cv<unsigned long *const>::type=unsigned long *
expression remove_cv<float *const>::type=float *
expression remove_cv<long double *const>::type=long double *
expression remove_cv<double *const>::type=double *
expression remove_cv<UDT *const>::type=UDT *
expression remove_cv<enum1 *const>::type=enum1 *
expression remove_cv<bool *volatile>::type=bool *
expression remove_cv<char *volatile>::type=char *
expression remove_cv<wchar_t *volatile>::type=wchar_t *
expression remove_cv<signed char *volatile>::type=signed char *
expression remove_cv<unsigned char *volatile>::type=unsigned char *
expression remove_cv<short *volatile>::type=short *
expression remove_cv<unsigned short *volatile>::type=unsigned short *
expression remove_cv<int *volatile>::type=int *
expression remove_cv<unsigned int *volatile>::type=unsigned int *
expression remove_cv<long *volatile>::type=long *
expression remove_cv<unsigned long *volatile>::type=unsigned long *
expression remove_cv<float *volatile>::type=float *
expression remove_cv<long double *volatile>::type=long double *
expression remove_cv<double *volatile>::type=double *
expression remove_cv<UDT *volatile>::type=UDT *
expression remove_cv<enum1 *volatile>::type=enum1 *
expression remove_cv<bool *const volatile>::type=bool *
expression remove_cv<char *const volatile>::type=char *
expression remove_cv<wchar_t *const volatile>::type=wchar_t *
expression remove_cv<signed char *const volatile>::type=signed char *
expression remove_cv<unsigned char *const volatile>::type=unsigned char *
expression remove_cv<short *const volatile>::type=short *
expression remove_cv<unsigned short *const volatile>::type=unsigned short *
expression remove_cv<int *const volatile>::type=int *
expression remove_cv<unsigned int *const volatile>::type=unsigned int *
expression remove_cv<long *const volatile>::type=long *
expression remove_cv<unsigned long *const volatile>::type=unsigned long *
expression remove_cv<float *const volatile>::type=float *
expression remove_cv<long double *const volatile>::type=long double *
expression remove_cv<double *const volatile>::type=double *
expression remove_cv<UDT *const volatile>::type=UDT *
expression remove_cv<enum1 *const volatile>::type=enum1 *
expression remove_cv<bool *>::type=bool *
expression remove_cv<char *>::type=char *
expression remove_cv<wchar_t *>::type=wchar_t *
expression remove_cv<signed char *>::type=signed char *
expression remove_cv<unsigned char *>::type=unsigned char *
expression remove_cv<short *>::type=short *
expression remove_cv<unsigned short *>::type=unsigned short *
expression remove_cv<int *>::type=int *
expression remove_cv<unsigned int *>::type=unsigned int *
expression remove_cv<long *>::type=long *
expression remove_cv<unsigned long *>::type=unsigned long *
expression remove_cv<float *>::type=float *
expression remove_cv<long double *>::type=long double *
expression remove_cv<double *>::type=double *
expression remove_cv<UDT *>::type=UDT *
expression remove_cv<enum1 *>::type=enum1 *
expression remove_cv<bool const*>::type=bool const*
expression remove_cv<char const*>::type=char const*
expression remove_cv<wchar_t const*>::type=wchar_t const*
expression remove_cv<signed char const*>::type=signed char const*
expression remove_cv<unsigned char const*>::type=unsigned char const*
expression remove_cv<short const*>::type=short const*
expression remove_cv<unsigned short const*>::type=unsigned short const*
expression remove_cv<int const*>::type=int const*
expression remove_cv<unsigned int const*>::type=unsigned int const*
expression remove_cv<long const*>::type=long const*
expression remove_cv<unsigned long const*>::type=unsigned long const*
expression remove_cv<float const*>::type=float const*
expression remove_cv<long double const*>::type=long double const*
expression remove_cv<double const*>::type=double const*
expression remove_cv<UDT const*>::type=UDT const*
expression remove_cv<enum1 const*>::type=enum1 const*
expression remove_cv<bool volatile*>::type=bool volatile*
expression remove_cv<char volatile*>::type=char volatile*
expression remove_cv<wchar_t volatile*>::type=wchar_t volatile*
expression remove_cv<signed char volatile*>::type=signed char volatile*
expression remove_cv<unsigned char volatile*>::type=unsigned char volatile*
expression remove_cv<short volatile*>::type=short volatile*
expression remove_cv<unsigned short volatile*>::type=unsigned short volatile*
expression remove_cv<int volatile*>::type=int volatile*
expression remove_cv<unsigned int volatile*>::type=unsigned int volatile*
expression remove_cv<long volatile*>::type=long volatile*
expression remove_cv<unsigned long volatile*>::type=unsigned long volatile*
expression remove_cv<float volatile*>::type=float volatile*
expression remove_cv<long double volatile*>::type=long double volatile*
expression remove_cv<double volatile*>::type=double volatile*
expression remove_cv<UDT volatile*>::type=UDT volatile*
expression remove_cv<enum1 volatile*>::type=enum1 volatile*
expression remove_cv<bool const[2]>::type=bool [2]
expression remove_cv<char const[2]>::type=char [2]
expression remove_cv<wchar_t const[2]>::type=wchar_t [2]
expression remove_cv<signed char const[2]>::type=signed char [2]
expression remove_cv<unsigned char const[2]>::type=unsigned char [2]
expression remove_cv<short const[2]>::type=short [2]
expression remove_cv<unsigned short const[2]>::type=unsigned short [2]
expression remove_cv<int const[2]>::type=int [2]
expression remove_cv<unsigned int const[2]>::type=unsigned int [2]
expression remove_cv<long const[2]>::type=long [2]
expression remove_cv<unsigned long const[2]>::type=unsigned long [2]
expression remove_cv<float const[2]>::type=float [2]
expression remove_cv<long double const[2]>::type=long double [2]
expression remove_cv<double const[2]>::type=double [2]
expression remove_cv<UDT const[2]>::type=UDT [2]
expression remove_cv<enum1 const[2]>::type=enum1 [2]
expression remove_cv<bool volatile[2]>::type=bool [2]
expression remove_cv<char volatile[2]>::type=char [2]
expression remove_cv<wchar_t volatile[2]>::type=wchar_t [2]
expression remove_cv<signed char volatile[2]>::type=signed char [2]
expression remove_cv<unsigned char volatile[2]>::type=unsigned char [2]
expression remove_cv<short volatile[2]>::type=short [2]
expression remove_cv<unsigned short volatile[2]>::type=unsigned short [2]
expression remove_cv<int volatile[2]>::type=int [2]
expression remove_cv<unsigned int volatile[2]>::type=unsigned int [2]
expression remove_cv<long volatile[2]>::type=long [2]
expression remove_cv<unsigned long volatile[2]>::type=unsigned long [2]
expression remove_cv<float volatile[2]>::type=float [2]
expression remove_cv<long double volatile[2]>::type=long double [2]
expression remove_cv<double volatile[2]>::type=double [2]
expression remove_cv<UDT volatile[2]>::type=UDT [2]
expression remove_cv<enum1 volatile[2]>::type=enum1 [2]
expression remove_cv<bool const volatile[2]>::type=bool [2]
expression remove_cv<char const volatile[2]>::type=char [2]
expression remove_cv<wchar_t const volatile[2]>::type=wchar_t [2]
expression remove_cv<signed char const volatile[2]>::type=signed char [2]
expression remove_cv<unsigned char const volatile[2]>::type=unsigned char [2]
expression remove_cv<short const volatile[2]>::type=short [2]
expression remove_cv<unsigned short const volatile[2]>::type=unsigned short [2]
expression remove_cv<int const volatile[2]>::type=int [2]
expression remove_cv<unsigned int const volatile[2]>::type=unsigned int [2]
expression remove_cv<long const volatile[2]>::type=long [2]
expression remove_cv<unsigned long const volatile[2]>::type=unsigned long [2]
expression remove_cv<float const volatile[2]>::type=float [2]
expression remove_cv<long double const volatile[2]>::type=long double [2]
expression remove_cv<double const volatile[2]>::type=double [2]
expression remove_cv<UDT const volatile[2]>::type=UDT [2]
expression remove_cv<enum1 const volatile[2]>::type=enum1 [2]
expression remove_cv<bool [2]>::type=bool [2]
expression remove_cv<char [2]>::type=char [2]
expression remove_cv<wchar_t [2]>::type=wchar_t [2]
expression remove_cv<signed char [2]>::type=signed char [2]
expression remove_cv<unsigned char [2]>::type=unsigned char [2]
expression remove_cv<short [2]>::type=short [2]
expression remove_cv<unsigned short [2]>::type=unsigned short [2]
expression remove_cv<int [2]>::type=int [2]
expression remove_cv<unsigned int [2]>::type=unsigned int [2]
expression remove_cv<long [2]>::type=long [2]
expression remove_cv<unsigned long [2]>::type=unsigned long [2]
expression remove_cv<float [2]>::type=float [2]
expression remove_cv<long double [2]>::type=long double [2]
expression remove_cv<double [2]>::type=double [2]
expression remove_cv<UDT [2]>::type=UDT [2]
expression remove_cv<enum1 [2]>::type=enum1 [2]
expression remove_cv<bool const*>::type=bool const*
expression remove_cv<char const*>::type=char const*
expression remove_cv<wchar_t const*>::type=wchar_t const*
expression remove_cv<signed char const*>::type=signed char const*
expression remove_cv<unsigned char const*>::type=unsigned char const*
expression remove_cv<short const*>::type=short const*
expression remove_cv<unsigned short const*>::type=unsigned short const*
expression remove_cv<int const*>::type=int const*
expression remove_cv<unsigned int const*>::type=unsigned int const*
expression remove_cv<long const*>::type=long const*
expression remove_cv<unsigned long const*>::type=unsigned long const*
expression remove_cv<float const*>::type=float const*
expression remove_cv<long double const*>::type=long double const*
expression remove_cv<double const*>::type=double const*
expression remove_cv<UDT const*>::type=UDT const*
expression remove_cv<enum1 const*>::type=enum1 const*
expression remove_cv<bool const*volatile>::type=bool const*
expression remove_cv<char const*volatile>::type=char const*
expression remove_cv<wchar_t const*volatile>::type=wchar_t const*
expression remove_cv<signed char const*volatile>::type=signed char const*
expression remove_cv<unsigned char const*volatile>::type=unsigned char const*
expression remove_cv<short const*volatile>::type=short const*
expression remove_cv<unsigned short const*volatile>::type=unsigned short const*
expression remove_cv<int const*volatile>::type=int const*
expression remove_cv<unsigned int const*volatile>::type=unsigned int const*
expression remove_cv<long const*volatile>::type=long const*
expression remove_cv<unsigned long const*volatile>::type=unsigned long const*
expression remove_cv<float const*volatile>::type=float const*
expression remove_cv<long double const*volatile>::type=long double const*
expression remove_cv<double const*volatile>::type=double const*
expression remove_cv<UDT const*volatile>::type=UDT const*
expression remove_cv<enum1 const*volatile>::type=enum1 const*
expression remove_cv<bool volatile[]>::type=bool []
expression remove_cv<char volatile[]>::type=char []
expression remove_cv<wchar_t volatile[]>::type=wchar_t []
expression remove_cv<signed char volatile[]>::type=signed char []
expression remove_cv<unsigned char volatile[]>::type=unsigned char []
expression remove_cv<short volatile[]>::type=short []
expression remove_cv<unsigned short volatile[]>::type=unsigned short []
expression remove_cv<int volatile[]>::type=int []
expression remove_cv<unsigned int volatile[]>::type=unsigned int []
expression remove_cv<long volatile[]>::type=long []
expression remove_cv<unsigned long volatile[]>::type=unsigned long []
expression remove_cv<float volatile[]>::type=float []
expression remove_cv<long double volatile[]>::type=long double []
expression remove_cv<double volatile[]>::type=double []
expression remove_cv<UDT volatile[]>::type=UDT []
expression remove_cv<enum1 volatile[]>::type=enum1 []
expression remove_cv<bool const volatile []>::type=bool []
expression remove_cv<char const volatile []>::type=char []
expression remove_cv<wchar_t const volatile []>::type=wchar_t []
expression remove_cv<signed char const volatile []>::type=signed char []
expression remove_cv<unsigned char const volatile []>::type=unsigned char []
expression remove_cv<short const volatile []>::type=short []
expression remove_cv<unsigned short const volatile []>::type=unsigned short []
expression remove_cv<int const volatile []>::type=int []
expression remove_cv<unsigned int const volatile []>::type=unsigned int []
expression remove_cv<long const volatile []>::type=long []
expression remove_cv<unsigned long const volatile []>::type=unsigned long []
expression remove_cv<float const volatile []>::type=float []
expression remove_cv<long double const volatile []>::type=long double []
expression remove_cv<double const volatile []>::type=double []
expression remove_cv<UDT const volatile []>::type=UDT []
expression remove_cv<enum1 const volatile []>::type=enum1 []
expression remove_cv<bool const []>::type=bool []
expression remove_cv<char const []>::type=char []
expression remove_cv<wchar_t const []>::type=wchar_t []
expression remove_cv<signed char const []>::type=signed char []
expression remove_cv<unsigned char const []>::type=unsigned char []
expression remove_cv<short const []>::type=short []
expression remove_cv<unsigned short const []>::type=unsigned short []
expression remove_cv<int const []>::type=int []
expression remove_cv<unsigned int const []>::type=unsigned int []
expression remove_cv<long const []>::type=long []
expression remove_cv<unsigned long const []>::type=unsigned long []
expression remove_cv<float const []>::type=float []
expression remove_cv<long double const []>::type=long double []
expression remove_cv<double const []>::type=double []
expression remove_cv<UDT const []>::type=UDT []
expression remove_cv<enum1 const []>::type=enum1 []
expression remove_cv<bool []>::type=bool []
expression remove_cv<char []>::type=char []
expression remove_cv<wchar_t []>::type=wchar_t []
expression remove_cv<signed char []>::type=signed char []
expression remove_cv<unsigned char []>::type=unsigned char []
expression remove_cv<short []>::type=short []
expression remove_cv<unsigned short []>::type=unsigned short []
expression remove_cv<int []>::type=int []
expression remove_cv<unsigned int []>::type=unsigned int []
expression remove_cv<long []>::type=long []
expression remove_cv<unsigned long []>::type=unsigned long []
expression remove_cv<float []>::type=float []
expression remove_cv<long double []>::type=long double []
expression remove_cv<double []>::type=double []
expression remove_cv<UDT []>::type=UDT []
expression remove_cv<enum1 []>::type=enum1 []
Results of remove_extent_test:
expression remove_extent<bool const>::type=bool const
expression remove_extent<char const>::type=char const
expression remove_extent<wchar_t const>::type=wchar_t const
expression remove_extent<signed char const>::type=signed char const
expression remove_extent<unsigned char const>::type=unsigned char const
expression remove_extent<short const>::type=short const
expression remove_extent<unsigned short const>::type=unsigned short const
expression remove_extent<int const>::type=int const
expression remove_extent<unsigned int const>::type=unsigned int const
expression remove_extent<long const>::type=long const
expression remove_extent<unsigned long const>::type=unsigned long const
expression remove_extent<float const>::type=float const
expression remove_extent<long double const>::type=long double const
expression remove_extent<double const>::type=double const
expression remove_extent<UDT const>::type=UDT const
expression remove_extent<enum1 const>::type=enum1 const
expression remove_extent<bool volatile>::type=bool volatile
expression remove_extent<char volatile>::type=char volatile
expression remove_extent<wchar_t volatile>::type=wchar_t volatile
expression remove_extent<signed char volatile>::type=signed char volatile
expression remove_extent<unsigned char volatile>::type=unsigned char volatile
expression remove_extent<short volatile>::type=short volatile
expression remove_extent<unsigned short volatile>::type=unsigned short volatile
expression remove_extent<int volatile>::type=int volatile
expression remove_extent<unsigned int volatile>::type=unsigned int volatile
expression remove_extent<long volatile>::type=long volatile
expression remove_extent<unsigned long volatile>::type=unsigned long volatile
expression remove_extent<float volatile>::type=float volatile
expression remove_extent<long double volatile>::type=long double volatile
expression remove_extent<double volatile>::type=double volatile
expression remove_extent<UDT volatile>::type=UDT volatile
expression remove_extent<enum1 volatile>::type=enum1 volatile
expression remove_extent<bool [2]>::type=bool
expression remove_extent<char [2]>::type=char
expression remove_extent<wchar_t [2]>::type=wchar_t
expression remove_extent<signed char [2]>::type=signed char
expression remove_extent<unsigned char [2]>::type=unsigned char
expression remove_extent<short [2]>::type=short
expression remove_extent<unsigned short [2]>::type=unsigned short
expression remove_extent<int [2]>::type=int
expression remove_extent<unsigned int [2]>::type=unsigned int
expression remove_extent<long [2]>::type=long
expression remove_extent<unsigned long [2]>::type=unsigned long
expression remove_extent<float [2]>::type=float
expression remove_extent<long double [2]>::type=long double
expression remove_extent<double [2]>::type=double
expression remove_extent<UDT [2]>::type=UDT
expression remove_extent<enum1 [2]>::type=enum1
expression remove_extent<bool >::type=bool
expression remove_extent<char >::type=char
expression remove_extent<wchar_t >::type=wchar_t
expression remove_extent<signed char >::type=signed char
expression remove_extent<unsigned char >::type=unsigned char
expression remove_extent<short >::type=short
expression remove_extent<unsigned short >::type=unsigned short
expression remove_extent<int >::type=int
expression remove_extent<unsigned int >::type=unsigned int
expression remove_extent<long >::type=long
expression remove_extent<unsigned long >::type=unsigned long
expression remove_extent<float >::type=float
expression remove_extent<long double >::type=long double
expression remove_extent<double >::type=double
expression remove_extent<UDT >::type=UDT
expression remove_extent<enum1 >::type=enum1
expression remove_extent<bool const &>::type=bool const&
expression remove_extent<char const &>::type=char const&
expression remove_extent<wchar_t const &>::type=wchar_t const&
expression remove_extent<signed char const &>::type=signed char const&
expression remove_extent<unsigned char const &>::type=unsigned char const&
expression remove_extent<short const &>::type=short const&
expression remove_extent<unsigned short const &>::type=unsigned short const&
expression remove_extent<int const &>::type=int const&
expression remove_extent<unsigned int const &>::type=unsigned int const&
expression remove_extent<long const &>::type=long const&
expression remove_extent<unsigned long const &>::type=unsigned long const&
expression remove_extent<float const &>::type=float const&
expression remove_extent<long double const &>::type=long double const&
expression remove_extent<double const &>::type=double const&
expression remove_extent<UDT const &>::type=UDT const&
expression remove_extent<enum1 const &>::type=enum1 const&
expression remove_extent<bool *>::type=bool *
expression remove_extent<char *>::type=char *
expression remove_extent<wchar_t *>::type=wchar_t *
expression remove_extent<signed char *>::type=signed char *
expression remove_extent<unsigned char *>::type=unsigned char *
expression remove_extent<short *>::type=short *
expression remove_extent<unsigned short *>::type=unsigned short *
expression remove_extent<int *>::type=int *
expression remove_extent<unsigned int *>::type=unsigned int *
expression remove_extent<long *>::type=long *
expression remove_extent<unsigned long *>::type=unsigned long *
expression remove_extent<float *>::type=float *
expression remove_extent<long double *>::type=long double *
expression remove_extent<double *>::type=double *
expression remove_extent<UDT *>::type=UDT *
expression remove_extent<enum1 *>::type=enum1 *
expression remove_extent<bool *volatile>::type=bool *volatile
expression remove_extent<char *volatile>::type=char *volatile
expression remove_extent<wchar_t *volatile>::type=wchar_t *volatile
expression remove_extent<signed char *volatile>::type=signed char *volatile
expression remove_extent<unsigned char *volatile>::type=unsigned char *volatile
expression remove_extent<short *volatile>::type=short *volatile
expression remove_extent<unsigned short *volatile>::type=unsigned short *volatile
expression remove_extent<int *volatile>::type=int *volatile
expression remove_extent<unsigned int *volatile>::type=unsigned int *volatile
expression remove_extent<long *volatile>::type=long *volatile
expression remove_extent<unsigned long *volatile>::type=unsigned long *volatile
expression remove_extent<float *volatile>::type=float *volatile
expression remove_extent<long double *volatile>::type=long double *volatile
expression remove_extent<double *volatile>::type=double *volatile
expression remove_extent<UDT *volatile>::type=UDT *volatile
expression remove_extent<enum1 *volatile>::type=enum1 *volatile
expression remove_extent<bool const [2]>::type=bool const
expression remove_extent<char const [2]>::type=char const
expression remove_extent<wchar_t const [2]>::type=wchar_t const
expression remove_extent<signed char const [2]>::type=signed char const
expression remove_extent<unsigned char const [2]>::type=unsigned char const
expression remove_extent<short const [2]>::type=short const
expression remove_extent<unsigned short const [2]>::type=unsigned short const
expression remove_extent<int const [2]>::type=int const
expression remove_extent<unsigned int const [2]>::type=unsigned int const
expression remove_extent<long const [2]>::type=long const
expression remove_extent<unsigned long const [2]>::type=unsigned long const
expression remove_extent<float const [2]>::type=float const
expression remove_extent<long double const [2]>::type=long double const
expression remove_extent<double const [2]>::type=double const
expression remove_extent<UDT const [2]>::type=UDT const
expression remove_extent<enum1 const [2]>::type=enum1 const
expression remove_extent<bool const &>::type=bool const&
expression remove_extent<char const &>::type=char const&
expression remove_extent<wchar_t const &>::type=wchar_t const&
expression remove_extent<signed char const &>::type=signed char const&
expression remove_extent<unsigned char const &>::type=unsigned char const&
expression remove_extent<short const &>::type=short const&
expression remove_extent<unsigned short const &>::type=unsigned short const&
expression remove_extent<int const &>::type=int const&
expression remove_extent<unsigned int const &>::type=unsigned int const&
expression remove_extent<long const &>::type=long const&
expression remove_extent<unsigned long const &>::type=unsigned long const&
expression remove_extent<float const &>::type=float const&
expression remove_extent<long double const &>::type=long double const&
expression remove_extent<double const &>::type=double const&
expression remove_extent<UDT const &>::type=UDT const&
expression remove_extent<enum1 const &>::type=enum1 const&
expression remove_extent<bool const*>::type=bool const*
expression remove_extent<char const*>::type=char const*
expression remove_extent<wchar_t const*>::type=wchar_t const*
expression remove_extent<signed char const*>::type=signed char const*
expression remove_extent<unsigned char const*>::type=unsigned char const*
expression remove_extent<short const*>::type=short const*
expression remove_extent<unsigned short const*>::type=unsigned short const*
expression remove_extent<int const*>::type=int const*
expression remove_extent<unsigned int const*>::type=unsigned int const*
expression remove_extent<long const*>::type=long const*
expression remove_extent<unsigned long const*>::type=unsigned long const*
expression remove_extent<float const*>::type=float const*
expression remove_extent<long double const*>::type=long double const*
expression remove_extent<double const*>::type=double const*
expression remove_extent<UDT const*>::type=UDT const*
expression remove_extent<enum1 const*>::type=enum1 const*
expression remove_extent<bool volatile*>::type=bool volatile*
expression remove_extent<char volatile*>::type=char volatile*
expression remove_extent<wchar_t volatile*>::type=wchar_t volatile*
expression remove_extent<signed char volatile*>::type=signed char volatile*
expression remove_extent<unsigned char volatile*>::type=unsigned char volatile*
expression remove_extent<short volatile*>::type=short volatile*
expression remove_extent<unsigned short volatile*>::type=unsigned short volatile*
expression remove_extent<int volatile*>::type=int volatile*
expression remove_extent<unsigned int volatile*>::type=unsigned int volatile*
expression remove_extent<long volatile*>::type=long volatile*
expression remove_extent<unsigned long volatile*>::type=unsigned long volatile*
expression remove_extent<float volatile*>::type=float volatile*
expression remove_extent<long double volatile*>::type=long double volatile*
expression remove_extent<double volatile*>::type=double volatile*
expression remove_extent<UDT volatile*>::type=UDT volatile*
expression remove_extent<enum1 volatile*>::type=enum1 volatile*
expression remove_extent<bool const[2][3]>::type=bool const[3]
expression remove_extent<char const[2][3]>::type=char const[3]
expression remove_extent<wchar_t const[2][3]>::type=wchar_t const[3]
expression remove_extent<signed char const[2][3]>::type=signed char const[3]
expression remove_extent<unsigned char const[2][3]>::type=unsigned char const[3]
expression remove_extent<short const[2][3]>::type=short const[3]
expression remove_extent<unsigned short const[2][3]>::type=unsigned short const[3]
expression remove_extent<int const[2][3]>::type=int const[3]
expression remove_extent<unsigned int const[2][3]>::type=unsigned int const[3]
expression remove_extent<long const[2][3]>::type=long const[3]
expression remove_extent<unsigned long const[2][3]>::type=unsigned long const[3]
expression remove_extent<float const[2][3]>::type=float const[3]
expression remove_extent<long double const[2][3]>::type=long double const[3]
expression remove_extent<double const[2][3]>::type=double const[3]
expression remove_extent<UDT const[2][3]>::type=UDT const[3]
expression remove_extent<enum1 const[2][3]>::type=enum1 const[3]
expression remove_extent<bool (&)[2]>::type=bool (&)[2]
expression remove_extent<char (&)[2]>::type=char (&)[2]
expression remove_extent<wchar_t (&)[2]>::type=wchar_t (&)[2]
expression remove_extent<signed char (&)[2]>::type=signed char (&)[2]
expression remove_extent<unsigned char (&)[2]>::type=unsigned char (&)[2]
expression remove_extent<short (&)[2]>::type=short (&)[2]
expression remove_extent<unsigned short (&)[2]>::type=unsigned short (&)[2]
expression remove_extent<int (&)[2]>::type=int (&)[2]
expression remove_extent<unsigned int (&)[2]>::type=unsigned int (&)[2]
expression remove_extent<long (&)[2]>::type=long (&)[2]
expression remove_extent<unsigned long (&)[2]>::type=unsigned long (&)[2]
expression remove_extent<float (&)[2]>::type=float (&)[2]
expression remove_extent<long double (&)[2]>::type=long double (&)[2]
expression remove_extent<double (&)[2]>::type=double (&)[2]
expression remove_extent<UDT (&)[2]>::type=UDT (&)[2]
expression remove_extent<enum1 (&)[2]>::type=enum1 (&)[2]
expression remove_extent<bool []>::type=bool
expression remove_extent<char []>::type=char
expression remove_extent<wchar_t []>::type=wchar_t
expression remove_extent<signed char []>::type=signed char
expression remove_extent<unsigned char []>::type=unsigned char
expression remove_extent<short []>::type=short
expression remove_extent<unsigned short []>::type=unsigned short
expression remove_extent<int []>::type=int
expression remove_extent<unsigned int []>::type=unsigned int
expression remove_extent<long []>::type=long
expression remove_extent<unsigned long []>::type=unsigned long
expression remove_extent<float []>::type=float
expression remove_extent<long double []>::type=long double
expression remove_extent<double []>::type=double
expression remove_extent<UDT []>::type=UDT
expression remove_extent<enum1 []>::type=enum1
expression remove_extent<bool const []>::type=bool const
expression remove_extent<char const []>::type=char const
expression remove_extent<wchar_t const []>::type=wchar_t const
expression remove_extent<signed char const []>::type=signed char const
expression remove_extent<unsigned char const []>::type=unsigned char const
expression remove_extent<short const []>::type=short const
expression remove_extent<unsigned short const []>::type=unsigned short const
expression remove_extent<int const []>::type=int const
expression remove_extent<unsigned int const []>::type=unsigned int const
expression remove_extent<long const []>::type=long const
expression remove_extent<unsigned long const []>::type=unsigned long const
expression remove_extent<float const []>::type=float const
expression remove_extent<long double const []>::type=long double const
expression remove_extent<double const []>::type=double const
expression remove_extent<UDT const []>::type=UDT const
expression remove_extent<enum1 const []>::type=enum1 const
expression remove_extent<bool const[][3]>::type=bool const[3]
expression remove_extent<char const[][3]>::type=char const[3]
expression remove_extent<wchar_t const[][3]>::type=wchar_t const[3]
expression remove_extent<signed char const[][3]>::type=signed char const[3]
expression remove_extent<unsigned char const[][3]>::type=unsigned char const[3]
expression remove_extent<short const[][3]>::type=short const[3]
expression remove_extent<unsigned short const[][3]>::type=unsigned short const[3]
expression remove_extent<int const[][3]>::type=int const[3]
expression remove_extent<unsigned int const[][3]>::type=unsigned int const[3]
expression remove_extent<long const[][3]>::type=long const[3]
expression remove_extent<unsigned long const[][3]>::type=unsigned long const[3]
expression remove_extent<float const[][3]>::type=float const[3]
expression remove_extent<long double const[][3]>::type=long double const[3]
expression remove_extent<double const[][3]>::type=double const[3]
expression remove_extent<UDT const[][3]>::type=UDT const[3]
expression remove_extent<enum1 const[][3]>::type=enum1 const[3]
Results of remove_pointer_test:
expression remove_pointer<bool const>::type=bool const
expression remove_pointer<char const>::type=char const
expression remove_pointer<wchar_t const>::type=wchar_t const
expression remove_pointer<signed char const>::type=signed char const
expression remove_pointer<unsigned char const>::type=unsigned char const
expression remove_pointer<short const>::type=short const
expression remove_pointer<unsigned short const>::type=unsigned short const
expression remove_pointer<int const>::type=int const
expression remove_pointer<unsigned int const>::type=unsigned int const
expression remove_pointer<long const>::type=long const
expression remove_pointer<unsigned long const>::type=unsigned long const
expression remove_pointer<float const>::type=float const
expression remove_pointer<long double const>::type=long double const
expression remove_pointer<double const>::type=double const
expression remove_pointer<UDT const>::type=UDT const
expression remove_pointer<enum1 const>::type=enum1 const
expression remove_pointer<bool volatile>::type=bool volatile
expression remove_pointer<char volatile>::type=char volatile
expression remove_pointer<wchar_t volatile>::type=wchar_t volatile
expression remove_pointer<signed char volatile>::type=signed char volatile
expression remove_pointer<unsigned char volatile>::type=unsigned char volatile
expression remove_pointer<short volatile>::type=short volatile
expression remove_pointer<unsigned short volatile>::type=unsigned short volatile
expression remove_pointer<int volatile>::type=int volatile
expression remove_pointer<unsigned int volatile>::type=unsigned int volatile
expression remove_pointer<long volatile>::type=long volatile
expression remove_pointer<unsigned long volatile>::type=unsigned long volatile
expression remove_pointer<float volatile>::type=float volatile
expression remove_pointer<long double volatile>::type=long double volatile
expression remove_pointer<double volatile>::type=double volatile
expression remove_pointer<UDT volatile>::type=UDT volatile
expression remove_pointer<enum1 volatile>::type=enum1 volatile
expression remove_pointer<bool *>::type=bool
expression remove_pointer<char *>::type=char
expression remove_pointer<wchar_t *>::type=wchar_t
expression remove_pointer<signed char *>::type=signed char
expression remove_pointer<unsigned char *>::type=unsigned char
expression remove_pointer<short *>::type=short
expression remove_pointer<unsigned short *>::type=unsigned short
expression remove_pointer<int *>::type=int
expression remove_pointer<unsigned int *>::type=unsigned int
expression remove_pointer<long *>::type=long
expression remove_pointer<unsigned long *>::type=unsigned long
expression remove_pointer<float *>::type=float
expression remove_pointer<long double *>::type=long double
expression remove_pointer<double *>::type=double
expression remove_pointer<UDT *>::type=UDT
expression remove_pointer<enum1 *>::type=enum1
expression remove_pointer<bool >::type=bool
expression remove_pointer<char >::type=char
expression remove_pointer<wchar_t >::type=wchar_t
expression remove_pointer<signed char >::type=signed char
expression remove_pointer<unsigned char >::type=unsigned char
expression remove_pointer<short >::type=short
expression remove_pointer<unsigned short >::type=unsigned short
expression remove_pointer<int >::type=int
expression remove_pointer<unsigned int >::type=unsigned int
expression remove_pointer<long >::type=long
expression remove_pointer<unsigned long >::type=unsigned long
expression remove_pointer<float >::type=float
expression remove_pointer<long double >::type=long double
expression remove_pointer<double >::type=double
expression remove_pointer<UDT >::type=UDT
expression remove_pointer<enum1 >::type=enum1
expression remove_pointer<bool const &>::type=bool const&
expression remove_pointer<char const &>::type=char const&
expression remove_pointer<wchar_t const &>::type=wchar_t const&
expression remove_pointer<signed char const &>::type=signed char const&
expression remove_pointer<unsigned char const &>::type=unsigned char const&
expression remove_pointer<short const &>::type=short const&
expression remove_pointer<unsigned short const &>::type=unsigned short const&
expression remove_pointer<int const &>::type=int const&
expression remove_pointer<unsigned int const &>::type=unsigned int const&
expression remove_pointer<long const &>::type=long const&
expression remove_pointer<unsigned long const &>::type=unsigned long const&
expression remove_pointer<float const &>::type=float const&
expression remove_pointer<long double const &>::type=long double const&
expression remove_pointer<double const &>::type=double const&
expression remove_pointer<UDT const &>::type=UDT const&
expression remove_pointer<enum1 const &>::type=enum1 const&
expression remove_pointer<bool &>::type=bool &
expression remove_pointer<char &>::type=char &
expression remove_pointer<wchar_t &>::type=wchar_t &
expression remove_pointer<signed char &>::type=signed char &
expression remove_pointer<unsigned char &>::type=unsigned char &
expression remove_pointer<short &>::type=short &
expression remove_pointer<unsigned short &>::type=unsigned short &
expression remove_pointer<int &>::type=int &
expression remove_pointer<unsigned int &>::type=unsigned int &
expression remove_pointer<long &>::type=long &
expression remove_pointer<unsigned long &>::type=unsigned long &
expression remove_pointer<float &>::type=float &
expression remove_pointer<long double &>::type=long double &
expression remove_pointer<double &>::type=double &
expression remove_pointer<UDT &>::type=UDT &
expression remove_pointer<enum1 &>::type=enum1 &
expression remove_pointer<bool *volatile>::type=bool
expression remove_pointer<char *volatile>::type=char
expression remove_pointer<wchar_t *volatile>::type=wchar_t
expression remove_pointer<signed char *volatile>::type=signed char
expression remove_pointer<unsigned char *volatile>::type=unsigned char
expression remove_pointer<short *volatile>::type=short
expression remove_pointer<unsigned short *volatile>::type=unsigned short
expression remove_pointer<int *volatile>::type=int
expression remove_pointer<unsigned int *volatile>::type=unsigned int
expression remove_pointer<long *volatile>::type=long
expression remove_pointer<unsigned long *volatile>::type=unsigned long
expression remove_pointer<float *volatile>::type=float
expression remove_pointer<long double *volatile>::type=long double
expression remove_pointer<double *volatile>::type=double
expression remove_pointer<UDT *volatile>::type=UDT
expression remove_pointer<enum1 *volatile>::type=enum1
expression remove_pointer<bool const [2]>::type=bool const[2]
expression remove_pointer<char const [2]>::type=char const[2]
expression remove_pointer<wchar_t const [2]>::type=wchar_t const[2]
expression remove_pointer<signed char const [2]>::type=signed char const[2]
expression remove_pointer<unsigned char const [2]>::type=unsigned char const[2]
expression remove_pointer<short const [2]>::type=short const[2]
expression remove_pointer<unsigned short const [2]>::type=unsigned short const[2]
expression remove_pointer<int const [2]>::type=int const[2]
expression remove_pointer<unsigned int const [2]>::type=unsigned int const[2]
expression remove_pointer<long const [2]>::type=long const[2]
expression remove_pointer<unsigned long const [2]>::type=unsigned long const[2]
expression remove_pointer<float const [2]>::type=float const[2]
expression remove_pointer<long double const [2]>::type=long double const[2]
expression remove_pointer<double const [2]>::type=double const[2]
expression remove_pointer<UDT const [2]>::type=UDT const[2]
expression remove_pointer<enum1 const [2]>::type=enum1 const[2]
expression remove_pointer<bool const &>::type=bool const&
expression remove_pointer<char const &>::type=char const&
expression remove_pointer<wchar_t const &>::type=wchar_t const&
expression remove_pointer<signed char const &>::type=signed char const&
expression remove_pointer<unsigned char const &>::type=unsigned char const&
expression remove_pointer<short const &>::type=short const&
expression remove_pointer<unsigned short const &>::type=unsigned short const&
expression remove_pointer<int const &>::type=int const&
expression remove_pointer<unsigned int const &>::type=unsigned int const&
expression remove_pointer<long const &>::type=long const&
expression remove_pointer<unsigned long const &>::type=unsigned long const&
expression remove_pointer<float const &>::type=float const&
expression remove_pointer<long double const &>::type=long double const&
expression remove_pointer<double const &>::type=double const&
expression remove_pointer<UDT const &>::type=UDT const&
expression remove_pointer<enum1 const &>::type=enum1 const&
expression remove_pointer<bool const*>::type=bool const
expression remove_pointer<char const*>::type=char const
expression remove_pointer<wchar_t const*>::type=wchar_t const
expression remove_pointer<signed char const*>::type=signed char const
expression remove_pointer<unsigned char const*>::type=unsigned char const
expression remove_pointer<short const*>::type=short const
expression remove_pointer<unsigned short const*>::type=unsigned short const
expression remove_pointer<int const*>::type=int const
expression remove_pointer<unsigned int const*>::type=unsigned int const
expression remove_pointer<long const*>::type=long const
expression remove_pointer<unsigned long const*>::type=unsigned long const
expression remove_pointer<float const*>::type=float const
expression remove_pointer<long double const*>::type=long double const
expression remove_pointer<double const*>::type=double const
expression remove_pointer<UDT const*>::type=UDT const
expression remove_pointer<enum1 const*>::type=enum1 const
expression remove_pointer<bool volatile*>::type=bool volatile
expression remove_pointer<char volatile*>::type=char volatile
expression remove_pointer<wchar_t volatile*>::type=wchar_t volatile
expression remove_pointer<signed char volatile*>::type=signed char volatile
expression remove_pointer<unsigned char volatile*>::type=unsigned char volatile
expression remove_pointer<short volatile*>::type=short volatile
expression remove_pointer<unsigned short volatile*>::type=unsigned short volatile
expression remove_pointer<int volatile*>::type=int volatile
expression remove_pointer<unsigned int volatile*>::type=unsigned int volatile
expression remove_pointer<long volatile*>::type=long volatile
expression remove_pointer<unsigned long volatile*>::type=unsigned long volatile
expression remove_pointer<float volatile*>::type=float volatile
expression remove_pointer<long double volatile*>::type=long double volatile
expression remove_pointer<double volatile*>::type=double volatile
expression remove_pointer<UDT volatile*>::type=UDT volatile
expression remove_pointer<enum1 volatile*>::type=enum1 volatile
expression remove_pointer<bool const[2][3]>::type=bool const[2][3]
expression remove_pointer<char const[2][3]>::type=char const[2][3]
expression remove_pointer<wchar_t const[2][3]>::type=wchar_t const[2][3]
expression remove_pointer<signed char const[2][3]>::type=signed char const[2][3]
expression remove_pointer<unsigned char const[2][3]>::type=unsigned char const[2][3]
expression remove_pointer<short const[2][3]>::type=short const[2][3]
expression remove_pointer<unsigned short const[2][3]>::type=unsigned short const[2][3]
expression remove_pointer<int const[2][3]>::type=int const[2][3]
expression remove_pointer<unsigned int const[2][3]>::type=unsigned int const[2][3]
expression remove_pointer<long const[2][3]>::type=long const[2][3]
expression remove_pointer<unsigned long const[2][3]>::type=unsigned long const[2][3]
expression remove_pointer<float const[2][3]>::type=float const[2][3]
expression remove_pointer<long double const[2][3]>::type=long double const[2][3]
expression remove_pointer<double const[2][3]>::type=double const[2][3]
expression remove_pointer<UDT const[2][3]>::type=UDT const[2][3]
expression remove_pointer<enum1 const[2][3]>::type=enum1 const[2][3]
expression remove_pointer<bool (&)[2]>::type=bool (&)[2]
expression remove_pointer<char (&)[2]>::type=char (&)[2]
expression remove_pointer<wchar_t (&)[2]>::type=wchar_t (&)[2]
expression remove_pointer<signed char (&)[2]>::type=signed char (&)[2]
expression remove_pointer<unsigned char (&)[2]>::type=unsigned char (&)[2]
expression remove_pointer<short (&)[2]>::type=short (&)[2]
expression remove_pointer<unsigned short (&)[2]>::type=unsigned short (&)[2]
expression remove_pointer<int (&)[2]>::type=int (&)[2]
expression remove_pointer<unsigned int (&)[2]>::type=unsigned int (&)[2]
expression remove_pointer<long (&)[2]>::type=long (&)[2]
expression remove_pointer<unsigned long (&)[2]>::type=unsigned long (&)[2]
expression remove_pointer<float (&)[2]>::type=float (&)[2]
expression remove_pointer<long double (&)[2]>::type=long double (&)[2]
expression remove_pointer<double (&)[2]>::type=double (&)[2]
expression remove_pointer<UDT (&)[2]>::type=UDT (&)[2]
expression remove_pointer<enum1 (&)[2]>::type=enum1 (&)[2]
Results of remove_reference_test:
expression remove_reference<bool const>::type=bool const
expression remove_reference<char const>::type=char const
expression remove_reference<wchar_t const>::type=wchar_t const
expression remove_reference<signed char const>::type=signed char const
expression remove_reference<unsigned char const>::type=unsigned char const
expression remove_reference<short const>::type=short const
expression remove_reference<unsigned short const>::type=unsigned short const
expression remove_reference<int const>::type=int const
expression remove_reference<unsigned int const>::type=unsigned int const
expression remove_reference<long const>::type=long const
expression remove_reference<unsigned long const>::type=unsigned long const
expression remove_reference<float const>::type=float const
expression remove_reference<long double const>::type=long double const
expression remove_reference<double const>::type=double const
expression remove_reference<UDT const>::type=UDT const
expression remove_reference<enum1 const>::type=enum1 const
expression remove_reference<bool volatile>::type=bool volatile
expression remove_reference<char volatile>::type=char volatile
expression remove_reference<wchar_t volatile>::type=wchar_t volatile
expression remove_reference<signed char volatile>::type=signed char volatile
expression remove_reference<unsigned char volatile>::type=unsigned char volatile
expression remove_reference<short volatile>::type=short volatile
expression remove_reference<unsigned short volatile>::type=unsigned short volatile
expression remove_reference<int volatile>::type=int volatile
expression remove_reference<unsigned int volatile>::type=unsigned int volatile
expression remove_reference<long volatile>::type=long volatile
expression remove_reference<unsigned long volatile>::type=unsigned long volatile
expression remove_reference<float volatile>::type=float volatile
expression remove_reference<long double volatile>::type=long double volatile
expression remove_reference<double volatile>::type=double volatile
expression remove_reference<UDT volatile>::type=UDT volatile
expression remove_reference<enum1 volatile>::type=enum1 volatile
expression remove_reference<bool &>::type=bool
expression remove_reference<char &>::type=char
expression remove_reference<wchar_t &>::type=wchar_t
expression remove_reference<signed char &>::type=signed char
expression remove_reference<unsigned char &>::type=unsigned char
expression remove_reference<short &>::type=short
expression remove_reference<unsigned short &>::type=unsigned short
expression remove_reference<int &>::type=int
expression remove_reference<unsigned int &>::type=unsigned int
expression remove_reference<long &>::type=long
expression remove_reference<unsigned long &>::type=unsigned long
expression remove_reference<float &>::type=float
expression remove_reference<long double &>::type=long double
expression remove_reference<double &>::type=double
expression remove_reference<UDT &>::type=UDT
expression remove_reference<enum1 &>::type=enum1
expression remove_reference<bool >::type=bool
expression remove_reference<char >::type=char
expression remove_reference<wchar_t >::type=wchar_t
expression remove_reference<signed char >::type=signed char
expression remove_reference<unsigned char >::type=unsigned char
expression remove_reference<short >::type=short
expression remove_reference<unsigned short >::type=unsigned short
expression remove_reference<int >::type=int
expression remove_reference<unsigned int >::type=unsigned int
expression remove_reference<long >::type=long
expression remove_reference<unsigned long >::type=unsigned long
expression remove_reference<float >::type=float
expression remove_reference<long double >::type=long double
expression remove_reference<double >::type=double
expression remove_reference<UDT >::type=UDT
expression remove_reference<enum1 >::type=enum1
expression remove_reference<bool const &>::type=bool const
expression remove_reference<char const &>::type=char const
expression remove_reference<wchar_t const &>::type=wchar_t const
expression remove_reference<signed char const &>::type=signed char const
expression remove_reference<unsigned char const &>::type=unsigned char const
expression remove_reference<short const &>::type=short const
expression remove_reference<unsigned short const &>::type=unsigned short const
expression remove_reference<int const &>::type=int const
expression remove_reference<unsigned int const &>::type=unsigned int const
expression remove_reference<long const &>::type=long const
expression remove_reference<unsigned long const &>::type=unsigned long const
expression remove_reference<float const &>::type=float const
expression remove_reference<long double const &>::type=long double const
expression remove_reference<double const &>::type=double const
expression remove_reference<UDT const &>::type=UDT const
expression remove_reference<enum1 const &>::type=enum1 const
expression remove_reference<bool *>::type=bool *
expression remove_reference<char *>::type=char *
expression remove_reference<wchar_t *>::type=wchar_t *
expression remove_reference<signed char *>::type=signed char *
expression remove_reference<unsigned char *>::type=unsigned char *
expression remove_reference<short *>::type=short *
expression remove_reference<unsigned short *>::type=unsigned short *
expression remove_reference<int *>::type=int *
expression remove_reference<unsigned int *>::type=unsigned int *
expression remove_reference<long *>::type=long *
expression remove_reference<unsigned long *>::type=unsigned long *
expression remove_reference<float *>::type=float *
expression remove_reference<long double *>::type=long double *
expression remove_reference<double *>::type=double *
expression remove_reference<UDT *>::type=UDT *
expression remove_reference<enum1 *>::type=enum1 *
expression remove_reference<bool *volatile>::type=bool *volatile
expression remove_reference<char *volatile>::type=char *volatile
expression remove_reference<wchar_t *volatile>::type=wchar_t *volatile
expression remove_reference<signed char *volatile>::type=signed char *volatile
expression remove_reference<unsigned char *volatile>::type=unsigned char *volatile
expression remove_reference<short *volatile>::type=short *volatile
expression remove_reference<unsigned short *volatile>::type=unsigned short *volatile
expression remove_reference<int *volatile>::type=int *volatile
expression remove_reference<unsigned int *volatile>::type=unsigned int *volatile
expression remove_reference<long *volatile>::type=long *volatile
expression remove_reference<unsigned long *volatile>::type=unsigned long *volatile
expression remove_reference<float *volatile>::type=float *volatile
expression remove_reference<long double *volatile>::type=long double *volatile
expression remove_reference<double *volatile>::type=double *volatile
expression remove_reference<UDT *volatile>::type=UDT *volatile
expression remove_reference<enum1 *volatile>::type=enum1 *volatile
expression remove_reference<bool &>::type=bool
expression remove_reference<char &>::type=char
expression remove_reference<wchar_t &>::type=wchar_t
expression remove_reference<signed char &>::type=signed char
expression remove_reference<unsigned char &>::type=unsigned char
expression remove_reference<short &>::type=short
expression remove_reference<unsigned short &>::type=unsigned short
expression remove_reference<int &>::type=int
expression remove_reference<unsigned int &>::type=unsigned int
expression remove_reference<long &>::type=long
expression remove_reference<unsigned long &>::type=unsigned long
expression remove_reference<float &>::type=float
expression remove_reference<long double &>::type=long double
expression remove_reference<double &>::type=double
expression remove_reference<UDT &>::type=UDT
expression remove_reference<enum1 &>::type=enum1
expression remove_reference<bool const &>::type=bool const
expression remove_reference<char const &>::type=char const
expression remove_reference<wchar_t const &>::type=wchar_t const
expression remove_reference<signed char const &>::type=signed char const
expression remove_reference<unsigned char const &>::type=unsigned char const
expression remove_reference<short const &>::type=short const
expression remove_reference<unsigned short const &>::type=unsigned short const
expression remove_reference<int const &>::type=int const
expression remove_reference<unsigned int const &>::type=unsigned int const
expression remove_reference<long const &>::type=long const
expression remove_reference<unsigned long const &>::type=unsigned long const
expression remove_reference<float const &>::type=float const
expression remove_reference<long double const &>::type=long double const
expression remove_reference<double const &>::type=double const
expression remove_reference<UDT const &>::type=UDT const
expression remove_reference<enum1 const &>::type=enum1 const
expression remove_reference<bool const*>::type=bool const*
expression remove_reference<char const*>::type=char const*
expression remove_reference<wchar_t const*>::type=wchar_t const*
expression remove_reference<signed char const*>::type=signed char const*
expression remove_reference<unsigned char const*>::type=unsigned char const*
expression remove_reference<short const*>::type=short const*
expression remove_reference<unsigned short const*>::type=unsigned short const*
expression remove_reference<int const*>::type=int const*
expression remove_reference<unsigned int const*>::type=unsigned int const*
expression remove_reference<long const*>::type=long const*
expression remove_reference<unsigned long const*>::type=unsigned long const*
expression remove_reference<float const*>::type=float const*
expression remove_reference<long double const*>::type=long double const*
expression remove_reference<double const*>::type=double const*
expression remove_reference<UDT const*>::type=UDT const*
expression remove_reference<enum1 const*>::type=enum1 const*
expression remove_reference<bool volatile*>::type=bool volatile*
expression remove_reference<char volatile*>::type=char volatile*
expression remove_reference<wchar_t volatile*>::type=wchar_t volatile*
expression remove_reference<signed char volatile*>::type=signed char volatile*
expression remove_reference<unsigned char volatile*>::type=unsigned char volatile*
expression remove_reference<short volatile*>::type=short volatile*
expression remove_reference<unsigned short volatile*>::type=unsigned short volatile*
expression remove_reference<int volatile*>::type=int volatile*
expression remove_reference<unsigned int volatile*>::type=unsigned int volatile*
expression remove_reference<long volatile*>::type=long volatile*
expression remove_reference<unsigned long volatile*>::type=unsigned long volatile*
expression remove_reference<float volatile*>::type=float volatile*
expression remove_reference<long double volatile*>::type=long double volatile*
expression remove_reference<double volatile*>::type=double volatile*
expression remove_reference<UDT volatile*>::type=UDT volatile*
expression remove_reference<enum1 volatile*>::type=enum1 volatile*
expression remove_reference<bool const[2]>::type=bool const[2]
expression remove_reference<char const[2]>::type=char const[2]
expression remove_reference<wchar_t const[2]>::type=wchar_t const[2]
expression remove_reference<signed char const[2]>::type=signed char const[2]
expression remove_reference<unsigned char const[2]>::type=unsigned char const[2]
expression remove_reference<short const[2]>::type=short const[2]
expression remove_reference<unsigned short const[2]>::type=unsigned short const[2]
expression remove_reference<int const[2]>::type=int const[2]
expression remove_reference<unsigned int const[2]>::type=unsigned int const[2]
expression remove_reference<long const[2]>::type=long const[2]
expression remove_reference<unsigned long const[2]>::type=unsigned long const[2]
expression remove_reference<float const[2]>::type=float const[2]
expression remove_reference<long double const[2]>::type=long double const[2]
expression remove_reference<double const[2]>::type=double const[2]
expression remove_reference<UDT const[2]>::type=UDT const[2]
expression remove_reference<enum1 const[2]>::type=enum1 const[2]
expression remove_reference<bool (&)[2]>::type=bool [2]
expression remove_reference<char (&)[2]>::type=char [2]
expression remove_reference<wchar_t (&)[2]>::type=wchar_t [2]
expression remove_reference<signed char (&)[2]>::type=signed char [2]
expression remove_reference<unsigned char (&)[2]>::type=unsigned char [2]
expression remove_reference<short (&)[2]>::type=short [2]
expression remove_reference<unsigned short (&)[2]>::type=unsigned short [2]
expression remove_reference<int (&)[2]>::type=int [2]
expression remove_reference<unsigned int (&)[2]>::type=unsigned int [2]
expression remove_reference<long (&)[2]>::type=long [2]
expression remove_reference<unsigned long (&)[2]>::type=unsigned long [2]
expression remove_reference<float (&)[2]>::type=float [2]
expression remove_reference<long double (&)[2]>::type=long double [2]
expression remove_reference<double (&)[2]>::type=double [2]
expression remove_reference<UDT (&)[2]>::type=UDT [2]
expression remove_reference<enum1 (&)[2]>::type=enum1 [2]
Results of remove_volatile_test:
expression remove_volatile<bool const>::type=bool const
expression remove_volatile<char const>::type=char const
expression remove_volatile<wchar_t const>::type=wchar_t const
expression remove_volatile<signed char const>::type=signed char const
expression remove_volatile<unsigned char const>::type=unsigned char const
expression remove_volatile<short const>::type=short const
expression remove_volatile<unsigned short const>::type=unsigned short const
expression remove_volatile<int const>::type=int const
expression remove_volatile<unsigned int const>::type=unsigned int const
expression remove_volatile<long const>::type=long const
expression remove_volatile<unsigned long const>::type=unsigned long const
expression remove_volatile<float const>::type=float const
expression remove_volatile<long double const>::type=long double const
expression remove_volatile<double const>::type=double const
expression remove_volatile<UDT const>::type=UDT const
expression remove_volatile<enum1 const>::type=enum1 const
expression remove_volatile<bool volatile>::type=bool
expression remove_volatile<char volatile>::type=char
expression remove_volatile<wchar_t volatile>::type=wchar_t
expression remove_volatile<signed char volatile>::type=signed char
expression remove_volatile<unsigned char volatile>::type=unsigned char
expression remove_volatile<short volatile>::type=short
expression remove_volatile<unsigned short volatile>::type=unsigned short
expression remove_volatile<int volatile>::type=int
expression remove_volatile<unsigned int volatile>::type=unsigned int
expression remove_volatile<long volatile>::type=long
expression remove_volatile<unsigned long volatile>::type=unsigned long
expression remove_volatile<float volatile>::type=float
expression remove_volatile<long double volatile>::type=long double
expression remove_volatile<double volatile>::type=double
expression remove_volatile<UDT volatile>::type=UDT
expression remove_volatile<enum1 volatile>::type=enum1
expression remove_volatile<bool const volatile>::type=bool const
expression remove_volatile<char const volatile>::type=char const
expression remove_volatile<wchar_t const volatile>::type=wchar_t const
expression remove_volatile<signed char const volatile>::type=signed char const
expression remove_volatile<unsigned char const volatile>::type=unsigned char const
expression remove_volatile<short const volatile>::type=short const
expression remove_volatile<unsigned short const volatile>::type=unsigned short const
expression remove_volatile<int const volatile>::type=int const
expression remove_volatile<unsigned int const volatile>::type=unsigned int const
expression remove_volatile<long const volatile>::type=long const
expression remove_volatile<unsigned long const volatile>::type=unsigned long const
expression remove_volatile<float const volatile>::type=float const
expression remove_volatile<long double const volatile>::type=long double const
expression remove_volatile<double const volatile>::type=double const
expression remove_volatile<UDT const volatile>::type=UDT const
expression remove_volatile<enum1 const volatile>::type=enum1 const
expression remove_volatile<bool >::type=bool
expression remove_volatile<char >::type=char
expression remove_volatile<wchar_t >::type=wchar_t
expression remove_volatile<signed char >::type=signed char
expression remove_volatile<unsigned char >::type=unsigned char
expression remove_volatile<short >::type=short
expression remove_volatile<unsigned short >::type=unsigned short
expression remove_volatile<int >::type=int
expression remove_volatile<unsigned int >::type=unsigned int
expression remove_volatile<long >::type=long
expression remove_volatile<unsigned long >::type=unsigned long
expression remove_volatile<float >::type=float
expression remove_volatile<long double >::type=long double
expression remove_volatile<double >::type=double
expression remove_volatile<UDT >::type=UDT
expression remove_volatile<enum1 >::type=enum1
expression remove_volatile<bool >::type=bool
expression remove_volatile<char >::type=char
expression remove_volatile<wchar_t >::type=wchar_t
expression remove_volatile<signed char >::type=signed char
expression remove_volatile<unsigned char >::type=unsigned char
expression remove_volatile<short >::type=short
expression remove_volatile<unsigned short >::type=unsigned short
expression remove_volatile<int >::type=int
expression remove_volatile<unsigned int >::type=unsigned int
expression remove_volatile<long >::type=long
expression remove_volatile<unsigned long >::type=unsigned long
expression remove_volatile<float >::type=float
expression remove_volatile<long double >::type=long double
expression remove_volatile<double >::type=double
expression remove_volatile<UDT >::type=UDT
expression remove_volatile<enum1 >::type=enum1
expression remove_volatile<bool *const>::type=bool *const
expression remove_volatile<char *const>::type=char *const
expression remove_volatile<wchar_t *const>::type=wchar_t *const
expression remove_volatile<signed char *const>::type=signed char *const
expression remove_volatile<unsigned char *const>::type=unsigned char *const
expression remove_volatile<short *const>::type=short *const
expression remove_volatile<unsigned short *const>::type=unsigned short *const
expression remove_volatile<int *const>::type=int *const
expression remove_volatile<unsigned int *const>::type=unsigned int *const
expression remove_volatile<long *const>::type=long *const
expression remove_volatile<unsigned long *const>::type=unsigned long *const
expression remove_volatile<float *const>::type=float *const
expression remove_volatile<long double *const>::type=long double *const
expression remove_volatile<double *const>::type=double *const
expression remove_volatile<UDT *const>::type=UDT *const
expression remove_volatile<enum1 *const>::type=enum1 *const
expression remove_volatile<bool *volatile>::type=bool *
expression remove_volatile<char *volatile>::type=char *
expression remove_volatile<wchar_t *volatile>::type=wchar_t *
expression remove_volatile<signed char *volatile>::type=signed char *
expression remove_volatile<unsigned char *volatile>::type=unsigned char *
expression remove_volatile<short *volatile>::type=short *
expression remove_volatile<unsigned short *volatile>::type=unsigned short *
expression remove_volatile<int *volatile>::type=int *
expression remove_volatile<unsigned int *volatile>::type=unsigned int *
expression remove_volatile<long *volatile>::type=long *
expression remove_volatile<unsigned long *volatile>::type=unsigned long *
expression remove_volatile<float *volatile>::type=float *
expression remove_volatile<long double *volatile>::type=long double *
expression remove_volatile<double *volatile>::type=double *
expression remove_volatile<UDT *volatile>::type=UDT *
expression remove_volatile<enum1 *volatile>::type=enum1 *
expression remove_volatile<bool *const volatile>::type=bool *const
expression remove_volatile<char *const volatile>::type=char *const
expression remove_volatile<wchar_t *const volatile>::type=wchar_t *const
expression remove_volatile<signed char *const volatile>::type=signed char *const
expression remove_volatile<unsigned char *const volatile>::type=unsigned char *const
expression remove_volatile<short *const volatile>::type=short *const
expression remove_volatile<unsigned short *const volatile>::type=unsigned short *const
expression remove_volatile<int *const volatile>::type=int *const
expression remove_volatile<unsigned int *const volatile>::type=unsigned int *const
expression remove_volatile<long *const volatile>::type=long *const
expression remove_volatile<unsigned long *const volatile>::type=unsigned long *const
expression remove_volatile<float *const volatile>::type=float *const
expression remove_volatile<long double *const volatile>::type=long double *const
expression remove_volatile<double *const volatile>::type=double *const
expression remove_volatile<UDT *const volatile>::type=UDT *const
expression remove_volatile<enum1 *const volatile>::type=enum1 *const
expression remove_volatile<bool *>::type=bool *
expression remove_volatile<char *>::type=char *
expression remove_volatile<wchar_t *>::type=wchar_t *
expression remove_volatile<signed char *>::type=signed char *
expression remove_volatile<unsigned char *>::type=unsigned char *
expression remove_volatile<short *>::type=short *
expression remove_volatile<unsigned short *>::type=unsigned short *
expression remove_volatile<int *>::type=int *
expression remove_volatile<unsigned int *>::type=unsigned int *
expression remove_volatile<long *>::type=long *
expression remove_volatile<unsigned long *>::type=unsigned long *
expression remove_volatile<float *>::type=float *
expression remove_volatile<long double *>::type=long double *
expression remove_volatile<double *>::type=double *
expression remove_volatile<UDT *>::type=UDT *
expression remove_volatile<enum1 *>::type=enum1 *
expression remove_volatile<bool *>::type=bool *
expression remove_volatile<char *>::type=char *
expression remove_volatile<wchar_t *>::type=wchar_t *
expression remove_volatile<signed char *>::type=signed char *
expression remove_volatile<unsigned char *>::type=unsigned char *
expression remove_volatile<short *>::type=short *
expression remove_volatile<unsigned short *>::type=unsigned short *
expression remove_volatile<int *>::type=int *
expression remove_volatile<unsigned int *>::type=unsigned int *
expression remove_volatile<long *>::type=long *
expression remove_volatile<unsigned long *>::type=unsigned long *
expression remove_volatile<float *>::type=float *
expression remove_volatile<long double *>::type=long double *
expression remove_volatile<double *>::type=double *
expression remove_volatile<UDT *>::type=UDT *
expression remove_volatile<enum1 *>::type=enum1 *
expression remove_volatile<bool volatile*>::type=bool volatile*
expression remove_volatile<char volatile*>::type=char volatile*
expression remove_volatile<wchar_t volatile*>::type=wchar_t volatile*
expression remove_volatile<signed char volatile*>::type=signed char volatile*
expression remove_volatile<unsigned char volatile*>::type=unsigned char volatile*
expression remove_volatile<short volatile*>::type=short volatile*
expression remove_volatile<unsigned short volatile*>::type=unsigned short volatile*
expression remove_volatile<int volatile*>::type=int volatile*
expression remove_volatile<unsigned int volatile*>::type=unsigned int volatile*
expression remove_volatile<long volatile*>::type=long volatile*
expression remove_volatile<unsigned long volatile*>::type=unsigned long volatile*
expression remove_volatile<float volatile*>::type=float volatile*
expression remove_volatile<long double volatile*>::type=long double volatile*
expression remove_volatile<double volatile*>::type=double volatile*
expression remove_volatile<UDT volatile*>::type=UDT volatile*
expression remove_volatile<enum1 volatile*>::type=enum1 volatile*
expression remove_volatile<bool const[2]>::type=bool const[2]
expression remove_volatile<char const[2]>::type=char const[2]
expression remove_volatile<wchar_t const[2]>::type=wchar_t const[2]
expression remove_volatile<signed char const[2]>::type=signed char const[2]
expression remove_volatile<unsigned char const[2]>::type=unsigned char const[2]
expression remove_volatile<short const[2]>::type=short const[2]
expression remove_volatile<unsigned short const[2]>::type=unsigned short const[2]
expression remove_volatile<int const[2]>::type=int const[2]
expression remove_volatile<unsigned int const[2]>::type=unsigned int const[2]
expression remove_volatile<long const[2]>::type=long const[2]
expression remove_volatile<unsigned long const[2]>::type=unsigned long const[2]
expression remove_volatile<float const[2]>::type=float const[2]
expression remove_volatile<long double const[2]>::type=long double const[2]
expression remove_volatile<double const[2]>::type=double const[2]
expression remove_volatile<UDT const[2]>::type=UDT const[2]
expression remove_volatile<enum1 const[2]>::type=enum1 const[2]
expression remove_volatile<bool volatile[2]>::type=bool [2]
expression remove_volatile<char volatile[2]>::type=char [2]
expression remove_volatile<wchar_t volatile[2]>::type=wchar_t [2]
expression remove_volatile<signed char volatile[2]>::type=signed char [2]
expression remove_volatile<unsigned char volatile[2]>::type=unsigned char [2]
expression remove_volatile<short volatile[2]>::type=short [2]
expression remove_volatile<unsigned short volatile[2]>::type=unsigned short [2]
expression remove_volatile<int volatile[2]>::type=int [2]
expression remove_volatile<unsigned int volatile[2]>::type=unsigned int [2]
expression remove_volatile<long volatile[2]>::type=long [2]
expression remove_volatile<unsigned long volatile[2]>::type=unsigned long [2]
expression remove_volatile<float volatile[2]>::type=float [2]
expression remove_volatile<long double volatile[2]>::type=long double [2]
expression remove_volatile<double volatile[2]>::type=double [2]
expression remove_volatile<UDT volatile[2]>::type=UDT [2]
expression remove_volatile<enum1 volatile[2]>::type=enum1 [2]
expression remove_volatile<bool const volatile[2]>::type=bool const[2]
expression remove_volatile<char const volatile[2]>::type=char const[2]
expression remove_volatile<wchar_t const volatile[2]>::type=wchar_t const[2]
expression remove_volatile<signed char const volatile[2]>::type=signed char const[2]
expression remove_volatile<unsigned char const volatile[2]>::type=unsigned char const[2]
expression remove_volatile<short const volatile[2]>::type=short const[2]
expression remove_volatile<unsigned short const volatile[2]>::type=unsigned short const[2]
expression remove_volatile<int const volatile[2]>::type=int const[2]
expression remove_volatile<unsigned int const volatile[2]>::type=unsigned int const[2]
expression remove_volatile<long const volatile[2]>::type=long const[2]
expression remove_volatile<unsigned long const volatile[2]>::type=unsigned long const[2]
expression remove_volatile<float const volatile[2]>::type=float const[2]
expression remove_volatile<long double const volatile[2]>::type=long double const[2]
expression remove_volatile<double const volatile[2]>::type=double const[2]
expression remove_volatile<UDT const volatile[2]>::type=UDT const[2]
expression remove_volatile<enum1 const volatile[2]>::type=enum1 const[2]
expression remove_volatile<bool [2]>::type=bool [2]
expression remove_volatile<char [2]>::type=char [2]
expression remove_volatile<wchar_t [2]>::type=wchar_t [2]
expression remove_volatile<signed char [2]>::type=signed char [2]
expression remove_volatile<unsigned char [2]>::type=unsigned char [2]
expression remove_volatile<short [2]>::type=short [2]
expression remove_volatile<unsigned short [2]>::type=unsigned short [2]
expression remove_volatile<int [2]>::type=int [2]
expression remove_volatile<unsigned int [2]>::type=unsigned int [2]
expression remove_volatile<long [2]>::type=long [2]
expression remove_volatile<unsigned long [2]>::type=unsigned long [2]
expression remove_volatile<float [2]>::type=float [2]
expression remove_volatile<long double [2]>::type=long double [2]
expression remove_volatile<double [2]>::type=double [2]
expression remove_volatile<UDT [2]>::type=UDT [2]
expression remove_volatile<enum1 [2]>::type=enum1 [2]
expression remove_volatile<bool const*>::type=bool const*
expression remove_volatile<char const*>::type=char const*
expression remove_volatile<wchar_t const*>::type=wchar_t const*
expression remove_volatile<signed char const*>::type=signed char const*
expression remove_volatile<unsigned char const*>::type=unsigned char const*
expression remove_volatile<short const*>::type=short const*
expression remove_volatile<unsigned short const*>::type=unsigned short const*
expression remove_volatile<int const*>::type=int const*
expression remove_volatile<unsigned int const*>::type=unsigned int const*
expression remove_volatile<long const*>::type=long const*
expression remove_volatile<unsigned long const*>::type=unsigned long const*
expression remove_volatile<float const*>::type=float const*
expression remove_volatile<long double const*>::type=long double const*
expression remove_volatile<double const*>::type=double const*
expression remove_volatile<UDT const*>::type=UDT const*
expression remove_volatile<enum1 const*>::type=enum1 const*
expression remove_volatile<bool const*volatile>::type=bool const*
expression remove_volatile<char const*volatile>::type=char const*
expression remove_volatile<wchar_t const*volatile>::type=wchar_t const*
expression remove_volatile<signed char const*volatile>::type=signed char const*
expression remove_volatile<unsigned char const*volatile>::type=unsigned char const*
expression remove_volatile<short const*volatile>::type=short const*
expression remove_volatile<unsigned short const*volatile>::type=unsigned short const*
expression remove_volatile<int const*volatile>::type=int const*
expression remove_volatile<unsigned int const*volatile>::type=unsigned int const*
expression remove_volatile<long const*volatile>::type=long const*
expression remove_volatile<unsigned long const*volatile>::type=unsigned long const*
expression remove_volatile<float const*volatile>::type=float const*
expression remove_volatile<long double const*volatile>::type=long double const*
expression remove_volatile<double const*volatile>::type=double const*
expression remove_volatile<UDT const*volatile>::type=UDT const*
expression remove_volatile<enum1 const*volatile>::type=enum1 const*
expression remove_volatile<bool volatile[]>::type=bool []
expression remove_volatile<char volatile[]>::type=char []
expression remove_volatile<wchar_t volatile[]>::type=wchar_t []
expression remove_volatile<signed char volatile[]>::type=signed char []
expression remove_volatile<unsigned char volatile[]>::type=unsigned char []
expression remove_volatile<short volatile[]>::type=short []
expression remove_volatile<unsigned short volatile[]>::type=unsigned short []
expression remove_volatile<int volatile[]>::type=int []
expression remove_volatile<unsigned int volatile[]>::type=unsigned int []
expression remove_volatile<long volatile[]>::type=long []
expression remove_volatile<unsigned long volatile[]>::type=unsigned long []
expression remove_volatile<float volatile[]>::type=float []
expression remove_volatile<long double volatile[]>::type=long double []
expression remove_volatile<double volatile[]>::type=double []
expression remove_volatile<UDT volatile[]>::type=UDT []
expression remove_volatile<enum1 volatile[]>::type=enum1 []
expression remove_volatile<bool const volatile []>::type=bool const []
expression remove_volatile<char const volatile []>::type=char const []
expression remove_volatile<wchar_t const volatile []>::type=wchar_t const []
expression remove_volatile<signed char const volatile []>::type=signed char const []
expression remove_volatile<unsigned char const volatile []>::type=unsigned char const []
expression remove_volatile<short const volatile []>::type=short const []
expression remove_volatile<unsigned short const volatile []>::type=unsigned short const []
expression remove_volatile<int const volatile []>::type=int const []
expression remove_volatile<unsigned int const volatile []>::type=unsigned int const []
expression remove_volatile<long const volatile []>::type=long const []
expression remove_volatile<unsigned long const volatile []>::type=unsigned long const []
expression remove_volatile<float const volatile []>::type=float const []
expression remove_volatile<long double const volatile []>::type=long double const []
expression remove_volatile<double const volatile []>::type=double const []
expression remove_volatile<UDT const volatile []>::type=UDT const []
expression remove_volatile<enum1 const volatile []>::type=enum1 const []
expression remove_volatile<bool const []>::type=bool const []
expression remove_volatile<char const []>::type=char const []
expression remove_volatile<wchar_t const []>::type=wchar_t const []
expression remove_volatile<signed char const []>::type=signed char const []
expression remove_volatile<unsigned char const []>::type=unsigned char const []
expression remove_volatile<short const []>::type=short const []
expression remove_volatile<unsigned short const []>::type=unsigned short const []
expression remove_volatile<int const []>::type=int const []
expression remove_volatile<unsigned int const []>::type=unsigned int const []
expression remove_volatile<long const []>::type=long const []
expression remove_volatile<unsigned long const []>::type=unsigned long const []
expression remove_volatile<float const []>::type=float const []
expression remove_volatile<long double const []>::type=long double const []
expression remove_volatile<double const []>::type=double const []
expression remove_volatile<UDT const []>::type=UDT const []
expression remove_volatile<enum1 const []>::type=enum1 const []
expression remove_volatile<bool []>::type=bool []
expression remove_volatile<char []>::type=char []
expression remove_volatile<wchar_t []>::type=wchar_t []
expression remove_volatile<signed char []>::type=signed char []
expression remove_volatile<unsigned char []>::type=unsigned char []
expression remove_volatile<short []>::type=short []
expression remove_volatile<unsigned short []>::type=unsigned short []
expression remove_volatile<int []>::type=int []
expression remove_volatile<unsigned int []>::type=unsigned int []
expression remove_volatile<long []>::type=long []
expression remove_volatile<unsigned long []>::type=unsigned long []
expression remove_volatile<float []>::type=float []
expression remove_volatile<long double []>::type=long double []
expression remove_volatile<double []>::type=double []
expression remove_volatile<UDT []>::type=UDT []
expression remove_volatile<enum1 []>::type=enum1 []
