/*
    MySTL memory managment              
*/

#ifndef __MYSTL_MEMORY__
#define __MYSTL_MEMORY__

#include <stl/alloc.h>
#include <stl/tempbuf.h>
#include <stl/iterator_traits.h>
#include <stl/auto_ptr.h>

namespace stl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Итератор конструирования в неинициализированной области памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class ForwardIterator,class T=typename iterator_traits<ForwardIterator>::value_type>
class raw_storage_iterator
{
  public:
    typedef output_iterator_tag iterator_category;
    typedef void                value_type;
    typedef void                difference_type;
    typedef void                pointer;
    typedef void                reference;  

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор и присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    explicit raw_storage_iterator (ForwardIterator);

    raw_storage_iterator& operator = (const T&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Итерации
///////////////////////////////////////////////////////////////////////////////////////////////////
    raw_storage_iterator& operator ++ ();
    raw_storage_iterator  operator ++ (int);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Операции доступа
///////////////////////////////////////////////////////////////////////////////////////////////////
    raw_storage_iterator& operator * ();
  
  private:
    ForwardIterator iter;
};

#include <stl/detail/memory.inl>

}

#endif
