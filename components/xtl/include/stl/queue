/*
    MySTL queue     
*/

#ifndef __MYSTL_QUEUE__
#define __MYSTL_QUEUE__

#include <stl/deque>
#include <stl/algorithm>

namespace stl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Адаптер очереди
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T,class Sequence=deque<T> >
class queue 
{
  public:
    typedef typename Sequence::value_type      value_type;
    typedef typename Sequence::size_type       size_type;
    typedef          Sequence                  container_type;
    typedef typename Sequence::reference       reference;
    typedef typename Sequence::const_reference const_reference;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////  
             queue ();
    explicit queue (const Sequence&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Функции общего назначения
///////////////////////////////////////////////////////////////////////////////////////////////////    
    bool      empty () const;
    size_type size  () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ
///////////////////////////////////////////////////////////////////////////////////////////////////            
    reference       front ();
    const_reference front () const;
    reference       back  ();
    const_reference back  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вставка / извлечение элементов из очереди
///////////////////////////////////////////////////////////////////////////////////////////////////
    void push (const value_type&);
    void pop  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение
///////////////////////////////////////////////////////////////////////////////////////////////////      
    bool operator == (const queue&) const;
    bool operator != (const queue&) const;
    bool operator <  (const queue&) const;    
    bool operator >  (const queue&) const;  
    bool operator <= (const queue&) const;    
    bool operator >= (const queue&) const;
                         
  protected:
    Sequence c;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Адаптер очереди с приоритетами
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T,class Sequence=deque<T>,class Compare=less<typename Sequence::value_type> >
class priority_queue 
{
  public:
    typedef typename Sequence::value_type      value_type;
    typedef typename Sequence::size_type       size_type;
    typedef typename Sequence::reference       reference;
    typedef typename Sequence::const_reference const_reference;
    typedef          Sequence                  container_type;    
    
             priority_queue ();
    explicit priority_queue (const Compare&);
             priority_queue (const Compare&,const Sequence&);

    template <class Iter> priority_queue (Iter first,Iter last);
    template <class Iter> priority_queue (Iter first,Iter last,const Compare& less);
    template <class Iter> priority_queue (Iter first,Iter last,const Compare& less,const Sequence& seq);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Функции общего назначения
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool      empty () const;
    size_type size  () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ
///////////////////////////////////////////////////////////////////////////////////////////////////    
    const_reference top () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Вставка / извлечение элементов из очереди
///////////////////////////////////////////////////////////////////////////////////////////////////            
    void push (const value_type&);
    void pop  ();
  
  protected:
    Sequence c;
    Compare  comp;  
};

#include <stl/detail/queue.inl>

}

#endif
