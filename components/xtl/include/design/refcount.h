#ifndef DESIGN_REFERENCE_COUNT_HEADER
#define DESIGN_REFERENCE_COUNT_HEADER

#include <stddef.h>

namespace design
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс подсчёта ссылок на объект
///////////////////////////////////////////////////////////////////////////////////////////////////
class reference_counter
{
  public:
             reference_counter  ();
             reference_counter  (const reference_counter&); //ref_count = 1
    explicit reference_counter  (size_t init_ref_count);
    virtual  ~reference_counter () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    reference_counter& operator = (const reference_counter&) { return *this; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество ссылок на объект
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t use_count () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Увеличение числа ссылок на объект / освобождение объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void addref  ();
    void release ();
    
  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///События генерируемые данным классом
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void on_lost_references ();    //на данный объект больше никто не ссылается. default: delete this
    virtual void on_restore_references () {} //вызывается при переходе ref_count: 0-> 1

  private:
    size_t ref_count;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Функции позволяющие использовать reference_counter* совместно с intrusive_ptr
///////////////////////////////////////////////////////////////////////////////////////////////////
void intrusive_ptr_addref  (reference_counter*);
void intrusive_ptr_release (reference_counter*);

#include <design/impl/refcount.inl>

}

#endif
