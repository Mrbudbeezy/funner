#ifndef XTL_CONNECTION_HEADER
#define XTL_CONNECTION_HEADER

#include <cstddef>
#include <new>

#include <xtl/singleton_default.h>
#include <xtl/reference_counter.h>

namespace xtl
{

namespace detail
{

//implementation forwards
class connection_impl;

}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Класс характеризующий состояние соединения
///////////////////////////////////////////////////////////////////////////////////////////////////
class connection
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    connection  ();
    connection  (const connection&);
    ~connection ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    connection& operator = (const connection&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка факта наличия соединения
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool connected () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Досрочное завершение соединения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void disconnect ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блокирование соединения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void block   ();
    void unblock ();
    bool blocked () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение соединений
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const connection&) const;
    bool operator != (const connection&) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void swap (connection&);

  protected:
    connection (detail::connection_impl*);

  private:  
    detail::connection_impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (connection&, connection&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Соединение автоматически разрывающееся после входа из блока
///////////////////////////////////////////////////////////////////////////////////////////////////
class auto_connection: public connection
{
  public:
    auto_connection  () {}
    auto_connection  (const connection&);    
    ~auto_connection ();
    
    auto_connection& operator = (const connection&);
};

#include <xtl/detail/connection.inl>

}

#endif
