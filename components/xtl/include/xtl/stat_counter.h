#ifndef XTL_INSTANCE_COUNTER_HEADER
#define XTL_INSTANCE_COUNTER_HEADER

#include <typeinfo>

#include <stl/iterator_traits.h>

#include <xtl/default_cast_type.h>
#include <xtl/interlocked.h>
#include <xtl/singleton_default.h>
#include <xtl/type.h>

namespace xtl
{

/////////////////////////////////////////////////////////////////////////////////////////////
///Тэги статистических счётчиков
/////////////////////////////////////////////////////////////////////////////////////////////
struct instance_counter_tag {};
struct perfomance_counter_tag {};

/////////////////////////////////////////////////////////////////////////////////////////////
///Статистический счётчик
/////////////////////////////////////////////////////////////////////////////////////////////
class stat_counter
{
  public:      
    typedef unsigned int value_type;
  
/////////////////////////////////////////////////////////////////////////////////////////////
///Имя счётчика и имя группы
/////////////////////////////////////////////////////////////////////////////////////////////
    const char* name       () const;
    const char* group_name () const;

/////////////////////////////////////////////////////////////////////////////////////////////
///Значение счетчика
/////////////////////////////////////////////////////////////////////////////////////////////
    value_type value () const;    

/////////////////////////////////////////////////////////////////////////////////////////////
///Изменение значения счётчика
/////////////////////////////////////////////////////////////////////////////////////////////
    stat_counter& operator += (value_type value);
    stat_counter& operator -= (value_type value);

/////////////////////////////////////////////////////////////////////////////////////////////
///Следующий счётчик
/////////////////////////////////////////////////////////////////////////////////////////////
    stat_counter*        next  () const;
    static stat_counter* first ();
    
/////////////////////////////////////////////////////////////////////////////////////////////
///Получение счетчика по типу и тэгу
/////////////////////////////////////////////////////////////////////////////////////////////
    template <class T, class Tag>
    static stat_counter& instance ();
    
  private:
    template <class T, class Tag> stat_counter (xtl::type<T>, xtl::type<Tag>);
    ~stat_counter (); //no implementation

    stat_counter (const stat_counter&); //no implementation
    stat_counter& operator = (const stat_counter&); //no implementation
    
    struct group;
    
    typedef const char* (*get_name_fn)();
    
    template <class Tag>          struct group_container;
    template <class T, class Tag> struct counter_container;    

  private:
    volatile value_type counter_value;
    stat_counter*       next_counter;
    group&              owner_group;
    get_name_fn         get_name;
};

/////////////////////////////////////////////////////////////////////////////////////////////
///Итератор групп счетчиков экземпляров
/////////////////////////////////////////////////////////////////////////////////////////////
class stat_counter_iterator 
{ 
  typedef stat_counter* (stat_counter_iterator::*unspecified_bool_type)() const;
  public:
    typedef stat_counter              value_type;
    typedef size_t                    size_type;
    typedef ptrdiff_t                 difference_type;
    typedef stat_counter*             pointer;
    typedef stat_counter&             reference;
    typedef stl::forward_iterator_tag iterator_category;

    stat_counter_iterator (bool is_last = false);
    stat_counter_iterator (const stat_counter_iterator&);    
    
/////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
/////////////////////////////////////////////////////////////////////////////////////////////
    stat_counter_iterator& operator = (const stat_counter_iterator&);
    
/////////////////////////////////////////////////////////////////////////////////////////////
///Проверка на корректность
/////////////////////////////////////////////////////////////////////////////////////////////
    operator unspecified_bool_type () const;
    bool     operator !            () const;

/////////////////////////////////////////////////////////////////////////////////////////////
///Селекторы
/////////////////////////////////////////////////////////////////////////////////////////////
    reference operator  * () const;
    pointer   operator -> () const;

/////////////////////////////////////////////////////////////////////////////////////////////
///Инкремент / декремент
/////////////////////////////////////////////////////////////////////////////////////////////
    stat_counter_iterator& operator ++ ();
    stat_counter_iterator  operator ++ (int);

/////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение
/////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const stat_counter_iterator&) const;
    bool operator != (const stat_counter_iterator&) const;

  private:  
    stat_counter* counter;
};

/////////////////////////////////////////////////////////////////////////////////////////////
///Получение итераторов на начало и конец списка групп
/////////////////////////////////////////////////////////////////////////////////////////////
stat_counter_iterator get_first_stat_counter ();
stat_counter_iterator get_last_stat_counter  ();

/////////////////////////////////////////////////////////////////////////////////////////////
///Счётчик экземпляров
/////////////////////////////////////////////////////////////////////////////////////////////
template <class T, class Tag = instance_counter_tag> class instance_counter
{
  public:
    instance_counter  ();
    instance_counter  (const instance_counter&);
    ~instance_counter ();
};

/////////////////////////////////////////////////////////////////////////////////////////////
///Получение счётчиков
/////////////////////////////////////////////////////////////////////////////////////////////
template <class T, class Tag> stat_counter& get_stat_counter       ();
template <class T>            stat_counter& get_perfomance_counter ();
template <class T>            stat_counter& get_instance_counter   ();

#include <xtl/detail/stat_counter.inl>

}

#endif
