#ifndef XTL_REFERENCE_COUNTER_HEADER
#define XTL_REFERENCE_COUNTER_HEADER

#include <stddef.h>
#include <xtl/checked_delete.h>

namespace xtl
{

namespace reference_counter_namespace
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Счётчик ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
class reference_counter
{
  typedef bool (reference_counter::*safe_bool)() const;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    reference_counter (size_t start_counter = 1);
    reference_counter (const reference_counter&);

    reference_counter& operator = (const reference_counter&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t use_count () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool empty () const;

    operator safe_bool () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Увеличение / уменьшение количества ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    reference_counter& operator ++ ();
    reference_counter  operator ++ (int);
    reference_counter& operator -- ();
    reference_counter  operator -- (int);

  private:
    size_t counter;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Увеличение / уменьшение количества ссылок с вызовом пользовательского функтора при потере ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
                    void addref  (reference_counter&);
template <class Fn> void release (reference_counter&, Fn fn);
                    void addref  (reference_counter*);
template <class Fn> void release (reference_counter*, Fn fn);
template <class T>  void release (T*); //удаление объекта в случае потери ссылок

#include <xtl/detail/reference_counter.inl>

}

using xtl::reference_counter_namespace::reference_counter;

}

#endif
