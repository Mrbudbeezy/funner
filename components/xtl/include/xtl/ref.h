#ifndef XTL_REFERENCE_WRAPPER_HEADER
#define XTL_REFERENCE_WRAPPER_HEADER

namespace xtl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обёртка над ссылкой
///Отличие от стандарта: класс не наследуется от unary_function/binary_function, не имеет result_type
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class reference_wrapper
{
  public:
    typedef T type;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
    explicit reference_wrapper (T&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Операторы доступа
///////////////////////////////////////////////////////////////////////////////////////////////////
    operator T&  () const;
    T&       get () const;

  private:
    T* ptr;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание reference_wrapper
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> reference_wrapper<T>       ref  (T&);
template <class T> reference_wrapper<const T> cref (const T&);
template <class T> reference_wrapper<T>       ref  (reference_wrapper<T>);
template <class T> reference_wrapper<const T> cref (reference_wrapper<T>);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка reference_wrapper
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> struct remove_reference_wrapper;

template <class T> T& unwrap (T&);
template <class T> T& unwrap (const reference_wrapper<T>&);
template <class T> T& unwrap (reference_wrapper<T>&);

#include <xtl/detail/ref.inl>
#include <xtl/detail/unwrap.inl>

}

namespace tr1
{

using xtl::reference_wrapper;
using xtl::ref;
using xtl::cref;

}

#endif
