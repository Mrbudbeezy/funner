#ifndef XTL_ANY_CAST_EXCEPTHION_HEADER
#define XTL_ANY_CAST_EXCEPTHION_HEADER

#include <exception>
#include <typeinfo>

namespace xtl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Исключение: ошибка приведения any-типа данных
///////////////////////////////////////////////////////////////////////////////////////////////////
class bad_any_cast: public std::bad_cast
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Виды ошибок
///////////////////////////////////////////////////////////////////////////////////////////////////
    enum cast_error
    {
      bad_cast,              //неизвестная ошибка приведения
      bad_direct_cast,       //ошибка прямого приведения типов
      bad_const_cast,        //ошибка понижения квалификаторов типа
      bad_dynamic_cast,      //ошибка динамического приведения типов
      bad_to_string_cast,    //ошибка лексикографического приведения типа к строке
      bad_to_value_cast,     //ошибка лексикографического приведения типа из строки
      bad_to_reference_cast  //ошибка приведения значения к ссылке (невозможность приведения к ссылке в to_value)
    };
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
    bad_any_cast (cast_error error_id = bad_cast);
    bad_any_cast (cast_error error_id, const std::type_info& source_type, const std::type_info& target_type);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Исходный и целевой типы
///////////////////////////////////////////////////////////////////////////////////////////////////
    const std::type_info& source_type () const;
    const std::type_info& target_type () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вид ошибки
///////////////////////////////////////////////////////////////////////////////////////////////////
    cast_error error () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сообщение
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* what () const throw ();

  private:
    cast_error           error_id;
    const std::type_info *source, *target;
};

#include <xtl/detail/any_cast_exception.inl>

}

#endif
