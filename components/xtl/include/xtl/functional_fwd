/*
    XTL functional fordwards
*/

#ifndef XTL_FUNCTIONAL_FWD_HEADER
#define XTL_FUNCTIONAL_FWD_HEADER

namespace xtl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Определение типа возвращаемого значения функции
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class FunctionCallType> struct result_of;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обёртка над ссылкой
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class reference_wrapper;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Исключение, генерируемое при вызове пустой функции обратного вызова
///////////////////////////////////////////////////////////////////////////////////////////////////
struct bad_function_call;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Функция обратного вызова
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Signature> class function;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Соединение
///////////////////////////////////////////////////////////////////////////////////////////////////
class connection;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сигнал
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Signature, class Accumulator> class signal;
template <class Signature>                    class slot;

//аккумулятор по умолчанию для обработки сигналов
template <class Result> struct default_signal_accumulator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект, оповещающий о своём удалении
///////////////////////////////////////////////////////////////////////////////////////////////////
class trackable;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс паттерна "Acyclic visitor>
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class ResultType> class basic_visitor;

template <class ResultType> struct default_visitor_action;

}

namespace tr1
{

using xtl::result_of;
using xtl::reference_wrapper;
using xtl::bad_function_call;
using xtl::function;
using xtl::signal;

}

#endif
