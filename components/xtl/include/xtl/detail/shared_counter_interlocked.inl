namespace detail
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс для подсчёта ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
class shared_counter
{
  public:
            shared_counter  () : use_counter (1), weak_counter (1) { }
    virtual ~shared_counter () { }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вызывается когда use_count становится равным нулю
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void dispose () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вызывается когда weak_count становится равным нулю
///////////////////////////////////////////////////////////////////////////////////////////////////
    void destroy () { delete this; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Возвращает указатель на удаляющий объект если его тип совпадает с аргументом
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void* get_deleter (const std::type_info&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Увеличение/уменьшение числа ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void add_ref_copy ()
    {
      atomic_increment (use_counter);
    }

    void release ()
    {
      if (atomic_decrement (use_counter) == 1)
      {
        dispose      ();
        weak_release ();
      }
    }

    bool add_ref_lock() // true on success
    {
      return atomic_conditional_increment (use_counter) != 0;
    }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Увеличение/уменьшение weak_count
///////////////////////////////////////////////////////////////////////////////////////////////////
    void weak_add_ref ()
    {
      atomic_increment (weak_counter);
    }

    void weak_release ()
    {
      if (atomic_decrement (weak_counter) == 1)
        destroy ();
    }

    long use_count () const
    {
      return (long)use_counter;
    }

  private:
    int use_counter;
    int weak_counter;
};

}
