#ifndef XTL_RECT_HEADER
#define XTL_RECT_HEADER

namespace xtl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Прямоугольная область
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class rect
{
  public:
    typedef T value_type;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
    rect ();
    rect (const value_type& x, const value_type& y, const value_type& width, const value_type& height);
    rect (const rect&);
    
    template <class T1> rect (const rect<T1>&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
                        rect& operator = (const rect&);
    template <class T1> rect& operator = (const rect<T1>&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение экстент
///////////////////////////////////////////////////////////////////////////////////////////////////
    const value_type& left   () const;
    const value_type& top    () const;
          value_type  right  () const;
          value_type  bottom () const;    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const rect&) const;
    bool operator != (const rect&) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void swap (rect&);

  public:
    value_type x;      //абсцисса левого верхнего угла области
    value_type y;      //ордината левого верхнего угла области
    value_type width;  //ширина области
    value_type height; //высота области  
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> void swap (rect<T>&, rect<T>&);

#include <xtl/detail/rect.inl>

}

#endif
