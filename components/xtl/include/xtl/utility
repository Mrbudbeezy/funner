/*
    Утилиты
*/

#ifndef XTL_UTILITY_HEADER
#define XTL_UTILITY_HEADER

#include <cstddef>

namespace stl
{

template <class T1, class T2> struct pair;

}

namespace xtl
{

/*
    Типы-селекторы
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Типы позволяющие делать выбор в compile-time по размеру структуры
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef char                       no_type;
typedef struct { char dummy [2]; } yes_type;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вспомогательный шаблонный класс описывающий целочисленную константу
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T, T v> struct integral_constant
{
  static  const T                 value = v;
  typedef T                       value_type;
  typedef integral_constant<T, v> type; 
};

//вспомогательные классы для наиболее распространённых целочисленных костант
template <bool value> struct bool_constant: public integral_constant<bool, value> {};
template <int value>  struct int_constant:  public integral_constant<int, value> {};

typedef bool_constant<true>  true_type;
typedef bool_constant<false> false_type;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Терминальный тип, используемый для индикации завершения списка
///////////////////////////////////////////////////////////////////////////////////////////////////
namespace mpl { struct null_type {}; }

//////////////////////////////////////////////////////////////////////////////////////////////////
///Типизированный NULL
///////////////////////////////////////////////////////////////////////////////////////////////////
struct null_ptr_type
{
  template <class T> operator T* () const { return 0; }
};

#ifdef _MSC_VER

static null_ptr_type null;

#else

namespace
{

#ifdef __GNUC__
__attribute__((unused))
#endif

null_ptr_type null;

}

#endif



/*
    Управляющие шаблоны
*/

template <bool condition, class TrueType, class FalseType> struct select;              //выбор из двух типов по условию condition
template <bool condition>                                  struct compile_time_assert; //аналог assert во время компиляции

/*
    Обобщение tuple на stl::pair
*/

template <class Tuple>           struct tuple_size;    //размер кортежа
template <size_t I, class Tuple> struct tuple_element; //выбор типа элемента кортежа

template <size_t I, class T1, class T2>
typename tuple_element<I, stl::pair<T1, T2> >::type& get (stl::pair<T1, T2>&);

template <size_t I, class T1, class T2>
const typename tuple_element<I, stl::pair<T1, T2> >::type& get (const stl::pair<T1, T2>&);

namespace noncopyable_namespace  //защита от ADL
{
  class noncopyable
  {
    protected:
      noncopyable  () {}
      ~noncopyable () {}

   private:
      noncopyable (const noncopyable&); //no impl
      const noncopyable& operator = (const noncopyable&); //no impl
  };
}

typedef noncopyable_namespace::noncopyable noncopyable;

/*
    Враперы
*/

template <class T> const T& make_const_ref (const T& x);

#include <xtl/detail/utility.inl>
#include <xtl/detail/pair_tuple.inl>

}

namespace tr1
{

using xtl::integral_constant;
using xtl::true_type;
using xtl::false_type;
using xtl::tuple_size;
using xtl::tuple_element;
using xtl::get;

}

#endif
