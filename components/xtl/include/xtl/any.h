#ifndef XTL_ANY_HEADER
#define XTL_ANY_HEADER

#include <xtl/connection.h>
#include <xtl/custom_cast.h>
#include <xtl/lexical_cast.h>
#include <xtl/ref.h>
#include <xtl/reference_counter.h>
#include <xtl/type.h>
#include <xtl/type_traits> //for is_polymorphic, remove_reference

namespace stl
{

//forward declarations
template <class T> class auto_ptr;

}

namespace xtl
{

namespace detail
{

//implementation forwards
struct any_holder;

}

//forward declaration
template <class T> class shared_ptr;
template <class T> class weak_ptr;
template <class T> class com_ptr;
template <class T> class trackable_ptr;

template <class T, template <class > class Strategy> class intrusive_ptr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка возможности автоматического изменения значения
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> struct any_value_self_changable { enum { value = 0 }; };

template <class T> struct any_value_self_changable<trackable_ptr<T> > { enum { value = 1 }; };
template <class T> struct any_value_self_changable<weak_ptr<T> >      { enum { value = 1 }; };

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обёртка для хранения объектов различных типов
///////////////////////////////////////////////////////////////////////////////////////////////////
class any
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    any  ();
    any  (const any&);
    ~any ();
                       
    template <class T> explicit any (const T& value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    any& operator = (const any&);
    
    template <class T> any& operator = (const T& value);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    any clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка на пустоту / проверка на равенство 0 (если castable_type - ссылка или указатель)
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool empty () const;
    bool null  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип и данные
///////////////////////////////////////////////////////////////////////////////////////////////////
    const std::type_info& type          () const;
    const std::type_info& castable_type () const;

    template <class T>       T* content ();
    template <class T> const T* content () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Приведение
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class T> const T cast () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Печать содержимого в строку
///////////////////////////////////////////////////////////////////////////////////////////////////
    void to_string (stl::string& buffer) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    any& swap (any&);
    
  private:
    any (detail::any_holder*);

  private: 
    detail::any_holder* content_ptr;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (any&, any&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Приведение типов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>       T* any_cast (any*);
template <class T> const T* any_cast (const any*);
template <class T>       T  any_cast (any&);
template <class T> const T  any_cast (const any&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Многоуровневое приведение типов:
/// - попытка custom_cast приведения
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> const T any_multicast (const any&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение приводимого значения. Используется как базовое при работе any_multicast
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> T* get_castable_value (T&);
template <class T> T* get_castable_value (T*);
template <class T> T* get_castable_value (stl::auto_ptr<T>&);
template <class T> T* get_castable_value (shared_ptr<T>&);
template <class T> T* get_castable_value (weak_ptr<T>&);
template <class T> T* get_castable_value (com_ptr<T>&);
template <class T> T* get_castable_value (reference_wrapper<T>&);
template <class T> T* get_castable_value (trackable_ptr<T>&);

template <class T, template <class > class Strategy>
T* get_castable_value (intrusive_ptr<T, Strategy>&);

void** get_castable_value (void*&);
const char** get_castable_value (const char*&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Печать содержимого в строку
///////////////////////////////////////////////////////////////////////////////////////////////////
void to_string (stl::string& buffer, const volatile any& value);

#include <xtl/detail/any.inl>

}

#endif
