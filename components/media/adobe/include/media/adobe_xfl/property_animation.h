#ifndef MEDIALIB_ADOBE_XFL_PROPERTY_ANIMATION_HEADER
#define MEDIALIB_ADOBE_XFL_PROPERTY_ANIMATION_HEADER

#include <cstddef>

namespace media
{

namespace adobe
{

namespace xfl
{

struct PropertyAnimationKeyframe
{
  float anchor;
  float next;
  float previous;
  float roving;
  float timevalue;  //время начала активности кейфрема в секундах
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимируемое свойство
///////////////////////////////////////////////////////////////////////////////////////////////////
class PropertyAnimation
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PropertyAnimation  ();
    PropertyAnimation  (const PropertyAnimation&);
    ~PropertyAnimation ();

    PropertyAnimation& operator = (const PropertyAnimation&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Id    () const;
    void        SetId (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Включена ли анимация для этого свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool Enabled    () const;
    void SetEnabled (bool enabled);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t KeyframesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с ключевыми точками
/////////////////////////// ////////////////////////////////////////////////////////////////////////
    const ProprtyAnimationKeyframe& Key     (size_t index) const;
    void                            SetKey  (size_t index, const PropertyAnimationKeyframe& key);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t KeyframesCapacity () const;
    void   ReserveKeyframes  (size_t keyframes_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddKeyframe    (const PropertyAnimationKeyframe&);
    void   InsertKeyframe (size_t index, const PropertyAnimationKeyframe& key);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove (size_t index);
    void Clear  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (PropertyAnimation&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (PropertyAnimation&, PropertyAnimation&);

}

}

}

#endif
