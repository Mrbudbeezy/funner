#ifndef MEDIALIB_ADOBE_XFL_DOCUMENT_HEADER
#define MEDIALIB_ADOBE_XFL_DOCUMENT_HEADER

#include <cstddef>

#include <common/serializer_manager.h>

#include <media/adobe/xfl_collection.h>
#include <media/adobe/xfl_resource.h>
#include <media/adobe/xfl_symbol.h>
#include <media/adobe/xfl_timeline.h>

namespace media
{

namespace adobe
{

namespace xfl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///XFL Документ
///////////////////////////////////////////////////////////////////////////////////////////////////
class Document
{
  public:
    typedef ICollection<Resource> ResourceList;
    typedef ICollection<Symbol>   SymbolList;
    typedef ICollection<Timeline> TimelineList;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Document  ();
    Document  (const char* file_name);
    Document  (const Document&);
    ~Document ();

    Document& operator = (const Document&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    () const;
    void        SetName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет фона
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::vec3f& BackgroundColor    () const;
    void               SetBackgroundColor (const math::vec3f& background_color);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Частота кадров
///////////////////////////////////////////////////////////////////////////////////////////////////
    float FrameRate    () const;
    void  SetFrameRate (float framerate);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ширина/высота кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Width     () const;
    size_t Height    () const;
    void   SetWidth  (size_t width);
    void   SetHeight (size_t height);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Используемые ресурсы
///////////////////////////////////////////////////////////////////////////////////////////////////
          ResourceList& Resources ();
    const ResourceList& Resources () const;

          Resource* FindResource (const char* resource_name);
    const Resource* FindResource (const char* resource_name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Элементы анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
          SymbolList& Symbols ();
    const SymbolList& Symbols () const;

          Symbol* FindSymbol (const char* symbol_name);
    const Symbol* FindSymbol (const char* symbol_name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
          TimelineList& Timelines ();
    const TimelineList& Timelines () const;

          Timeline* FindTimeline (const char* timeline_name);
    const Timeline* FindTimeline (const char* timeline_name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Document&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Document&, Document&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер документов
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef common::ResourceSerializerManager<void (const char* file_name, Document& document),
  void (const char* file_name, const Document& document)> DocumentManager;

}

}

}

#endif
