#ifndef MEDIALIB_ADOBE_XFL_FRAME_ELEMENT_HEADER
#define MEDIALIB_ADOBE_XFL_FRAME_ELEMENT_HEADER

#include <cstddef>

#include <math/vector.h>

namespace media
{

namespace adobe
{

namespace xfl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип элемента кадра анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
enum FrameElementType
{
  FrameElementType_ResourceInstance,     //имя фрейма является именем ресурса в родительском документе
  FrameElementType_SymbolInstance        //имя фрейма является именем элемента анимации в родительском документе
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Элемент кадра анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
class FrameElement
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FrameElement  (FrameElementType type);
    FrameElement  (const FrameElement&);
    ~FrameElement ();

    FrameElement& operator = (const FrameElement&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    () const;
    void        SetName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип
///////////////////////////////////////////////////////////////////////////////////////////////////
    FrameElementType Type () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тайминги
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t FirstFrame    () const;              //номер кадра (в глобальном времени), с которого начинается отображение данного кадра
    void   SetFirstFrame (size_t first_frame);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Положение
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::vec2f& Translation            () const;
    const math::vec2f& TransformationPoint    () const;
    void               SetTranslation         (const math::vec2f& translation);
    void               SetTransformationPoint (const math::vec2f& transformation_point);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (FrameElement&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (FrameElement&, FrameElement&);

}

}

}

#endif
