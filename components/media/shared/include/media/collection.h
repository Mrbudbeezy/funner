#ifndef MEDIALIB_COLLECTION_IMPL_HEADER
#define MEDIALIB_COLLECTION_IMPL_HEADER

namespace media
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовая коллекция
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Item, class BaseClass>
class CollectionImpl: public BaseClass
{
  public:
    typedef typename BaseClass::Iterator      Iterator;
    typedef typename BaseClass::ConstIterator ConstIterator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    CollectionImpl ();
    CollectionImpl (const CollectionImpl& collection);
    CollectionImpl& operator = (const CollectionImpl& collection);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество элементов / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size    () const;
    bool   IsEmpty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к элементу по индексу
///////////////////////////////////////////////////////////////////////////////////////////////////
    const Item& operator [] (size_t index) const;
          Item& operator [] (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      CreateIterator ();
    ConstIterator CreateIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование элементов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Capacity () const;
    void   Reserve  (size_t count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление элемента в коллекцию
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Add (Item& item);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление элемента из коллекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка коллекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

  private:
    typedef stl::vector<Item> ItemArray;

  private:
    ItemArray items; //элементы
};

#include <media/detail/collection.inl>

}

#endif
