#ifndef MEDIALIB_RESOURCE_HOLDER_HEADER
#define MEDIALIB_RESOURCE_HOLDER_HEADER

#include <common/exception.h>

namespace media
{

namespace detail
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаг, сигнализируюий о необходимости копирования ресурса
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ForceCloneFlag
{
  ForceClone
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обёртка для хранения совместно используемых ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class ResourceHolder
{
  public:
    typedef T ResourceType;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
    ResourceHolder (CloneMode mode = CloneMode_Instance);
    ResourceHolder (const T&, CloneMode mode);
    ResourceHolder (const ResourceHolder&, ForceCloneFlag);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение ресурса
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (const T&, CloneMode mode);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Хранимый ресурс
///////////////////////////////////////////////////////////////////////////////////////////////////
    const ResourceType& Resource () const;
          ResourceType& Resource ();

  private:
    static void CheckMode (media::CloneMode mode, const char* source);

  private:
    T                resource;
    media::CloneMode clone_mode;
};

#include <media/detail/resource_holder.inl>

}

}

#endif
