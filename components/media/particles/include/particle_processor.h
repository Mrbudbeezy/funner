#ifndef MEDIALIB_PARTICLES_PARTICLE_PROCESSOR_HEADER
#define MEDIALIB_PARTICLES_PARTICLE_PROCESSOR_HEADER

#include <media/particles/particle_scene.h>

namespace media
{

namespace particles
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Particle processor class. This class can generate new particles, modify existing or do any
///other particle scene processing
///////////////////////////////////////////////////////////////////////////////////////////////////
class IParticleProcessor
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Attach / detach scene for further processing
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void* AttachScene (ParticleScene& scene) = 0; //returns implementation data (may be null)
    virtual void  DetachScene (ParticleScene& scene, void* private_data) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Process scene
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Process (ParticleScene& scene, void* private_data) = 0;

//////////////////////////////////////////////////////////////////////////////////////////////////
///Reference counting
//////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef () = 0;
    virtual void Release () = 0;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Destructor
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~IParticleProcessor () {}
};

}

}

#endif
