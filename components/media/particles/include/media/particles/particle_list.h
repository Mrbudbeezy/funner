#ifndef MEDIALIB_PARTICLES_PARTICLE_LIST_HEADER
#define MEDIALIB_PARTICLES_PARTICLE_LIST_HEADER

#include <math/angle.h>
#include <math/vector.h>

namespace media
{

namespace particles
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Particle data
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Particle
{
  math::vec3f  position;              //position
  math::vec3f  position_speed;        //speed
  math::vec3f  position_acceleration; //acceleration
  math::anglef rotation;              //rotation (particle is billboard sprite, so only one-axis rotation)
  math::anglef rotation_speed;        //rotation change speed
  math::vec3f  size;                  //size
  math::vec3f  size_speed;            //size change speed
  math::vec4f  color;                 //color
  math::vec4f  color_speed;           //color change speed
  float        lifetime;              //lifetime left
  unsigned int animation_frame;       //animation frame
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Particle list
///////////////////////////////////////////////////////////////////////////////////////////////////
class ParticleList
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructor for creating list with custom particle type
///////////////////////////////////////////////////////////////////////////////////////////////////
  	template <class T> ParticleList(xtl::type<T>);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructors / destructor / assignment
///////////////////////////////////////////////////////////////////////////////////////////////////
  	ParticleList  ();
  	ParticleList  (const ParticleList&);
    ~ParticleList ();

    ParticleList& operator = (const ParticleList&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Data type used for particles (Particle data can be casted to this type)
///////////////////////////////////////////////////////////////////////////////////////////////////
    const std::type_info& ParticleType () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Allocated particles count
///////////////////////////////////////////////////////////////////////////////////////////////////
  	size_t Count () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Particles data
///////////////////////////////////////////////////////////////////////////////////////////////////
  	const Particle** Data () const;
  	      Particle** Data ();

  	template <class T> const T** Data () const;
  	template <class T>       T** Data ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Allocate/deallocate particles
///////////////////////////////////////////////////////////////////////////////////////////////////
    Particle*                 Allocate ();
    template <class T> T*     Allocate ();
    template <class T> size_t Allocate (size_t count, T** particles);

    void Free (size_t count, Particle** particles);
    void Free (Particle*);
   
///////////////////////////////////////////////////////////////////////////////////////////////////
///Change/check capacity
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Capacity () const;
    void   Reserve  (size_t count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (ParticleList&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (ParticleList&, ParticleList&);

}

}

#endif
