#ifndef MEDIALIB_VIDEO_HEADER
#define MEDIALIB_VIDEO_HEADER

#include <cstddef>

#include <stl/auto_ptr.h>

#include <xtl/functional_fwd>

#include <common/serializer_manager.h>

namespace media
{

//forward declarations
class Image;

///////////////////////////////////////////////////////////////////////////////////////////////////
/// ачество декодировани€ видео
///////////////////////////////////////////////////////////////////////////////////////////////////
enum VideoQuality
{
  VideoQuality_Low,
  VideoQuality_Middle,
  VideoQuality_High,
  
  VideoQuality_Default = VideoQuality_High,
  
  VideoQuality_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///»нтерфейс декодера видео
///////////////////////////////////////////////////////////////////////////////////////////////////
class IVideoDecoder
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///‘ормат пикселей декодированного видео
///////////////////////////////////////////////////////////////////////////////////////////////////
    struct Pixel
    {
      unsigned char red, green, blue, alpha;
    };
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///ќперации
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual              ~IVideoDecoder      () {}    //деструктор
    virtual float        GetFramesPerSecond  () = 0;  //количество кадров в секунду
    virtual unsigned int GetWidth            () = 0;  //ширина изображени€ декодированного видео
    virtual unsigned int GetHeight           () = 0;  //высота изображени€ декодированного видео
    virtual unsigned int GetFramesCount      () = 0;  //количество кадров в видео
    virtual float        GetPixelAspectRatio () = 0;  //соотношение сторон дл€ каждого пиксел€ (x / y)
    virtual void         Decode              (unsigned int frame, Pixel* data_buffer) = 0; //декодирование указанного кадра
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///¬идео поток
///////////////////////////////////////////////////////////////////////////////////////////////////
class VideoStream
{
  public:
    typedef IVideoDecoder::Pixel Pixel;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
/// онструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    VideoStream  ();
    VideoStream  (const char* file_name, VideoQuality quality = VideoQuality_Default);
    VideoStream  (const VideoStream&);
    ~VideoStream ();

    VideoStream& operator = (const VideoStream&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///»м€ потока
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* new_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕолучение параметров видео
///////////////////////////////////////////////////////////////////////////////////////////////////
    VideoQuality Quality          () const; //качество декодировани€ видео
    unsigned int FramesCount      () const; //количество кадров
    float        FramesPerSecond  () const; //количество кадров в секунду
    unsigned int Width            () const; //ширина кадра
    unsigned int Height           () const; //высота кадра
    float        PixelAspectRatio () const; //соотношение сторон дл€ каждого пиксел€ (x / y)
    float        Duration         () const; //длительность видео в секундах
    unsigned int FrameSize        () const; //размер кадра в байтах
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕолучение декодированного кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Decode (unsigned int frame_number, Image& image, unsigned int image_offset_x = 0, unsigned int image_offset_y = 0, unsigned int image_offset_z = 0);
    void Decode (unsigned int frame_number, Pixel* frame_buffer);

///////////////////////////////////////////////////////////////////////////////////////////////////
///«агрузка видео
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name, VideoQuality quality = VideoQuality_Default);

///////////////////////////////////////////////////////////////////////////////////////////////////
///ќбмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (VideoStream&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///ќбмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (VideoStream&, VideoStream&);

//////////////////////////////////////////////////////////////////////////////////////////////////
///—истема управлени€ видео потоками
//////////////////////////////////////////////////////////////////////////////////////////////////
typedef common::ResourceSerializerManager<IVideoDecoder* (const char* file_name, VideoQuality quality),
  void (const char* file_name, VideoStream&)> VideoStreamManager;

}

#endif
