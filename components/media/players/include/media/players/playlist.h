#ifndef MEDIALIB_PLAYER_PLAY_LIST_HEADER
#define MEDIALIB_PLAYER_PLAY_LIST_HEADER

#include <cstddef>

namespace media
{

namespace players
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список проигрывания
///////////////////////////////////////////////////////////////////////////////////////////////////
class Playlist
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Playlist  ();
    Playlist  (const Playlist&);
    ~Playlist ();
    
    Playlist& operator = (const Playlist&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор списка
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Playlist Clone () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество источников / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size    () const;
    bool   IsEmpty () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение источников
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char** Items () const;
    const char*  Item  (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление и удаление источников
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddSource    (const char* source_name);    
    void   RemoveSource (size_t source_index);
    void   RemoveSource (const char* source_name); //all sources with source_name
    void   Clear        ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   Reserve  (size_t count);
    size_t Capacity () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Playlist&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Playlist&, Playlist&);

}

}

#endif
