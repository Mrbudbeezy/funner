#ifndef MEDIALIB_PLAYER_MEDIA_PLAYER_HEADER
#define MEDIALIB_PLAYER_MEDIA_PLAYER_HEADER

#include <stl/auto_ptr.h>

#include <xtl/functional_fwd>

namespace media
{

namespace players
{

//forward declarations
class Playlist;

///////////////////////////////////////////////////////////////////////////////////////////////////
///—осто€ние проигрывател€ медиа-потока
///////////////////////////////////////////////////////////////////////////////////////////////////
enum MediaPlayerState
{  
  MediaPlayerState_Stopped, //остановлен
  MediaPlayerState_Playing, //проигрываетс€
  MediaPlayerState_Paused,  //приостановлен (остановлен без сброса позиции)
  
  MediaPlayerState_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///–ежимы проигрывани€
///////////////////////////////////////////////////////////////////////////////////////////////////
enum MediaPlayerRepeatMode
{
  MediaPlayerRepeatMode_Off,  //повторение проигрывани€ потоков выключено
  MediaPlayerRepeatMode_Last, //повтор€етс€ последний выбранный поток в списке проигрывани€
  MediaPlayerRepeatMode_All,  //повтор€етс€ весь список проигрывани€

  MediaPlayerRepeatMode_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///—обыти€ проигрывател€ медиа-потоков
///////////////////////////////////////////////////////////////////////////////////////////////////
enum MediaPlayerEvent
{
  MediaPlayerEvent_OnChangeName,       //изменено им€
  MediaPlayerEvent_OnChangeTarget,     //изменена цель проигрывани€
  MediaPlayerEvent_OnChangePlaylist,   //изменЄн список проигрывани€
  MediaPlayerEvent_OnChangeTrack,      //переключен трек
  MediaPlayerEvent_OnChangePlayback,   //изменены настройки проигрывани€ (play / pause / stop / position)
  MediaPlayerEvent_OnChangeVolume,     //изменены настройки громкости
  MediaPlayerEvent_OnChangeRepeatMode, //изменЄн режим повторени€ песен
  
  MediaPlayerEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕроигрыватель медиа-потоков
///////////////////////////////////////////////////////////////////////////////////////////////////
class MediaPlayer
{
  public:    
///////////////////////////////////////////////////////////////////////////////////////////////////
/// онструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    MediaPlayer  ();
    MediaPlayer  (const char* target_name);
    MediaPlayer  (const char* target_name, const char* stream_name);
    MediaPlayer  (const char* target_name, const players::Playlist& list);
    ~MediaPlayer ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///»м€
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetName (const char* name);
    const char* Name    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///“екуща€ цель проигрывани€
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetTarget (const char* target_name);    
    const char* Target    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///ќткрытие / закрытие потока
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Open  (const char* stream_name);
    void Open  (const players::Playlist&);
    void Close ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///—писок проигрывани€
///////////////////////////////////////////////////////////////////////////////////////////////////
    const players::Playlist Playlist () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
/// оличество треков
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t TracksCount () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///–ежим повторени€ источников
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                  SetRepeatMode (MediaPlayerRepeatMode mode);
    MediaPlayerRepeatMode RepeatMode    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ќомер проигрываемого трека / им€ потока / его длительность
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetTrack (size_t track);       //установка текущего трека
    size_t      Track    () const;             //текущий трек
    const char* Source   (size_t track) const; //им€ трека
    const char* Source   () const;             //им€ прогрываемого трека
    float       Duration (size_t tack) const;  //длительность трека
    float       Duration () const;             //длительность проигрываемого трека
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕереключение треков
///////////////////////////////////////////////////////////////////////////////////////////////////
    void NextTrack ();
    void PrevTrack ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///”правление проигрыванием
///////////////////////////////////////////////////////////////////////////////////////////////////
    MediaPlayerState State () const; //состо€ние проигрывани€
    void             Play  ();       //начать / продолжить проигрывание
    void             Pause ();       //приостановить проигрывание
    void             Stop  ();       //остановить проигрывание

    bool IsPlaying () const { return State () == MediaPlayerState_Playing; } //проигрываетс€ ли поток
    bool IsPaused  () const { return State () == MediaPlayerState_Paused; }  //приостановлен ли поток
    bool IsStopped () const { return State () == MediaPlayerState_Stopped; } //остановлен ли поток

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕозици€ проигрывани€
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetPosition (float position);
    float Position    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///”правление громкостью
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetVolume (float volume); //in range [0..1]
    float Volume    () const;

    void SetMute (bool state); //включен или отключен ли звук
    bool IsMuted () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///ќповещени€ о событи€х плеера
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (MediaPlayer&, MediaPlayerEvent)> EventHandler;

    xtl::connection RegisterEventHandler (MediaPlayerEvent event, const EventHandler& handler) const;
    
  private:
    MediaPlayer  (const MediaPlayer&); //no impl
    MediaPlayer& operator = (const MediaPlayer&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;    
};

}

}

#endif
