#ifndef MEDIALIB_GEOMETRY_MESH_HEADER
#define MEDIALIB_GEOMETRY_MESH_HEADER

#include <media/geometry/vertex_buffer.h>
#include <media/geometry/index_buffer.h>
#include <xtl/functional_fwd>

namespace media
{

namespace geometry
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum PrimitiveType
{
  PrimitiveType_LineList,      //список отрезков
  PrimitiveType_LineStrip,     //цепочка отрезков
  PrimitiveType_TriangleList,  //список треугольников
  PrimitiveType_TriangleStrip, //цепочка треугольников
  PrimitiveType_TriangleFan,   //вейер треугольников
  
  PrimitiveType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение характеристик
///////////////////////////////////////////////////////////////////////////////////////////////////
const char*  get_type_name        (PrimitiveType); //имя типа примитива
unsigned int get_points_count     (PrimitiveType, unsigned int primitivies_count=1); //количество точек
unsigned int get_primitives_count (PrimitiveType, unsigned int points_count=1); //количество примитивов

//получение типа примитива по имени
PrimitiveType get_primitive_type (const char* name, PrimitiveType default_type = PrimitiveType_Num);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Примитив
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Primitive
{
  PrimitiveType type;          //тип примитива
  uint32_t      vertex_buffer; //индекс вершинного буфера
  uint32_t      first;         //индекс первой вершины/индекса
  uint32_t      count;         //количество примитивов
  uint32_t      base_vertex;   //индекс базовой вершины
  const char*   material;      //имя материала
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Меш
///////////////////////////////////////////////////////////////////////////////////////////////////
class Mesh
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Mesh  ();
    Mesh  (const Mesh&);
    ~Mesh ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Mesh& operator = (const Mesh&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Mesh Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор меша (уникальный)
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя меша
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вершинные буферы
///////////////////////////////////////////////////////////////////////////////////////////////////
    const geometry::VertexBuffer& VertexBuffer (uint32_t index) const;
          geometry::VertexBuffer& VertexBuffer (uint32_t index);
          
    uint32_t VertexBuffersCount () const; //количество вершинных буферов

///////////////////////////////////////////////////////////////////////////////////////////////////
///Индексный буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
    const geometry::IndexBuffer& IndexBuffer () const;
          geometry::IndexBuffer& IndexBuffer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение/отсоединение буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
    uint32_t Attach (geometry::VertexBuffer&);
    void     Attach (geometry::IndexBuffer&);

    void DetachVertexBuffer     (uint32_t index);
    void DetachIndexBuffer      ();
    void DetachAllVertexBuffers ();
    void DetachAllBuffers       (); //отсоединение всех буферов

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество примитивов / доступ к примитивам
///////////////////////////////////////////////////////////////////////////////////////////////////
    uint32_t                   PrimitivesCount () const;
    const geometry::Primitive& Primitive       (uint32_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    uint32_t AddPrimitive        (PrimitiveType type, uint32_t vertex_buffer, uint32_t first, uint32_t count, uint32_t base_vertex, const char* material); //return: индекс примитива
    uint32_t AddPrimitive        (PrimitiveType type, uint32_t vertex_buffer, uint32_t first, uint32_t count, const char* material); //return: индекс примитива
    void     RemovePrimitive     (uint32_t primitive_index);
    void     RemoveAllPrimitives ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка меша
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Mesh&);
    
  private:
    struct Impl;

    Mesh (Impl*);

  private:
    xtl::intrusive_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Mesh&, Mesh&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка корректности меша
///////////////////////////////////////////////////////////////////////////////////////////////////
bool check (const Mesh&, const xtl::function<void (const char*)>& log_fn);
bool check (const Mesh&, uint32_t joints_count, const xtl::function<void (const char*)>& log_fn);

}

}

#endif
