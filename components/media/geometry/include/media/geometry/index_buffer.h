#ifndef MEDIALIB_GEOMETRY_INDEX_BUFFER_HEADER
#define MEDIALIB_GEOMETRY_INDEX_BUFFER_HEADER

#include <media/geometry/defs.h>
#include <xtl/intrusive_ptr.h>

namespace media
{

namespace geometry
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип индксов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum IndexType
{
  IndexType_UInt32,
  IndexType_UInt16,
  IndexType_UInt8,  
  
  IndexType_Num,
  
  IndexType_Default = IndexType_UInt32
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Утилиты
///////////////////////////////////////////////////////////////////////////////////////////////////
const char* get_index_type_name (IndexType); //имя типа
size_t      get_index_type_size (IndexType); //размер индекса

///////////////////////////////////////////////////////////////////////////////////////////////////
///Индексный буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class IndexBuffer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    IndexBuffer  ();
    IndexBuffer  (size_t indices_count, IndexType type = IndexType_Default);
    IndexBuffer  (const IndexBuffer&);
    IndexBuffer  (const IndexBuffer&, IndexType type);
    ~IndexBuffer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    IndexBuffer& operator = (const IndexBuffer&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    IndexBuffer Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор буфера (уникальный)
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип индексов
///////////////////////////////////////////////////////////////////////////////////////////////////
    IndexType DataType    () const;
    void      SetDataType (IndexType type);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Данные
///////////////////////////////////////////////////////////////////////////////////////////////////
    const void* Data () const;
          void* Data ();
          
    template <class T> const T* Data () const;
    template <class T>       T* Data ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество индексов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size   () const;
    void   Resize (size_t indices_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Capacity () const;
    void   Reserve  (size_t indices_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (IndexBuffer&);

  private:
    struct Impl;

    IndexBuffer (Impl*);

  private:
    xtl::intrusive_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (IndexBuffer&, IndexBuffer&);

#include <media/geometry/detail/index_buffer.inl>

}

}

#endif
