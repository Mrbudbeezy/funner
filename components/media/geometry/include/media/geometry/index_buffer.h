#ifndef MEDIALIB_GEOMETRY_INDEX_BUFFER_HEADER
#define MEDIALIB_GEOMETRY_INDEX_BUFFER_HEADER

#include <media/geometry/defs.h>
#include <xtl/intrusive_ptr.h>

//TODO: index type

namespace media
{

namespace geometry
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Индексный буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class IndexBuffer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    IndexBuffer  ();
    IndexBuffer  (size_t indices_count);
    IndexBuffer  (const IndexBuffer&);
    ~IndexBuffer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    IndexBuffer& operator = (const IndexBuffer&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    IndexBuffer Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор буфера (уникальный)
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Данные
///////////////////////////////////////////////////////////////////////////////////////////////////
    const unsigned int* Data () const;
          unsigned int* Data ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество индексов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size   () const;
    void   Resize (size_t indices_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Capacity () const;
    void   Reserve  (size_t indices_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (IndexBuffer&);

  private:
    struct Impl;

    IndexBuffer (Impl*);

  private:
    xtl::intrusive_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (IndexBuffer&, IndexBuffer&);

}

}

#endif
