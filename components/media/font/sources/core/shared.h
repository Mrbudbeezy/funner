#ifndef MEDIA_FONT_CORE_SHARED_HEADER
#define MEDIA_FONT_CORE_SHARED_HEADER

#include <stl/algorithm>
#include <stl/hash_map>
#include <stl/string>
#include <stl/vector>

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/iterator.h>
#include <xtl/trackable.h>
#include <xtl/uninitialized_storage.h>

#include <common/component.h>
#include <common/file.h>
#include <common/hash.h>
#include <common/log.h>
#include <common/singleton.h>
#include <common/strlib.h>
#include <common/utf_converter.h>

#include <media/charset_manager.h>
#include <media/font_library.h>
#include <media/font.h>
#include <media/rasterized_font.h>

namespace media
{

//////////////////////////////////////////////////////////////////////////////////////////////////
///Гарнитура
//////////////////////////////////////////////////////////////////////////////////////////////////
class FontImpl : public xtl::reference_counter, public xtl::trackable
{
  public:
//////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
//////////////////////////////////////////////////////////////////////////////////////////////////
    FontImpl ();
    ~FontImpl ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение / изменение имени исходного файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Source    () const;
    void        SetSource (const char* new_source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/изменение имени / семейства / стиля шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name          () const;
    const char* FamilyName    () const;
    const char* StyleName     () const;
    void        Rename        (const char* new_name);
    void        SetFamilyName (const char* new_family_name);
    void        SetStyleName  (const char* new_style_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/изменение размера таблицы глифов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void         SetGlyphsCount (unsigned int new_glyphs_count);
    unsigned int GlyphsCount    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/изменение кода первого глифа
///////////////////////////////////////////////////////////////////////////////////////////////////
    void         SetFirstGlyphCode (unsigned int new_first_glyph_code);
    unsigned int FirstGlyphCode    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/изменение размера шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void         SetFontSize (unsigned int new_font_size);
    unsigned int FontSize    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к данным о глифах
///////////////////////////////////////////////////////////////////////////////////////////////////
    const GlyphInfo* Glyphs () const;
          GlyphInfo* Glyphs ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/получение/удаление информации о кёрнингах
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        InsertKerning     (unsigned int left_glyph_index, unsigned int right_glyph_index, const KerningInfo& kerning_info);
    void        RemoveKerning     (unsigned int left_glyph_index, unsigned int right_glyph_index);
    void        RemoveAllKernings ();
    KerningInfo Kerning           (unsigned int left_glyph_index, unsigned int right_glyph_index) const;
    bool        HasKerning        (unsigned int left_glyph_index, unsigned int right_glyph_index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка растеризатора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                                  SetRasterizer (const FontBuilder::RasterizerHandler&);
    const FontBuilder::RasterizerHandler& Rasterizer    () const;

  private:
    FontImpl (const FontImpl&);             //no impl
    FontImpl& operator = (const FontImpl&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

#endif
