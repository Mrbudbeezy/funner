#ifndef MEDIA_FONT_FREETYPE_SHARED_HEADER
#define MEDIA_FONT_FREETYPE_SHARED_HEADER

#include <stl/vector>

#include <xtl/common_exceptions.h>
#include <xtl/intrusive_ptr.h>

#include <common/component.h>
#include <common/file.h>
#include <common/log.h>

#include <media/font_library.h>
#include <media/rasterized_font.h>

#include <ft2build.h>
#include <freetype.h>

namespace media
{

namespace freetype
{

//////////////////////////////////////////////////////////////////////////////////////////////////
///Шрифт
//////////////////////////////////////////////////////////////////////////////////////////////////
class FreetypeFontDesc : public IFontDesc, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FreetypeFontDesc (const char* file_name);
    ~FreetypeFontDesc ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество шрифтов в наборе
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t FontsCount ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя гарнитуры / имя семейства / имя стиля
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* FamilyName (size_t index);
    const char* StyleName (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    Font CreateFont    (size_t index, const FontCreationParams& params);
    bool CanCreateFont (size_t index, const FontCreationParams& params);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчет ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef () { addref (this); }
    void Release () { release (this); }

 private:
    struct Impl;
    Impl* impl;
};

//Получение имени ошибки free type
const char* get_free_type_error_name (FT_Error error);

//Проверка ошибки free type
void check_free_type_error (FT_Error error, const char* source);

}

}

#endif
