#ifndef MEDIA_FONT_XFONT_SHARED_HEADER
#define MEDIA_FONT_XFONT_SHARED_HEADER

#include <stl/string>

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/intrusive_ptr.h>

#include <common/component.h>
#include <common/log.h>
#include <common/parser.h>
#include <common/strlib.h>
#include <common/xml_writer.h>

#include <media/font.h>
#include <media/font_library.h>
#include <media/rasterized_font.h>

namespace media
{

namespace xfont
{

//////////////////////////////////////////////////////////////////////////////////////////////////
///Шрифт
//////////////////////////////////////////////////////////////////////////////////////////////////
class XFontFontDesc : public IFontDesc, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    XFontFontDesc (const char* file_name);
    ~XFontFontDesc ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество шрифтов в наборе
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t FontsCount ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя гарнитуры / имя семейства / имя стиля
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* FamilyName (size_t index);
    const char* StyleName (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    Font CreateFont    (size_t index, const FontCreationParams& params);
    bool CanCreateFont (size_t index, const FontCreationParams& params);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчет ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef () { addref (this); }
    void Release () { release (this); }

 private:
    struct Impl;
    Impl* impl;
};

typedef xtl::uninitialized_storage<RasterizedGlyphInfo> RasterizedGlyphBuffer;

//////////////////////////////////////////////////////////////////////////////////////////////////
///Данные для растеризации шрифта
//////////////////////////////////////////////////////////////////////////////////////////////////
struct RasterizedFontParams : public xtl::reference_counter
{
  RasterizedGlyphBuffer rasterized_glyphs;   //растеризованные глифы
  size_t                images_count;        //количество картинок
  stl::string           image_name_format;   //формат имени картинки
};

typedef xtl::intrusive_ptr<RasterizedFontParams> RasterizedFontParamsPtr;

//////////////////////////////////////////////////////////////////////////////////////////////////
///Растеризатор шрифта
//////////////////////////////////////////////////////////////////////////////////////////////////
class XFontFontRasterizer : public IFontRasterizer, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    XFontFontRasterizer (const RasterizedFontCreationParams& params, const RasterizedFontParamsPtr& font_params);
    ~XFontFontRasterizer ();

//////////////////////////////////////////////////////////////////////////////////////////////////
///Получение информации о растрированных символах
//////////////////////////////////////////////////////////////////////////////////////////////////
    const RasterizedGlyphInfo* RasterizedGlyphs ();

//////////////////////////////////////////////////////////////////////////////////////////////////
///Построение картинок
//////////////////////////////////////////////////////////////////////////////////////////////////
    size_t ImagesCount ();
    void   BuildImage  (size_t image_index, media::Image& out_image);

//////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчет ссылок
//////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef () { addref (this); }
    void Release () { release (this); }

  private:
    struct Impl;
    Impl* impl;
};

}

}

#endif
