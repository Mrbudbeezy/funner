#ifndef MEDIALIB_RASTERIZED_FONT_HEADER
#define MEDIALIB_RASTERIZED_FONT_HEADER

#include <cstdlib>

namespace media
{

//forward declarations
class Image;

//////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о растеризованном глифе
//////////////////////////////////////////////////////////////////////////////////////////////////
struct RasterizedGlyphInfo
{
  size_t image_index; //индекс изображения с растеризованным глифом
  size_t x_pos;       //X координата нижнего левого угла глифа
  size_t y_pos;       //Y координата нижнего левого угла глифа
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Растеризованный шрифт
//////////////////////////////////////////////////////////////////////////////////////////////////
class RasterizedFont
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RasterizedFont  (const RasterizedFont& source);
    ~RasterizedFont ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    RasterizedFont& operator = (const RasterizedFont&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Растеризованные глифы
///////////////////////////////////////////////////////////////////////////////////////////////////
    const RasterizedGlyphInfo* RasterizedGlyphs () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество картинок
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t ImagesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Построение картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void BuildImage (size_t image_index, media::Image& out_image) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (RasterizedFont&);

  private:
    RasterizedFont (IFontRasterizer*);

  private:
    RasterizedFontImpl* impl;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
//////////////////////////////////////////////////////////////////////////////////////////////////
void swap (RasterizedFont&, RasterizedFont&);

class IFontRasterizer
{
  public:
    virtual const RasterizedGlyphInfo* RasterizedGlyphs () = 0;

    virtual size_t ImagesCount () = 0;

    virtual void BuildImage (size_t image_index, media::Image& out_image) = 0;

    virtual void AddRef () = 0;

    virtual void Release () = 0;

  protected:
    virtual ~IFontRasterizer () {}
};

}

#endif
