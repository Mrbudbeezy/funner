#ifndef MEDIALIB_FONT_HEADER
#define MEDIALIB_FONT_HEADER

#include <cstdlib>

#include <media/image.h>

namespace media
{

//forward declarations
class FontBuilder;
class FontImpl;
class IFontRasterizer;
class RasterizedFont;

//////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о глифе
//////////////////////////////////////////////////////////////////////////////////////////////////
struct GlyphInfo
{
  size_t width;      //Ширина глифа
  size_t height;     //Высота глифа
  float  bearing_x;  //Расстояние от положения пера до левой границы буквы
  float  bearing_y;  //Расстояние от положения пера до верхней границы буквы
  float  advance_x;  //Отступ по оси X от текущего положения пера до следующего положения пера
  float  advance_y;  //Отступ по оси Y от текущего положения пера до следующего положения пера
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о уменьшенных межзнаковых интервалах
//////////////////////////////////////////////////////////////////////////////////////////////////
struct KerningInfo
{
  float x_kerning;   //Отступ по оси X от положения пера для отображения левого глифа до положения пера для отображения правого глифа
  float y_kerning;   //Отступ по оси Y от положения пера для отображения левого глифа до положения пера для отображения правого глифа
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры создания растеризованного шрифта
//////////////////////////////////////////////////////////////////////////////////////////////////
struct RasterizedFontCreationParams
{
  size_t             max_image_size;  //максимальный размер стороны картинки
  bool               pot;             //должен ли размер стороны картинки иметь степень двойки
  size_t             glyph_margin;    //отступ между символами в картинке
  media::PixelFormat image_format;    //формат картинки
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Гарнитура
//////////////////////////////////////////////////////////////////////////////////////////////////
class Font
{
  friend class FontBuilder;

  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Font  (const Font& source);
    ~Font ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Font& operator = (const Font&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Source () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя гарнитуры / имя семейства / имя стиля
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name       () const;
    const char* FamilyName () const;
    const char* StyleName  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размер таблицы глифов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GlyphsCount () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Код первого глифа
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t FirstGlyphCode () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размер шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t FontSize () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к данным о глифах
///////////////////////////////////////////////////////////////////////////////////////////////////
    const GlyphInfo* Glyphs () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о кёрнингах
///////////////////////////////////////////////////////////////////////////////////////////////////
    KerningInfo Kerning    (size_t left_glyph_index, size_t right_glyph_index) const;
    bool        HasKerning (size_t left_glyph_index, size_t right_glyph_index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание растеризованного шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    RasterizedFont CreateRasterizedFont (const RasterizedFontCreationParams&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Font&);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Font (FontImpl*);

  private:
    FontImpl* impl;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
//////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Font&, Font&);

//////////////////////////////////////////////////////////////////////////////////////////////////
///Построитель шрифта
//////////////////////////////////////////////////////////////////////////////////////////////////
class FontBuilder
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
   FontBuilder  ();
   FontBuilder  (const FontBuilder& source);
   ~FontBuilder ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontBuilder& operator = (const FontBuilder&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение / изменение имени исходного файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Source    () const;
    void        SetSource (const char* new_source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/изменение имени / семейства / стиля шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name          () const;
    const char* FamilyName    () const;
    const char* StyleName     () const;
    void        Rename        (const char* new_name);
    void        SetFamilyName (const char* new_family_name);
    void        SetStyleName  (const char* new_style_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/изменение размера таблицы глифов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetGlyphsCount (size_t new_glyphs_count);
    size_t GlyphsCount    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/изменение кода первого глифа
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetFirstGlyphCode (size_t new_first_glyph_code);
    size_t FirstGlyphCode    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/изменение размера шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetFontSize (size_t new_font_size);
    size_t FontSize    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к данным о глифах
///////////////////////////////////////////////////////////////////////////////////////////////////
    const GlyphInfo* Glyphs () const;
          GlyphInfo* Glyphs ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/получение/удаление информации о кёрнингах
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        InsertKerning     (size_t left_glyph_index, size_t right_glyph_index, const KerningInfo& kerning_info);
    void        RemoveKerning     (size_t left_glyph_index, size_t right_glyph_index);
    void        RemoveAllKernings ();
    KerningInfo Kerning           (size_t left_glyph_index, size_t right_glyph_index) const;
    bool        HasKerning        (size_t left_glyph_index, size_t right_glyph_index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка растеризатора
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<IFontRasterizer* (const Font&, const RasterizedFontCreationParams&)> RasterizerHandler;

    void                     SetRasterizer (const RasterizerHandler&);
    const RasterizerHandler& Rasterizer    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    Font BuildFont ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (FontBuilder&);

  private:
    struct Impl;
    Impl* impl;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
//////////////////////////////////////////////////////////////////////////////////////////////////
void swap (FontBuilder&, FontBuilder&);

}

#endif
