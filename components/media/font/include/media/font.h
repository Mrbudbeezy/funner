#ifndef MEDIALIB_FONT_HEADER
#define MEDIALIB_FONT_HEADER

#include <xtl/shared_ptr.h>
#include <xtl/functional_fwd>

#include <common/serializer_manager.h>

namespace media
{

//implementation forwards
class FontImpl;

//////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о глифе
//////////////////////////////////////////////////////////////////////////////////////////////////
struct GlyphInfo
{
  size_t x_pos;      //X координата нижнего левого угла глифа
  size_t y_pos;      //Y координата нижнего левого угла глифа
  size_t width;      //Ширина глифа
  size_t height;     //Высота глифа
  int    bearing_x;   //Расстояние от положения пера до левой границы буквы
  int    bearing_y;   //Расстояние от положения пера до верхней границы буквы
  int    advance_x;   //Отступ по оси X от текущего положения пера до следующего положения пера
  int    advance_y;   //Отступ по оси Y от текущего положения пера до следующего положения пера
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о уменьшенных межзнаковых интервалах
//////////////////////////////////////////////////////////////////////////////////////////////////
struct KerningInfo
{
  float x_kerning;     //Отступ по оси X от положения пера для отображения левого глифа до положения пера для отображения правого глифа
  float y_kerning;     //Отступ по оси Y от положения пера для отображения левого глифа до положения пера для отображения правого глифа
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Гарнитура
//////////////////////////////////////////////////////////////////////////////////////////////////
class Font
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
             Font  ();
             Font  (const Font& source);
    explicit Font  (const char* file_name);
             ~Font ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Font& operator = (const Font&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/изменение имени шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* new_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/изменение имени файла текстуры шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetImageName (const char* new_image_name);
    const char* ImageName    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/изменение размера таблицы глифов 
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   ResizeGlyphsTable (size_t new_glyphs_count);
    size_t GlyphsTableSize   () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/изменение кода первого глифа
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetFirstGlyphCode (size_t new_first_glyph_code);
    size_t FirstGlyphCode    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к данным о глифах
///////////////////////////////////////////////////////////////////////////////////////////////////
    const GlyphInfo* Glyphs () const;
          GlyphInfo* Glyphs ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/получение/удаление информации о кёрнингах
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        InsertKerning     (size_t left_glyph_index, size_t right_glyph_index, const KerningInfo& kerning_info);
    void        RemoveKerning     (size_t left_glyph_index, size_t right_glyph_index);
    void        RemoveAllKernings ();
    KerningInfo Kerning           (size_t left_glyph_index, size_t right_glyph_index) const;
    bool        HasKerning        (size_t left_glyph_index, size_t right_glyph_index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сохранение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Save (const char* file_name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Font&);

  private:
    Font (FontImpl*);

    xtl::shared_ptr<FontImpl> impl;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
//////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Font&, Font&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система управления шрифтами
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef common::ResourceSerializerManager<void (const char* file_name, Font& font), 
                                          void (const char* file_name, const Font& font)> FontManager;

}

#endif
