#ifndef MEDIALIB_FONT_HEADER
#define MEDIALIB_FONT_HEADER

#include <xtl/shared_ptr.h>
#include <xtl/functional_fwd>

namespace media
{

//implementation forwards
class FontFaceImpl;

//////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о глифе
//////////////////////////////////////////////////////////////////////////////////////////////////
struct GlyphInfo
{
  size_t x_pos;      //X координата нижнего левого угла глифа
  size_t y_pos;      //Y координата нижнего левого угла глифа
  size_t width;      //Ширина глифа
  size_t heigth;     //Высота глифа
  int    bearingX;   //Расстояние от положения пера до левой границы буквы
  int    bearingY;   //Расстояние от положения пера до верхней границы буквы
  int    advanceX;   //Отступ по оси X от текущего положения пера до следующего положения пера
  int    advanceY;   //Отступ по оси Y от текущего положения пера до следующего положения пера
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о уменьшенных межзнаковых интервалах
//////////////////////////////////////////////////////////////////////////////////////////////////
struct KerningInfo
{
  int x_kerning;     //Отступ по оси X от положения пера для отображения левого глифа до положения пера для отображения правого глифа
  int y_kerning;     //Отступ по оси Y от положения пера для отображения левого глифа до положения пера для отображения правого глифа
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Гарнитура
//////////////////////////////////////////////////////////////////////////////////////////////////
class FontFace
{
  public:
             FontFace  ();
             FontFace  (size_t first_char_index, size_t glyph_table_size, GlyphInfo* glyph, KerningInfo* kerning_table, const char* font_file_name);
             FontFace  (const FontFace& source);
    explicit FontFace  (const char* file_name);
             ~FontFace ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontFace& operator = (const FontFace&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя сэмпла
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* new_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Данные
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char*                ImageName      () const;
    size_t                     GlyphsCount    () const;
    size_t                     FirstGlyphCode () const;
    GlyphInfo*                 GlyphData      (size_t glyph_index) const;
    GlyphInfo*                 GlyphData      () const;
    KerningInfo*               Kerning        (size_t left_glyph_index, size_t right_glyph_index) const;
    KerningInfo*               Kerning        () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сохранение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Save (const char* file_name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (FontFace&);

  private:
    FontFace (FontFaceImpl*);

    xtl::shared_ptr<FontFaceImpl> impl;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
//////////////////////////////////////////////////////////////////////////////////////////////////
void swap (FontFace&,FontFace&);

}

#endif
