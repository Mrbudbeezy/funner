#ifndef MEDIALIB_FONT_CREATION_PARAMS_LIBRARY_HEADER
#define MEDIALIB_FONT_CREATION_PARAMS_LIBRARY_HEADER

#include <stl/auto_ptr.h>

namespace media
{

//////////////////////////////////////////////////////////////////////////////////////////////////
///Параметра создания шрифта
//////////////////////////////////////////////////////////////////////////////////////////////////
struct FontCreationParams
{
  size_t      font_size;       //размер символа в пикселах
  size_t      font_size_eps;   //допустимое отклонение от желаемого размера при поиске шрифта (если доступны шрифты только опредленных размеров)
  size_t      weight;          //вес шрифта в диапазоне от 0 до 1000, если значение равно 0 - используется вес по умолчанию
  int         escapement;      //наклон в тысячных долях градуса
  bool        bold;            //используется ли жирная версия шрифта
  bool        italic;          //используется ли курсивная версия шрифта
  bool        underlined;      //используется ли подчеркивание
  bool        striked;         //используется ли перечеркивание
  size_t      stroke_size;     //толщина обводки в тысячных долях пиксела
  size_t      horizontal_dpi;  //горизонтальная плотность точек целевого устройства отображения
  size_t      vertical_dpi;    //вертикальная плотность точек целевого устройства отображения
  const char* charset_name;    //имя используемого списка символов
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека параметров создания шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
class FontCreationParamsLibrary
{
  public:
    typedef xtl::iterator<FontCreationParams>       Iterator;
    typedef xtl::iterator<const FontCreationParams> ConstIterator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontCreationParamsLibrary  ();
    FontCreationParamsLibrary  (const FontCreationParamsLibrary&);
    ~FontCreationParamsLibrary ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontCreationParamsLibrary& operator = (const FontCreationParamsLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество параметров создания шрифта / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size    () const;
    bool   IsEmpty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      CreateIterator ();
    ConstIterator CreateIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор параметров создания шрифта в библиотеке
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ItemId (const ConstIterator&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск параметров создания шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
          FontCreationParams* Find (const char* name);
    const FontCreationParams* Find (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение параметров создания шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach    (const char* name, FontCreationParams& params);
    void Detach    (const char* name); //no throw
    void DetachAll ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Целевое разрешение создания шрифтов по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t DefaultHorizontalDpi    () const;
    size_t DefaultVerticalDpi      () const;
    void   SetDefaultHorizontalDpi (size_t horizontal_dpi);
    void   SetDefaultVerticalDpi   (size_t vertical_dpi);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (FontCreationParamsLibrary&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
//////////////////////////////////////////////////////////////////////////////////////////////////
void swap (FontCreationParamsLibrary&, FontCreationParamsLibrary&);

}

#endif
