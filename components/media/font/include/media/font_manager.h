#ifndef MEDIALIB_FontRenderer_RENDERER_HEADER
#define MEDIALIB_FontRenderer_RENDERER_HEADER

#include <media/font.h>

#include <xtl/functional_fwd>

namespace media
{

class FontLibrary
{
  public:
    typedef xtl::iterator<Font>       Iterator;
    typedef xtl::iterator<const Font> ConstIterator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontLibrary  ();
    FontLibrary  (const FontLibrary& source);
    ~FontLibrary ();

    FontLibrary& operator = (const FontLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    () const;
    void        SetName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество материалов в библиотеке / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size    () const;
    bool   IsEmpty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      CreateIterator ();
    ConstIterator CreateIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение идентификатора материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ItemId (const ConstIterator&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск
///////////////////////////////////////////////////////////////////////////////////////////////////
          Font* Find (const char* name);
    const Font* Find (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadFont    (const char* file_name);
    void LoadFonts   (const char* wildcard);
    void UnloadFont  (const char* file_name);
    void UnloadFonts (const char* wildcard);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество загруженных шрифтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t FontsCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск шрифтка по атрибутам
///////////////////////////////////////////////////////////////////////////////////////////////////
    int FindFont (const char* name, const char* family, const char* style) const;  //возвращает -1 если точного совпадения не найдено
    int FindAnyFont (const char* name_wildcard, const char* family_wildcard, const char* style_wildcard) const;  //возвращает -1 если совпадения не найдено



///////////////////////////////////////////////////////////////////////////////////////////////////
///Рендеринг шрифта (в шрифте необходимо возвращать не картинку, а список картинок) (кеширование????) (создание по имени)
///////////////////////////////////////////////////////////////////////////////////////////////////
    Font RenderFont (size_t font_index, float size, bool nearest_size, const char* language) const;
    Font RenderFont (size_t font_index, float size, bool nearest_size, const char* language, float horizontal_dpi, float vertical_dpi) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (FontLibrary&);

  private:
    struct Impl;
    Impl* impl;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
//////////////////////////////////////////////////////////////////////////////////////////////////
void swap (FontLibrary&, FontLibrary&);

}

#endif
