#ifndef MEDIALIB_FontRenderer_RENDERER_HEADER
#define MEDIALIB_FontRenderer_RENDERER_HEADER

#include <media/font.h>

#include <xtl/functional_fwd>

namespace media
{

//TODO: cache index

struct FontCreationParams
{
  size_t      font_size;
  size_t      font_size_eps;
  size_t      weight;      //+constants
  int         escapement;
  bool        bold;
  bool        itallic;
  bool        underlined;
  bool        striked;
  size_t      horizontal_dpi;
  size_t      vertical_dpi;
  const char* charset;
};

//TODO: add global charset class

class FontDesc
{
  public:
    FontDesc (const char* source, const char* family_name, const char* style_name, IFontDesc* desc);


///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Source () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя гарнитуры / имя семейства / имя стиля
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* FamilyName () const;
    const char* StyleName  () const;

    bool IsRasterFont () const;
    

    Font CreateFont     (const FontCreationParams&) const;
    bool CanCreateFont  (const FontCreationParams&) const;

  private:
    struct Impl
    Impl* impl;
};

class FontLibrary
{
  public:
    typedef xtl::iterator<FontDesc>       Iterator;
    typedef xtl::iterator<const FontDesc> ConstIterator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontLibrary  ();
    FontLibrary  (const FontLibrary& source);
    ~FontLibrary ();

    FontLibrary& operator = (const FontLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    () const;
    void        SetName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество дескрипторов шрифтов в библиотеке / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size    () const;
    bool   IsEmpty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      CreateIterator ();
    ConstIterator CreateIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение идентификатора шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ItemId (const ConstIterator&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск
///////////////////////////////////////////////////////////////////////////////////////////////////
          FontDesc* Find (const char* name);
    const FontDesc* Find (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadFont    (const char* file_name);
    void LoadFonts   (const char* wildcard);
    void UnloadFont  (const char* file_name);
    void UnloadFonts (const char* wildcard);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    Font CreateFont (const char* name, const FontCreationParams& params);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (FontLibrary&);

  private:
    struct Impl;
    Impl* impl;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
//////////////////////////////////////////////////////////////////////////////////////////////////
void swap (FontLibrary&, FontLibrary&);

}

#endif
