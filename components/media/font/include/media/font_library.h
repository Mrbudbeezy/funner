#ifndef MEDIALIB_FONT_LIBRARY_HEADER
#define MEDIALIB_FONT_LIBRARY_HEADER

#include <media/font.h>

#include <xtl/functional_fwd>

namespace xtl
{

//forward declarations
template <class T> class iterator;

}

namespace media
{

//forward declarations
class FontLibrary;

//////////////////////////////////////////////////////////////////////////////////////////////////
///Общепринятые веса шрифта
//////////////////////////////////////////////////////////////////////////////////////////////////
enum FontWeight
{
  FontWeight_DontCare   = 0,
  FontWeight_Thin       = 100,
  FontWeight_ExtraLight = 200,
  FontWeight_UltraLight = 200,
  FontWeight_Light      = 300,
  FontWeight_Normal     = 400,
  FontWeight_Regular    = 400,
  FontWeight_Medium     = 500,
  FontWeight_SemiBold   = 600,
  FontWeight_DemiBold   = 600,
  FontWeight_Bold       = 700,
  FontWeight_ExtraBold  = 800,
  FontWeight_UltraBold  = 800,
  FontWeight_Heavy      = 900,
  FontWeight_Black      = 900
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Параметра создания шрифта
//////////////////////////////////////////////////////////////////////////////////////////////////
struct FontCreationParams
{
  unsigned int   font_size;       //размер символа в пикселах
  unsigned int   font_size_eps;   //допустимое отклонение от желаемого размера при поиске шрифта (если доступны шрифты только опредленных размеров)
  unsigned short weight;          //вес шрифта в диапазоне от 0 до 1000, если значение равно 0 - используется вес по умолчанию
  int            escapement;      //наклон в тысячных долях градуса
  bool           bold;            //используется ли жирная версия шрифта
  bool           italic;          //используется ли курсивная версия шрифта
  bool           underlined;      //используется ли подчеркивание
  bool           striked;         //используется ли перечеркивание
  unsigned int   stroke_size;     //толщина обводки в тысячных долях пиксела
  unsigned short horizontal_dpi;  //горизонтальная плотность точек целевого устройства отображения
  unsigned short vertical_dpi;    //вертикальная плотность точек целевого устройства отображения
  const char*    charset_name;    //имя используемого списка символов
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Шрифт
//////////////////////////////////////////////////////////////////////////////////////////////////
class IFontDesc
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество шрифтов в наборе
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual unsigned int FontsCount () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя гарнитуры / имя семейства / имя стиля
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* FamilyName (unsigned int index) = 0;
    virtual const char* StyleName  (unsigned int index) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Font CreateFont    (unsigned int index, const FontCreationParams&) = 0;
    virtual bool CanCreateFont (unsigned int index, const FontCreationParams&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчет ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef () = 0;
    virtual void Release () = 0;

 protected:
    virtual ~IFontDesc () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Шрифт
///////////////////////////////////////////////////////////////////////////////////////////////////
class FontDesc
{
  friend class FontLibrary;

  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontDesc  (const FontDesc&);
    ~FontDesc ();    

    FontDesc& operator = (const FontDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Source () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя гарнитуры / имя семейства / имя стиля
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* FamilyName () const;
    const char* StyleName  () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание экземпляра шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    Font CreateFont    (const FontCreationParams&) const;
    bool CanCreateFont (const FontCreationParams&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (FontDesc&);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontDesc (const char* source, IFontDesc* desc, unsigned int index);

  private:
    struct Impl;
    Impl* impl;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
//////////////////////////////////////////////////////////////////////////////////////////////////
void swap (FontDesc&, FontDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека шрифтов
///////////////////////////////////////////////////////////////////////////////////////////////////
class FontLibrary
{
  public:
    typedef xtl::iterator<FontDesc>       Iterator;
    typedef xtl::iterator<const FontDesc> ConstIterator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontLibrary  ();
    FontLibrary  (const FontLibrary& source);
    ~FontLibrary ();

    FontLibrary& operator = (const FontLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    () const;
    void        SetName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество дескрипторов шрифтов в библиотеке / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int Size    () const;
    bool         IsEmpty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      CreateIterator ();
    ConstIterator CreateIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* FontName (const ConstIterator&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontDesc* Find (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadFont    (const char* file_name);
    void LoadFonts   (const char* wildcard);
    void UnloadFont  (const char* file_name);
    void UnloadFonts (const char* wildcard);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    Font CreateFont    (const char* name, const FontCreationParams& params);
    bool CanCreateFont (const char* name, const FontCreationParams& params) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление параметрами кэширования
///////////////////////////////////////////////////////////////////////////////////////////////////
    void EnableCache   () { SetCacheState (true); }
    void DisableCache  () { SetCacheState (false); }
    void SetCacheState (bool state);
    bool CacheState    () const;

    void        SetCacheDir (const char* dir_name);
    const char* CacheDir    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (FontLibrary&);

  private:
    struct Impl;
    Impl* impl;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
//////////////////////////////////////////////////////////////////////////////////////////////////
void swap (FontLibrary&, FontLibrary&);

//////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер шрифтов
//////////////////////////////////////////////////////////////////////////////////////////////////
typedef common::ResourceSerializerManager<IFontDesc* (const char*), void (const char*, const Font&, const char*, const RasterizedFontCreationParams&)> FontManager;

}

#endif
