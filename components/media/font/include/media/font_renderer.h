#ifndef MEDIALIB_FontRenderer_RENDERER_HEADER
#define MEDIALIB_FontRenderer_RENDERER_HEADER

#include <media/font.h>

#include <xtl/functional_fwd>

namespace media
{

//forward declarations
class Image;

//////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о глифе
//////////////////////////////////////////////////////////////////////////////////////////////////
struct RenderGlyphInfo
{
  float bearing_x;   //Расстояние от положения пера до левой границы буквы
  float bearing_y;   //Расстояние от положения пера до верхней границы буквы
  float advance_x;   //Отступ по оси X от текущего положения пера до следующего положения пера
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Гарнитура
//////////////////////////////////////////////////////////////////////////////////////////////////
class FontRenderer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontRenderer  ();
    FontRenderer  (const FontRenderer& source);
    FontRenderer  (const char* file_name, size_t face_index);
    ~FontRenderer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name, size_t face_index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontRenderer& operator = (const FontRenderer&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени, семейства, стиля шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name () const;
    const char* FamilyName () const;
    const char* StyleName () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/установка разрешения рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    float HorizontalResolution () const;
    float VerticalResolution   () const;
    void  SetResolution        (float horizontal_resolution, float vertical_resolution);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/установка размера рендеринга одного символа
///////////////////////////////////////////////////////////////////////////////////////////////////
    float MinAvailableSize () const;
    float MaxAvailableSize () const;
    float GetNearestSize   (float size) const;
    float Size             () const;
    float SetNearestSize   (float size);        //no throw, returns actual setted size
    void  SetSize          (float size);        //throw if this exact size not available

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия символа
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool HasGlyph (size_t char_code) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к данным о глифах
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RenderGlyph (size_t char_code, media::Image& target_image, RenderGlyphInfo& glyph_info) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/получение/удаление информации о кёрнингах
///////////////////////////////////////////////////////////////////////////////////////////////////
    KerningInfo Kerning    (size_t left_char_code, size_t right_char_code) const;
    bool        HasKerning (size_t left_char_code, size_t right_char_code) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (FontRenderer&);

  private:
    struct Impl;
    Impl* impl;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
//////////////////////////////////////////////////////////////////////////////////////////////////
void swap (FontRenderer&, FontRenderer&);

}

#endif
