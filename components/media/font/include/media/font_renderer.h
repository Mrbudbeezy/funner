#ifndef MEDIALIB_FontRenderer_RENDERER_HEADER
#define MEDIALIB_FontRenderer_RENDERER_HEADER

#include <media/font.h>

#include <xtl/functional_fwd>

namespace media
{

//////////////////////////////////////////////////////////////////////////////////////////////////
///Гарнитура
//////////////////////////////////////////////////////////////////////////////////////////////////
class FontRenderer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontRenderer  ();
    FontRenderer  (const FontRenderer& source);
    ~FontRenderer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка шрифтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadFonts (const char* wildcard);
    void UnloadFonts (const char* wildcard);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontRenderer& operator = (const FontRenderer&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение свойств загруженных шрифтов (необходимо внести эти же атрибуты в Font)
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      FontsCount () const;
    const char* FontName (size_t font_index) const;
    const char* FontFamilyName (size_t font_index) const;
    const char* FontStyleName (size_t font_index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск шрифтка по атрибутам
///////////////////////////////////////////////////////////////////////////////////////////////////
    int FindFont (const char* name, const char* family, const char* style) const;  //возвращает -1 если точного совпадения не найдено
    int FindAnyFont (const char* name_wildcard, const char* family_wildcard, const char* style_wildcard) const;  //возвращает -1 если совпадения не найдено

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/установка размера рендеринга одного символа
///////////////////////////////////////////////////////////////////////////////////////////////////
    float MinAvailableSize (size_t font_index) const;
    float MaxAvailableSize (size_t font_index) const;
    float GetNearestSize   (size_t font_index, float size) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/установка разрешения рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    float DefaultHorizontalDpi () const;
    float DefaultVerticalDpi   () const;
    void  SetDefaultDpi        (float horizontal_dpi, float vertical_dpi);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рендеринг шрифта (в шрифте необходимо возвращать не картинку, а список картинок) (кеширование????) (создание по имени)
///////////////////////////////////////////////////////////////////////////////////////////////////
    Font RenderFont (size_t font_index, float size, bool nearest_size, const char* language) const;
    Font RenderFont (size_t font_index, float size, bool nearest_size, const char* language, float horizontal_dpi, float vertical_dpi) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (FontRenderer&);

  private:
    struct Impl;
    Impl* impl;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
//////////////////////////////////////////////////////////////////////////////////////////////////
void swap (FontRenderer&, FontRenderer&);

}

#endif
