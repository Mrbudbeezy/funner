#ifndef IMAGELIB_SHARED_HEADER
#define IMAGELIB_SHARED_HEADER

#include <stdarg.h>

#include <IL/il.h>
#include <IL/ilu.h>

#include <stl/string>
#include <stl/vector>
#include <stl/hash_map>

#include <xtl/function.h>
#include <xtl/common_exceptions.h>

#include <common/heap.h>
#include <common/file.h>
#include <common/component.h>
#include <common/log.h>
#include <common/singleton.h>
#include <common/strlib.h>

#include <media/image.h>
#include <media/compressed_image.h>

namespace media
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание реализации картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
class ImageImpl: public xtl::reference_counter
{
  public:
    virtual ~ImageImpl () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Клонирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ImageImpl* Clone () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   ();
    void        Rename (const char* new_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Формат данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual PixelFormat Format () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Преобразование формата
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Convert (PixelFormat new_format) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual unsigned int Width  () = 0;
    virtual unsigned int Height () = 0;
    virtual unsigned int Depth  () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение размера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Resize (unsigned int width, unsigned int height, unsigned int depth) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с образом картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void* Bitmap (unsigned int z) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование образа с автоматическим преобразованием формата
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void PutImage (unsigned int x, unsigned int y, unsigned int z, unsigned int width, unsigned int height, unsigned int depth, PixelFormat format, const void* data) = 0;
    virtual void GetImage (unsigned int x, unsigned int y, unsigned int z, unsigned int width, unsigned int height, unsigned int depth, PixelFormat format, void* data) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сохранение картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Save (const char* file_name) = 0;

  protected:
    ImageImpl  ();
    ImageImpl  (const ImageImpl&);

  private:
    ImageImpl& operator = (const ImageImpl&); //no impl

  private:
    stl::string name; //имя картинки
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание реализаций картинок
///////////////////////////////////////////////////////////////////////////////////////////////////
ImageImpl* create_bitmap_image ();
ImageImpl* create_bitmap_image (unsigned int width, unsigned int height, unsigned int depth, PixelFormat format, const void* data);
ImageImpl* create_bitmap_image (const char* file_name);
ImageImpl* create_null_image ();

ImageImpl* create_multilayer_image (unsigned int count, Image* images, LayersCloneMode clone_mode);
ImageImpl* create_cubemap_image    (const char* file_name);
ImageImpl* create_skybox_image     (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание реализации сжатых картинок
///////////////////////////////////////////////////////////////////////////////////////////////////
ICustomCompressedImage* create_compressed_image (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Заливка картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
void fill (PixelFormat format, const void* data, Image& image);

}

#endif
