#ifndef MEDIALIB_ATLAS_BUILDER_HEADER
#define MEDIALIB_ATLAS_BUILDER_HEADER

#include <xtl/functional_fwd>

#include <media/atlas.h>

namespace media
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим вставки изображений в построитель атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
enum AtlasBuilderInsertMode
{
  AtlasBuilderInsertMode_Copy,    //копирование изображения при вставке
  AtlasBuilderInsertMode_Capture, //захват изображения при вставке
  
  AtlasBuilderInsertMode_Default = AtlasBuilderInsertMode_Copy,
  
  AtlasBuilderInsertMode_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Построитель атласа изображений
///////////////////////////////////////////////////////////////////////////////////////////////////
class AtlasBuilder
{
  public:
    typedef xtl::function<void (size_t images_count, const math::vec2ui* in_sizes, math::vec2ui* out_origins) PackHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    AtlasBuilder  (const char* pack_handler_name = "default");
    AtlasBuilder  (const PackHandler&);
    ~AtlasBuilder ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка имени атласной картинки (полной)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetAtlasImageName (const char* name);
    const char* AtlasImageName    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление изображений
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Insert (const Image&, AtlasBuilderInsertMode mode = AtlasBuilderInsertMode_Default);
    void Insert (const char* image_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Reset ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Построение карты
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Build (Atlas& out_atlas, Image& out_atlas_image);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (AtlasBuilder&);

  private:
    AtlasBuilder (const AtlasBuilder&); //no impl
    AtlasBuilder& operator = (const AtlasBuilder&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (AtlasBuilder&, AtlasBuilder&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер построителей атласа изображений
///////////////////////////////////////////////////////////////////////////////////////////////////
class AtlasBuilderManager
{
  public:
    typedef AtlasBuilder::PackHandler PackHandler;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация упаковщиков атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterPacker       (const char* name, const PackHandler& handler);
    static void UnregisterPacker     (const char* name);
    static void UnregisterAllPackers ();
};

}

#endif
