#ifndef MEDIALIB_ATLAS_BUILDER_HEADER
#define MEDIALIB_ATLAS_BUILDER_HEADER

#include <xtl/functional_fwd>

#include <media/atlas.h>

namespace media
{

//forward declaration
class Image;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим вставки изображений в построитель атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
enum AtlasBuilderInsertMode
{
  AtlasBuilderInsertMode_Copy,      //копирование изображения при вставке
  AtlasBuilderInsertMode_Capture,   //захват изображения при вставке
  AtlasBuilderInsertMode_Reference, //хранение ссылки на изображение при вставке
  
  AtlasBuilderInsertMode_Default = AtlasBuilderInsertMode_Copy,
  
  AtlasBuilderInsertMode_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим увеличения сторон во время построения атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
enum AtlasPackFlag
{
  AtlasPackFlag_PowerOfTwoEdges = 1,  //стороны степени двойки
  AtlasPackFlag_InvertTilesX    = 2,  //инвертировать расположение тайлов по оси X, обрабатывается в AtlasBuilder
  AtlasPackFlag_InvertTilesY    = 4,  //инвертировать расположение тайлов по оси Y, обрабатывается в AtlasBuilder
  AtlasPackFlag_SwapAxises      = 8,  //изменить расположение осей при размещении тайлов
  AtlasPackFlag_SquareAxises    = 16, //равные размеры осей
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Построитель атласа изображений
///////////////////////////////////////////////////////////////////////////////////////////////////
class AtlasBuilder
{
  public:
    typedef xtl::function<void (size_t images_count, const math::vec2ui* in_sizes, math::vec2ui* out_origins, size_t margin, size_t pack_flags)> PackHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    AtlasBuilder  (const char* pack_handler_name = "default");
    AtlasBuilder  (const PackHandler&);
    ~AtlasBuilder ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение максимального размера одного атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetMaxImageSize (size_t max_image_size);
    size_t MaxImageSize    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение размера поля
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetMargin (size_t margin);
    size_t Margin    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение флагов упаковки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetPackFlags (size_t pack_flags);
    size_t PackFlags    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление изображений
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Insert (media::Image&, AtlasBuilderInsertMode mode = AtlasBuilderInsertMode_Default);
    void Insert (const char* image_name, bool keep_in_memory = true);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Reset ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение результатов упаковки
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AtlasesCount    ();
    void   BuildAtlas      (size_t index, const char* atlas_image_name, Atlas& result);
    void   BuildAtlasImage (size_t index, Image& result);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (AtlasBuilder&);

  private:
    AtlasBuilder (const AtlasBuilder&); //no impl
    AtlasBuilder& operator = (const AtlasBuilder&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (AtlasBuilder&, AtlasBuilder&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер построителей атласа изображений
///////////////////////////////////////////////////////////////////////////////////////////////////
class AtlasBuilderManager
{
  public:
    typedef AtlasBuilder::PackHandler PackHandler;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение упаковщика атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const PackHandler& GetPacker (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация упаковщиков атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterPacker       (const char* name, const PackHandler& handler);
    static void UnregisterPacker     (const char* name);
    static void UnregisterAllPackers ();
};

}

#endif
