#ifndef MEDIALIB_ATLAS_BUILDER_HEADER
#define MEDIALIB_ATLAS_BUILDER_HEADER

#include <xtl/functional_fwd>

#include <media/atlas.h>
#include <media/image.h>

namespace media
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///–ежим вставки изображений в построитель атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
enum AtlasBuilderInsertMode
{
  AtlasBuilderInsertMode_Copy,      //копирование изображени€ при вставке
  AtlasBuilderInsertMode_Capture,   //захват изображени€ при вставке
  AtlasBuilderInsertMode_Reference, //хранение ссылки на изображение при вставке
  
  AtlasBuilderInsertMode_Default = AtlasBuilderInsertMode_Copy,
  
  AtlasBuilderInsertMode_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///–ежим увеличени€ сторон во врем€ построени€ атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
enum AtlasPackFlag
{
  AtlasPackFlag_PowerOfTwoEdges    = 1,       //стороны степени двойки
  AtlasPackFlag_InvertTilesX       = 1 << 1,  //инвертировать расположение тайлов по оси X, обрабатываетс€ в AtlasBuilder
  AtlasPackFlag_InvertTilesY       = 1 << 2,  //инвертировать расположение тайлов по оси Y, обрабатываетс€ в AtlasBuilder
  AtlasPackFlag_SwapAxises         = 1 << 3,  //изменить расположение осей при размещении тайлов
  AtlasPackFlag_SquareAxises       = 1 << 4,  //равные размеры осей
  AtlasPackFlag_TopRightEdgeMargin = 1 << 5,  //использовать отступ от верхнего и правого краев картинки
  AtlasPackFlag_PackToMaxImageSize = 1 << 6,  //упаковать максимально возможное количество картинок без превышени€ заданного размера атласа
  AtlasPackFlag_Fast               = 1 << 7,  //быстрое сжатие
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕостроитель атласа изображений
///////////////////////////////////////////////////////////////////////////////////////////////////
class AtlasBuilder
{
  public:
    struct PackHandlerParams
    {
      size_t              images_count;    //количество упаковываемых картинок
      const math::vec2ui* in_sizes;        //размеры картинок
      math::vec2ui*       out_origins;     //результирующие координаты картинок
      bool*               out_was_packed;  //дл€ каждой картинки true - если была упакована, false - если не влезла. ћожет быть равен 0
      size_t              margin;          //отступ между картинками
      size_t              max_image_size;  //максимальный размер результирующей картинки (используетс€ только если установлен флаг )
      size_t              pack_flags;      //параметры упаковки
    };

    typedef xtl::function<void (const PackHandlerParams&)> PackHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
/// онструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    AtlasBuilder  (const char* pack_handler_name = "default");
    AtlasBuilder  (const PackHandler&);
    ~AtlasBuilder ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///”становка/получение максимального размера одного атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetMaxImageSize (size_t max_image_size);
    size_t MaxImageSize    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///”становка/получение размера пол€
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetMargin (size_t margin);
    size_t Margin    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///”становка/получение флагов упаковки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetPackFlags (size_t pack_flags);
    size_t PackFlags    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///ƒобавление изображений
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Insert (Image&, AtlasBuilderInsertMode mode = AtlasBuilderInsertMode_Default, size_t tag = 0);
    void Insert (const char* image_name, bool keep_in_memory = true, size_t tag = 0);
    void Insert (size_t width, size_t height, PixelFormat format, const void* data, bool copy_data = true, const char* name = "", size_t tag = 0);

///////////////////////////////////////////////////////////////////////////////////////////////////
///—брос
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Reset ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕолучение результатов упаковки
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AtlasesCount    ();
    void   BuildAtlas      (size_t index, const char* atlas_image_name, Atlas& result);
    void   BuildAtlasImage (size_t index, Image& result);

///////////////////////////////////////////////////////////////////////////////////////////////////
///ќбмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (AtlasBuilder&);

  private:
    AtlasBuilder (const AtlasBuilder&); //no impl
    AtlasBuilder& operator = (const AtlasBuilder&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///ќбмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (AtlasBuilder&, AtlasBuilder&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///ћенеджер построителей атласа изображений
///////////////////////////////////////////////////////////////////////////////////////////////////
class AtlasBuilderManager
{
  public:
    typedef AtlasBuilder::PackHandler PackHandler;

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕолучение упаковщика атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const PackHandler& GetPacker (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///–егистраци€ упаковщиков атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterPacker       (const char* name, const PackHandler& handler);
    static void UnregisterPacker     (const char* name);
    static void UnregisterAllPackers ();
};

}

#endif
