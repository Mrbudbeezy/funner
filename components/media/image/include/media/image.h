#ifndef MEDIALIB_IMAGE_HEADER
#define MEDIALIB_IMAGE_HEADER

#include <stl/auto_ptr.h>

#include <xtl/functional_fwd>

#include <common/serializer_manager.h>

namespace media
{

//implementation forwards
class ImageImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Формат пикселей
///////////////////////////////////////////////////////////////////////////////////////////////////
enum PixelFormat
{
  PixelFormat_Default,
  PixelFormat_RGB8,
  PixelFormat_RGB16,
  PixelFormat_BGR8,
  PixelFormat_RGBA8,
  PixelFormat_RGBA16,
  PixelFormat_BGRA8,
  PixelFormat_L8,
  PixelFormat_A8,
  PixelFormat_LA8,
  
  PixelFormat_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слои кубической карты
///////////////////////////////////////////////////////////////////////////////////////////////////
enum CubemapLayer
{
  CubemapLayer_PositiveX,
  CubemapLayer_NegativeX,
  CubemapLayer_PositiveY,
  CubemapLayer_NegativeY,
  CubemapLayer_PositiveZ,
  CubemapLayer_NegativeZ
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение характеристик формата
///////////////////////////////////////////////////////////////////////////////////////////////////
const char*    get_format_name     (PixelFormat); //имя формата
unsigned short get_bits_per_pixel  (PixelFormat); //количество бит на пиксель
unsigned short get_bytes_per_pixel (PixelFormat); //количество байт на пиксель

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим копирования слоёв многослойной картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
enum LayersCloneMode
{
  LayersCloneMode_Copy,     //слои копируются
  LayersCloneMode_Capture,  //слои захватываются (источник после выполнения операции опустошается)
  
  LayersCloneMode_Default = LayersCloneMode_Copy
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Картинка
///////////////////////////////////////////////////////////////////////////////////////////////////
class Image
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
             Image  ();
             Image  (const Image& source);
             Image  (const Image& source, PixelFormat format);
             Image  (unsigned int width, unsigned int height, unsigned int depth, PixelFormat format, const void* data = 0);
             Image  (unsigned int layers_count, Image* layers, LayersCloneMode clone_mode = LayersCloneMode_Default);
    explicit Image  (const char* file_name, PixelFormat format = PixelFormat_Default);
             ~Image ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Image& operator = (const Image&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Клонирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Image Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / сохранение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);
    void Save (const char* file_name, PixelFormat format = PixelFormat_Default, const char* format_specific_flags = "");

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработчики загрузки/сохранения по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void DefaultLoader (const char* file_name, Image& image);
    static void CubemapLoader (const char* file_name, Image& image);
    static void SkyBoxLoader  (const char* file_name, Image& image);
    static void DefaultSaver  (const char* file_name, const Image& image, const char* format_specific_flags);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* new_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Формат данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    PixelFormat Format () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Преобразование формата
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Convert (PixelFormat new_format);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int Width  () const;
    unsigned int Height () const;
    unsigned int Depth  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение размера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Resize (unsigned int width, unsigned int height, unsigned int depth);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Заполнение определенным значением
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Fill (PixelFormat format, const void* data);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с образом картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void*       Bitmap (unsigned int z = 0);
    const void* Bitmap (unsigned int z = 0) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование образа с автоматическим преобразованием формата
///////////////////////////////////////////////////////////////////////////////////////////////////
    void PutImage (unsigned int x, unsigned int y, unsigned int z, unsigned int width, unsigned int height, unsigned int depth, PixelFormat format, const void* data);
    void GetImage (unsigned int x, unsigned int y, unsigned int z, unsigned int width, unsigned int height, unsigned int depth, PixelFormat format, void* data) const;
    void PutImage (unsigned int x, unsigned int y, unsigned int z, unsigned int width, unsigned int height, unsigned int depth, const Image& source_image, unsigned int source_x, unsigned int source_y, unsigned int source_z);
    void GetImage (unsigned int x, unsigned int y, unsigned int z, unsigned int width, unsigned int height, unsigned int depth, Image& target_image, unsigned int target_x, unsigned int target_y, unsigned int target_z) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Image&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация сериализаторов по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterDefaultSavers  ();
    static void RegisterDefaultLoaders ();
    
  private:
    Image (ImageImpl*);

  private:
    ImageImpl* impl;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
//////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Image&, Image&);

//////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск границ непрозрачных пикселей внутри картинки
//////////////////////////////////////////////////////////////////////////////////////////////////
void crop_by_alpha (const Image& image, unsigned int crop_alpha, unsigned int& crop_x, unsigned int& crop_y, unsigned int& crop_width, unsigned int& crop_height);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система управления картинками
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef common::ResourceSerializerManager<
  void (const char* file_name, Image& image),
  void (const char* file_name, const Image& image, const char* format_specific_flags)>
ImageManager;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация загрузчиков по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
void register_default_loaders (ImageManager&);
void register_default_savers  (ImageManager&);

}

#endif
