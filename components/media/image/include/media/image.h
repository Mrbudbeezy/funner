#ifndef MEDIALIB_IMAGE_HEADER
#define MEDIALIB_IMAGE_HEADER

#include <stl/auto_ptr.h>

#include <xtl/functional_fwd>

#include <common/serializer_manager.h>

namespace media
{

//implementation forwards
class ImageImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Формат пикселей
///////////////////////////////////////////////////////////////////////////////////////////////////
enum PixelFormat
{
  PixelFormat_Default,
  PixelFormat_RGB8,
  PixelFormat_RGB16,
  PixelFormat_BGR8,
  PixelFormat_RGBA8,
  PixelFormat_RGBA16,
  PixelFormat_BGRA8,
  PixelFormat_L8,
  PixelFormat_A8,
  PixelFormat_LA8,
  
  PixelFormat_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слои кубической карты
///////////////////////////////////////////////////////////////////////////////////////////////////
enum CubemapLayer
{
  CubemapLayer_PositiveX,
  CubemapLayer_NegativeX,
  CubemapLayer_PositiveY,
  CubemapLayer_NegativeY,
  CubemapLayer_PositiveZ,
  CubemapLayer_NegativeZ
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение характеристик формата
///////////////////////////////////////////////////////////////////////////////////////////////////
const char* get_format_name     (PixelFormat); //имя формата
size_t      get_bits_per_pixel  (PixelFormat); //количество бит на пиксель
size_t      get_bytes_per_pixel (PixelFormat); //количество байт на пиксель

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим копирования слоёв многослойной картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
enum LayersCloneMode
{
  LayersCloneMode_Copy,     //слои копируются
  LayersCloneMode_Capture,  //слои захватываются (источник после выполнения операции опустошается)
  
  LayersCloneMode_Default = LayersCloneMode_Copy
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Картинка
///////////////////////////////////////////////////////////////////////////////////////////////////
class Image
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
             Image  ();
             Image  (const Image& source, PixelFormat format = PixelFormat_Default);
             Image  (size_t width, size_t height, size_t depth, PixelFormat format, const void* data = 0);
             Image  (size_t layers_count, Image* layers, LayersCloneMode clone_mode = LayersCloneMode_Default);
    explicit Image  (const char* file_name, PixelFormat format = PixelFormat_Default);
             ~Image ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Image& operator = (const Image&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / сохранение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);
    void Save (const char* file_name, PixelFormat format = PixelFormat_Default);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработчики загрузки/сохранения по умолчанию (в будущем убрать вообще!!!)
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void DefaultLoader (const char* file_name, Image& image);
    static void CubemapLoader (const char* file_name, Image& image);
    static void SkyBoxLoader  (const char* file_name, Image& image);
    static void DefaultSaver  (const char* file_name, const Image& image);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* new_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Формат данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    PixelFormat Format () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Преобразование формата
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Convert (PixelFormat new_format);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Width  () const;
    size_t Height () const;
    size_t Depth  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение размера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Resize (size_t width, size_t height, size_t depth);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с образом картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void*       Bitmap (size_t z = 0);
    const void* Bitmap (size_t z = 0) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование образа с автоматическим преобразованием формата
///////////////////////////////////////////////////////////////////////////////////////////////////          
    void PutImage (size_t x, size_t y, size_t z, size_t width, size_t height, size_t depth, PixelFormat format, const void* data);
    void GetImage (size_t x, size_t y, size_t z, size_t width, size_t height, size_t depth, PixelFormat format, void* data) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Image&);

  private:
    stl::auto_ptr<ImageImpl> impl;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
//////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Image&, Image&);

//////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск границ непрозрачных пикселей внутри картинки
//////////////////////////////////////////////////////////////////////////////////////////////////
void crop_by_alpha (const Image& image, size_t crop_alpha, size_t& crop_x, size_t& crop_y, size_t& crop_width, size_t& crop_height);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система управления картинками
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef common::ResourceSerializerManager<void (const char* file_name, Image& image), void (const char* file_name, const Image& image)> ImageManager;

}

#endif
