#ifndef MEDIALIB_IMAGEMAP_HEADER
#define MEDIALIB_IMAGEMAP_HEADER

#include <stl/auto_ptr.h>

#include <xtl/functional_fwd>

#include <common/serializer_manager.h>

#include <math/vector.h>

namespace media
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Элемент карты картинок
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Tile
{
  const char*  name;
  const char*  image;
  math::vec2ui origin;
  math::vec2ui size;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Карта картинок
///////////////////////////////////////////////////////////////////////////////////////////////////
class Atlas
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Atlas  ();
    Atlas  (const char* file_name);
    Atlas  (const Atlas&);
    ~Atlas ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Atlas& operator = (const Atlas&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество тайлов и изображений
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t TilesCount      () const;
    size_t ImagesCount     () const;    
    size_t ImageTilesCount (const char* image_name) const;
    size_t ImageTilesCount (size_t image_index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск
///////////////////////////////////////////////////////////////////////////////////////////////////
    const media::Tile* Find (const char* name) const; //no throw

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение тайла
///////////////////////////////////////////////////////////////////////////////////////////////////
    const media::Tile& Tile      (size_t index) const;
    const media::Tile& Tile      (const char* name) const;
    const media::Tile& ImageTile (size_t image_index, size_t index) const;        
    const media::Tile& ImageTile (const char* image_name, size_t index) const;    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление тайла
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Insert (const media::Tile& new_tile);
    size_t Insert (const char* name, const char* image, const math::vec2ui& origin, const math::vec2ui& size);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение тайла
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Set (size_t tile_index, const media::Tile& new_tile);
    void Set (size_t tile_index, const char* name, const char* image, const math::vec2ui& origin, const math::vec2ui& size);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление тайла
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove         (size_t tile_index);
    void Remove         (const char* name);
    void RemoveAllTiles ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени изображения
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ImageName (size_t index) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / получение размеров картинок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                SetImageSize (const char* image_name, size_t width, size_t height);    
    void                SetImageSize (const char* image_name, const math::vec2ui& size);
    void                SetImageSize (size_t index, size_t width, size_t height);    
    void                SetImageSize (size_t index, const math::vec2ui& size);    
    const math::vec2ui& ImageSize    (const char* image_name) const; //no throw
    const math::vec2ui& ImageSize    (size_t index) const; //no throw
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление пустых изображений
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RemoveEmptyImages ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / сохранение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);
    void Save (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Atlas&);
  
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Atlas&, Atlas&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система управления картами картинок
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef common::ResourceSerializerManager<void (const char* file_name, Atlas& image_map), void (const char* file_name, const Atlas& image_map)> AtlasManager;

}

#endif
