#ifndef MEDIA_RMS_BINDING_HEADER
#define MEDIA_RMS_BINDING_HEADER

/*
    Задачи:
      1) загрузка ресурсов должна быть асинхронна по умолчанию
      2) синхронная загрузка ресурсов должна выполняться через асинхронную
      3) менеджер ресурсов должен планировать загрузку ресурсов, и отмену загрузки/выгрузки
      4) операция prefetch не нужна
      5) в binding нужно вынести операции по отслеживанию процесса загрузки ресурсов
        - оповещение о загрузке/выгрузке ресурса
        - оповещение об ошибках загрузки
        - игнорирование ошибок или остановка операции
        - оповещение о состоянии загрузки в процентах        
*/

namespace xtl
{

//forward declaration
class trackable;

}

namespace media
{

namespace rms
{

//forward declaration
class ICustomBinding;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание
///////////////////////////////////////////////////////////////////////////////////////////////////
class Binding
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Binding  ();
    Binding  (ICustomBinding* binding); //binding автоматически удаляется в деструкторе или при возникновении исключения
    Binding  (const Binding&);
    ~Binding ();

    Binding& operator = (const Binding&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Операции над связанными объектами
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load     ();
    void Prefetch ();
    void Unload   ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Binding&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Binding&, Binding&);

}

}

#endif
