#ifndef MEDIA_RMS_BINDING_HEADER
#define MEDIA_RMS_BINDING_HEADER

namespace xtl
{

//forward declaration
class trackable;

}

namespace media
{

namespace rms
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс управления связыванием
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICustomBinding
{
  public:
    virtual ~ICustomBinding () {}  

///////////////////////////////////////////////////////////////////////////////////////////////////
///Операции над связанными объектами
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Load     () = 0;
    virtual void Unload   () = 0;
    virtual void Prefetch () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение объекта, оповещающего об удалении текущего объекта (может быть 0)
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual xtl::trackable* GetTrackable () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание
///////////////////////////////////////////////////////////////////////////////////////////////////
class Binding
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Binding  ();
    Binding  (ICustomBinding* binding); //binding автоматически удаляется в деструкторе или при возникновении исключения
    Binding  (const Binding&);
    ~Binding ();

    Binding& operator = (const Binding&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Операции над связанными объектами
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load     ();
    void Prefetch ();
    void Unload   ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Binding&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Binding&, Binding&);

}

}

#endif
