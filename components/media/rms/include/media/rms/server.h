#ifndef MEDIA_RMS_SERVER_HEADER
#define MEDIA_RMS_SERVER_HEADER

#include <stl/auto_ptr.h>

#include <media/rms/binding.h>
#include <media/rms/group.h>

namespace media
{

namespace rms
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс сервера управления ресурсами
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICustomServer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление ресурсами
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void PrefetchResources (size_t count, const char** resource_names) = 0;
    virtual void LoadResources     (size_t count, const char** resource_names) = 0;
    virtual void UnloadResources   (size_t count, const char** resource_names) = 0;

  protected:
    virtual ~ICustomServer () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание менеджера ресурсов с сервером ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
class Server
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Server  (ICustomServer& server);
    ~Server ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя сервера
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    () const;
    void        SetName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Фильтры имён обрабатываемых ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Filters      () const;
    void        SetFilters   (const char* filters_string);    
    void        AddFilters   (const char* filters_string);
    void        ResetFilters ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание связывания с группой ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    Binding CreateBinding (const Group&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление кэшированием ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetCacheState (bool state);
    bool CacheState    () const;
    void EnableCache   () { SetCacheState (true); }
    void DisableCache  () { SetCacheState (false); }
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс неиспользуемых ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void FlushUnusedResources ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение объекта, оповещающего об удалении сервера
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::trackable& GetTrackable () const;
    
  private:
    Server  (const Server&);    
    Server& operator = (const Server&);  

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение объекта, оповещающего об удалении сервера
///////////////////////////////////////////////////////////////////////////////////////////////////
xtl::trackable& get_trackable (const Server&);

}

}

#endif
