#ifndef MEDIA_RMS_SERVER_HEADER
#define MEDIA_RMS_SERVER_HEADER

#include <media/rms/binding.h>
#include <media/rms/event_batcher.h>
#include <media/rms/group.h>

namespace media
{

namespace rms
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс сервера управления ресурсами
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICustomServer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление ресурсами
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void PrefetchResource (const char* resource_name) = 0;
    virtual void LoadResource     (const char* resource_name) = 0;
    virtual void UnloadResource   (const char* resource_name) = 0;

  protected:
    virtual ~ICustomServer () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Группа серверов ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
class ServerGroup
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    ServerGroup  (const char* name);
    ServerGroup  (const ServerGroup&);
    ~ServerGroup ();

    ServerGroup& operator = (const ServerGroup&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя группы
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    () const;
    void        SetName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление сервера ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (ICustomServer&);
    void Detach (ICustomServer&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Фильтры имён обрабатываемых ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Filters      () const;
    void        SetFilters   (const char* filters_string);    
    void        AddFilters   (const char* filters_string);
    void        ResetFilters ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание связывания с группой ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    Binding CreateBinding (const Group&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление кэшированием ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetCacheState (bool state);
    bool CacheState    () const;
    void EnableCache   () { SetCacheState (true); }
    void DisableCache  () { SetCacheState (false); }
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс неиспользуемых ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void FlushUnusedResources ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (ServerGroup&);
    
  private:
    struct Impl;  
  
    ServerGroup (Impl*);

  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (ServerGroup&, ServerGroup&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание ресурсного сервера с группой серверов
///////////////////////////////////////////////////////////////////////////////////////////////////
class ServerGroupAttachment: private ICustomServer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ServerGroupAttachment  (const char* name, ICustomServer& server);
    ~ServerGroupAttachment ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение группы и сервера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ICustomServer&   Server      () const;
    rms::ServerGroup ServerGroup () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление оповещениями
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void SetNotificationsState (bool state);
    bool NotificationsState    () const;
    void EnableNotifications   () { SetNotificationsState (true); }
    void DisableNotifications  () { SetNotificationsState (false); }

  private:
    ServerGroupAttachment (const ServerGroupAttachment&); //no impl
    ServerGroupAttachment& operator = (const ServerGroupAttachment&); //no impl

    void PrefetchResource (const char* resource_name);
    void LoadResource     (const char* resource_name);
    void UnloadResource   (const char* resource_name);

  private:
    rms::ServerGroup group;
    ICustomServer*   server;
    EventBatcher     event_batcher;
    bool             notifications_state;
};

}

}

#endif
