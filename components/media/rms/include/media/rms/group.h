#ifndef MEDIA_RMS_GROUP_HEADER
#define MEDIA_RMS_GROUP_HEADER

#include <cstddef>

#include <xtl/functional_fwd>

namespace media
{

namespace rms
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///События группы ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum GroupEvent
{
  GroupEvent_OnAdd,    //событие добавления нового ресурса в группу
  GroupEvent_OnRemove, //событие удаления ресурса из группы

  GroupEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Группа ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
class Group
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Group  ();
    Group  (const Group&);
    ~Group ();

    Group& operator = (const Group&);    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о группе
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool   IsEmpty () const; //пуста ли группа
    size_t Size    () const; //количество элементов в группе

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Item (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Add    (const char* name);
    void Remove (const char* name);
    void Add    (const Group&);
    void Remove (const Group&);    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка группы ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* resource_name)> EventHandler;

    xtl::connection RegisterEventHandler (GroupEvent event, const EventHandler&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Group&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Group&, Group&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание группы из списка файлов / файла ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
void   add_file_group    (const char* files, Group& group);
Group create_file_group (const char* files);

}

}

#endif
