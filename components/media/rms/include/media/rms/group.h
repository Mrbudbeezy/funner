#ifndef MEDIA_RMS_GROUP_HEADER
#define MEDIA_RMS_GROUP_HEADER

#include <cstddef>

#include <xtl/functional_fwd>

namespace media
{

namespace rms
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///События группы ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ResourceGroupEvent
{
  ResourceGroupEvent_OnAdd,    //событие добавления нового ресурса в группу
  ResourceGroupEvent_OnRemove, //событие удаления ресурса из группы

  ResourceGroupEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Группа ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
class ResourceGroup
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Элемент группы
///////////////////////////////////////////////////////////////////////////////////////////////////
    class IItem
    {
      public:
        virtual const char* Name () = 0;
        
      protected:
        virtual ~IItem () {}
    };

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    ResourceGroup  ();
    ResourceGroup  (const ResourceGroup&);
    ~ResourceGroup ();

    ResourceGroup& operator = (const ResourceGroup&);    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о группе
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool   IsEmpty () const; //пуста ли группа
    size_t Size    () const; //количество элементов в группе

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Item (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Add    (const char* name);
    void Remove (const char* name);
    void Add    (const ResourceGroup&);
    void Remove (const ResourceGroup&);    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка группы ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* resource_name)> EventHandler;

    xtl::connection RegisterEventHandler (ResourceGroupEvent event, const EventHandler&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (ResourceGroup&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (ResourceGroup&, ResourceGroup&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание группы из списка файлов / файла ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
void          add_file_group    (const char* files, ResourceGroup& group);
ResourceGroup create_file_group (const char* files);

}

}

#endif
