#ifndef MEDIA_RMS_SHARED_HEADER
#define MEDIA_RMS_SHARED_HEADER

#include <stl/algorithm>
#include <stl/hash_set>
#include <stl/hash_map>
#include <stl/vector>
#include <stl/auto_ptr.h>

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/ref.h>
#include <xtl/reference_counter.h>
#include <xtl/trackable.h>

#include <common/file.h>
#include <common/parser.h>
#include <common/singleton.h>
#include <common/string.h>
#include <common/strlib.h>

#include <media/rms/manager.h>

namespace media
{

namespace rms
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс управления связыванием
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICustomBinding
{
  public:
    virtual ~ICustomBinding () {}  

///////////////////////////////////////////////////////////////////////////////////////////////////
///Операции над связанными объектами
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Load     () = 0;
    virtual void Unload   () = 0;
    virtual void Prefetch () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение объекта, оповещающего об удалении текущего объекта (может быть 0)
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual xtl::trackable* GetTrackable () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Внутренний интерфейс группы серверов
///////////////////////////////////////////////////////////////////////////////////////////////////
class IServerGroupInstance
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя группы
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* Name () = 0;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение экземпляра
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ServerGroup Instance () = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~IServerGroupInstance () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация менеджера ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
class ResourceManagerImpl
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ResourceManagerImpl  ();
    ~ResourceManagerImpl ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание группы связывания
///////////////////////////////////////////////////////////////////////////////////////////////////
    Binding CreateBinding (const Group&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация группы ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RegisterServerGroup   (const char* name, IServerGroupInstance*);
    void UnregisterServerGroup (IServerGroupInstance*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск группы серверов
///////////////////////////////////////////////////////////////////////////////////////////////////
    IServerGroupInstance* FindServerGroup (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор групп
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                ServerGroupsCount () const;
    IServerGroupInstance* ServerGroup       (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс групп ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void FlushUnusedResources ();

  private:
    ResourceManagerImpl (const ResourceManagerImpl&); //no impl
    ResourceManagerImpl& operator = (const ResourceManagerImpl&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

typedef common::Singleton<ResourceManagerImpl> ResourceManagerSingleton;

}

}

#endif
