#ifndef MEDIALIB_COLLADA_GEOMETRY_HEADER
#define MEDIALIB_COLLADA_GEOMETRY_HEADER

#include <media/collada/collection.h>
#include <math/vector.h>
#include <xtl/intrusive_ptr.h>

namespace media
{

namespace collada
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовые атрибуты вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Vertex
{
  math::vec3f coord;    //координаты вершины
  math::vec3f normal;   //нормаль в вершине
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Атрибуты текстурирования вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
struct TexVertex
{
  math::vec3f coord;    //текстурные координаты вершины
  math::vec3f tangent;  //касательная в texture space
  math::vec3f binormal; //бинормаль в texture space
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о соединениях действующих на вершину (используется совместно с Skin)
///////////////////////////////////////////////////////////////////////////////////////////////////
struct VertexInfluence
{
  unsigned int first_weight;  //индекс первого веса соединения действиющего на вершину
  unsigned int weights_count; //количество весов соединений действующих на вершину
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum PrimitiveType
{
  PrimitiveType_LineList,      //список отрезков
  PrimitiveType_LineStrip,     //цепочка отрезков
  PrimitiveType_TriangleList,  //список треугольников
  PrimitiveType_TriangleStrip, //цепочка треугольников
  PrimitiveType_TriangleFan    //вейер треугольников
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поверхность
///////////////////////////////////////////////////////////////////////////////////////////////////
class Surface
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Каналы данных поверхности
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class T, class KeyT> class IChannelList
    {
      public:
        typedef KeyT Key;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество каналов
///////////////////////////////////////////////////////////////////////////////////////////////////      
        virtual unsigned int Size    () const = 0;
        virtual bool         IsEmpty () const = 0;
        
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание / удаление канала
///////////////////////////////////////////////////////////////////////////////////////////////////
        virtual unsigned int Create (Key name) = 0;
        virtual void         Remove (unsigned int channel) = 0;
        virtual void         Clear  () = 0;
        
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя канала
///////////////////////////////////////////////////////////////////////////////////////////////////
        virtual Key Name (unsigned int channel) const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск канала по имени. Возвращает номер канала, или -1 в случае неудачи
///////////////////////////////////////////////////////////////////////////////////////////////////
        virtual int Find (Key name) const = 0;
                
///////////////////////////////////////////////////////////////////////////////////////////////////
///Данные
///////////////////////////////////////////////////////////////////////////////////////////////////
        virtual       T* Data (unsigned int channel) = 0;
        virtual const T* Data (unsigned int channel) const = 0;

      protected:
        virtual ~IChannelList () {}
    };
    
    typedef IChannelList<TexVertex, unsigned int>      TexVertexChannelList;
    typedef IChannelList<math::vec3f, unsigned int>    ColorChannelList;
    typedef IChannelList<VertexInfluence, const char*> InfluenceChannelList;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Surface  (collada::PrimitiveType type, unsigned int verts_count, unsigned int indices_count);
    Surface  (const Surface&);
    ~Surface ();

    Surface& operator = (const Surface&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Surface Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя материала поверхности (данное имя должно передаваться в MaterialBinds::FindMaterial)
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Material    () const;
    void        SetMaterial (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    collada::PrimitiveType PrimitiveType () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество вершин и индексов
///////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int VerticesCount () const;
    unsigned int IndicesCount  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с вершинами
///////////////////////////////////////////////////////////////////////////////////////////////////
          Vertex* Vertices ();
    const Vertex* Vertices () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Индексы примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
          unsigned int* Indices ();
    const unsigned int* Indices () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с каналами вершинных цветов
///////////////////////////////////////////////////////////////////////////////////////////////////
          ColorChannelList& ColorChannels ();
    const ColorChannelList& ColorChannels () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с каналами текстурированных вершин
///////////////////////////////////////////////////////////////////////////////////////////////////
          TexVertexChannelList& TexVertexChannels ();
    const TexVertexChannelList& TexVertexChannels () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с каналами вершинных весов
///////////////////////////////////////////////////////////////////////////////////////////////////
          InfluenceChannelList& InfluenceChannels ();
    const InfluenceChannelList& InfluenceChannels () const;

  private:
    struct Impl;
    
    Surface (Impl*);
    
  private:
    xtl::intrusive_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Меш
///////////////////////////////////////////////////////////////////////////////////////////////////
class Mesh
{
  public:
    typedef ICollection<Surface> SurfaceList;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Mesh  ();
    Mesh  (const Mesh&);
    ~Mesh ();

    Mesh& operator = (const Mesh&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Mesh Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор меша
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Id    () const;
    void        SetId (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список поверхностей
///////////////////////////////////////////////////////////////////////////////////////////////////
          SurfaceList& Surfaces ();
    const SurfaceList& Surfaces () const;

  private:
    struct Impl;
    
    Mesh (Impl*);
    
  private:
    xtl::intrusive_ptr<Impl> impl;
};

}

}

#endif
