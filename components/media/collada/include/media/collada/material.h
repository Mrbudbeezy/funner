#ifndef MEDIALIB_COLLADA_MATERIAL_HEADER
#define MEDIALIB_COLLADA_MATERIAL_HEADER

#include <math/matrix.h>
#include <xtl/intrusive_ptr.h>

namespace media
{

namespace collada
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ShaderType
{
  ShaderType_Constant, //шейдер без интерполяции цвета по поверхности треугольника
  ShaderType_Lambert,  //модель освещения Ламберта
  ShaderType_Phong,    //модель освещения Фонга
  ShaderType_Blinn,    //модель освещения Блинна

  ShaderType_Default = ShaderType_Phong,

  ShaderType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметр эффекта
///////////////////////////////////////////////////////////////////////////////////////////////////
enum EffectParam
{
  EffectParam_Reflectivity,    //степень отражения
  EffectParam_Transparency,    //степень прозрачности
  EffectParam_RefractionIndex, //индекс преломления
  EffectParam_Shininess,       //степень "металличности"
  
  EffectParam_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Индекс доступных текстурных карт
///////////////////////////////////////////////////////////////////////////////////////////////////
enum TextureMap
{
  TextureMap_Diffuse,     //базовая текстура (рассеянное освещение)
  TextureMap_Ambient,     //текстура поглощения света
  TextureMap_Specular,    //текстура степени отражения света
  TextureMap_Transparent, //текстура прозрачности
  TextureMap_Emission,    //текстура эмиссии (self-illumination)
  TextureMap_Reflective,  //текстура карты отражения (env-map)
  TextureMap_Bump,        //текстура рельефа поверхности
  
  TextureMap_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
class Image
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Image  ();
    Image  (const Image&);
    ~Image ();

    Image& operator = (const Image&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Image Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор картинки
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Id    () const;
    void        SetId (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Путь к файлу
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Path    () const;
    void        SetPath (const char* path);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
class Texture
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Texture  ();
    Texture  (const Texture&);
    ~Texture ();
    
    Texture& operator = (const Texture&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Texture Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя картинки связанной с текстурой
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Image    () const;
    void        SetImage (const char* image_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вес текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
    float Amount    () const;
    void  SetAmount (float amount) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица преобразования текстурных координат
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f& Transform    () const;
    void               SetTransform (const math::mat4f&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя канала текстурных координат
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetTexcoordChannel (const char* name);
    const char* TexcoordChannel    () const;

  private:
    struct Impl;
    
    Texture (Impl*);
    
  private:
    xtl::intrusive_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Эффект
///////////////////////////////////////////////////////////////////////////////////////////////////
class Effect
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Effect  ();
    Effect  (const Effect&);
    ~Effect ();

    Effect& operator = (const Effect&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Effect Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор эффекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Id    () const;
    void        SetId (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    collada::ShaderType ShaderType    () const;
    void                SetShaderType (collada::ShaderType type);
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с текстурными картами
///////////////////////////////////////////////////////////////////////////////////////////////////
          bool              HasTexture (TextureMap) const;
          collada::Texture& Texture    (TextureMap);
    const collada::Texture& Texture    (TextureMap) const;
          void              SetTexture (TextureMap map, collada::Texture& texture);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с цветом карт
///////////////////////////////////////////////////////////////////////////////////////////////////    
    const math::vec4f& MapColor    (TextureMap map) const;
    void               SetMapColor (TextureMap map, const math::vec4f& color);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры эффекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    float Param    (EffectParam param) const;
    void  SetParam (EffectParam param, float value);

  private:
    struct Impl;
    
    Effect (Impl*);
    
  private:
    xtl::intrusive_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
class Material
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    explicit Material  ();
             Material  (const Material&);
             ~Material ();

    Material& operator = (const Material&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Material Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Id    () const;
    void        SetId (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Эффект связанный с материалом
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Effect    () const;
          void  SetEffect (const char* id);

  private:
    struct Impl;
    
    Material (Impl*);
    
  private:
    xtl::intrusive_ptr<Impl> impl;
};

}

}

#endif
