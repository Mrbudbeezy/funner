#ifndef MEDIALIB_COLLADA_ANIMATION_HEADER
#define MEDIALIB_COLLADA_ANIMATION_HEADER

#include <xtl/intrusive_ptr.h>

#include <media/collada/model.h>

namespace media
{

namespace collada
{

template <class T>
struct AnimationSampleBase
{
  float time;
  T     value;
};

enum AnimationChannelSemantic
{
  AnimationChannelSemantic_Transform
};

template <AnimationChannelSemantic semantic>
struct AnimationSample;

template <> struct AnimationSample <AnimationChannelSemantic_Transform> : public AnimationSampleBase <math::mat4f> {};

typedef AnimationSample <AnimationChannelSemantic_Transform> AnimationSampleTransform;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Канал анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
class AnimationChannel
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    AnimationChannel  (AnimationChannelSemantic semantic);
    AnimationChannel  (const AnimationChannel&);
    ~AnimationChannel ();

    AnimationChannel& operator = (const AnimationChannel&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    AnimationChannel Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя анимируемого объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* TargetName    () const;
    void        SetTargetName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя анимируемого параметра
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ParameterName    () const;
    void        SetParameterName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Семантика анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    AnimationChannelSemantic Semantic () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимационный трек
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetSamplesCount (size_t new_size);
    size_t SamplesCount    () const;

    template <class Sample>       Sample* Samples ();
    template <class Sample> const Sample* Samples () const;

  private:
    struct Impl;

    AnimationChannel (Impl*);

  private:
    xtl::intrusive_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимация
///////////////////////////////////////////////////////////////////////////////////////////////////
class Animation
{
  public:
    typedef ICollection<AnimationChannel> AnimationChannelList;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Animation  ();
    Animation  (const Animation&);
    ~Animation ();

    Animation& operator = (const Animation&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Animation Clone () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Id    () const;
    void        SetId (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список дочерних анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
          AnimationList& Animations ();
    const AnimationList& Animations () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список каналов анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
          AnimationChannelList& Channels ();
    const AnimationChannelList& Channels () const;

  private:
    struct Impl;
    
    Animation (Impl*);
    
  private:
    xtl::intrusive_ptr<Impl> impl;
};

}

}

#endif
