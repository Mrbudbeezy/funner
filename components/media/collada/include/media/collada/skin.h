#ifndef MEDIALIB_COLLADA_SKIN_HEADER
#define MEDIALIB_COLLADA_SKIN_HEADER

#include <math/mathlib.h>
#include <xtl/intrusive_ptr.h>

namespace media
{

namespace collada
{

struct VertexJointWeight
{
  int   joint;
  float weight;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///—кин
///////////////////////////////////////////////////////////////////////////////////////////////////
class Skin
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
/// онструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Skin  ();
    Skin  (const Skin&);
    ~Skin ();
    
    Skin& operator = (const Skin&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///—оздание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Skin Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///»дентификатор скина
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Id    () const;
    void        SetId (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///ћатрица фигуры 
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f& BindShapeMatrix    () const;
    void               SetBindShapeMatrix (const math::mat4f&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///–абота с соединени€ми
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t             JointsCount       () const;                            //количество соединений
    size_t             CreateJoint       (const char* name);                  //создание соединени€
    void               RemoveJoint       (size_t joint);                      //удаление соединени€
    void               RemoveAllJoints   ();                                  //удаление всех соединений
    void               SetJointInvMatrix (size_t joint, const math::mat4f& invTM); //установка обратной матрицы соединени€
    const math::mat4f& JointInvMatrix    (size_t joint) const;                //получение обратной матрицы соединени€
    int                FindJoint         (const char* name) const;            //возвращает номер соединени€ по имени или -1 в случае неудачи
    const char*        JointName         (size_t joint) const;                //им€ соединени€
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Ѕазовый меш / морф
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* BaseMesh    () const;
    void        SetBaseMesh (const char* mesh);    

///////////////////////////////////////////////////////////////////////////////////////////////////
///¬еса соединений
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t WeightsCount  () const;
    void   WeightsResize (size_t new_size);

          VertexJointWeight* Weights ();          
    const VertexJointWeight* Weights () const;

  private:
    struct Impl;
    
    Skin (Impl*);
    
  private:
    xtl::intrusive_ptr<Impl> impl;
};

}

}

#endif
