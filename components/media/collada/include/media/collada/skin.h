#ifndef MEDIALIB_COLLADA_SKIN_HEADER
#define MEDIALIB_COLLADA_SKIN_HEADER

#include <math/matrix.h>
#include <xtl/intrusive_ptr.h>

namespace media
{

namespace collada
{

struct VertexJointWeight
{
  int   joint;
  float weight;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Скин
///////////////////////////////////////////////////////////////////////////////////////////////////
class Skin
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Skin  ();
    Skin  (const Skin&);
    ~Skin ();
    
    Skin& operator = (const Skin&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Skin Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор скина
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Id    () const;
    void        SetId (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица фигуры 
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f& BindShapeMatrix    () const;
    void               SetBindShapeMatrix (const math::mat4f&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с соединениями
///////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int       JointsCount       () const;                                       //количество соединений
    unsigned int       CreateJoint       (const char* name);                             //создание соединения
    void               RemoveJoint       (unsigned int joint);                           //удаление соединения
    void               RemoveAllJoints   ();                                             //удаление всех соединений
    void               SetJointInvMatrix (unsigned int joint, const math::mat4f& invTM); //установка обратной матрицы соединения
    const math::mat4f& JointInvMatrix    (unsigned int joint) const;                     //получение обратной матрицы соединения
    int                FindJoint         (const char* name) const;                       //возвращает номер соединения по имени или -1 в случае неудачи
    const char*        JointName         (unsigned int joint) const;                     //имя соединения
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый меш / морф
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* BaseMesh    () const;
    void        SetBaseMesh (const char* mesh);    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Веса соединений
///////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int WeightsCount  () const;
    void         WeightsResize (unsigned int new_size);

          VertexJointWeight* Weights ();          
    const VertexJointWeight* Weights () const;

  private:
    struct Impl;
    
    Skin (Impl*);
    
  private:
    xtl::intrusive_ptr<Impl> impl;
};

}

}

#endif
