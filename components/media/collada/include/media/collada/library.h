#ifndef MEDIALIB_COLLADA_LIBRARY_HEADER
#define MEDIALIB_COLLADA_LIBRARY_HEADER

#include <cstddef>

namespace xtl
{

//forward declaration
template <class T> class iterator;

}

namespace media
{

namespace collada
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека ресурсов коллады
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Item> class ILibrary
{
  public:
    typedef xtl::iterator<Item>       Iterator;
    typedef xtl::iterator<const Item> ConstIterator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество элементов в библиотеке / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Size    () const = 0;
    virtual bool   IsEmpty () const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к элементу по имени (в случае отсутствия - исключение)
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Item&       operator [] (const char* id) = 0;
    virtual const Item& operator [] (const char* id) const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск элемента по имени (в случае отсутствия возвращает 0)
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Item*       Find (const char* id) = 0;
    virtual const Item* Find (const char* id) const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Iterator      CreateIterator () = 0;
    virtual ConstIterator CreateIterator () const = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени хранимого ресурса
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* ItemId (const ConstIterator&) const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление элементов в библиотеку
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Insert (const char* id, Item& item) = 0;
    virtual void Remove (const char* id) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////    
    virtual void Clear () = 0;

  protected:
    virtual ~ILibrary () {}
};

}

}

#endif
