#ifndef MEDIALIB_COLLADA_COLLECTION_HEADER
#define MEDIALIB_COLLADA_COLLECTION_HEADER

#include <cstddef>

namespace xtl
{

//forward declaration
template <class T> class iterator;

}

namespace media
{

namespace collada
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Коллекция
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Item> class ICollection
{
  public:
    typedef xtl::iterator<Item>       Iterator;
    typedef xtl::iterator<const Item> ConstIterator;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество элементов / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Size    () const = 0;
    virtual bool   IsEmpty () const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к элементу по индексу
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Item&       operator [] (size_t index) = 0;
    virtual const Item& operator [] (size_t index) const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Iterator      CreateIterator () = 0;
    virtual ConstIterator CreateIterator () const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование элементов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Capacity () const = 0;
    virtual void   Reserve  (size_t count) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление элементов в коллекцию
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Add (const Item&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление элементов из коллекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Remove (size_t index) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка коллекции
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Clear () = 0;
    
  protected:
    virtual ~ICollection () {}
};

}

}

#endif
