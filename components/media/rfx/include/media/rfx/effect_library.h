#ifndef MEDIALIB_RFX_EFFECT_LIBRARY_HEADER
#define MEDIALIB_RFX_EFFECT_LIBRARY_HEADER

#include <stl/auto_ptr.h>
#include <media/rfx/effect.h>
#include <common/serializer_manager.h>

namespace xtl
{

//forward decalration
template <class T> class iterator;

}

namespace media
{

namespace rfx
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
class EffectLibrary
{
  public:
    typedef xtl::iterator<Effect>       Iterator;
    typedef xtl::iterator<const Effect> ConstIterator;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    EffectLibrary  ();
    EffectLibrary  (const char* file_name);
    EffectLibrary  (const EffectLibrary&);
    ~EffectLibrary ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    EffectLibrary& operator = (const EffectLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    () const;
    void        SetName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество материалов в библиотеке / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size    () const;
    bool   IsEmpty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      CreateIterator ();
    ConstIterator CreateIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение идентификатора материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ItemId (const ConstIterator&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск
///////////////////////////////////////////////////////////////////////////////////////////////////
          Effect* Find (const char* name);
    const Effect* Find (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach    (const char* id, const Effect& effect);
    void Detach    (const char* id); //no throw
    void DetachAll ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / сохранение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);
    void Save (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (EffectLibrary&);
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (EffectLibrary&, EffectLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер библиотек материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef common::ResourceSerializerManager
<
  void (const char* file_name, EffectLibrary& library),
  void (const char* file_name, const EffectLibrary& library)
> EffectLibraryManager;

}

}

#endif
