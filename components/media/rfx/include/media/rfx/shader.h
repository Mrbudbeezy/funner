#ifndef MEDIALIB_RFX_SHADER_HEADER
#define MEDIALIB_RFX_SHADER_HEADER

#include <common/serializer_manager.h>

namespace media
{

namespace rfx
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Шейдер
///////////////////////////////////////////////////////////////////////////////////////////////////
class Shader
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Shader  ();
    Shader  (const Shader&);
    ~Shader ();
    
    Shader& operator = (const Shader&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Shader Clone () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    () const;
    void        SetName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Профиль шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Profile    () const;
    void        SetProfile (const char* profile);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Исходный код и его полный размер (не включая завершающий '\0')
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* SourceCode     () const;
    size_t      SourceCodeSize () const;
    void        SetSourceCode  (const char* source);
    void        SetSourceCode  (const char* source, size_t size);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Shader&);

  private:
    struct Impl;
    
    Shader (Impl*);
    
  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Shader&, Shader&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер сериализации шейдеров
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef common::ResourceSerializerManager<
  void (const char* file_name, Shader& shader),
  void (const char* file_name, const Shader& shader)
> ShaderManager;

}

}

#endif

