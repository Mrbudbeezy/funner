#ifndef MEDIALIB_RFX_SHADER_LIBRARY_HEADER
#define MEDIALIB_RFX_SHADER_LIBRARY_HEADER

#include <media/rfx/shader.h>

namespace xtl
{

//forward decalration
template <class T> class iterator;

}

namespace media
{

namespace rfx
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
class ShaderLibrary
{
  public:
    typedef xtl::iterator<Shader>       Iterator;
    typedef xtl::iterator<const Shader> ConstIterator;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderLibrary  ();
    ShaderLibrary  (const ShaderLibrary&);
    ~ShaderLibrary ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderLibrary& operator = (const ShaderLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество шейдеров в библиотеке / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size    () const;
    bool   IsEmpty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      CreateIterator ();
    ConstIterator CreateIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение идентификатора шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ItemId (const ConstIterator&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск
///////////////////////////////////////////////////////////////////////////////////////////////////
          Shader* Find (const char* name, const char* profile);
    const Shader* Find (const char* name, const char* profile) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach    (const char* id, const Shader& Shader);
    void Detach    (const char* id); //no throw
    void Detach    (const char* id, const char* profile);
    void DetachAll ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка шейдеров
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* message)> LogHandler;

    void Load (const char* file_mask);
    void Load (const char* file_mask, const LogHandler& log_handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (ShaderLibrary&);
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (ShaderLibrary&, ShaderLibrary&);

}

}

#endif
