#ifndef MEDIALIB_RFX_COMMON_MATERIAL_HEADER
#define MEDIALIB_RFX_COMMON_MATERIAL_HEADER

#include <media/rfx/material.h>
#include <media/rfx/texmap.h>
#include <mathlib.h>

namespace media
{

namespace rfx
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Уравнение смешивания цветов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum BlendEquation
{
  BlendEquation_Add,                //arg1 + arg2
  BlendEquation_Subtraction,        //arg1 - arg2
  BlendEquation_ReverseSubtraction, //arg2 - arg1
  BlendEquation_Min,                //min (arg1, arg2)
  BlendEquation_Max,                //max (arg1, arg2)
  
  BlendEquation_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Аргумент смешивания цветов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum BlendArgument
{
  BlendArgument_Zero,                    //0
  BlendArgument_One,                     //1
  BlendArgument_SourceColor,             //цвет источника
  BlendArgument_SourceAlpha,             //альфа источника
  BlendArgument_InverseSourceColor,      //1 - цвет источника
  BlendArgument_InverseSourceAlpha,      //1 - альфа источника
  BlendArgument_DestinationColor,        //цвет приёмника
  BlendArgument_DestinationAlpha,        //альфа приёмника
  BlendArgument_InverseDestinationColor, //1 - цвет приёмника
  BlendArgument_InverseDestinationAlpha, //1 - альфа приёмника
  
  BlendArgument_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Функция смешивания цветов
///////////////////////////////////////////////////////////////////////////////////////////////////
struct BlendFunction
{
  BlendEquation equation;     //уравнение смешивания цветов
  BlendArgument argument [2]; //аргументы
  
  BlendFunction (BlendEquation, BlendArgument, BlendArgument);
};

BlendFunction make_blend_filter   (); //src_color * src_alpha + dst_color * (1 - src_alpha)
BlendFunction make_blend_additive (); //src_color + dst_color
BlendFunction make_blend_solid    (); //src_color

///////////////////////////////////////////////////////////////////////////////////////////////////
///Функция сравнения
///////////////////////////////////////////////////////////////////////////////////////////////////
enum CompareMode
{
  CompareMode_AlwaysFail,   //результат сравнения всегда ложь
  CompareMode_AlwaysPass,   //результат сравнения всегда истина
  CompareMode_Equal,        //new_value == reference_value
  CompareMode_NotEqual,     //new_value != reference_value
  CompareMode_Less,         //new_value <  reference_value
  CompareMode_LessEqual,    //new_value <= reference_value
  CompareMode_Greater,      //new_value >  reference_value
  CompareMode_GreaterEqual, //new_value >= reference_value
  
  CompareMode_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum CommonMaterialShaderType
{
  CommonMaterialShaderType_Flat,    //сплошная заливка
  CommonMaterialShaderType_Gourand, //заливка по Гуро
  CommonMaterialShaderType_Phong,   //заливка по Фонгу
  
  CommonMaterialShaderType_Default = CommonMaterialShaderType_Gourand,
  
  CommonMaterialShaderType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвета слоя
///////////////////////////////////////////////////////////////////////////////////////////////////
enum CommonMaterialColor
{
  CommonMaterialColor_Ambient,   //цвет поглощения
  CommonMaterialColor_Diffuse,   //цвет рассеивания
  CommonMaterialColor_Specular,  //цвет отражения
  CommonMaterialColor_Emission,  //цвет излучения 
  
  CommonMaterialColor_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текстурные карты, используемые шейдером
///////////////////////////////////////////////////////////////////////////////////////////////////
enum CommonMaterialMap
{
  CommonMaterialMap_Diffuse,     //базовая текстура (рассеянное освещение)
  CommonMaterialMap_Ambient,     //текстура поглощения света
  CommonMaterialMap_Specular,    //текстура степени отражения света
  CommonMaterialMap_Transparent, //текстура прозрачности
  CommonMaterialMap_Emission,    //текстура эмиссии (self-illumination)
  CommonMaterialMap_Reflective,  //текстура карты отражения (env-map)
  CommonMaterialMap_Bump,        //текстура рельефа поверхности

  CommonMaterialMap_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние карты
///////////////////////////////////////////////////////////////////////////////////////////////////
enum MapState
{
  MapState_Disabled, //карта запрещена
  MapState_Enabled   //карта разрешена
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Логические свойства материала
///////////////////////////////////////////////////////////////////////////////////////////////////
enum CommonMaterialPin
{
  CommonMaterialPin_TwoSided,       //двусторонний материал
  CommonMaterialPin_Wireframe,      //проволочное представление
  CommonMaterialPin_Lighting,       //освещение
  CommonMaterialPin_CastShadows,    //геометрия, связанная с материалом, отбрасывает тень
  CommonMaterialPin_ReceiveShadows, //геометрия, связанная с материалом, принимает тень
  CommonMaterialPin_SelfShadow,     //самозатенение геометрии

  CommonMaterialPin_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени
///////////////////////////////////////////////////////////////////////////////////////////////////
const char* get_name (BlendEquation);
const char* get_name (BlendArgument);
const char* get_name (CompareMode);
const char* get_name (CommonMaterialShaderType);
const char* get_name (CommonMaterialColor);
const char* get_name (CommonMaterialMap);
const char* get_name (CommonMaterialPin);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Общий материал 
///////////////////////////////////////////////////////////////////////////////////////////////////
class CommonMaterial: public Material
{
  public:
    typedef xtl::com_ptr<CommonMaterial>       Pointer;
    typedef xtl::com_ptr<const CommonMaterial> ConstPointer;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    CommonMaterialShaderType ShaderType    () const;
    void                     SetShaderType (CommonMaterialShaderType);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с логическими свойствами
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsEnabled (CommonMaterialPin) const;
    void SetPin    (CommonMaterialPin pin, bool state);
    void Enable    (CommonMaterialPin pin) { SetPin (pin, true); }
    void Disable   (CommonMaterialPin pin) { SetPin (pin, false); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвета
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::vec3f& Color    (CommonMaterialColor color_id) const;
    void               SetColor (CommonMaterialColor color_id, const math::vec3f& color);
    void               SetColor (CommonMaterialColor color_id, float red, float green, float blue);

///////////////////////////////////////////////////////////////////////////////////////////////////
///"Металличность"
///////////////////////////////////////////////////////////////////////////////////////////////////
    float Shininess    () const;
    void  SetShininess (float value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Прозрачность
///////////////////////////////////////////////////////////////////////////////////////////////////
    float Transparency    () const;
    void  SetTransparency (float value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройка режима смешивания цветов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const BlendFunction& Blend    () const;
    void                 SetBlend (const BlendFunction&);
    void                 SetBlend (BlendEquation equation, BlendArgument src_argument, BlendArgument dst_argument);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройка альфа-отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetAlphaTestMode      (CompareMode mode);
    void        SetAlphaTestReference (float alpha_reference);
    void        SetAlphaTest          (CompareMode mode, float alpha_reference);
    CompareMode AlphaTestMode         () const;
    float       AlphaTestReference    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текстурные карты
///////////////////////////////////////////////////////////////////////////////////////////////////
    const Texmap& Map (CommonMaterialMap map) const;
          Texmap& Map (CommonMaterialMap map);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Веса текстурных карт
///////////////////////////////////////////////////////////////////////////////////////////////////
    float MapWeight    (CommonMaterialMap map) const;
    void  SetMapWeight (CommonMaterialMap map, float weight);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Разрешение / запрещение текстурных карт
///////////////////////////////////////////////////////////////////////////////////////////////////
    rfx::MapState MapState    (CommonMaterialMap map) const;
    void          SetMapState (CommonMaterialMap map, rfx::MapState state);

    bool IsMapEnabled (CommonMaterialMap map) const { return MapState (map)  == MapState_Enabled; }
    void EnableMap    (CommonMaterialMap map)       { SetMapState (map, MapState_Enabled);        }
    void DisableMap   (CommonMaterialMap map)       { SetMapState (map, MapState_Disabled);       }

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    CommonMaterial  ();
    CommonMaterial  (const CommonMaterial&);
    ~CommonMaterial ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамическая диспетчеризация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация копирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    Material* CloneCore () const;

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

#include <media/rfx/detail/blend.inl>

}

}

#endif
