#ifndef MEDIALIB_RFX_SPRITE_MATERIAL_HEADER
#define MEDIALIB_RFX_SPRITE_MATERIAL_HEADER

#include <media/rfx/material.h>

namespace media
{

namespace rfx
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим смешивания цветов спрайтового материала
///////////////////////////////////////////////////////////////////////////////////////////////////
enum SpriteBlendMode
{
  SpriteBlendMode_None,        //без смешивания
  SpriteBlendMode_Translucent, //полупрозрачность
  SpriteBlendMode_Mask,        //наложение по маске - спрайт является маской при наложении
  SpriteBlendMode_Additive,    //аддитивное наложение
  SpriteBlendMode_AlphaClamp,  //альфа-отсечение

  SpriteBlendMode_Num   
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение строкового имени
///////////////////////////////////////////////////////////////////////////////////////////////////
const char* get_name (SpriteBlendMode);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Спрайтовый материал
///////////////////////////////////////////////////////////////////////////////////////////////////
class SpriteMaterial: public Material
{
  public:
    typedef xtl::com_ptr<SpriteMaterial>       Pointer;
    typedef xtl::com_ptr<const SpriteMaterial> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя базового изображения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetImage (const char* image_name);
    const char* Image    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим смешивания цветов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void            SetBlendMode (SpriteBlendMode);
    SpriteBlendMode BlendMode    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Включение / выключение тайлинга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetTiling     (bool state);
    bool IsTiled       () const;
    void EnableTiling  () { SetTiling (true);  }
    void DisableTiling () { SetTiling (false); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройка тайлинга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetTileSize (size_t width, size_t height);
    size_t TileWidth   () const;
    size_t TileHeight  () const;
    
  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SpriteMaterial  ();
    SpriteMaterial  (const SpriteMaterial&);
    ~SpriteMaterial ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамическая диспетчеризация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);

  private:
    Material* CloneCore () const;

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

#endif
