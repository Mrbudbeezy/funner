#ifndef MEDIALIB_RFX_EFFECT_HEADER
#define MEDIALIB_RFX_EFFECT_HEADER

#include <common/property_map.h>

namespace media
{

namespace rfx
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проход техники рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class TechniquePass
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    TechniquePass  ();
    TechniquePass  (const TechniquePass&);
    ~TechniquePass ();
    
    TechniquePass& operator = (const TechniquePass&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    TechniquePass Clone () const;
 
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства прохода - параметры рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
          common::PropertyMap& Properties ();
    const common::PropertyMap& Properties () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (TechniquePass&);
    
  private:
    struct Impl;  
  
    TechniquePass (Impl*);

  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (TechniquePass&, TechniquePass&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Техника рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Technique
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Technique  ();
    Technique  (const Technique&);
    ~Technique ();
    
    Technique& operator = (const Technique&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Technique Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя техники
///////////////////////////////////////////////////////////////////////////////////////////////////  
    const char* Name    () const;
    void        SetName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество проходов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t PassesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проходы
///////////////////////////////////////////////////////////////////////////////////////////////////
          TechniquePass& Pass (size_t index);
    const TechniquePass& Pass (size_t index) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление и удаление проходов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddPass         (const TechniquePass&);
    void   RemovePass      (size_t index);
    void   RemoveAllPasses ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства техники - параметры рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
          common::PropertyMap& Properties ();
    const common::PropertyMap& Properties () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Technique&);
    
  private:
    struct Impl;
    
    Technique (Impl*);

  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Technique&, Technique&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Типы параметра эффекта
///////////////////////////////////////////////////////////////////////////////////////////////////
enum EffectParameterType
{
  EffectParameterType_Int,      //целое число
  EffectParameterType_Float,    //вещественное число
  EffectParameterType_Int2,     //вектор из 2-х целых чисел
  EffectParameterType_Float2,   //вектор из 2-х вещественных чисел
  EffectParameterType_Int3,     //вектор из 3-х целых чисел
  EffectParameterType_Float3,   //вектор из 3-х вещественных чисел
  EffectParameterType_Int4,     //вектор из 4-х целых чисел
  EffectParameterType_Float4,   //вектор из 4-х вещественных чисел
  EffectParameterType_Float2x2, //матрица 2x2 вещественных чисел
  EffectParameterType_Float3x3, //матрица 3x3 вещественных чисел
  EffectParameterType_Float4x4, //матрица 4x4 вещественных чисел

  EffectParameterType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя типа параметр эффекта
///////////////////////////////////////////////////////////////////////////////////////////////////
const char* get_name (EffectParameterType);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметр эффекта
///////////////////////////////////////////////////////////////////////////////////////////////////
class EffectParameter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    EffectParameter  ();
    EffectParameter  (const EffectParameter&);
    ~EffectParameter ();

    EffectParameter& operator = (const EffectParameter&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    EffectParameter Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя параметра
///////////////////////////////////////////////////////////////////////////////////////////////////    
    const char* Name    () const;
    void        SetName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип параметра
///////////////////////////////////////////////////////////////////////////////////////////////////        
    EffectParameterType Type    () const;
    void                SetType (EffectParameterType type);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество элементов указанного типа в параметре
///////////////////////////////////////////////////////////////////////////////////////////////////        
    size_t ElementsCount    () const;
    void   SetElementsCount (size_t count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (EffectParameter&);

  private:
    struct Impl;
    
    EffectParameter (Impl*);
    
  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (EffectParameter&, EffectParameter&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Эффект рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Effect
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Effect  ();
    Effect  (const Effect&);
    ~Effect ();

    Effect& operator = (const Effect&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Effect Clone () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя эффекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name () const;
    void        SetName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество техник
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t TechniquesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор техник
///////////////////////////////////////////////////////////////////////////////////////////////////
          rfx::Technique& Technique (size_t index);
    const rfx::Technique& Technique (size_t index) const;
          rfx::Technique& Technique (const char* name);
    const rfx::Technique& Technique (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск техник
///////////////////////////////////////////////////////////////////////////////////////////////////
    int FindTechnique (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление и удаление техник
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddTechnique        (const rfx::Technique&);
    void   RemoveTechnique     (size_t index);
    void   RemoveTechnique     (const char* name);
    void   RemoveAllTechniques ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t ParametersCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
          EffectParameter& Parameter (size_t index);
    const EffectParameter& Parameter (size_t index) const;
          EffectParameter& Parameter (const char* name);
    const EffectParameter& Parameter (const char* name) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
    int FindParameter (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление и удаление параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddParameter        (const EffectParameter& param);
    void   RemoveParameter     (size_t index);
    void   RemoveParameter     (const char* name);
    void   RemoveAllParameters ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства эффекта - параметры рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
          common::PropertyMap& Properties ();
    const common::PropertyMap& Properties () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Effect&);

  private:
    struct Impl;
    
    Effect (Impl*);
    
  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Effect&, Effect&);

}

}

#endif
