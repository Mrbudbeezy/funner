#ifndef MEDIALIB_RFX_MATERIAL_HEADER
#define MEDIALIB_RFX_MATERIAL_HEADER

#include <xtl/intrusive_ptr.h>
#include <xtl/functional_fwd>
#include <stl/auto_ptr.h>

namespace media
{

namespace rfx
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Логические свойства материала
///////////////////////////////////////////////////////////////////////////////////////////////////
enum MaterialPin
{
  MaterialPin_TwoSided,       //двусторонний материал
  MaterialPin_Wireframe,      //проволочное представление
  MaterialPin_Lighting,       //освещение
  MaterialPin_CastShadows,    //геометрия, связанная с материалом, отбрасывает тень
  MaterialPin_ReceiveShadows, //геометрия, связанная с материалом, принимает тень
  MaterialPin_SelfShadow,     //самозатенение геометрии

  MaterialPin_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени пина
///////////////////////////////////////////////////////////////////////////////////////////////////
const char* get_name (MaterialPin);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
class Material
{  
  public:
    typedef xtl::com_ptr<Material>       Pointer;
    typedef xtl::com_ptr<const Material> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Pointer Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name     () const;
    size_t      NameHash () const;
    void        Rename   (const char*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка группы сортировки материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetSortGroup (int group);
    int  SortGroup    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с логическими свойствами
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsEnabled (MaterialPin) const;
    void SetPin    (MaterialPin pin, bool state);
    void Enable    (MaterialPin pin) { SetPin (pin, true); }
    void Disable   (MaterialPin pin) { SetPin (pin, false); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамическая диспетчеризация
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::basic_visitor<void> Visitor;

    void Accept (Visitor&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  () const;
    void Release () const;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация динамической диспетчеризации
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AcceptCore (Visitor&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Попытка диспетчеризации
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class T> static bool TryAccept (T&, Visitor&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
            Material  ();
            Material  (const Material&);
    virtual ~Material ();

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация копирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Material* CloneCore () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////      
    Material& operator = (const Material&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

#include <media/rfx/detail/material.inl>

}

}

#endif
