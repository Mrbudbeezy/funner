#ifndef MEDIALIB_RFX_MATERIAL_HEADER
#define MEDIALIB_RFX_MATERIAL_HEADER

#include <common/property_map.h>

namespace media
{

namespace rfx
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
class Material
{  
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Material  ();
    Material  (const Material&);
    ~Material ();

    Material& operator = (const Material&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Material Clone () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name     () const;
    void        SetName  (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя эффекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetEffect (const char* name);
    const char* Effect    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    common::PropertyMap Properties () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Material&);

  private:
    struct Impl;
    
    Material (Impl*);
    
  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Material&, Material&);

}

}

#endif
