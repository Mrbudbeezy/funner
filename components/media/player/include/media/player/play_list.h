#ifndef MEDIALIB_PLAYER_PLAY_LIST_HEADER
#define MEDIALIB_PLAYER_PLAY_LIST_HEADER

#include <cstddef>

namespace media

namespace player
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список проигрывания
///////////////////////////////////////////////////////////////////////////////////////////////////
class PlayList
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    PlayList  ();
    PlayList  (const PlayList&);
    ~PlayList ();
    
    PlayList& operator = (const PlayList&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    PlayList Clone () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество источников
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение источников
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char** Items () const;
    const char*  Item  (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление и удаление источников
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddSource    (const char* source_name);
    void   RemoveSource (size_t source_index);
    void   RemoveSource (const char* source_name); //all sources
    void   Clear        ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (PlayList&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (PlayList&, PlayList&);

}

}

#endif
