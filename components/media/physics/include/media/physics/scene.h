#ifndef MEDIA_PHYSICS_SCENE_HEADER
#define MEDIA_PHYSICS_SCENE_HEADER

#include <cstddef>

#include <math/vector.h>

#include <media/physics/collection.h>
#include <media/physics/collision_filter.h>

namespace media
{

namespace physics
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сцена
///////////////////////////////////////////////////////////////////////////////////////////////////
class Scene
{
  public:
    typedef PhysicsLibraryOrderedCollection<CollisionFilter> CollisionFilterCollection;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Scene  ();
    Scene  (const Scene&);
    ~Scene ();

    Scene& operator = (const Scene&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Scene Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение коллекций фильтров коллизий
///////////////////////////////////////////////////////////////////////////////////////////////////
    const CollisionFilterCollection& CollisionFilters () const;
          CollisionFilterCollection& CollisionFilters ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Гравитация
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::vec3f& Gravity    () const;
    void               SetGravity (const math::vec3f& gravity);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Точность симуляции
///////////////////////////////////////////////////////////////////////////////////////////////////
    float SimulationStep    () const;
    void  SetSimulationStep (float value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Scene&);

  private:
    struct Impl;
    Impl* impl;

  private:
    Scene (Impl* impl);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Scene&, Scene&);

}

}

#endif
