#ifndef MEDIALIB_PHYSICS_TRIANGLE_MESH_SHAPE_DATA_HEADER
#define MEDIALIB_PHYSICS_TRIANGLE_MESH_SHAPE_DATA_HEADER

#include <math/vector.h>

namespace media
{

namespace physics
{

typedef size_t TriangleIndices [3];

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание тела в виде выпуклого многогранника
///////////////////////////////////////////////////////////////////////////////////////////////////
class TriangleMeshShapeData
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы, деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    TriangleMeshShapeData  ();
    TriangleMeshShapeData  (const TriangleMeshShapeData&);
    ~TriangleMeshShapeData ();

    TriangleMeshShapeData& operator = (const TriangleMeshShapeData&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Является ли выпуклым многогранником
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsConvex  () const;
    void SetConvex (bool convex);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с вершинами
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t VerticesCount    () const;
    void   SetVerticesCount (size_t count);

    const math::vec3f* Vertices () const;
          math::vec3f* Vertices ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с индексами
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t TrianglesCount    () const;
    void   SetTrianglesCount (size_t count);

    const TriangleIndices* Triangles () const;
          TriangleIndices* Triangles ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (TriangleMeshShapeData&);

  private:
    struct Impl;
    Impl* impl;
};

void swap (TriangleMeshShapeData&, TriangleMeshShapeData&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система управления шрифтами
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef common::ResourceSerializerManager<void (const char* file_name, TriangleMeshShapeData& data),
                                          void (const char* file_name, const TriangleMeshShapeData& data)> TriangleMeshShapeDataManager;

}

}

#endif
