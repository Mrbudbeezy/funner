#ifndef MEDIALIB_PHYSICS_RIGID_BODY_HEADER
#define MEDIALIB_PHYSICS_RIGID_BODY_HEADER

#include <math/quat.h>
#include <math/vector.h>

#include <media/physics/material.h>
#include <media/physics/shape.h>

namespace media
{

namespace physics
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги поведения тела
///////////////////////////////////////////////////////////////////////////////////////////////////
enum RigidBodyFlag
{
  RigidBodyFlag_FrozenPositionX = 1,                   //Не передвигается по оси Х
  RigidBodyFlag_FrozenPositionY = 1 << 1,              //Не передвигается по оси Y
  RigidBodyFlag_FrozenPositionZ = 1 << 2,              //Не передвигается по оси Z
  RigidBodyFlag_FrozenPosition  = RigidBodyFlag_FrozenPositionX | RigidBodyFlag_FrozenPositionY | RigidBodyFlag_FrozenPositionZ,
  RigidBodyFlag_FrozenRotationX = 1 << 3,              //Не вращается вокруг оси Х
  RigidBodyFlag_FrozenRotationY = 1 << 4,              //Не вращается вокруг оси Y
  RigidBodyFlag_FrozenRotationZ = 1 << 5,              //Не вращается вокруг оси Z
  RigidBodyFlag_FrozenRotation  = RigidBodyFlag_FrozenRotationX | RigidBodyFlag_FrozenRotationY | RigidBodyFlag_FrozenRotationZ,
  RigidBodyFlag_Kinematic       = 1 << 6,              //Другие объекты отталкиваются от тела не оказывая на него влияния
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Твердое тело
///////////////////////////////////////////////////////////////////////////////////////////////////
class RigidBody
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    RigidBody  ();
    RigidBody  (const RigidBody&);
    ~RigidBody ();

    RigidBody& operator = (const RigidBody&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    RigidBody Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя тела
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Масса
///////////////////////////////////////////////////////////////////////////////////////////////////
    float Mass    () const;
    void  SetMass (float mass);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление центром масс
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::vec3f&  CenterOfMassPosition       () const;
    void                SetCenterOfMassPosition    (const math::vec3f& center);
    const math::quatf&  CenterOfMassOrientation    () const;
    void                SetCenterOfMassOrientation (const math::quatf& orientation);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление тензором
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::vec3f&  MassSpaceInertiaTensor    () const;
    void                SetMassSpaceInertiaTensor (const math::vec3f& tensor);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Геометрическое тело
///////////////////////////////////////////////////////////////////////////////////////////////////
    const media::physics::Shape& Shape    () const;
    void                         SetShape (const media::physics::Shape& shape);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
    const media::physics::Material& Material    () const;
    void                            SetMaterial (const media::physics::Material& material);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги поведения
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Flags    () const;
    void   SetFlags (size_t flags);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (RigidBody&);

  private:
    struct Impl;
    Impl* impl;

  private:
    RigidBody (Impl* impl);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (RigidBody&, RigidBody&);

}

}

#endif
