#ifndef MEDIALIB_PHYSICS_TRIANGLE_MESH_HEADER
#define MEDIALIB_PHYSICS_TRIANGLE_MESH_HEADER

#include <math/vector.h>

namespace media
{

namespace physics
{

namespace shapes
{

typedef unsigned int TriangleIndices [3];

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание тела в виде выпуклого многогранника
///////////////////////////////////////////////////////////////////////////////////////////////////
class TriangleMesh
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы, деструктор, присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    TriangleMesh  ();
    TriangleMesh  (const TriangleMesh&);
    ~TriangleMesh ();

    TriangleMesh& operator = (const TriangleMesh&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    TriangleMesh Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя тела
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Является ли выпуклым многогранником
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsConvex  () const;
    void SetConvex (bool convex);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с вершинами
///////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int VerticesCount    () const;
    void         SetVerticesCount (unsigned int count);

    const math::vec3f* Vertices () const;
          math::vec3f* Vertices ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с индексами
///////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int TrianglesCount    () const;
    void         SetTrianglesCount (unsigned int count);

    const TriangleIndices* Triangles () const;
          TriangleIndices* Triangles ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (TriangleMesh&);
    
  private:
    struct Impl;
    
    TriangleMesh (Impl*);

  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (TriangleMesh&, TriangleMesh&);

}

}

}

#endif
