#ifndef MEDIALIB_PHYSICS_SHAPE_HEADER
#define MEDIALIB_PHYSICS_SHAPE_HEADER

#include <math/vector.h>

#include <media/physics/triangle_mesh_shape_data.h>
#include <media/physics/compound_shape_data.h>

namespace media
{

namespace physics
{

enum ShapeType
{
  ShapeType_Box,
  ShapeType_Sphere,
  ShapeType_Capsule,
  ShapeType_Plane,
  ShapeType_TriangleMesh,
  ShapeType_Compound
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание тела в виде параллелепипеда
///////////////////////////////////////////////////////////////////////////////////////////////////
struct BoxShapeData
{
  math::vec3f half_dimensions; //половины длин сторон
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание тела в виде сферы
///////////////////////////////////////////////////////////////////////////////////////////////////
struct SphereShapeData
{
  float radius;  //радиус
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание тела в виде капсулы
///////////////////////////////////////////////////////////////////////////////////////////////////
struct CapsuleShapeData
{
  float radius;  //радиус полусфер
  float height;  //высота тела
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание тела в виде плоскости
///////////////////////////////////////////////////////////////////////////////////////////////////
struct PlaneShapeData
{
  math::vec3f normal;  //нормаль
  float       d;       //смещение
};

template <class T> struct ShapeDataType     { typedef T& Type; };
template <class T> struct ShapeDataType<T*> { typedef T* Type; };

///////////////////////////////////////////////////////////////////////////////////////////////////
///Геометрическое тело
///////////////////////////////////////////////////////////////////////////////////////////////////
class Shape
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Shape  ();
    Shape  (const Shape&);
    ~Shape ();

    Shape& operator = (const Shape&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Shape Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Толщина полей
///////////////////////////////////////////////////////////////////////////////////////////////////
    float Margin    () const;
    void  SetMargin (float value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение описания
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShapeType Type () const;

    template <class T> const typename ShapeDataType<T>::Type Data    () const;
    template <class T>       typename ShapeDataType<T>::Type Data    ();
    template <class T> void                                  SetData (const T& data);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Shape&);

  private:
    struct Impl;
    Impl* impl;

  private:
    Shape (Impl* impl);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Shape&, Shape&);

}

}

#endif
