#ifndef MEDIALIB_PHYSICS_COMPOUND_HEADER
#define MEDIALIB_PHYSICS_COMPOUND_HEADER

#include <cstddef>

#include <math/quat.h>
#include <math/vector.h>

namespace media
{

namespace physics
{

class Shape;

namespace shapes
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание тела в виде набора тел
///////////////////////////////////////////////////////////////////////////////////////////////////
class Compound
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Compound  ();
    Compound  (const Compound&);
    ~Compound ();

    Compound& operator = (const Compound&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Compound Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание положения объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    struct ShapeTransform
    {
      math::vec3f position;
      math::quatf orientation;

      ShapeTransform ();
      ShapeTransform (math::vec3f position, math::quatf orientation);
    };

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление тел
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size     () const;
    size_t Capacity () const;
    void   Reserve  (size_t size);

    void Attach    (const media::physics::Shape& shape, const math::vec3f& position, const math::quatf& orientation);
    void Attach    (const media::physics::Shape& shape, const ShapeTransform& transform);
    void Detach    (const media::physics::Shape& shape);
    void Detach    (size_t index);
    void DetachAll ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение тел
///////////////////////////////////////////////////////////////////////////////////////////////////
    const media::physics::Shape& Shape     (size_t index) const;
          media::physics::Shape& Shape     (size_t index);
    const ShapeTransform&        Transform (size_t index) const;
          ShapeTransform&        Transform (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Compound&);

  private:
    struct Impl;

    Compound (Impl* impl);

  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Compound&, Compound&);

}

}

}

#endif
