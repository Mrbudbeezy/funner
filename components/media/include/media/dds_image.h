#ifndef MEDIALIB_DDS_HEADER
#define MEDIALIB_DDS_HEADER

#include <stddef.h>
#include <stl/auto_ptr.h>

namespace media
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Форматы DDS
///////////////////////////////////////////////////////////////////////////////////////////////////
enum DdsPixelFormat
{
  DdsPixelFormat_DXT1,
  DdsPixelFormat_DXT3,
  DdsPixelFormat_DXT5,
  DdsPixelFormat_RGB8,
  
  DdsPixelFormat_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сжатый образ картинки из файла DDS
///////////////////////////////////////////////////////////////////////////////////////////////////
class DdsImage
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    DdsImage  ();
    DdsImage  (const char* file_name);
    DdsImage  (const DdsImage&);
    ~DdsImage ();

    DdsImage& operator = (const DdsImage&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры картинки в пикселях
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Width    () const;
    size_t Height   () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество слоёв / mip-уровней
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Depth     () const;
    size_t MipsCount () const;    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Длина блока пикселей в байтах / размер слоя
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t BlockSize () const;
    size_t LayerSize (size_t mip_level) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Формат
///////////////////////////////////////////////////////////////////////////////////////////////////
    DdsPixelFormat Format () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение битовой карты
///////////////////////////////////////////////////////////////////////////////////////////////////
    const void* Bitmap (size_t layer, size_t mip_level) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (DdsImage&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (DdsImage&, DdsImage&);

}

#endif
