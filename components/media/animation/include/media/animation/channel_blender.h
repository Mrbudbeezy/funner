#ifndef MEDIA_ANIMATION_CHANNEL_BLENDER_HEADER
#define MEDIA_ANIMATION_CHANNEL_BLENDER_HEADER

#include <media/animation/channel.h>

namespace media
{

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс для блендера анимационных каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
class ChannelBlenderBase
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    ChannelBlenderBase  (const ChannelBlenderBase&);
    ~ChannelBlenderBase ();
    
    ChannelBlender& operator = (const ChannelBlender&);
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t ChannelsCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение каналов и анимационных состояний
///////////////////////////////////////////////////////////////////////////////////////////////////
          animation::AnimationState AnimationState (size_t index);
    const animation::AnimationState AnimationState (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление и удаление каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddChannel        (const AnimationState& state, const animation::Channel& channel);
    void RemoveChannel     (const AnimationState& state);
    void RemoveAllChannels ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (ChannelBlenderBase&);

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ChannelBlenderBase (const std::type_info& value_type);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение массива каналов для смешивания
///////////////////////////////////////////////////////////////////////////////////////////////////    
    struct ChannelDesc
    {
      detail::IEvaluatorBase* evaluator; //ссылка на вычислитель состояния анимации
      AnimationState          state;     //состояние анимации
    };
    
    const ChannelDesc* Channels () const;
    
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (ChannelBlenderBase&, ChannelBlenderBase&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блендер анимационных каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class ChannelBlender: public ChannelBlenderBase
{
  public:
    typedef T ValueType;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ChannelBlender ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Расчёт значения
///////////////////////////////////////////////////////////////////////////////////////////////////
    ValueType operator () () const;
    void      operator () (ValueType&) const;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Смешивание
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> void blend (const T& src_value, float weight, T& result_value);

#include <media/animation/detail/channel_blender.inl>

}

}

#endif

