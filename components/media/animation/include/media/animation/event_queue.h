#ifndef MEDIALIB_ANIMATION_EVENT_QUEUE_HEADER
#define MEDIALIB_ANIMATION_EVENT_QUEUE_HEADER

#include <cstddef>

#include <xtl/functional_fwd>

namespace media
{

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Трек событий анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
class EventQueue
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    EventQueue  ();
    EventQueue  (const EventQueue&);
    ~EventQueue ();

    EventQueue& operator = (const EventQueue&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование числа событий
///////////////////////////////////////////////////////////////////////////////////////////////////    
    size_t Capacity () const;
    void   Reserve  (size_t keys_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / изменение событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t SetEvent (float time, const char* event);
    void   SetTime  (size_t event_index, float time);
    void   SetEvent (size_t event_index, float time, const char* event);
    void   SetEvent (size_t event_index, const char* event);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetEvent (size_t event_index) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление событий, прошедших в указанном промежутке времени
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (float time, const char* event)> EventHandler;

    void GetEvents (float previous_time, float current_time, const EventHandler& handler) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сортировка точек (по возрастанию времени)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Sort ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove (size_t event_index);
    void Clear  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск индекса ключа
///////////////////////////////////////////////////////////////////////////////////////////////////
    int FindLower (float time) const; //поиск ключа <= time
    int FindUpper (float time) const; //поиск ключа >= time
    int FindEqual (float time) const; //поиск ключа == time

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (EventQueue&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (EventQueue&, EventQueue&);

}

}

#endif
