#ifndef MEDIALIB_ANIMATION_CHANNEL_HEADER
#define MEDIALIB_ANIMATION_CHANNEL_HEADER

#include <cstddef>

namespace media
{

namespace animation
{

//forward declarations
class Channel;
class EvalutorInterface;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Функция-вычислитель значений анимационного канала
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class Evalutor
{
  public:
    typedef T ValueType;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Evalutor  (const EvalutorInterface*);
    Evalutor  (const Evalutor&);
    ~Evalutor ();

    Evalutor& operator = (const Evalutor&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вычисление значений
///////////////////////////////////////////////////////////////////////////////////////////////////
    ValueType operator () (float time) const;
    void      operator () (float time, ValueType& value);

  private:
    EvalutorInterface* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Канал анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
class Channel
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Channel  ();
    Channel  (const Channel&);
    ~Channel ();

    Channel& operator = (const Channel&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Channel Clone () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя анимируемого параметра
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ParameterName    () const;
    void        SetParameterName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип трека / тип значения
///////////////////////////////////////////////////////////////////////////////////////////////////
    const std::type_info& TrackType () const;
    const std::type_info& ValueType () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сплайн
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class Key, class Fn> void      SetTrack (const Fn&);
    template <class Fn>            const Fn* Track    () const;
    template <class Fn>            Fn*       Track    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вычисление значений по времени
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class Ret> Ret  Eval (float time) const;
    template <class Ret> void Eval (float time, Ret& result) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение функции вычисления значений
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class T> animation::Evalutor<T> Evalutor () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Channel&);

  private:
    EvalutorInterface* EvalutorCore () const;
    
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Channel&, Channel&);

}

}

#endif
