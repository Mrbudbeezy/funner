#ifndef MEDIALIB_ANIMATION_CHANNEL_HEADER
#define MEDIALIB_ANIMATION_CHANNEL_HEADER

#include <cstddef>
#include <typeinfo>

#include <xtl/reference_counter.h>

namespace media
{

namespace animation
{

//forward declarations
class Channel;

namespace detail
{

class IEvaluatorBase;

template <class T> class IEvaluator;

}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Функция-вычислитель значений анимационного канала
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class Evaluator
{
  public:
    typedef T ValueType;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Evaluator  (const detail::IEvaluator<T>&);
    Evaluator  (const Evaluator&);
    ~Evaluator ();

    Evaluator& operator = (const Evaluator&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вычисление значений
///////////////////////////////////////////////////////////////////////////////////////////////////
    ValueType operator () (float time) const;
    void      operator () (float time, ValueType& value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Evaluator&);

  private:
    detail::IEvaluator<ValueType>* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
void swap (Evaluator<T>&, Evaluator<T>&);

template <class Fn> struct TrackResultType
{
  typedef typename Fn::result_type Type;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Канал анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
class Channel
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Channel  ();
    Channel  (const Channel&);
    ~Channel ();

    Channel& operator = (const Channel&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Channel Clone () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя анимируемого параметра
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ParameterName    () const;
    void        SetParameterName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип трека / тип значения
///////////////////////////////////////////////////////////////////////////////////////////////////
    const std::type_info& TrackType () const;
    const std::type_info& ValueType () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сплайн
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class Fn> void      SetTrack (const Fn&);
    template <class Fn> const Fn* Track    () const;
    template <class Fn> Fn*       Track    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вычисление значений по времени
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class Ret> Ret  Eval (float time) const;
    template <class Ret> void Eval (float time, Ret& result) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение функции вычисления значений
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class T> animation::Evaluator<T> Evaluator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Channel&);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка трека
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                    SetTrackCore (detail::IEvaluatorBase*);
    detail::IEvaluatorBase* TrackCore    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Выброс исключения несоответствия типа
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RaiseTypeError (const char* source, const std::type_info& type) const;

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Channel&, Channel&);

#include <media/animation/detail/channel.inl>

}

}

#endif
