#ifndef MEDIALIB_ANIMATION_ANIMATION_HEADER
#define MEDIALIB_ANIMATION_ANIMATION_HEADER

#include <media/animation/channel.h>
#include <media/animation/event_queue.h>

namespace media
{

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимация
///////////////////////////////////////////////////////////////////////////////////////////////////
class Animation
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Animation  ();
    Animation  (const Animation&);
    ~Animation ();
    
    Animation& operator = (const Animation&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Animation Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя анимируемого объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetTargetName (const char* name);
    const char* TargetName    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t ChannelsCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const animation::Channel& Channel (size_t index) const;
          animation::Channel& Channel (size_t index);
          
///////////////////////////////////////////////////////////////////////////////////////////////////
///Очередь событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    const EventQueue Events () const;
          EventQueue Events ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество вложенных анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t SubAnimationsCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
    const animation::Animation& SubAnimation (size_t index) const;
          animation::Animation& SubAnimation (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Animation&);
    
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Animation&, Animation&);

}

}

#endif
