#ifndef MEDIALIB_ANIMATION_ANIMATION_HEADER
#define MEDIALIB_ANIMATION_ANIMATION_HEADER

#include <media/animation/channel.h>
#include <media/animation/event_track.h>

namespace media
{

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимация
///////////////////////////////////////////////////////////////////////////////////////////////////
class Animation
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Animation  ();
    Animation  (const Animation&);
    ~Animation ();
    
    Animation& operator = (const Animation&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Animation Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор анимируемых объектов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      TargetsCount () const;
    const char* TargetName   (size_t target_index) const; 
    int         FindTarget   (const char* target_name) const; //nothrow

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t ChannelsCount (size_t target_index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const animation::Channel& Channel (size_t target_index, size_t channel_index) const;
          animation::Channel& Channel (size_t target_index, size_t channel_index);
          
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddChannel        (size_t target_index, const animation::Channel& channel);
    void AddChannel        (const char* target_name, const animation::Channel& channel);
    void RemoveChannel     (size_t target_index, size_t channel_index);
    void RemoveAllChannels (size_t target_index);
    void RemoveAllChannels ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очередь событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    const EventTrack& Events () const;
          EventTrack& Events ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Animation&);
    
  private:
    struct Impl;
    Impl* impl;

  private:
    Animation (Impl* impl);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Animation&, Animation&);

}

}

#endif
