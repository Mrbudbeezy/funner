#ifndef MEDIALIB_ANIMATION_ANIMATION_HEADER
#define MEDIALIB_ANIMATION_ANIMATION_HEADER

#include <media/animation/channel.h>
#include <media/animation/event_track.h>

namespace media
{

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимация
///////////////////////////////////////////////////////////////////////////////////////////////////
class Animation
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Animation  ();
    Animation  (const Animation&);
    ~Animation ();
    
    Animation& operator = (const Animation&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    Animation Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор анимируемых объектов
///////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int TargetsCount () const;
    const char*  TargetName   (unsigned int target_index) const;
    int          FindTarget   (const char* target_name) const; //nothrow

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int ChannelsCount (unsigned int target_index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const animation::Channel& Channel (unsigned int target_index, unsigned int channel_index) const;
          animation::Channel& Channel (unsigned int target_index, unsigned int channel_index);
          
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddChannel        (unsigned int target_index, const animation::Channel& channel);
    void AddChannel        (const char* target_name, const animation::Channel& channel);
    void RemoveChannel     (unsigned int target_index, unsigned int channel_index);
    void RemoveAllChannels (unsigned int target_index);
    void RemoveAllChannels ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение лимитов по времени
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetTimeLimits (float& min_time, float& max_time) const;
    void GetTimeLimits (float& min_time, float& max_time, float& min_unwrapped_time, float& max_unwrapped_time) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Минимальное / максимальное время
///////////////////////////////////////////////////////////////////////////////////////////////////
    float MinTime () const;
    float MaxTime () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Минимальное / максимальное неотсеченное время (-INF/INF в случае открытого диапазона)
///////////////////////////////////////////////////////////////////////////////////////////////////
    float MinUnwrappedTime () const;
    float MaxUnwrappedTime () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очередь событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    const EventTrack& Events () const;
          EventTrack& Events ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Animation&);
    
  private:
    struct Impl;
    Impl* impl;

  private:
    Animation (Impl* impl);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Animation&, Animation&);

}

}

#endif
