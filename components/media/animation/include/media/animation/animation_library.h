#ifndef MEDIALIB_ANIMATION_ANIMATION_LIBRARY_HEADER
#define MEDIALIB_ANIMATION_ANIMATION_LIBRARY_HEADER

#include <media/animation/animation.h>
#include <common/serializer_manager.h>

namespace xtl
{

//forward decalration
template <class T> class iterator;

}

namespace media
{

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
class AnimationLibrary
{
  public:
    typedef xtl::iterator<Animation> Iterator, ConstIterator;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    AnimationLibrary  ();
    AnimationLibrary  (const AnimationLibrary&);
    AnimationLibrary  (const char* file_name);
    ~AnimationLibrary ();

    AnimationLibrary& operator = (const AnimationLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество элементов в библиотеке / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int Size    () const;
    bool         IsEmpty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      CreateIterator ();
    ConstIterator CreateIterator () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение идентификатора элемента библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ItemId (const ConstIterator&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск
///////////////////////////////////////////////////////////////////////////////////////////////////
          Animation* Find (const char* id);
    const Animation* Find (const char* id) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление элементов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach    (const char* id, Animation&);
    void Detach    (const char* id);
    void DetachAll ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / сохранение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);
    void Save (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (AnimationLibrary&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (AnimationLibrary&, AnimationLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер библиотек анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef common::ResourceSerializerManager
<
  void (const char* file_name, AnimationLibrary& library),
  void (const char* file_name, const AnimationLibrary& library)
> AnimationLibraryManager;

}

}

#endif
