#ifndef MEDIALIB_ANIMATION_STATE_HEADER
#define MEDIALIB_ANIMATION_STATE_HEADER

namespace xtl
{

//forward declaration
class trackable;

}

namespace media
{

namespace animation
{

///forward declaration
struct AnimationStateImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
class AnimationState
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    AnimationState  ();
    AnimationState  (AnimationStateImpl&);
    AnimationState  (const AnimationState&);
    ~AnimationState ();

    AnimationState& operator = (const AnimationState&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текущее время
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetTime (float time);
    float Time    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Вес анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetWeight (float weight);
    float Weight    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение объекта реализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    AnimationStateImpl& Impl () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение объекта оповещения об удалении
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::trackable& GetTrackable () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (AnimationState&);
    
  private:
    AnimationStateImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (AnimationState&, AnimationState&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение объекта оповещения об удалении
///////////////////////////////////////////////////////////////////////////////////////////////////
xtl::trackable& get_trackable (const AnimationState&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение времени и веса
///////////////////////////////////////////////////////////////////////////////////////////////////
float get_time   (AnimationStateImpl&);
float get_weight (AnimationStateImpl&);

}

}

#endif
