#ifndef MEDIALIB_ANIMATION_TARGET_BLENDER_HEADER
#define MEDIALIB_ANIMATION_TARGET_BLENDER_HEADER

#include <media/animation/channel.h>
#include <media/animation/channel_blender.h>

namespace common
{

//forward declaration
class PropertyMap;

}

namespace media
{

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Карта сопоставление имени канала и имени анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
class PropertyNameMap
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструкор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    PropertyNameMap  ();
    PropertyNameMap  (const PropertyNameMap&);
    ~PropertyNameMap ();
    
    PropertyNameMap& operator = (const PropertyNameMap&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    PropertyNameMap Clone () const;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установление соответствия
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        Set (const char* channel_name, const char* property_name);
    const char* Get (const char* channel_name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс соответствий
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void Reset (const char* channel_name);
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (PropertyNameMap&);
    
  private:
    struct Impl;  
  
    PropertyNameMap (Impl*);
    
  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (PropertyNameMap&, PropertyNameMap&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///События блендера анимационных целей
///////////////////////////////////////////////////////////////////////////////////////////////////
enum TargetBlenderEvent
{
  TargetBlenderEvent_OnSourcesChanged, //изменены анимационные источники
  TargetBlenderEvent_OnSourcesEmpty,   //количество анимационные источников стало равным нулю

  TargetBlenderEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блендер анимационных целей
///////////////////////////////////////////////////////////////////////////////////////////////////
class TargetBlender
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    TargetBlender  ();
    TargetBlender  (const TargetBlender&);
    ~TargetBlender ();  

    TargetBlender& operator = (const TargetBlender&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Общее количество источников
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t SourcesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление и удаление источников
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddSource        (AnimationState& state, const Channel& channel);
    void AddSource        (AnimationState& state, const Channel& channel, const PropertyNameMap& name_map);
    void RemoveSource     (AnimationState& state);
    void RemoveSource     (const Channel& channel);
    void RemoveSource     (const char* property_name);
    void RemoveAllSources ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текущее состояние свойств анимационной цели
///////////////////////////////////////////////////////////////////////////////////////////////////
    const common::PropertyMap& Properties () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление состояния анимационной цели
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события блендера каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (TargetBlenderEvent event)> EventHandler;

    xtl::connection RegisterEventHandler (TargetBlenderEvent event, const EventHandler& handler) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (TargetBlender&);
    
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (TargetBlender&, TargetBlender&);

}

}

#endif
