#ifndef MEDIALIB_ANIMATION_ROTATION_TRACK_HEADER
#define MEDIALIB_ANIMATION_ROTATION_TRACK_HEADER

#include <mathlib.h>

namespace media
{

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод расчёта промежуточных значений
///////////////////////////////////////////////////////////////////////////////////////////////////
enum RotationEvalMethod
{
  RotationEvalMethod_Point,        //по ключевым точкам
  RotationEvalMethod_Linear,       //линейная интерполяция
  RotationEvalMethod_SphereLinear, //сферическая интерполяция
  RotationEvalMethod_Cubic,        //кубическая интерполяция
  RotationEvalMethod_CubicLinear,  //кубическая сферическая интерполяция
  
  RotationEvalMethod_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Класс интерполяции вращений
///////////////////////////////////////////////////////////////////////////////////////////////////
class RotationTrack
{
  public:
    typedef math::quatf ValueType;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    RotationTrack  ();
    RotationTrack  (const RotationTrack&);
    ~RotationTrack ();

    RotationTrack& operator = (const RotationTrack&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование точек
///////////////////////////////////////////////////////////////////////////////////////////////////    
    size_t Capacity () const;
    void   Reserve  (size_t keys_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / изменение ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t SetKey   (float time, const ValueType& value);
    void   SetKey   (size_t key_index, float time, const ValueType& value);
    void   SetTime  (size_t key_index, float time);
    void   SetValue (size_t key_index, const ValueType& value);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение значений ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    void      GetValue (size_t key_index, const ValueType& value) const;
    ValueType GetValue (size_t key_index) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сортировка точек (по возрастанию времени)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Sort ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove (size_t key_index);
    void Clear  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск индекса ключа
///////////////////////////////////////////////////////////////////////////////////////////////////
    int FindLower (float time) const; //поиск ключа <= time
    int FindUpper (float time) const; //поиск ключа >= time
    int FindEqual (float time) const; //поиск ключа == time

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод расчёта значений в промежуточных точках
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetEvalMethod (RotationEvalMethod method);
    RotationEvalMethod EvalMethod    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Расчёт значения в промежуточной точке
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Eval (float time, float* value) const;
    void Eval (float time, float* value, size_t& prev_point_hint) const; //default prev_point_hint = 0
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Оптимизация трека (удаление лишних точек без изменения траектории)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Optimize ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (RotationTrack&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (RotationTrack&, RotationTrack&);

}

}

#endif
