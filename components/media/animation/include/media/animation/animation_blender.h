#ifndef MEDIALIB_ANIMATION_BLENDER_HEADER
#define MEDIALIB_ANIMATION_BLENDER_HEADER

#include <media/animation/target_blender.h>

namespace media
{

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///События блендера анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
enum AnimationBlenderEvent
{
  AnimationBlenderEvent_OnTargetAdded,   //добавлена новая анимационная цель
  AnimationBlenderEvent_OnTargetRemoved, //удалена анимационная цель
  
  AnimationBlenderEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блендер анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
class AnimationBlender
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    AnimationState AddSource (const media::Animation&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество анимируемых целей
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t TargetsCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение цели анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    const animation::TargetBlender& TargetBlender (size_t index) const;
          animation::TargetBlender& TargetBlender (size_t index); 

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление состояния
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события блендера анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<AnimationBlenderEvent event, const char* target_name, animation::TargetBlender&> EventHandler;

    xtl::connection RegisterEventHandler (AnimationBlenderEvent event, const EventHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (AnimationBlender&);
    
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (AnimationBlender&, AnimationBlender&);

}

}

#endif
