#ifndef MEDIALIB_ANIMATION_BLENDER_HEADER
#define MEDIALIB_ANIMATION_BLENDER_HEADER

#include <media/animation/animation.h>
#include <media/animation/target_blender.h>

namespace xtl
{

///forward declaration
template <class T> class iterator;

}

namespace media
{

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///События блендера анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
enum AnimationBlenderEvent
{
  AnimationBlenderEvent_OnTargetAdded,   //добавлена новая анимационная цель
  AnimationBlenderEvent_OnTargetRemoved, //удалена анимационная цель
  
  AnimationBlenderEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блендер анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
class AnimationBlender
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    AnimationBlender  ();
    AnimationBlender  (const AnimationBlender&);
    ~AnimationBlender ();
    
    AnimationBlender& operator = (const AnimationBlender&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Общее количество источников / общее количество каналов-источников
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t SourcesCount        () const;
    size_t SourceChannelsCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    AnimationState AddSource        (const Animation&);
    AnimationState AddSource        (const Animation&, const PropertyNameMap&);
    void           RemoveTarget     (const char* target_name);
    void           RemoveAllSources ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество анимируемых целей
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t TargetsCount () const;        

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор целей анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::iterator<TargetBlender>       TargetIterator;
    typedef xtl::iterator<const TargetBlender> ConstTargetIterator;    
    
    TargetIterator      CreateTargetIterator ();
    ConstTargetIterator CreateTargetIterator () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени цели
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* TargetId (const ConstTargetIterator&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление состояния
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef EventTrack::EventHandler EventTrackHandler;    

    void Update ();
    void Update (const EventTrackHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события блендера анимаций
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (AnimationBlenderEvent event, const char* target_name, TargetBlender& blender)> EventHandler;

    xtl::connection RegisterEventHandler (AnimationBlenderEvent event, const EventHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (AnimationBlender&);
    
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (AnimationBlender&, AnimationBlender&);

}

}

#endif
