#ifndef MEDIALIB_ANIMATION_EVENT_QUEUE_HEADER
#define MEDIALIB_ANIMATION_EVENT_QUEUE_HEADER

#include <cstddef>

#include <xtl/functional_fwd>

namespace media
{

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Трек событий анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
class EventTrack
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    EventTrack  ();
    EventTrack  (const EventTrack&);
    ~EventTrack ();

    EventTrack& operator = (const EventTrack&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование числа событий
///////////////////////////////////////////////////////////////////////////////////////////////////    
    size_t Capacity () const;
    void   Reserve  (size_t events_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / изменение событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddEvent  (float delay, float period, const char* event);
    void   SetDelay  (size_t event_index, float delay);
    void   SetPeriod (size_t event_index, float period);
    void   SetEvent  (size_t event_index, float delay, float period, const char* event);
    void   SetEvent  (size_t event_index, const char* event);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetEvent  (size_t event_index) const;
    float       GetDelay  (size_t event_index) const;
    float       GetPeriod (size_t event_index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление событий, прошедших в указанном промежутке времени. Неявно вызывает Sort
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (float time, const char* event)> EventHandler;

    void GetEvents (float previous_time, float current_time, const EventHandler& handler) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove (size_t event_index);
    void Clear  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (EventTrack&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (EventTrack&, EventTrack&);

}

}

#endif
