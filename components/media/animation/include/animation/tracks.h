#ifndef ANIMATION_TRACKS_HEADER
#define ANIMATION_TRACKS_HEADER

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим отсечения времени
///////////////////////////////////////////////////////////////////////////////////////////////////
enum TimeWrapMode
{
  TimeWrapMode_ClampToStart,  //отсекать на начальное время
  TimeWrapMode_ClampToEnd,    //отсекать на финальное время
  TimeWrapMode_Repeat,        //повторять (looping)
  TimeWrapMode_Mirror,        //повторять с зеркальным чередованием
  
  TimeWrapMode_Num,
  
  TimeWrapMode_Default = TimeWrapMode_ClampToEnd
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимационный канал
///////////////////////////////////////////////////////////////////////////////////////////////////
class Track
{
  public:   
///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройка отсечения времени
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void         SetStartWrapMode (TimeWrapMode mode);
    void         SetEndWrapMode   (TimeWrapMode mode);
    TimeWrapMode StartWrapMode    () const;
    TimeWrapMode EndWrapMode      () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание биндинга
///////////////////////////////////////////////////////////////////////////////////////////////////
//    Binding CreateBinding (IAnimationParameter*) const; //???

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  () const;
    void Release () const;
    
  protected:
    Track  ();
    ~Track ();
    
  private:
    Track (const Track&); //no impl
    Track& operator = (const Track&); //no impl
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Числовой канал
///////////////////////////////////////////////////////////////////////////////////////////////////
class NumericTrack: public Track
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Расчёт
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Eval (float time, size_t result_dimension, float* result, size_t& hint) const; //initial hint=0
    void Eval (float time, size_t result_dimension, float* result) const;
    void Eval (float time, float& scalar_result) const;

    template <size_t Dimension>
    void Eval (float time, math::vec<float, Dimension>& result) const;

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Расчёт
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void EvalCore (float time, size_t result_dimension, float* result, size_t& hint) const;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип сплайна
///////////////////////////////////////////////////////////////////////////////////////////////////
enum SplineType
{
  SplineType_Point,  //набор точек
  SplineType_Linear, //линейный интерполяционный сплайн
  SplineType_TCB,    //кубический интерполяционный сплайн (tension, bias, continuity)
  SplineType_Bezier, //кубический сплайн Безье

  SplineType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ключевая точка TCB сплайна для плавающих чисел
///////////////////////////////////////////////////////////////////////////////////////////////////
struct TcbFloatSplineKeyFrame //????
{
  float time;
  float tension;
  float value [1];
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ключевая точка числового сплайна
///////////////////////////////////////////////////////////////////////////////////////////////////
class NumericKeyFrame
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    NumericKeyFrame  (const NumericKeyFrame&);
    ~NumericKeyFrame ();

    NumericKeyFrame& operator = (const NumericKeyFrame&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Индекс точки / размерность
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Index     () const;
    size_t Dimension () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Время
///////////////////////////////////////////////////////////////////////////////////////////////////
    float Time    () const;
    void  SetTime (float time);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Значение
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void SetValue (size_t dimension, const float* value);
    void SetValue (float value);

    template <size_t Dimension>
    void SetValue (const math::vec<float, Dimension>& value);

  protected:
    NumericKeyFrame (NumericSplineImpl& spline, size_t index);
    
  private:
    NumericSplineImpl* spline;
    size_t             index;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Векторный сплайн для плавающих чисел
///////////////////////////////////////////////////////////////////////////////////////////////////
class NumericSpline
{
  public: 
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание сплайна
///////////////////////////////////////////////////////////////////////////////////////////////////  
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество ключевых точек / размерность
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t KeysCount () const;
    size_t Dimension () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с ключевыми точками
/////////////////////////// ////////////////////////////////////////////////////////////////////////
    KeyFrame Key (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t KeysCapacity () const;
    void   ReserveKeys  (size_t keys_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddKey    (const KeyFrame&);
    void   InsertKey (size_t index, const KeyFrame& key);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove (size_t index);
    void Clear  ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сортировка ключей
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Sort ();
};

//+rotation spline

///////////////////////////////////////////////////////////////////////////////////////////////////
///Кубический сплайн
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class ValueTypeTmpl, class KeyFrameTypeTmpl> class Spline: public BasicTrack<T>
{
  typedef BasicTrack<T> Base;
  public:
    typedef ValueTypeTmpl    ValueType;
    typedef KeyFrameTypeTmpl KeyFrameType;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t KeysCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с ключевыми точками
/////////////////////////// ////////////////////////////////////////////////////////////////////////
    const KeyFrame& Key     (size_t index) const;
    void            SetKey  (size_t index, const KeyFrame& key);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t KeysCapacity () const;
    void   ReserveKeys  (size_t keys_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddKey    (const KeyFrame&);
    void   InsertKey (size_t index, const KeyFrame& key);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove (size_t index);
    void Clear  ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сортировка ключей
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Sort ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оптимизация трека
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class ValueType, class KeyFrameType>
void optimize (const BasicTrack<ValueType>& source, Spline<ValueType, KeyFrameType>& result);

//+wave track
//+noise track

}

#endif
