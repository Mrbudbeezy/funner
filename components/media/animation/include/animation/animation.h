#ifndef MEDIALIB_ANIMATION_ANIMATION_HEADER
#define MEDIALIB_ANIMATION_ANIMATION_HEADER

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Канал анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
class AnimationChannel
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя анимируемого параметра
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* ParameterName    () const = 0;
    virtual void        SetParameterName (const char* name) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимационный трек
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual animation::Track::Pointer      Track () = 0;
    virtual animation::Track::ConstPointer Track () const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Смещение по времени
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual float TimeOffset    () const = 0;
    virtual void  SetTimeOffset (float offset) = 0;

  protected:
    virtual ~AnimationChannel () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимация
///////////////////////////////////////////////////////////////////////////////////////////////////
class Animation
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Animation  ();
    Animation  (const Animation&);
    ~Animation ();
    
    Animation& operator = (const Animation&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t ChannelsCount () const;

    const AnimationChannel& Channel (size_t index) const;
          AnimationChannel& Channel (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Animation&);
    
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Animation&, Animation&);

}

#endif
