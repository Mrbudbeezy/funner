#ifndef MEDIALIB_ANIMATION_ANIMATION_HEADER
#define MEDIALIB_ANIMATION_ANIMATION_HEADER

namespace math
{

template <class Key>
class basic_spline;

}

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимационный трек
///////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////
///Канал анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
class AnimationChannel
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя анимируемого параметра
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ParameterName    () const = 0;
    void        SetParameterName (const char* name) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сплайн
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class Key> void                     SetTrack (const basic_spline&);
    template <class Key> const basic_spline<Key>* Track    () const;
    template <class Key>       basic_spline<Key>* Track    ();

    const std::type_info& TrackType () const;

//бинды
//приведение типов треков    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Смещение по времени
///////////////////////////////////////////////////////////////////////////////////////////////////
//    float TimeOffset    () const;
//    void  SetTimeOffset (float offset);

  protected:

};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимация
///////////////////////////////////////////////////////////////////////////////////////////////////
class Animation
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Animation  ();
    Animation  (const Animation&);
    ~Animation ();
    
    Animation& operator = (const Animation&);
    
    //вложенные анимации!!!

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t ChannelsCount () const;

    const AnimationChannel& Channel (size_t index) const;
          AnimationChannel& Channel (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Animation&);
    
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Animation&, Animation&);

}

#endif
