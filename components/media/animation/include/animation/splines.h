#infdef MEDIALIB_SPLINES_HEADER
#define MEDIALIB_SPLINES_HEADER

#include <mathlib.h>

namespace media
{

namespace animation
{

//implementation forwards
template <class T> struct SplineImpl; //???

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ключевая точка сплайна
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class SplineKeyFrame
{
  public:
    typedef T ValueType;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Индекс точки в сплайне
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Index () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Время
///////////////////////////////////////////////////////////////////////////////////////////////////
    float Time    () const;
    void  SetTime (float time);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Значение
///////////////////////////////////////////////////////////////////////////////////////////////////
    const ValueType& Value    () const;
    void             SetValue (const ValueType&);

  private:
    SplineKeyFrame  (); //no impl
    SplineKeyFrame  (const SplineKeyFrame&); //no impl
    ~SplineKeyFrame (); //no impl

  protected:
    typedef SplineImpl<T> Impl;

  protected:
    Impl*  spline;
    size_t index;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ключевая точка TCB сплайна
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class SplineTcbKeyFrame: public SplineKeyFrame<T>
{
  typedef SplineKeyFrame<T> Base;
  public:
    typedef typename Base::ValueType ValueType;
    typedef ??? ScalarType;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры
///////////////////////////////////////////////////////////////////////////////////////////////////
    ScalarType Tension       () const;
    ScalarType Bias          () const;
    ScalarType Continuity    () const;
    ScalarType EaseFrom      () const;
    ScalarType EaseTo        () const;
    void       SetTension    (ScalarType value);
    void       SetBias       (ScalarType value);
    void       SetContinuity (ScalarType value);
    void       SetEaseFrom   (ScalarType value);
    void       SetEaseTo     (ScalarType value);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ключевая точка Безье сплайна
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class SplineBezierKeyFrame: public SplineKeyFrame<T>
{
  typedef SplineKeyFrame<T> Base;
  public:
    typedef typename Base::ValueType ValueType;
    typedef ??? ScalarType;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры
///////////////////////////////////////////////////////////////////////////////////////////////////
    const ValueType& InnerPoint () const;
    const ValueType& OuterPoint () const;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ключевая точка TCB сплайна
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class SplineTcbKeyFrame: public SplineKeyFrame<T>
{
  typedef SplineKeyFrame<T> Base;
  public:
    typedef typename Base::ValueType ValueType;
    typedef ??? ScalarType;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры
///////////////////////////////////////////////////////////////////////////////////////////////////
    ScalarType Tension       () const;
    ScalarType Bias          () const;
    ScalarType Continuity    () const;
    ScalarType EaseFrom      () const;
    ScalarType EaseTo        () const;
    void       SetTension    (ScalarType value);
    void       SetBias       (ScalarType value);
    void       SetContinuity (ScalarType value);
    void       SetEaseFrom   (ScalarType value);
    void       SetEaseTo     (ScalarType value);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сплайн векторов и скаляров
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class Spline
{
  public:
    typedef T                 ValueType;
    typedef SplineKeyFrame<T> KeyFrame;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Spline  ();
    Spline  (const Spline&);
    ~Spline ();

    Spline& operator = (const Spline&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t KeysCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
          KeyFrame& GetKey (size_t index);
    const KeyFrame& GetKey (size_t index) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
          KeyFrame* FindLowerKey (float time);
          KeyFrame* FindEqualKey (float time);
          KeyFrame* FindUpperKey (float time);
    const KeyFrame* FindLowerKey (float time) const;
    const KeyFrame* FindEqualKey (float time) const;
    const KeyFrame* FindUpperKey (float time) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование точек
///////////////////////////////////////////////////////////////////////////////////////////////////    
    size_t KeysCapacity () const;
    void   ReserveKeys  (size_t keys_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    KeyFrame& AddKey (

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / изменение ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
//    size_t AddKey   (float time, const ValueType& value);
    void   SetKey   (size_t key_index, float time, const ValueType& value);
    void   SetTime  (size_t key_index, float time);
    void   SetValue (size_t key_index, const ValueType& value);     

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сортировка ключевых точек (по возрастанию времени)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SortKeys ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RemoveKey (size_t key_index);
    void Clear     ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Расчёт значения в промежуточной точке
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Eval (float time, ValueType& value) const;
    void Eval (float time, ValueType& value, size_t& prev_point_hint) const; //default prev_point_hint = 0
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Оптимизация сплайна (удаление лишних точек без изменения траектории)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Optimize (float eps);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Spline&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
void swap (Spline<T>&, Spline<T>&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Переопределение типов
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef Spline<float>         Splinef;
typedef Spline<math::vec2f>   Spline2f;
typedef Spline<math::vec3f>   Spline3f;
typedef Spline<math::vec4f>   Spline4f;
typedef Spline<math::quatf>   RotationSpline;

}

}

#endif
