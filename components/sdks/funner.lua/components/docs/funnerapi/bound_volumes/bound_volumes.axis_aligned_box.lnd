/*
   Class: BoundVolumes.AxisAlignedBox
 
   Ограничивающий объём в форме прямоугольного параллелепипеда.
 */

/*
   Group: Функции
 
 */

/*
   Function: Create
 
   Создание объекта.
 */
Create ()

/*
   Function: Create
 
   Создание объекта с указанными экстентами. Экстента - крайняя точка ограничивающего объема.

   Параметры:
     min - минимальная экстента
     max - максимальная экстента
 */
Create (Math.Vector3 min, Math.Vector3 max)

/*
   Function: Create
 
   Создание объекта с указанными экстентами.

   Параметры:
     min_x - x-координата минимальной экстенты
     min_y - y-координата минимальной экстенты
     min_z - z-координата минимальной экстенты
     max_x - x-координата максимальной экстенты
     max_y - y-координата максимальной экстенты
     max_z - z-координата максимальной экстенты
 */
Create (number min_x, number min_y, number min_z, number max_x, number max_y, number max_z) 

/*
   Function: Reset
 
   Перенос в точку position с установкой нулевых размеров.

   Параметры:
     position - новая позиция объекта
 */
Reset (Math.Vector3 position)

/*
   Function: Equal
 
   Проверка на равенство.

   Параметры:
     another_box - ограничивающий объем

   Возвращает:
     bool
 */
Equal (BoundVolumes.AxisAlignedBox another_box)

/*
   Function: Intersects
 
   Проверка пересечения.

   Параметры:
     another_box - ограничивающий объем

   Возвращает:
     bool
 */
Intersects (BoundVolumes.AxisAlignedBox another_box)

/*
   Function: Contains
 
   Проверка содержит ли данный ограничивающий объем другой ограничивающий объем.

   Параметры:
     another_box - ограничивающий объем

   Возвращает:
     bool
 */
Contains (BoundVolumes.AxisAlignedBox another_box)

/*
   Function: Intersection
 
   Возвращает ограничивающий объем являющийся областью перекрытия данного с другим ограничивающим объемом.

   Параметры:
     another_box - ограничивающий объем

   Возвращает:
     <BoundVolumes.AxisAlignedBox>
 */
Intersects (BoundVolumes.AxisAlignedBox another_box)

/*
   Function: Intersection
 
   Возвращает ограничивающий объем являющийся областью перекрытия данного с другим ограничивающим объемом.

   Параметры:
     another_box - ограничивающий объем

   Возвращает:
     <BoundVolumes.AxisAlignedBox>
 */
Intersects (BoundVolumes.AxisAlignedBox another_box)

/*
   Function: SetExtents
 
   Установка экстент.

   Параметры:
     min - 
     max -  
 */
SetExtents (Math.Vector3 min, Math.Vector3 max)

/*
   Function: GetCorner
 
   Возвращает угол corner.

   Параметры:
     corner - угол ограничивающего объема

   Возвращает:
     number
 */
GetCorner (BoundVolumes.Corner corner)

/*
   Group: Операторы
 
 */

/*
   Function: operator+
 
   Сложение. Результат операции - ограничивающий объем минимального размера, 
   включающий в себя два других ограничивающих объема.

   Параметры:
     left  - ограничивающий объем
     right - ограничивающий объем
 */
operator+ (BoundVolumes.AxisAlignedBox left, BoundVolumes.AxisAlignedBox right)

/*
   Function: operator*
 
   Умножение на матрицу.

   Параметры:
     left  - ограничивающий объем
     right - матрица
 */
operator* (BoundVolumes.AxisAlignedBox left, Math.Matrix4 right)

/*
   Group: Поля
 */

/*
   Property: Center
 
   Центр.

   Тип:
     <Math.Vector3>
 
   Доступ:
     Получение.
 */
Center

/*
   Property: Size
 
   Размеры сторон.

   Тип:
     <Math.Vector3>
 
   Доступ:
     Получение.
 */
Size

/*
   Property: Radius
 
   Радиус (половина длины диагонали).

   Тип:
     number
 
   Доступ:
     Получение.
 */
Radius

/*
   Property: Empty
 
   Проверка на пустоту.

   Тип:
     bool
 
   Доступ:
     Получение.
 */
Empty

/*
   Property: Volume
 
   Объем.

   Тип:
     number
 
   Доступ:
     Получение.
 */
Volume

/*
   Property: Minimum
 
   Минимальная экстента.

   Тип:
     <Math.Vector3>
 
   Доступ:
 
     Получение/Установка.
 */
Minimum

/*
   Property: Maximum
 
   Максимальная экстента.

   Тип:
     <Math.Vector3>
 
   Доступ:
 
     Получение/Установка.
 */
Maximum

/*
   Group: Примеры
 */

/*
  Topic: Пример кода
 
   (start code) 
   function test ()
     print ("Axis aligned box test")

     local aabox1 = BoundVolumes.AxisAlignedBox.Create ()

     print ("minimum = " .. tostring (aabox1.Minimum))
     print ("maximum = " .. tostring (aabox1.Maximum))
     print ("center = " .. tostring (aabox1.Center))
     print ("size = " .. tostring (aabox1.Size))
     print ("radius = " .. tostring (aabox1.Radius))
     print ("empty = " .. tostring (aabox1.Empty))

     aabox1.Minimum = vec3 (-10, -24, 7.45)
     aabox1.Maximum = vec3 (17, 32, 14.59)

     print ("pxnynz corner = " .. tostring (aabox1:Corner (BoundVolumes.Corner.pxnynz)))

     print ("minimum = " .. tostring (aabox1.Minimum))
     print ("maximum = " .. tostring (aabox1.Maximum))
     print ("center = " .. tostring (aabox1.Center))
     print ("size = " .. tostring (aabox1.Size))
     print ("radius = " .. tostring (aabox1.Radius))
     print ("empty = " .. tostring (aabox1.Empty))

     local aabox2 = AABB (vec3 (-5, -4, -3), vec3 (4, 5, 6)) --псевдоним на BoundVolumes.AxisAlignedBox.Create

     print ("box2 minimum = " .. tostring (aabox2.Minimum))
     print ("box2 maximum = " .. tostring (aabox2.Maximum))

     local aabox3 = aabox1 + aabox2

     print ("box3 minimum = " .. tostring (aabox3.Minimum))
     print ("box3 maximum = " .. tostring (aabox3.Maximum))

     aabox3 = aabox1 * mat4 (2)

     print ("box3 minimum = " .. tostring (aabox3.Minimum))
     print ("box3 maximum = " .. tostring (aabox3.Maximum))

     aabox1:Reset (vec3 (1, 1, 1))

     print ("box3 volume = " .. tostring (aabox3.Volume))
     print ("box1 volume = " .. tostring (aabox1.Volume))

     print ("is box2 intersects box3 ? " .. tostring (BoundVolumes.AxisAlignedBox.Intersects (aabox2, aabox3)))
     print ("is box2 contatins box3 ? " .. tostring (BoundVolumes.AxisAlignedBox.Contains (aabox2, aabox3)))
     aabox2:SetExtents (vec3 (-10, -10, -10), vec3 (5, 5, 5))
     aabox3:SetExtents (vec3 (-5, -5, -5), vec3 (4, 4, 4))
     print ("is transformed box2 intersects box3 ? " .. tostring (BoundVolumes.AxisAlignedBox.Intersects (aabox2, aabox3)))
     print ("is transformed box2 contatins box3 ? " .. tostring (BoundVolumes.AxisAlignedBox.Contains (aabox2, aabox3)))

     aabox3:SetExtents (vec3 (-6, -6, -6), vec3 (14, 14, 14))

     aabox4 = aabox2:Intersection (aabox3)
     
     print ("Intersection minimum = " .. tostring (aabox4.Minimum))
     print ("Intersection maximum = " .. tostring (aabox4.Maximum))

     print ("minimum = " .. tostring (aabox1.Minimum))
     print ("maximum = " .. tostring (aabox1.Maximum))
     print ("center = " .. tostring (aabox1.Center))
     print ("size = " .. tostring (aabox1.Size))
     print ("radius = " .. tostring (aabox1.Radius))
     print ("empty = " .. tostring (aabox1.Empty))
   end

   test ()
   (end code)
 */

/*
  Topic: Результат
 
   (start code) 
   Results of bv_test:
   Test library:
   Axis aligned box test
   minimum = 0 0 0
   maximum = 0 0 0
   center = 0 0 0
   size = 0 0 0
   radius = 0
   empty = true
   pxnynz corner = 17 -24 7.45
   minimum = -10 -24 7.45
   maximum = 17 32 14.59
   center = 3.5 4 11.02
   size = 27 56 7.14
   radius = 31.28889465332
   empty = false
   box2 minimum = -5 -4 -3
   box2 maximum = 4 5 6
   box3 minimum = -10 -24 -3
   box3 maximum = 17 32 14.59
   box3 minimum = -20 -48 14.9
   box3 maximum = 34 64 29.18
   box3 volume = 86365.4453125
   box1 volume = 0
   is box2 intersects box3 ? false
   is box2 contatins box3 ? false
   is transformed box2 intersects box3 ? true
   is transformed box2 contatins box3 ? true
   Intersection minimum = -6 -6 -6
   Intersection maximum = 5 5 5
   minimum = 1 1 1
   maximum = 1 1 1
   center = 1 1 1
   size = 0 0 0
   radius = 0
   empty = true
   (end code)
 */
