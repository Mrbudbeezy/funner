#ifndef DEBUGLIB_MAP_FILE_HEADER
#define DEBUGLIB_MAP_FILE_HEADER

#include <xtl/iterator.h>

#include <common/serializer_manager.h>

namespace debug
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Символ
///////////////////////////////////////////////////////////////////////////////////////////////////
class Symbol
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / присваивание / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Symbol  ();
    Symbol  (const char* name, size_t start_address, size_t size);
    Symbol  (const Symbol&);
    ~Symbol ();
    
    Symbol& operator = (const Symbol&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    () const;
    void        SetName (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Начальный адрес
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetStartAddress (size_t addr);
    size_t StartAddress    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размер
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetSize  (size_t size);
    size_t Size     () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Symbol&);
  
  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Symbol&, Symbol&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файл карты символов
///////////////////////////////////////////////////////////////////////////////////////////////////
class MapFile
{
  public:
    typedef xtl::iterator<Symbol>       Iterator;
    typedef xtl::iterator<const Symbol> ConstIterator;  
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / присваивание / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////  
    MapFile  (const char* file_name, const char* type);
    MapFile  (const MapFile&);
    ~MapFile ();

    MapFile& operator = (const MapFile&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    () const;
    void        SetName (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Type () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление символов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddSymbol        (const Symbol& symbol);
    void RemoveSymbol     (const Symbol& symbol);
    void RemoveAllSymbols ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор символов
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      CreateIterator ();
    ConstIterator CreateIterator () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск символа по адресу
///////////////////////////////////////////////////////////////////////////////////////////////////
          Symbol* FindSymbol (size_t address);
    const Symbol* FindSymbol (size_t address) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (MapFile&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (MapFile&, MapFile&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер управления map файлами
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef common::ResourceSerializerManager<
  void (const char* file_name, MapFile& file),
  void (const char* file_name, const MapFile& file)>
MapFileManager;

}

#endif
