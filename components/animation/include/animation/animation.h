#ifndef MEDIALIB_ANIMATION_ANIMATION_HEADER
#define MEDIALIB_ANIMATION_ANIMATION_HEADER

#include <typeinfo>

namespace media
{

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Канал анимации
///////////////////////////////////////////////////////////////////////////////////////////////////
//????
class Channel
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Channel  ();
    Channel  (const Channel&);
    ~Channel ();
    
    template <class TrackType> Channel (const char* name, const TrackType& track);
    
    Channel& operator = (const Channel&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя канала
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип трека
///////////////////////////////////////////////////////////////////////////////////////////////////
    const std::type_info& TrackType () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение трека
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class TrackType> const TrackType* Track () const;
    template <class TrackType>       TrackType* Track ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка трека
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class TrackType> void SetTrack (const TrackType&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Channel&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Channel&, Channel&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимация
///////////////////////////////////////////////////////////////////////////////////////////////////
class Animation
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
  //???
  
  private:
    struct Impl;
    Impl* impl;
};

}

}

#endif
