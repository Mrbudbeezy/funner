#ifndef ANIMATION_BIND_HEADER
#define ANIMATION_BIND_HEADER

namespace xtl
{

//forward declaration
class trackable; //???

}

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Анимационный параметр
///////////////////////////////////////////////////////////////////////////////////////////////////
class IAnimationParameter //????
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение сигнала оповещения об удалении
///////////////////////////////////////////////////////////////////////////////////////////////////  
    virtual xtl::trackable GetTrackable () = 0;

  protected:
    virtual ~IAnimationParameter () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовй класс биндинга параметров анимации к анимационному каналу
///////////////////////////////////////////////////////////////////////////////////////////////////
class IBinding
{
  public:
    virtual ~IBinding () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление параметра
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Update (float time) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Биндинг параметра анимации к анимационному каналу
///////////////////////////////////////////////////////////////////////////////////////////////////
class Binding
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Binding  (IBinding*);
    Binding  (const Binding&);
    ~Binding ();

    Binding& operator = (const Binding&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление параметра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (float time);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Binding&);

  private:
    IBinding* binding;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Binding&, Binding&);

}

#endif
