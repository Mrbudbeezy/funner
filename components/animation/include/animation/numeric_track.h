#infdef MEDIALIB_ANIMATION_NUMERIC_TRACK_HEADER
#define MEDIALIB_ANIMATION_NUMERIC_TRACK_HEADER

#include <mathlib.h>

namespace media
{

namespace animation
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Специализация типа значений ключевых элементов различной размерности
///////////////////////////////////////////////////////////////////////////////////////////////////
template <size_t Dimension> struct NumericKeyValueType    { typedef math::vec<float, Dimension> Type; };
template <>                 struct NumericKeyValueType<1> { typedef float                       Type; };

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод расчёта промежуточных точек
///////////////////////////////////////////////////////////////////////////////////////////////////
enum NumericEvalMethod
{
  NumericEvalMethod_Point,     //по точкам
  NumericEvalMethod_Linear,    //линейная интерполяция
  NumericEvalMethod_Quadratic, //квадратичная интерполяция
  NumericEvalMethod_Cubic,     //кубическая интерполяция (Кэтмула-Рома)
  NumericEvalMethod_Bezier,    //сглаживающий сплайн Безье

  NumericEvalMethod_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Канал интерполяции числовых данных
///////////////////////////////////////////////////////////////////////////////////////////////////
template <size_t KeyDimension> class NumericTrack
{
  public:
    enum { Dimension = KeyDimension };
    
    typedef typename NumericKeyValueType<Dimension>::Type ValueType;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    NumericTrack  ();
    NumericTrack  (const NumericTrack&);
    ~NumericTrack ();

    NumericTrack& operator = (const NumericTrack&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование точек
///////////////////////////////////////////////////////////////////////////////////////////////////    
    size_t Capacity () const;
    void   Reserve  (size_t keys_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / изменение ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t SetKey   (float time, const ValueType& value);
    void   SetKey   (size_t key_index, float time, const ValueType& value);
    void   SetTime  (size_t key_index, float time);
    void   SetValue (size_t key_index, const ValueType& value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение значений ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    void      GetValue (size_t key_index, ValueType& value) const;
    ValueType GetValue (size_t key_index) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сортировка точек (по возрастанию времени)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Sort ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление ключевых точек
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove (size_t key_index);
    void Clear  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск индекса ключа
///////////////////////////////////////////////////////////////////////////////////////////////////
    int FindLower (float time) const; //поиск ключа <= time
    int FindUpper (float time) const; //поиск ключа >= time
    int FindEqual (float time) const; //поиск ключа == time

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод расчёта значений в промежуточных точках
///////////////////////////////////////////////////////////////////////////////////////////////////
    void              SetEvalMethod (NumericEvalMethod method);
    NumericEvalMethod EvalMethod    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Расчёт значения в промежуточной точке
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Eval (float time, ValueType& value) const;
    void Eval (float time, ValueType& value, size_t& prev_point_hint) const; //default prev_point_hint = 0
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Оптимизация трека (удаление лишних точек без изменения траектории)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Optimize ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (NumericTrack&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (NumericTrack&, NumericTrack&);

}

}

#endif
