#ifndef RENDER_MID_LEVEL_DEBUG_DRIVER_SHARED_HEADER
#define RENDER_MID_LEVEL_DEBUG_DRIVER_SHARED_HEADER

#include <stl/vector>

#include <xtl/reference_counter.h>
#include <xtl/function.h>
#include <xtl/string.h>
#include <xtl/common_exceptions.h>
#include <xtl/intrusive_ptr.h>

#include <common/log.h>
#include <common/component.h>

#include <media/image.h>

#include <render/mid_level/driver.h>
#include <render/mid_level/renderer2d.h>

#ifdef _MSC_VER
  #pragma warning (disable : 4250) //'class1' : inherits 'class2::member' via dominance
#endif

namespace render
{

namespace mid_level
{

namespace debug
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Константы
///////////////////////////////////////////////////////////////////////////////////////////////////
const size_t SCREEN_WIDTH  = 800; //ширина внутреннего экрана
const size_t SCREEN_HEIGHT = 600; //высота внутреннего экрана

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый объект
///////////////////////////////////////////////////////////////////////////////////////////////////
class Object: virtual public IObject, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Object ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  ();    
    void Release ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const { return id; }

  protected:
    common::Log log;
    
  private:
    size_t id;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип целевого буфера отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
enum RenderTargetType
{
  RenderTargetType_Color,        //буфер цвета
  RenderTargetType_DepthStencil, //буфер попиксельного отсечения
  
  RenderTargetType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Целевой буфер отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderTarget: virtual public IRenderTarget, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTarget (size_t width, size_t height, RenderTargetType type);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип целевого буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTargetType GetType () { return type; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetWidth  ();
    size_t GetHeight ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование образа текстуры в картинку
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CaptureImage (media::Image&);
    
  private:
    size_t           width, height;
    RenderTargetType type;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовая реализация кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
class BasicFrame: virtual public IFrame, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    BasicFrame ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Целевые буферы отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void           SetRenderTargets      (IRenderTarget* render_target, IRenderTarget* depth_stencil_target);
    IRenderTarget* GetRenderTarget       (); //целевой буфер цвета
    IRenderTarget* GetDepthStencilTarget (); //целевой буфер попиксельного отсечения

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetViewport (const Viewport&);
    void GetViewport (Viewport&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры очистки целевых буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetClearBuffers      (bool clear_render_target, bool clear_depth_stencil_target);
    void GetClearBuffers      (bool& clear_render_target, bool& clear_depth_stencil_target);
    void SetClearColor        (const math::vec4f& color);
    void SetClearDepthStencil (float depth_value, unsigned char stencil_index);
    void GetClearColor        (math::vec4f& color);
    void GetClearDepthStencil (float& depth_value, unsigned char& stencil_index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Визуализация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Draw ();
    
  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void DrawCore () = 0;

  private:
    typedef xtl::com_ptr<RenderTarget> RenderTargetPtr;

  private:
    RenderTargetPtr render_target;
    RenderTargetPtr depth_stencil_target;
    Viewport        viewport;
    math::vec4f     clear_color;
    float           clear_depth_value;
    unsigned char   clear_stencil_index;
    bool            need_clear_render_target;
    bool            need_clear_depth_stencil_target;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовая система рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class BasicRenderer: virtual public IRenderer, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    BasicRenderer ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetDescription ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Внутренний идентификатор пула ресурсов
///  (необходим для совместного использования ресурсов, созданных на разных IRenderer)
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetResourcePoolId ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение буфера цвета и буфера попиксельного отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    IRenderTarget* GetColorBuffer ();
    IRenderTarget* GetDepthStencilBuffer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    IRenderTarget* CreateDepthStencilBuffer ();
    IRenderTarget* CreateRenderBuffer       ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление кадра в список отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddFrame (IFrame*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конец отрисовки / сброс отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void DrawFrames   ();
    void CancelFrames ();
    
  private:
    typedef xtl::com_ptr<IRenderTarget> RenderTargetPtr;
    typedef xtl::com_ptr<BasicFrame>    FramePtr;
    typedef stl::vector<FramePtr>       FrameArray;

  private:
    RenderTargetPtr color_buffer;
    RenderTargetPtr depth_stencil_buffer;
    FrameArray      frames;
    size_t          frame_id;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отладочный драйвер системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Driver: virtual public IDriver, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Driver  ();
    ~Driver ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetDescription ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных систем визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      GetRenderersCount ();    
    const char* GetRendererName   (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание устройства визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    IRenderer* CreateRenderer (const char* name);    
};

namespace renderer2d
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Двумерная текстура
///////////////////////////////////////////////////////////////////////////////////////////////////
class Texture: virtual public mid_level::renderer2d::ITexture, public RenderTarget
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Texture  (size_t width, size_t height, media::PixelFormat format);
    ~Texture ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Формат
///////////////////////////////////////////////////////////////////////////////////////////////////
    media::PixelFormat GetFormat () { return format; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование образа текстуры в картинку
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CaptureImage (media::Image&);    

  private:
    media::PixelFormat format;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Примитив
///////////////////////////////////////////////////////////////////////////////////////////////////
class Primitive: virtual public mid_level::renderer2d::IPrimitive, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Primitive  ();
    ~Primitive ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица преобразований
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetTransform (const math::mat4f&);
    void GetTransform (math::mat4f&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка базовой текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                             SetTexture (mid_level::renderer2d::ITexture*);
    mid_level::renderer2d::ITexture* GetTexture ();
    size_t                           GetTextureId () { return texture ? texture->Id () : 0; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим смешивания цветов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                             SetBlendMode (mid_level::renderer2d::BlendMode blend_mode);
    mid_level::renderer2d::BlendMode GetBlendMode ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Спрайты
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetSpritesCount  ();
    void   GetSprite        (size_t index, mid_level::renderer2d::Sprite& sprite);
    size_t AddSprites       (size_t sprites_count, const mid_level::renderer2d::Sprite* sprites);
    void   RemoveSprites    (size_t first_sprite, size_t sprites_count);
    void   RemoveAllSprites ();
    void   ReserveSprites   (size_t sprites_count);

  private:
    typedef stl::vector<mid_level::renderer2d::Sprite> SpriteArray;
    typedef xtl::com_ptr<Texture>                      TexturePtr;

  private:
    math::mat4f                      transform;
    TexturePtr                       texture;
    mid_level::renderer2d::BlendMode blend_mode;
    SpriteArray                      sprites;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Кадр 2D визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
class Frame: virtual public mid_level::renderer2d::IFrame, public BasicFrame
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Frame  ();
    ~Frame ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица вида / матрица преобразования
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetView       (const math::mat4f&);
    void SetProjection (const math::mat4f&);
    void GetView       (math::mat4f&);
    void GetProjection (math::mat4f&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Примитивы
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t PrimitivesCount ();
    void   AddPrimitive    (mid_level::renderer2d::IPrimitive*);
    void   Clear           ();

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void DrawCore ();

  private:
    typedef xtl::com_ptr<Primitive>   PrimitivePtr;
    typedef stl::vector<PrimitivePtr> PrimitiveArray;

  private:
    math::mat4f    view_tm, proj_tm;
    PrimitiveArray primitives;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система рендеринга 2D-примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
class Renderer: virtual public mid_level::renderer2d::IRenderer, public BasicRenderer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Renderer  ();
    ~Renderer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    mid_level::renderer2d::ITexture*   CreateTexture   (const media::Image& image);
    mid_level::renderer2d::ITexture*   CreateTexture   (size_t width, size_t height, media::PixelFormat pixel_format);
    mid_level::renderer2d::IPrimitive* CreatePrimitive ();
    mid_level::renderer2d::IFrame*     CreateFrame     ();
};

}

}

}

}

#endif

