#ifndef RENDER_MID_LEVEL_DEBUG_DRIVER_SHARED_HEADER
#define RENDER_MID_LEVEL_DEBUG_DRIVER_SHARED_HEADER

#include <xtl/reference_counter.h>
#include <xtl/function.h>
#include <xtl/string.h>
#include <xtl/common_exceptions.h>
#include <xtl/intrusive_ptr.h>

#include <common/log.h>
#include <common/component.h>

#include <render/mid_level/driver.h>

namespace render
{

namespace mid_level
{

namespace debug
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отладочный драйвер системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Driver: public IDriver, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Driver  ();
    ~Driver ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetDescription ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных систем визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      GetRenderersCount ();    
    const char* GetRendererName   (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание устройства визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    IRenderer* CreateRenderer (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  ();    
    void Release ();
    
  private:
    common::Log log;
};

}

}

}

#endif

