typedef unsigned long long FrameTime;
typedef unsigned long long FrameId;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс кэша
///////////////////////////////////////////////////////////////////////////////////////////////////
class Cache: public xtl::noncopyable
{
  friend class CacheManager;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
            Cache  (const CacheManagerPtr&);
    virtual ~Cache ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Текущий кадр / текущий фрейм
///////////////////////////////////////////////////////////////////////////////////////////////////
    FrameTime CurrentTime  () { return current_time; }    
    FrameId   CurrentFrame () { return current_frame; }
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры кэширования
///////////////////////////////////////////////////////////////////////////////////////////////////    
    FrameTime TimeDelay  ();
    FrameId   FrameDelay ();

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс закэшированных элементов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void FlushCache () = 0;
    
  private:
    CacheManagerPtr manager;
    FrameTime       current_time;
    FrameId         current_frame;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер кэширования
///////////////////////////////////////////////////////////////////////////////////////////////////
class CacheManager: public Object
{
  friend class Cache;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    CacheManager  ();
    ~CacheManager ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры кэширования
///////////////////////////////////////////////////////////////////////////////////////////////////
    void      SetTimeDelay  (FrameTime milliseconds);
    void      SetFrameDelay (FrameId frames_count);
    FrameTime TimeDelay     ();
    FrameId   FrameDelay    ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление маркеров времени
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateMarkers ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс кэшей
///////////////////////////////////////////////////////////////////////////////////////////////////
    void FlushCaches ();
    
  private:
    void AddCache    (Cache&);
    void RemoveCache (Cache&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
