///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс группы динамических примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
class DynamicPrimitiveListImplBase: public Object, public CacheSource
{
  public:
    virtual ~DynamicPrimitiveListImplBase () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства группы
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsEntityDependent ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Группы примитивов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                  RendererPrimitiveGroupsCount ();
    RendererPrimitiveGroup* RendererPrimitiveGroups      ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание экземпляра
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual DynamicPrimitive* CreateDynamicPrimitiveInstanceCore () = 0;

  protected:
    DynamicPrimitiveListImplBase (bool is_entity_dependent);

    void SetRendererPrimitiveGroups (size_t count, RendererPrimitiveGroup* groups);

  private:  
    bool                    entity_dependent;
    size_t                  primitive_groups_count;
    RendererPrimitiveGroup* primitive_groups;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс группы динамических примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class DynamicPrimitiveListImpl: public DynamicPrimitiveListImplBase
{
  public:
    typedef T Item;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Size () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void        SetMaterial (const char* material) = 0;
    virtual const char* Material    () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / обновление примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Add    (size_t count, const Item* items) = 0;
    virtual void   Update (size_t first, size_t count, const Item* items) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Remove (size_t first, size_t count) = 0;
    virtual void Clear  () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервируемое пространство
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void   Reserve  (size_t count) = 0;
    virtual size_t Capacity () = 0;

  protected:
    DynamicPrimitiveListImpl (bool is_entity_dependent);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание групп динамических примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
LineListImpl*           create_standalone_line_list            (const MaterialManagerPtr&, MeshBufferUsage vb_usage, MeshBufferUsage ib_usage);
OrientedSpriteListImpl* create_standalone_oriented_sprite_list (const MaterialManagerPtr&, const math::vec3f& up, MeshBufferUsage vb_usage, MeshBufferUsage ib_usage);
