///////////////////////////////////////////////////////////////////////////////////////////////////
///Опции компиляции шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ShaderOptions
{
  stl::string options;      //строка опций
  size_t      options_hash; //хэш строки опций
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список макро-определений шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
class ShaderDefineList: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderDefineList  ();
    ~ShaderDefineList ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество закэшированных генераторов опций
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t CachedShaderBuildersCount ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Макро-определения
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      Size   ();
    const char* Item   (size_t index);
    void        Add    (const char* name);
    void        Remove (const char* name);
    void        Clear  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение опций шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetShaderOptions (const common::PropertyMap& defines, ShaderOptions& out_options);
  
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

