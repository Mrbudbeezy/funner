#ifndef RENDER_MANAGER_CACHE_HEADER
#define RENDER_MANAGER_CACHE_HEADER

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект, хранящий кэшируемые объекты
///////////////////////////////////////////////////////////////////////////////////////////////////
class CacheHolder: public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    CacheHolder  ();
    ~CacheHolder ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Построение списка связанных хранителей кэша
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachCacheSource     (CacheHolder& source);
    void DetachCacheSource     (CacheHolder& source);
    void DetachAllCacheSources ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Соответствует ли кэш источнику / является ли данный объект родительским по отношению к переданному
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsCacheValid () { return !need_update; }
    bool IsParentOf   (CacheHolder& child);

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Отметка о необходимости обновления кэша источника
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Invalidate ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление кэша. Необходимо вызывать перед каждым использованием ресурса
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateCache ();

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Кэшируемый источник требует обновления кэша.
///////////////////////////////////////////////////////////////////////////////////////////////////  
    virtual void UpdateCacheCore () = 0;
    virtual void ResetCacheCore  () = 0;

  private:
    typedef stl::list<CacheHolder*> HolderList;

  private:
    HolderList parent_holders;
    HolderList child_holders;
    bool       need_update;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник кэшированных данных
///////////////////////////////////////////////////////////////////////////////////////////////////
class CacheSource: public CacheHolder
{
  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Кэшируемый источник требует обновления кэша.
///////////////////////////////////////////////////////////////////////////////////////////////////  
    void UpdateCacheCore ();
    void ResetCacheCore  ();
};

#endif
