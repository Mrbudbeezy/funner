///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
class MaterialManager: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    MaterialManager  (const DeviceManagerPtr&, const TextureManagerPtr&, const ShadingManagerPtr&);
    ~MaterialManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
    MaterialPtr CreateMaterial ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка: является ли ресурс библиотекой материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static bool IsMaterialLibraryResource (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / выгрузка материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadMaterialLibrary   (const char* name);
    void LoadMaterialLibrary   (const media::rfx::MaterialLibrary&);
    void UnloadMaterialLibrary (const char* name);
    void UnloadMaterialLibrary (const media::rfx::MaterialLibrary&);    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение прокси
///////////////////////////////////////////////////////////////////////////////////////////////////
    MaterialProxy GetMaterialProxy (const char* name); //создание прокси в случае отсутствия
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск загруженного материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    MaterialPtr FindMaterial (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка материала по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetDefaultMaterial (const MaterialPtr& material);
    MaterialPtr DefaultMaterial    ();
  
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
