///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация менеджера рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderManagerImpl: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderManagerImpl  ();
    ~RenderManagerImpl ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Строка описания устройства рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Description ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание окна рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    WindowPtr CreateWindow (syslib::Window& window, common::PropertyMap& properties);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор окон рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t    WindowsCount ();
    WindowPtr Window       (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание целей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTargetPtr CreateRenderBuffer       (size_t width, size_t height, PixelFormat format);
    RenderTargetPtr CreateDepthStencilBuffer (size_t width, size_t height);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    PrimitivePtr CreatePrimitive ();
    FramePtr     CreateFrame     ();
    TexturePtr   CreateTexture   (const media::Image& image, bool generate_mipmaps);
    TexturePtr   CreateTexture   (const media::Image& image, TextureDimension dimension, bool generate_mipmaps);
    TexturePtr   CreateTexture   (TextureDimension dimension, size_t width, size_t height, size_t depth, PixelFormat format, bool generate_mipmaps);
    MaterialPtr  CreateMaterial  ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск загруженных примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    TexturePtr   FindTexture   (const char* name);
    MaterialPtr  FindMaterial  (const char* name);
    PrimitivePtr FindPrimitive (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadResource   (const char* resource_name);
    void LoadResource   (const media::rfx::MaterialLibrary&);
    void LoadResource   (const media::geometry::MeshLibrary&);
    void UnloadResource (const char* resource_name);
    void UnloadResource (const media::rfx::MaterialLibrary&);
    void UnloadResource (const media::geometry::MeshLibrary&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация на события
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef RenderManager::WindowEventHandler WindowEventHandler;

    xtl::connection RegisterWindowEventHandler (RenderManagerWindowEvent event, const WindowEventHandler& handler) const;

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
