///////////////////////////////////////////////////////////////////////////////////////////////////
///Окно рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class WindowImpl: public Object, public xtl::trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    WindowImpl  (const DeviceManagerPtr&, INativeWindow&, const common::PropertyMap&, const SettingsPtr&, const CacheManagerPtr&);
    ~WindowImpl ();    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    DeviceManagerPtr& DeviceManager ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetName   (const char* name);
    const char* Name      ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цели рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    const RenderTargetPtr& ColorBuffer        ();
    const RenderTargetPtr& DepthStencilBuffer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры целей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int Width  ();
    unsigned int Height ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация обработчиков событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef Window::EventHandler EventHandler;

    xtl::connection RegisterEventHandler (WindowEvent event, const EventHandler& handler) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Принудительное обновление содержимого окна (обмен буферов)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SwapBuffers ();    

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обертка для syslib::Window
///////////////////////////////////////////////////////////////////////////////////////////////////
class NativeWindow: public INativeWindow, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    NativeWindow  (syslib::Window&);
    ~NativeWindow ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int GetWidth  ();
    unsigned int GetHeight ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    Rect GetViewport ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Низкоуровневый дескриптор
///////////////////////////////////////////////////////////////////////////////////////////////////
    void* GetHandle ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка слушателя событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachListener (INativeWindowListener*);
    void DetachListener (INativeWindowListener*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчет ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  ();
    void Release ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
