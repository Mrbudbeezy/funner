///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание текстурной карты
///////////////////////////////////////////////////////////////////////////////////////////////////
struct TexmapDesc
{
  size_t      channel;    //номер текстурного канала
  const char* semantic;   //имя семантики в media::rfx::Texmap
  const char* param_name; //имя параметра в шейдере
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Программа шейдинга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Program: public Object, public CacheSource
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Program  ();
    ~Program ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Отображение семантики текстурной карты на номер канала и имя параметра
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t            TexmapsCount     ();
    const TexmapDesc* Texmaps          ();
    const TexmapDesc& Texmap           (size_t index);
    void              SetTexmap        (size_t index, size_t channel, const char* semantic, const char* param_name);
    void              RemoveTexmap     (size_t index);
    void              RemoveAllTexmaps ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

