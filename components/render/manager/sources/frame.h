///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст цели отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
struct RenderTargetDesc: public xtl::reference_counter
{
  RenderTargetPtr render_target; //цель отрисовки
  RectAreaPtr     viewport;      //область вывода
  RectAreaPtr     scissor;       //область отсечения
  
  RenderTargetDesc (const RenderTargetPtr& in_render_target, const RectAreaPtr& in_viewport, const RectAreaPtr& in_scissor)
    : render_target (in_render_target)
    , viewport (in_viewport)
    , scissor (in_scissor)
  {
  }  
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Визуализируемый кадр
///////////////////////////////////////////////////////////////////////////////////////////////////
class FrameImpl: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FrameImpl  (const DeviceManagerPtr&, const EffectManagerPtr&);
    ~FrameImpl ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация целевых буферов отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetRenderTarget        (const char* name, const RenderTargetPtr& target);
    void SetRenderTarget        (const char* name, const RenderTargetPtr& target, const RectAreaPtr& viewport);
    void SetRenderTarget        (const char* name, const RenderTargetPtr& target, const RectAreaPtr& viewport, const RectAreaPtr& scissor);
    void RemoveRenderTarget     (const char* name);
    void RemoveAllRenderTargets ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение целевых буферов отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTargetPtr     FindRenderTarget     (const char* name);
    RectAreaPtr         FindViewport         (const char* name);
    RectAreaPtr         FindScissor          (const char* name);
    RenderTargetDescPtr FindRenderTargetDesc (const char* name);
    RenderTargetPtr     RenderTarget         (const char* name);
    RectAreaPtr         Viewport             (const char* name);
    RectAreaPtr         Scissor              (const char* name);
    RenderTargetDescPtr RenderTargetDesc     (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление отсечением
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetScissorState (bool state);
    bool ScissorState    ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги очистки кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetClearFlags (size_t clear_flags);
    size_t ClearFlags    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры очистки буфера цвета
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetClearColor (const math::vec4f& color);
    const math::vec4f& ClearColor    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры очистки буфера попиксельного отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          SetClearDepthValue   (float depth_value);
    void          SetClearStencilIndex (unsigned char stencil_index);
    float         ClearDepthValue      ();
    unsigned char ClearStencilIndex    ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Локальные текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetLocalTexture        (const char* name, const TexturePtr& texture);
    void RemoveLocalTexture     (const char* name);
    void RemoveAllLocalTextures ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение локальной текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
    TexturePtr FindLocalTexture (const char* name);
    TexturePtr LocalTexture     (const char* name);
        
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка эффекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetEffect (const char* name);
    const char* Effect    ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Рендер эффекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    EffectRendererPtr EffectRenderer ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetProperties (const common::PropertyMap&);
    const common::PropertyMap& Properties    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Макро-определения шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetShaderOptions (const common::PropertyMap&);
    const common::PropertyMap& ShaderOptions    () const;    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef Frame::EntityDrawHandler EntityDrawHandler;

    size_t EntitiesCount     ();
    void   AddEntity         (const EntityPtr& entity);
    void   AddEntity         (const EntityPtr& entity, const common::PropertyMap& properties, const math::mat4f& mvp_matrix);
    void   AddEntity         (const EntityPtr& entity, const EntityDrawHandler& handler);
    void   RemoveAllEntities ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление пре-рендеринга и пост-рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t FramesCount     ();
    void   AddFrame        (const FramePtr& frame);
    void   RemoveAllFrames ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Рисование кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Draw (RenderingContext* previous = 0);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление кэшированием
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateCache ();
    void ResetCache  ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
