///implementation forwards
template <class Ptr> class  ResourceProxyManager;
template <class Ptr> struct ResourceProxyManagerImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Прокси объект для хранения ссылки на именованный ресурс
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Ptr> class ResourceProxy
{
  friend class ResourceProxyManager<Ptr>;
  public:
    typedef Ptr                           Pointer;
    typedef ResourceProxyManager<Pointer> Manager;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    ResourceProxy  (const ResourceProxy&);
    ~ResourceProxy ();

    ResourceProxy& operator = (const ResourceProxy&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка корректности связанных данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsDefaultData ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    Pointer     Data    ();     
    void        SetData (const Pointer&);
    const char* Name    ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание со списком обновления кэша
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (CacheHolder&);
    void Detach (CacheHolder&);

  protected:
    typedef ResourceProxyManagerImpl<Ptr> ManagerImpl;
  
    ResourceProxy (ManagerImpl&, const char* name);
    
  private:
    void SetDefaultData (const Pointer&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер прокси объектов для хранения ссылок на именованный ресурс
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Ptr> class ResourceProxyManager: public xtl::noncopyable
{
  public:
    typedef Ptr                Pointer;
    typedef ResourceProxy<Ptr> Proxy;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ResourceProxyManager  ();
    ~ResourceProxyManager ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение прокси объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    Proxy GetProxy (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка объекта по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    void    SetDefault (const Pointer&);
    Pointer Default    ();    
  
  private:
    typedef ResourceProxyManagerImpl<Ptr> Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Возможные прокси ресурсы
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef ResourceProxy<TexturePtr>   TextureProxy;
typedef ResourceProxy<PrimitivePtr> PrimitiveProxy;
typedef ResourceProxy<MaterialPtr>  MaterialProxy;
typedef TextureProxy::Manager       TextureProxyManager;
typedef PrimitiveProxy::Manager     PrimitiveProxyManager;
typedef MaterialProxy::Manager      MaterialProxyManager;
