///implementation forwards
template <class Ptr> class  ResourceProxyManager;
template <class Ptr> struct ResourceProxyManagerImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Прокси объект для хранения ссылки на именованный ресурс
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Ptr> class ResourceProxy
{
  public:
    typedef Ptr                           Pointer;
    typedef ResourceProxyManager<Pointer> Manager;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    ResourceProxy  (const ResourceProxy&);
    ~ResourceProxy ();

    ResourceProxy& operator = (const ResourceProxy&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    Pointer     Data (); 
    const char* Name ();
    
  protected:
    typedef ResourceProxyManagerImpl<Ptr> ManagerImpl;
  
    ResourceProxy (ManagerImpl&, const char* name);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер прокси объектов для хранения ссылок на именованный ресурс
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Ptr> class ResourceProxyManager: public xtl::noncopyable
{
  public:
    typedef Ptr                Pointer;
    typedef ResourceProxy<Ptr> Proxy;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ResourceProxyManager  ();
    ~ResourceProxyManager ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание прокси объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    Proxy CreateProxy (const char* name);  
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка объекта по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    void    SetDefault (const Pointer&);
    Pointer Default    ();    
  
  private:
    typedef ResourceProxyManagerImpl<Ptr> Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Возможные прокси ресурсы
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef ResourceProxy<TexturePtr>   TextureProxy;
typedef ResourceProxy<PrimitivePtr> PrimitiveProxy;
typedef ResourceProxy<MaterialPtr>  MaterialProxy;
typedef TextureProxy::Manager       TextureProxyManager;
typedef PrimitiveProxy::Manager     PrimitiveProxyManager;
typedef MaterialProxy::Manager      MaterialProxyManager;
