///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги создания динамического примитива
///////////////////////////////////////////////////////////////////////////////////////////////////
enum DynamicPrimitiveFlag
{
  DynamicPrimitiveFlag_FrameDependent  = 1, //динамический примитив зависит от кадра
  DynamicPrimitiveFlag_EntityDependent = 2, //динамический примитив зависит от сущности

  DynamicPrimitiveFlag_Default = DynamicPrimitiveFlag_EntityDependent
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамический примитив
///////////////////////////////////////////////////////////////////////////////////////////////////
class DynamicPrimitive: public Object, public CacheSource, public xtl::trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~DynamicPrimitive () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateOnPrerender (FrameId frame_id);
    void UpdateOnRender    (FrameImpl& frame, EntityImpl& entity, const math::mat4f& mvp_matrix);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Группа примитивов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    const manager::RendererPrimitiveGroup& RendererPrimitiveGroup ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Является ли примитив зависимым от кадра / является ли примитив зависимым от EntityDrawParams
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsFrameDependent  ();
    bool IsEntityDependent ();

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicPrimitive (const manager::RendererPrimitiveGroup& group, size_t flags = DynamicPrimitiveFlag_Default);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void UpdateOnPrerenderCore () = 0;
    virtual void UpdateOnRenderCore    (FrameImpl& frame, EntityImpl& entity, const math::mat4f& mvp_matrix) = 0;

  private:
    const manager::RendererPrimitiveGroup& group;
    bool                                   frame_dependent;
    bool                                   entity_dependent;
    FrameId                                cached_frame_id;
    EntityImpl*                            cached_entity;
    FrameImpl*                             cached_frame;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Хранилище динамических примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
class DynamicPrimitiveEntityStorage: public CacheSource
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicPrimitiveEntityStorage  (EntityImpl& entity);
    ~DynamicPrimitiveEntityStorage ();
   
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление динамических примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddPrimitive        (const DynamicPrimitivePtr&, void* source_tag = 0);
    void RemovePrimitive     (const DynamicPrimitivePtr&);
    void RemoveAllPrimitives ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск примитива по тэгу
///////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicPrimitivePtr FindPrimitive (void* source_tag, bool touch);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление автоматической сборкой неиспользуемых динамических примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void BeginUpdate ();
    void EndUpdate   ();

    struct UpdateScope: public xtl::noncopyable
    {
      UpdateScope (DynamicPrimitiveEntityStorage& in_storage) : storage (in_storage) { storage.BeginUpdate (); }
      ~UpdateScope () { storage.EndUpdate (); }

      DynamicPrimitiveEntityStorage& storage;
    };

///////////////////////////////////////////////////////////////////////////////////////////////////
///Группы примитивов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                         RendererPrimitiveGroupsCount ();
    RendererDynamicPrimitiveGroup* RendererPrimitiveGroups      ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление кэшированием
///////////////////////////////////////////////////////////////////////////////////////////////////
    using CacheSource::UpdateCache;
    using CacheSource::ResetCache;
      
  private:
    void UpdateCacheCore ();
    void ResetCacheCore ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация
///////////////////////////////////////////////////////////////////////////////////////////////////

inline const RendererPrimitiveGroup& DynamicPrimitive::RendererPrimitiveGroup ()
{
  return group;
}

inline bool DynamicPrimitive::IsFrameDependent ()
{
  return frame_dependent;
}

inline bool DynamicPrimitive::IsEntityDependent ()
{
  return entity_dependent;
}

inline void DynamicPrimitive::UpdateOnPrerender (FrameId frame_id)
{
  if (frame_id == cached_frame_id)
    return;

  try
  {
    UpdateOnPrerenderCore ();
  }
  catch (xtl::exception& e)
  {
    e.touch ("render::manager::DynamicPrimitive::UpdateOnPrerender");
    throw;
  }
}

inline void DynamicPrimitive::UpdateOnRender (FrameImpl& frame, EntityImpl& entity, const math::mat4f& mvp_matrix)
{
  if (&entity == cached_entity && &frame == cached_frame)
    return;

  try
  {
    UpdateOnRenderCore (frame, entity, mvp_matrix);
  }
  catch (xtl::exception& e)
  {
    e.touch ("render::manager::DynamicPrimitive::UpdateOnRender");
    throw;
  }  
}
