//implementation forward
class LogImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип протокола
///////////////////////////////////////////////////////////////////////////////////////////////////
enum LogSeverity
{
  LogSeverity_Common, //общий поток сообщений
  LogSeverity_Debug,  //отладочные сообщения   
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Протокол
///////////////////////////////////////////////////////////////////////////////////////////////////
class Log
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Log  (LogSeverity severity = LogSeverity_Common);
    Log  (const Log&);
    ~Log ();

    Log& operator = (const Log&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Печать сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Print   (const char* message) const;
    void Printf  (const char* message, ...) const;
    void VPrintf (const char* message, va_list list) const;

  private:
    LogImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отладочный протокол
///////////////////////////////////////////////////////////////////////////////////////////////////
class DebugLog: public Log
{
  public:
    DebugLog () : Log (LogSeverity_Debug) {}
};

