class BatchingManager;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блок состояний пакета
///////////////////////////////////////////////////////////////////////////////////////////////////
class BatchStateBlock: public Object, public CacheSource
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    BatchStateBlock  (BatchingManager& batching_manager, MaterialImpl& material);
    ~BatchStateBlock ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блок состояний
///////////////////////////////////////////////////////////////////////////////////////////////////
    LowLevelStateBlockPtr StateBlock ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление кэшированием
///////////////////////////////////////////////////////////////////////////////////////////////////
    using CacheSource::UpdateCache;
    using CacheSource::ResetCache;

  private:
    void UpdateCacheCore ();
    void ResetCacheCore ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер упаковки примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
class BatchingManager: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    BatchingManager  (const DeviceManagerPtr&);
    ~BatchingManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ссылка на менеджер устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    manager::DeviceManager& DeviceManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование вспомогательных примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   ReserveDynamicPrimitives (size_t sprites_count, size_t lines_count);
    size_t LinesCapacity            ();
    size_t SpritesCapacity          ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамические буферы
///////////////////////////////////////////////////////////////////////////////////////////////////
    manager::DynamicVertexBuffer& DynamicVertexBuffer ();
    manager::DynamicIndexBuffer&  DynamicIndexBuffer  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выделение вершин и индексов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AllocateDynamicVertices   (size_t count);
    size_t AllocateDynamicIndices    (size_t count);
    void   DeallocateDynamicVertices (size_t first, size_t count);
    void   DeallocateDynamicIndices  (size_t first, size_t count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение блока состояний по материалу
///////////////////////////////////////////////////////////////////////////////////////////////////
    BatchStateBlockPtr GetStateBlock (MaterialImpl* material);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
