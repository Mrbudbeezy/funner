class BatchingManager;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блок состояний пакета
///////////////////////////////////////////////////////////////////////////////////////////////////
class BatchStateBlock: public Object, public CacheSource
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    BatchStateBlock  (BatchingManager& batching_manager, MaterialImpl& material);
    ~BatchStateBlock ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блок состояний
///////////////////////////////////////////////////////////////////////////////////////////////////
    LowLevelStateBlockPtr StateBlock ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление кэшированием
///////////////////////////////////////////////////////////////////////////////////////////////////
    using CacheSource::UpdateCache;
    using CacheSource::ResetCache;

  private:
    void UpdateCacheCore ();
    void ResetCacheCore ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип индексного пула
///////////////////////////////////////////////////////////////////////////////////////////////////
enum IndexPoolType
{
  IndexPoolType_Linear,    //линейный буфер, используемый для пакетной отрисовки групп примитивов
  IndexPoolType_Temporary, //временный буфер, используемый для формирование индексов примитивов в процессе подготовки кадра
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер упаковки примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
class BatchingManager: public Object, public CacheSource
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    BatchingManager  (const DeviceManagerPtr&);
    ~BatchingManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ссылка на менеджер устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    manager::DeviceManager& DeviceManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование буферов для динамических примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   ReserveDynamicBuffers (size_t vertices_count, size_t indices_count);
    size_t DynamicVerticesCount  () const;
    size_t DynamicIndicesCount   () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамические буферы
///////////////////////////////////////////////////////////////////////////////////////////////////
    manager::DynamicVertexBuffer&       DynamicVertexBuffer ();
    manager::DynamicIndexBuffer&        DynamicIndexBuffer  ();
    const DynamicPrimitiveIndex* const* TempIndexBuffer     ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выделение вершин и индексов
///////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicPrimitiveVertex* AllocateDynamicVertices    (size_t count, size_t* out_base_vertex_index = 0);
    DynamicPrimitiveIndex*  AllocateDynamicIndices     (IndexPoolType type, size_t count);
    void                    ResetDynamicBuffers        ();
    void                    ResetLinearIndexBuffer     ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Предвыделение вершин
///////////////////////////////////////////////////////////////////////////////////////////////////
    void PreallocateDynamicVertices         (size_t count);
    void ResetDynamicVerticesPreallocations ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текущее количество выделенных вершин
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetAllocatedDynamicVerticesCount (size_t count);
    size_t AllocatedDynamicVerticesCount    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение блока состояний по материалу
///////////////////////////////////////////////////////////////////////////////////////////////////
    BatchStateBlockPtr GetStateBlock (MaterialImpl* material);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тэг текущего прохода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetPassUserData (const void* tag);
    const void* PassUserData    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Номер активного кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void    SetActiveFrame (FrameId frame_id);
    FrameId ActiveFrame    ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
