#ifndef RENDER_MANAGER_CACHE_HEADER
#define RENDER_MANAGER_CACHE_HEADER

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние кэша
///////////////////////////////////////////////////////////////////////////////////////////////////
enum CacheState
{
  CacheState_Reset,   //кэш сброшен
  CacheState_Valid,   //кэш в актуальном состоянии
  CacheState_Invalid, //кэш в требует обновления
  CacheState_Broken,  //кэш в некорректном состоянии, вызванном ошибкой при обновлении кэша
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект, хранящий кэшируемые объекты
///////////////////////////////////////////////////////////////////////////////////////////////////
class CacheHolder: public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
            CacheHolder  ();
    virtual ~CacheHolder ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Построение списка связанных хранителей кэша
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachCacheSource     (CacheHolder& source);
    void DetachCacheSource     (CacheHolder& source);
    void DetachAllCacheSources ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние кэша
///////////////////////////////////////////////////////////////////////////////////////////////////
    CacheState State ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Предикаты
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsParentOf (CacheHolder& child);
    bool IsValid    () { return State () == CacheState_Valid; }
    bool IsBroken   () { return State () == CacheState_Broken; }

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка флага необходимости обновления кэша / зависимых кэшей
///////////////////////////////////////////////////////////////////////////////////////////////////
    void InvalidateCache (bool invalidate_dependencies = true);
    void InvalidateCacheDependencies () { InvalidateCache (true); }
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс кэша
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ResetCache ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление кэша. Необходимо вызывать перед каждым использованием ресурса
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateCache ();

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Кэшируемый источник требует обновления кэша
///////////////////////////////////////////////////////////////////////////////////////////////////  
    virtual void UpdateCacheCore () = 0;
    virtual void ResetCacheCore  () = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Внутренние методы
///////////////////////////////////////////////////////////////////////////////////////////////////
    void InvalidateFlags ();
    void UpdateCacheAfterReset ();
    void UpdateChildrenCacheAfterReset ();

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник кэшированных данных
///////////////////////////////////////////////////////////////////////////////////////////////////
class CacheSource: public CacheHolder
{
  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Кэшируемый источник требует обновления кэша
///////////////////////////////////////////////////////////////////////////////////////////////////  
    void UpdateCacheCore ();
    void ResetCacheCore  ();
};

#endif
