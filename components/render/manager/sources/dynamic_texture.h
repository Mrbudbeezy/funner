///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация динамической текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
class DynamicTextureImpl: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicTextureImpl  (const char* name, EntityImpl& entity, const RenderManager::DynamicTextureCreator& creator);
    ~DynamicTextureImpl ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Текстура
///////////////////////////////////////////////////////////////////////////////////////////////////
    TexturePtr Texture ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (const FramePtr& frame);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Хранилище динамических текстур объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
class DynamicTextureEntityStorage: public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicTextureEntityStorage  ();
    ~DynamicTextureEntityStorage ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление текстур
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (const FramePtr& frame);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / поиск динамических текстур
///////////////////////////////////////////////////////////////////////////////////////////////////
    void              AddTexture  (const char* name, const DynamicTexturePtr& dynamic_texture);
    DynamicTexturePtr FindTexture (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс неиспользуемых ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void FlushUnusedTextures ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Хранилище динамических текстур материала
///////////////////////////////////////////////////////////////////////////////////////////////////
class DynamicTextureMaterialStorage: public Object, public CacheSource
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicTextureMaterialStorage  (const TextureManagerPtr& texture_manager, const MaterialPtr& material, EntityImpl& entity);
    ~DynamicTextureMaterialStorage ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение маски блока состояний
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateMask (render::low_level::StateBlockMask&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Применение текстур материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Apply (render::low_level::IDevice& device);
    
  private:
    void ResetCacheCore ();
    void UpdateCacheCore ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
