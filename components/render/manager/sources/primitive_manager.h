///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
class PrimitiveManager: public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PrimitiveManager  (RenderManagerImpl& owner);
    ~PrimitiveManager ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка: является ли ресурс библиотекой мешей
///////////////////////////////////////////////////////////////////////////////////////////////////
    static bool IsMeshLibraryResource (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / выгрузка примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadMeshLibrary   (const char* name);
    void LoadMeshLibrary   (const media::geometry::MeshLibrary&);
    void UnloadMeshLibrary (const char* name);
    void UnloadMeshLibrary (const media::geometry::MeshLibrary&);    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение прокси
///////////////////////////////////////////////////////////////////////////////////////////////////
    PrimitiveProxy GetPrimitiveProxy (const char* name); //создание прокси в случае отсутствия
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск загруженного примитива
///////////////////////////////////////////////////////////////////////////////////////////////////
    PrimitivePtr FindPrimitive (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка примитива по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    void         SetDefaultPrimitive (const PrimitivePtr& primitive);
    PrimitivePtr DefaultPrimitive    ();
  
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
