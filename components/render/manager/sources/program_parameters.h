///////////////////////////////////////////////////////////////////////////////////////////////////
///Типы параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ProgramParametersSlot
{
  ProgramParametersSlot_Frame,
  ProgramParametersSlot_FrameEntity,
  ProgramParametersSlot_Entity,
  ProgramParametersSlot_Material,
  
  ProgramParametersSlot_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры программы шейдинга
///////////////////////////////////////////////////////////////////////////////////////////////////
class ProgramParametersLayout: public Object, public xtl::trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ProgramParametersLayout  (const LowLevelDevicePtr& device);
    ~ProgramParametersLayout ();    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
    const low_level::ProgramParametersLayoutDesc& Parameters ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение объекта расположения параметров низкоуровневого устройства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    LowLevelProgramParametersLayoutPtr& DeviceLayout ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Хэш
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Hash () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка параметров в соответствующие слоты
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetSlot       (ProgramParametersSlot slot, const common::PropertyLayout& layout);
    void AttachSlot    (ProgramParametersSlot slot, const common::PropertyMap& map);
    void ResetSlot     (ProgramParametersSlot slot);
    void ResetAllSlots ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach    (const ProgramParametersLayout&);
    void Detach    (const ProgramParametersLayout&);
    void DetachAll ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер параметров программ шэйдинга
///////////////////////////////////////////////////////////////////////////////////////////////////
class ProgramParametersManager: public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ProgramParametersManager  (const LowLevelDevicePtr&);
    ~ProgramParametersManager ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение объекта параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
    ProgramParametersLayoutPtr GetParameters (ProgramParametersSlot slot, const common::PropertyLayout& layout);
    ProgramParametersLayoutPtr GetParameters (const ProgramParametersLayout& layout1, const ProgramParametersLayout& layout2);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
