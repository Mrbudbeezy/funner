///forward declarations
class PrimitiveBuffersImpl;
class IPrimitiveUpdateListener;
class PrimitiveUpdateNotifier;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание примитива рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
struct RendererPrimitive
{
  MaterialImpl*                    material;        //материал
  render::low_level::IStateBlock*  state_block;     //блок состояний примитива
  bool                             indexed;         //является ли данный примитив индексированным или состоящим только из вершин без индексов
  render::low_level::PrimitiveType type;            //тип примитива
  size_t                           first;           //индекс первой вершины/индекса
  size_t                           count;           //количество примитивов
  size_t                           base_vertex;     //индекс базовой вершины
  size_t                           tags_count;      //количество тэгов материала
  const size_t*                    tags;            //тэги материала
  const unsigned short*            dynamic_indices; //динамические индексы
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание группы примитивов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
struct RendererPrimitiveGroup
{
  size_t                   primitives_count; //количество примитивов в группе
  const RendererPrimitive* primitives;       //примитивы
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация спрайта
///////////////////////////////////////////////////////////////////////////////////////////////////
struct SpriteImpl: public Sprite
{
  MaterialProxy      material;    //материал
  RendererPrimitive* primitive;   //примитив, соответствующий спрайту
  unsigned short     indices [6]; //индексы вершин спрайта

/// Конструкторы
  SpriteImpl (const Sprite& in_sprite, const MaterialProxy& in_material) : Sprite (in_sprite), material (in_material), primitive () {}

  SpriteImpl (const SpriteImpl& sprite) : Sprite (sprite), material (sprite.material), primitive (sprite.primitive) //indices is a temporary structure
  {
    if (primitive)
      primitive->dynamic_indices = &indices [0];
  }
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Меш
///////////////////////////////////////////////////////////////////////////////////////////////////
class PrimitiveImpl: public Object, public CacheSource
{
  public:
    typedef xtl::intrusive_ptr<PrimitiveBuffersImpl> BuffersPtr;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PrimitiveImpl  (const DeviceManagerPtr&, const MaterialManagerPtr&, const BuffersPtr& buffers, const char* name = "");
    ~PrimitiveImpl ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя примитива
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    ();
    void        SetName (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буферы примитива
///////////////////////////////////////////////////////////////////////////////////////////////////
    const BuffersPtr& Buffers ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с мешами
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t MeshesCount     ();
    size_t AddMesh         (const media::geometry::Mesh&, MeshBufferUsage vb_usage, MeshBufferUsage ib_usage);
    void   RemoveMeshes    (size_t first_mesh, size_t meshes_count);
    void   RemoveAllMeshes ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с линиями
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t LinesCount       ();
    size_t AddLines         (size_t lines_count, const Line* lines, const char* material);
    void   UpdateLines      (size_t first_lines, size_t lines_count, const Line* lines);
    void   SetLinesMaterial (size_t first_lines, size_t lines_count, const char* material);
    void   RemoveLines      (size_t first_lines, size_t lines_count);
    void   RemoveAllLines   ();
    void   ReserveLines     (size_t lines_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа со спрайтами
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t SpritesCount       ();
    size_t AddSprites         (size_t sprites_count, const Sprite* sprites, const char* material);
    void   UpdateSprites      (size_t first_sprite, size_t sprites_count, const Sprite* sprites);
    void   SetSpritesMaterial (size_t first_sprite, size_t sprites_count, const char* material);
    void   RemoveSprites      (size_t first_sprite, size_t sprites_count);
    void   RemoveAllSprites   ();
    void   ReserveSprites     (size_t sprites_count);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Группы примитивов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                  RendererPrimitiveGroupsCount ();
    RendererPrimitiveGroup* RendererPrimitiveGroups      ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация слушателей обновления примитивов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachListener (IPrimitiveUpdateListener*);
    void DetachListener (IPrimitiveUpdateListener*);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление кэшированием
///////////////////////////////////////////////////////////////////////////////////////////////////
    using CacheSource::UpdateCache;
    using CacheSource::ResetCache;
      
  private:
    void UpdateCacheCore ();
    void ResetCacheCore ();
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель обновлений примитивов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class IPrimitiveUpdateListener
{
  public:
    virtual void UpdateRendererPrimitives (size_t group_index, size_t first_primitive_index, size_t primitives_count) = 0;

  protected:
    virtual ~IPrimitiveUpdateListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещатель события обновления примитивов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class PrimitiveUpdateNotifier
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PrimitiveUpdateNotifier  ();
    ~PrimitiveUpdateNotifier ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация слушателей
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (IPrimitiveUpdateListener*);
    void Detach (IPrimitiveUpdateListener*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateRendererPrimitives (size_t group_index, size_t first_primitive_index, size_t primitives_count);

  private:
    typedef stl::vector<IPrimitiveUpdateListener*> ListenerArray;

  private:
    PrimitiveUpdateNotifier (const PrimitiveUpdateNotifier&); //no impl
    PrimitiveUpdateNotifier& operator = (const PrimitiveUpdateNotifier&); //no impl

  private:
    ListenerArray listeners;
};
