///forward declarations
class PrimitiveBuffersImpl;
class IPrimitiveUpdateListener; //TODO: нужно ли???
class PrimitiveUpdateNotifier;
class IDynamicPrimitive;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вершина спрайта / вершина линии
///////////////////////////////////////////////////////////////////////////////////////////////////
struct DynamicPrimitiveVertex
{
  math::vec3f position;
  math::vec3f normal;
  math::vec4f color;
  math::vec2f tex_coord;
};

typedef DynamicPrimitiveBuffer<unsigned short>         DynamicIndexBuffer;
typedef DynamicPrimitiveBuffer<DynamicPrimitiveVertex> DynamicVertexBuffer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание примитива рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
struct RendererPrimitive
{
  MaterialImpl*                    material;        //материал
  render::low_level::IStateBlock*  state_block;     //блок состояний примитива
  bool                             indexed;         //является ли данный примитив индексированным или состоящим только из вершин без индексов
  render::low_level::PrimitiveType type;            //тип примитива
  size_t                           first;           //индекс первой вершины/индекса
  size_t                           count;           //количество примитивов
  size_t                           base_vertex;     //индекс базовой вершины
  size_t                           tags_count;      //количество тэгов материала
  const size_t*                    tags;            //тэги материала
  const unsigned short*            dynamic_indices; //динамические индексы
  DynamicIndexBuffer*              dynamic_ib;      //динамический индексный буфер  
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание группы примитивов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
struct RendererPrimitiveGroup
{
  size_t                   primitives_count; //количество примитивов в группе
  const RendererPrimitive* primitives;       //примитивы
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Меш
///////////////////////////////////////////////////////////////////////////////////////////////////
class PrimitiveImpl: public Object, public CacheSource
{
  public:
    typedef xtl::intrusive_ptr<PrimitiveBuffersImpl> BuffersPtr;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PrimitiveImpl  (const DeviceManagerPtr&, const MaterialManagerPtr&, const BuffersPtr& buffers, const char* name = "");
    ~PrimitiveImpl ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя примитива
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    ();
    void        SetName (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буферы примитива
///////////////////////////////////////////////////////////////////////////////////////////////////
    const BuffersPtr& Buffers ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с мешами
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t MeshesCount     ();
    size_t AddMesh         (const media::geometry::Mesh&, MeshBufferUsage vb_usage, MeshBufferUsage ib_usage);
    void   RemoveMeshes    (size_t first_mesh, size_t meshes_count);
    void   RemoveAllMeshes ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа со спрайтами
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t SpriteListsCount        ();
    size_t AddStandaloneSpriteList (const SpriteListPtr&, const math::vec3f& up, MeshBufferUsage vb_usage, MeshBufferUsage ib_usage);
    size_t AddBatchingSpriteList   (const SpriteListPtr&, const math::vec3f& up, SpriteMode sprite_mode);
    void   RemoveSpriteList        (size_t index);
    void   RemoveAllSpriteLists    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с линиями
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t LineListsCount        ();
    size_t AddStandaloneLineList (const LineListPtr&, MeshBufferUsage vb_usage, MeshBufferUsage ib_usage);
    size_t AddBatchingLineList   (const LineListPtr&);
    void   RemoveLineList        (size_t index);
    void   RemoveAllLineLists    ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Группы примитивов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                  RendererPrimitiveGroupsCount ();
    RendererPrimitiveGroup* RendererPrimitiveGroups      ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация слушателей обновления примитивов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachListener (IPrimitiveUpdateListener*);
    void DetachListener (IPrimitiveUpdateListener*);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление кэшированием
///////////////////////////////////////////////////////////////////////////////////////////////////
    using CacheSource::UpdateCache;
    using CacheSource::ResetCache;
      
  private:
    void UpdateCacheCore ();
    void ResetCacheCore ();
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Группа динамических примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class DynamicPrimitiveListImpl: public Object, public CacheSource
{
  public:
    typedef T Item;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicPrimitiveListImpl  (const MaterialManagerPtr& material_manager);
    ~DynamicPrimitiveListImpl ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetMaterial (const char* material);
    const char* Material    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / обновление примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Add    (size_t count, const Item* items);
    void   Update (size_t first, size_t count, const Item* items);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove (size_t first, size_t count);
    void Clear  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервируемое пространство
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   Reserve  (size_t count);
    size_t Capacity ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель обновлений примитивов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class IPrimitiveUpdateListener
{
  public:
    virtual void UpdateRendererPrimitives (size_t group_index, size_t first_primitive_index, size_t primitives_count) = 0;

  protected:
    virtual ~IPrimitiveUpdateListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещатель события обновления примитивов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class PrimitiveUpdateNotifier
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PrimitiveUpdateNotifier  ();
    ~PrimitiveUpdateNotifier ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация слушателей
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (IPrimitiveUpdateListener*);
    void Detach (IPrimitiveUpdateListener*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateRendererPrimitives (size_t group_index, size_t first_primitive_index, size_t primitives_count);

  private:
    typedef stl::vector<IPrimitiveUpdateListener*> ListenerArray;

  private:
    PrimitiveUpdateNotifier (const PrimitiveUpdateNotifier&); //no impl
    PrimitiveUpdateNotifier& operator = (const PrimitiveUpdateNotifier&); //no impl

  private:
    ListenerArray listeners;
};
