///////////////////////////////////////////////////////////////////////////////////////////////////
///Проход эффект рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class EffectPass: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    EffectPass  (const DeviceManager& device_manager);
    ~EffectPass ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояния уровней устройства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                                SetBlendState        (const LowLevelBlendStatePtr&);
    void                                SetDepthStencilState (const LowLevelDepthStencilStatePtr&);
    void                                SetRasterizerState   (const LowLevelRasterizerStatePtr&);
    const LowLevelBlendStatePtr&        BlendState           ();
    const LowLevelDepthStencilStatePtr& DepthStencilState    ();
    const LowLevelRasterizerStatePtr&   RasterizerState      ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Визуализация прохода
///////////////////////////////////////////////////////////////////////////////////////////////////
//    void Draw (const RenderContext& context);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Эффект рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class EffectFrame: public Object, public CacheSource
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    EffectFrame  (const DeviceManager& device_manager);
    ~EffectFrame ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проходы рендеринга / вложенные эффекты
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t PassesCount         ();
    size_t ChildrenCount       ();
    size_t AddOperation        (const EffectPassPtr&); //returns order number of operation in rendering sequence
    size_t AddOperation        (const EffectFramePtr&); //returns order number of operation in rendering sequence
    void   RemoveOperation     (size_t order_number);
    void   RemoveAllOperations ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Визуализация кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
//    void Draw (const RenderContext& context);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
