///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим сортировки примитивов в проходе
///////////////////////////////////////////////////////////////////////////////////////////////////
enum SortMode
{
  SortMode_None,        //без сортировки
  SortMode_FrontToBack, //сортировать от ближнего примитива к дальнему
  SortMode_BackToFront, //сортировать от дальнего примитива к ближнему
  SortMode_StateSwitch, //группировать примитивы с целью сокращения количества переключений состояний
  
  SortMode_Default = SortMode_StateSwitch
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проход эффект рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class EffectPass: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    EffectPass  (const DeviceManagerPtr& device_manager);
    ~EffectPass ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Целевые буферы отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetColorTargets       (const common::StringArray& targets);
    void                       SetDepthStencilTarget (const char* name);
    const common::StringArray& ColorTargets          ();
    const char*                DepthStencilTarget    ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги очистки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void         SetClearFlags (unsigned int clear_flags);
    unsigned int ClearFlags    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояния уровней устройства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                                SetBlendState             (const LowLevelBlendStatePtr&);
    void                                SetDepthStencilState      (const LowLevelDepthStencilStatePtr&);
    void                                SetRasterizerState        (const LowLevelRasterizerStatePtr&);
    void                                SetRasterizerScissorState (const LowLevelRasterizerStatePtr&);    
    void                                SetProgram                (const ProgramPtr&);
    const LowLevelBlendStatePtr&        BlendState                ();
    const LowLevelDepthStencilStatePtr& DepthStencilState         ();
    const LowLevelRasterizerStatePtr&   RasterizerState           ();
    const LowLevelRasterizerStatePtr&   RasterizerScissorState    ();
    const ProgramPtr&                   Program    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блок состояний эффекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    LowLevelStateBlockPtr StateBlock (bool scissor_enable);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тэги примитивов, которые войдут в проход
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          SetTags   (const char* tags);
    void          SetTags   (const common::StringArray& tags);    
    size_t        TagsCount ();
    const char*   Tag       (size_t index);
    size_t        TagHash   (size_t index);
    const char**  Tags      ();
    const size_t* TagHashes ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип сортировки примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                      SetSortMode (render::manager::SortMode mode);
    render::manager::SortMode SortMode    ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Инстанцирование эффекта рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class InstantiatedEffect: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    InstantiatedEffect  ();
    ~InstantiatedEffect ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тэги включенных эффектов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          SetTags   (const char* tags);
    void          SetTags   (const common::StringArray& tags);
    size_t        TagsCount ();
    const char*   Tag       (size_t index);
    size_t        TagHash   (size_t index);
    const char**  Tags      ();
    const size_t* TagHashes ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Эффект рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Effect: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Effect  ();
    ~Effect ();    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тэги фрейма: используются для рекурсивного рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          SetTags   (const char* tags);
    void          SetTags   (const common::StringArray& tags);
    size_t        TagsCount ();
    const char*   Tag       (size_t index);
    size_t        TagHash   (size_t index);
    const char**  Tags      ();
    const size_t* TagHashes ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проходы рендеринга / вложенные эффекты
///////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int          OperationsCount     ();
    unsigned int          AddOperation        (const EffectPassPtr&); //returns order number of operation in rendering sequence
    unsigned int          AddOperation        (const InstantiatedEffectPtr&);    //returns order number of operation in rendering sequence
    EffectPassPtr         OperationPass       (unsigned int order_number);
    InstantiatedEffectPtr OperationEffect     (unsigned int order_number);
    void                  RemoveOperation     (unsigned int order_number);
    void                  RemoveAllOperations ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рендер эффекта
///////////////////////////////////////////////////////////////////////////////////////////////////
class EffectRenderer: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    EffectRenderer  (const EffectPtr& effect, const DeviceManagerPtr& device_manager, FrameImpl& frame, ProgramParametersLayout* parent_layout = 0);
    ~EffectRenderer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление операций в список отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddOperations (const RendererOperationList& operations,
                        unsigned int                 eye_distance,
                        const math::mat4f&           vp_matrix,
                        const math::mat4f&           mvp_matrix,
                        render::low_level::IBuffer*  property_buffer = 0,
                        ProgramParametersLayout*     property_layour = 0,
                        render::low_level::IBuffer*  entity_independent_property_buffer = 0,
                        ProgramParametersLayout*     entity_independent_property_layour = 0);
    void AddOperations (FrameImpl& frame);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RemoveAllOperations ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Выполнение операций
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ExecuteOperations (RenderingContext& context);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
