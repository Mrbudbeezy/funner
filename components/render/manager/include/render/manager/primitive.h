#ifndef RENDER_MANAGER_PRIMITIVE_HEADER
#define RENDER_MANAGER_PRIMITIVE_HEADER

//TODO: добавить генерацию стандартных примитивов!!!

#include <render/manager/material.h>

namespace media
{

namespace geometry
{

//forward declarations
class VertexStream;
class VertexBuffer;
class IndexBuffer;
class Mesh;
class MeshLibrary;

}

}

namespace render
{

namespace manager
{

//implementation forwards
class PrimitiveBuffersImpl;
class PrimitiveImpl;
class Wrappers;

template <class T> class DynamicPrimitiveList;
template <class T> class DynamicPrimitiveListImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим использования меша
///////////////////////////////////////////////////////////////////////////////////////////////////
enum MeshBufferUsage
{
  MeshBufferUsage_Static,  //не обновляемый буфер
  MeshBufferUsage_Dynamic, //обновляемый буфер
  MeshBufferUsage_Stream,  //часто обновляемый буфер
  
  MeshBufferUsage_Default = MeshBufferUsage_Dynamic
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим отображения спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum SpriteMode
{
  SpriteMode_Billboard, //параллельно плоскости камеры
  SpriteMode_Oriented,  //согласно заданной ориентации объекта

  SpriteMode_Default = SpriteMode_Billboard
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Спрайт
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Sprite
{
  math::vec3f position;   //положение центра спрайта
  math::vec2f size;       //размер спрайта
  math::vec4f color;      //цвет спрайта
  math::vec2f tex_offset; //смещение начала спрайта в текстуре [0;1]
  math::vec2f tex_size;   //размер спрайта в текстуре [0;1]
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Точка линии
///////////////////////////////////////////////////////////////////////////////////////////////////
struct LinePoint
{
  math::vec3f position;   //положение точки в пространстве
  math::vec4f color;      //цвет точки
  math::vec2f tex_offset; //смещение точки в текстуре [0;1]
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Линия
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Line
{
  LinePoint point [2]; //концы линии
};

typedef DynamicPrimitiveList<Sprite> SpriteList;
typedef DynamicPrimitiveList<Line>   LineList;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буфер примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
class PrimitiveBuffers
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    PrimitiveBuffers  (const PrimitiveBuffers&);
    ~PrimitiveBuffers ();
    
    PrimitiveBuffers& operator = (const PrimitiveBuffers&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Add (const media::geometry::VertexStream& buffer, MeshBufferUsage usage = MeshBufferUsage_Default);
    void Add (const media::geometry::VertexBuffer& buffer, MeshBufferUsage usage = MeshBufferUsage_Default);    
    void Add (const media::geometry::IndexBuffer& buffer, MeshBufferUsage usage = MeshBufferUsage_Default);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление буферов
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void Update (const media::geometry::VertexStream& buffer);
    void Update (const media::geometry::IndexBuffer& buffer);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление буферов
///////////////////////////////////////////////////////////////////////////////////////////////////        
    void Remove    (const media::geometry::VertexStream& buffer);
    void Remove    (const media::geometry::VertexBuffer& buffer);    
    void Remove    (const media::geometry::IndexBuffer& buffer);
    void RemoveAll ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование буферов для динамических примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   ReserveLines    (size_t count);
    void   ReserveSprites  (size_t count);
    size_t LinesCapacity   () const;
    size_t SpritesCapacity () const;
      
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (PrimitiveBuffers&);
    
  protected:
    PrimitiveBuffers (PrimitiveBuffersImpl*);

  private:
    PrimitiveBuffersImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (PrimitiveBuffers&, PrimitiveBuffers&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Меш
///////////////////////////////////////////////////////////////////////////////////////////////////
class Primitive
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Primitive  (const Primitive&);
    ~Primitive ();

    Primitive& operator = (const Primitive&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя примитива
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    () const;
    void        SetName (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буферы примитива
///////////////////////////////////////////////////////////////////////////////////////////////////
    PrimitiveBuffers Buffers () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с мешами
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t MeshesCount     () const;
    size_t AddMesh         (const media::geometry::Mesh&, MeshBufferUsage vb_usage = MeshBufferUsage_Default, MeshBufferUsage ib_usage = MeshBufferUsage_Default);
    void   RemoveMeshes    (size_t first_mesh, size_t meshes_count);
    void   RemoveAllMeshes ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа со спрайтами
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t SpriteListsCount         () const;
    size_t AddStandaloneSpriteList  (const SpriteList& list, MeshBufferUsage vb_usage = MeshBufferUsage_Default,  MeshBufferUsage ib_usage = MeshBufferUsage_Default);
    size_t AddBatchingSpriteList    (const SpriteList& list, SpriteMode mode = SpriteMode_Default);
    void   RemoveSpriteList         (size_t index);
    void   RemoveAllSpriteLists     ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с линиями
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t LineListsCount         () const;
    size_t AddStandaloneLineList  (const LineList& list, MeshBufferUsage vb_usage = MeshBufferUsage_Default,  MeshBufferUsage ib_usage = MeshBufferUsage_Default);
    size_t AddBatchingLineList    (const LineList& list);
    void   RemoveLineList         (size_t index);
    void   RemoveAllLineLists     ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление кэшированием
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateCache ();
    void ResetCache  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Primitive&);
    
  private:
    Primitive (PrimitiveImpl*);

  private:
    PrimitiveImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Primitive&, Primitive&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Группа динамических примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class DynamicPrimitiveList
{
  friend class Wrappers;
  public:
    typedef T Item;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicPrimitiveList  (const DynamicPrimitiveList&);
    ~DynamicPrimitiveList ();

    DynamicPrimitiveList& operator = (const DynamicPrimitiveList&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetMaterial (const char* material);
    const char* Material    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / обновление примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Add    (size_t count, const Item* items);
    void   Update (size_t first, size_t count, const Item* items);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove (size_t first, size_t count = 1);
    void Clear  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервируемое пространство
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   Reserve  (size_t count);
    size_t Capacity () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (DynamicPrimitiveList&);  

  private:
    typedef DynamicPrimitiveListImpl<Item> Impl;

    DynamicPrimitiveList (Impl*);

  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> void swap (DynamicPrimitiveList<T>&, DynamicPrimitiveList<T>&);

}

}

#endif
