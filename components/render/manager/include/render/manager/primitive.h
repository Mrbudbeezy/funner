#ifndef RENDER_MANAGER_PRIMITIVE_HEADER
#define RENDER_MANAGER_PRIMITIVE_HEADER

//TODO: добавить генерацию стандартных примитивов!!!

#include <render/manager/material.h>

namespace media
{

namespace geometry
{

//forward declarations
class VertexStream;
class VertexBuffer;
class IndexBuffer;
class Mesh;
class MeshLibrary;

}

}

namespace render
{

namespace manager
{

//implementation forwards
class PrimitiveBuffersImpl;
class PrimitiveImpl;
class Wrappers;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим использования меша
///////////////////////////////////////////////////////////////////////////////////////////////////
enum MeshBufferUsage
{
  MeshBufferUsage_Static,  //не обновляемый буфер
  MeshBufferUsage_Dynamic, //обновляемый буфер
  MeshBufferUsage_Stream,  //часто обновляемый буфер
  
  MeshBufferUsage_Default = MeshBufferUsage_Dynamic
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Спрайт
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Sprite
{
  math::vec3f position;   //положение центра спрайта
  math::vec2f size;       //размер спрайта
  math::vec4f color;      //цвет спрайта
  math::vec2f tex_offset; //смещение начала спрайта в текстуре [0;1]
  math::vec2f tex_size;   //размер спрайта в текстуре [0;1]
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Точка линии
///////////////////////////////////////////////////////////////////////////////////////////////////
struct LinePoint
{
  math::vec3f position;   //положение точки в пространстве
  math::vec4f color;      //цвет точки
  math::vec2f tex_offset; //смещение точки в текстуре [0;1]
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Линия
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Line
{
  LinePoint point [2]; //концы линии
  float     width;     //ширина линии
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буфер примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
class PrimitiveBuffers
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    PrimitiveBuffers  (const PrimitiveBuffers&);
    ~PrimitiveBuffers ();
    
    PrimitiveBuffers& operator = (const PrimitiveBuffers&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Add (const media::geometry::VertexStream& buffer, MeshBufferUsage usage = MeshBufferUsage_Default);
    void Add (const media::geometry::VertexBuffer& buffer, MeshBufferUsage usage = MeshBufferUsage_Default);    
    void Add (const media::geometry::IndexBuffer& buffer, MeshBufferUsage usage = MeshBufferUsage_Default);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление буферов
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void Update (const media::geometry::VertexStream& buffer);
    void Update (const media::geometry::IndexBuffer& buffer);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление буферов
///////////////////////////////////////////////////////////////////////////////////////////////////        
    void Remove    (const media::geometry::VertexStream& buffer);
    void Remove    (const media::geometry::VertexBuffer& buffer);    
    void Remove    (const media::geometry::IndexBuffer& buffer);
    void RemoveAll ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование вспомогательных примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   ReserveLines    (size_t count);
    void   ReserveSprites  (size_t count);
    size_t LinesCapacity   () const;
    size_t SpritesCapacity () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим использования буферов вспомогательных примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void            SetLinesBufferUsage   (MeshBufferUsage usage);
    void            SetSpritesBufferUsage (MeshBufferUsage usage);
    MeshBufferUsage LinesBufferUsage      () const;
    MeshBufferUsage SpritesBufferUsage    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (PrimitiveBuffers&);
    
  protected:
    PrimitiveBuffers (PrimitiveBuffersImpl*);

  private:
    PrimitiveBuffersImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (PrimitiveBuffers&, PrimitiveBuffers&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Меш
///////////////////////////////////////////////////////////////////////////////////////////////////
class Primitive
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Primitive  (const Primitive&);
    ~Primitive ();

    Primitive& operator = (const Primitive&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя примитива
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    () const;
    void        SetName (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буферы примитива
///////////////////////////////////////////////////////////////////////////////////////////////////
    PrimitiveBuffers Buffers () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с мешами
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t MeshesCount     () const;
    size_t AddMesh         (const media::geometry::Mesh&, MeshBufferUsage vb_usage = MeshBufferUsage_Default, MeshBufferUsage ib_usage = MeshBufferUsage_Default);
    void   RemoveMeshes    (size_t first_mesh, size_t meshes_count);
    void   RemoveAllMeshes ();
        
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с линиями
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t LinesCount       () const;
    size_t AddLines         (size_t lines_count, const Line* lines, const char* material);
    void   UpdateLines      (size_t first_lines, size_t lines_count, const Line* lines);
    void   SetLinesMaterial (size_t first_lines, size_t lines_count, const char* material);
    void   RemoveLines      (size_t first_lines, size_t lines_count);
    void   RemoveAllLines   ();
    void   ReserveLines     (size_t lines_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа со спрайтами
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t SpritesCount       () const;
    size_t AddSprites         (size_t sprites_count, const Sprite* sprites, const char* material);
    void   UpdateSprites      (size_t first_sprite, size_t sprites_count, const Sprite* sprites);
    void   SetSpritesMaterial (size_t first_sprite, size_t sprites_count, const char* material);
    void   RemoveSprites      (size_t first_sprite, size_t sprites_count);
    void   RemoveAllSprites   ();
    void   ReserveSprites     (size_t sprites_count);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление кэшированием
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateCache ();
    void ResetCache  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Primitive&);
    
  private:
    Primitive (PrimitiveImpl*);

  private:
    PrimitiveImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Primitive&, Primitive&);

}

}

#endif
