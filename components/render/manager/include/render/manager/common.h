#ifndef RENDER_MANAGER_COMMON_HEADER
#define RENDER_MANAGER_COMMON_HEADER

namespace render
{

namespace manager
{

//implementation forwards
class RectAreaImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Формат пикселей
///////////////////////////////////////////////////////////////////////////////////////////////////
enum PixelFormat
{
  PixelFormat_RGB8,
  PixelFormat_RGBA8,
  PixelFormat_L8,
  PixelFormat_A8,
  PixelFormat_LA8,
  PixelFormat_DXT1,
  PixelFormat_DXT3,
  PixelFormat_DXT5,
  PixelFormat_RGB_PVRTC2,
  PixelFormat_RGB_PVRTC4,
  PixelFormat_RGBA_PVRTC2,
  PixelFormat_RGBA_PVRTC4,
  PixelFormat_ATC_RGB_AMD,
  PixelFormat_ATC_RGBA_EXPLICIT_ALPHA_AMD,
  PixelFormat_ATC_RGBA_INTERPOLATED_ALPHA_AMD,
  PixelFormat_D16,
  PixelFormat_D24X8,
  PixelFormat_D24S8,
  PixelFormat_D32,
  PixelFormat_S8,

  PixelFormat_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Утилиты
///////////////////////////////////////////////////////////////////////////////////////////////////
const char* get_name (PixelFormat); //получение имени формата

///////////////////////////////////////////////////////////////////////////////////////////////////
///Прямоугольная область
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Rect
{
  int    x;      //абсцисса левого верхнего угла области
  int    y;      //ордината левого верхнего угла области
  size_t width;  //ширина области
  size_t height; //высота области
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
  Rect ();
  Rect (int x, int y, size_t width, size_t height);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение
///////////////////////////////////////////////////////////////////////////////////////////////////
  bool operator == (const Rect&) const;
  bool operator != (const Rect&) const;    
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Прямоугольная область (для совместного доступа нескольких областей вывода)
///////////////////////////////////////////////////////////////////////////////////////////////////
class RectArea
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    RectArea  ();
    RectArea  (const manager::Rect&);
    ~RectArea ();
    
    RectArea& operator = (const RectArea&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры области
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                 SetRect (const manager::Rect& rect);
    void                 SetRect (int x, int y, size_t width, size_t height);
    const manager::Rect& Rect    () const;
    int                  X       () const;
    int                  Y       () const;
    size_t               Width   () const;
    size_t               Height  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (RectArea&);
  
  private:
    RectArea (RectAreaImpl*);
    
  private:
    RectAreaImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (RectArea&, RectArea&);

}

}

#endif
