#ifndef RENDER_MANAGER_TEXTURE_HEADER
#define RENDER_MANAGER_TEXTURE_HEADER

#include <render/manager/render_target.h>

namespace render
{

namespace manager
{

//implementation forwards
class TextureImpl;
class Wrappers;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размерность текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
enum TextureDimension
{
  TextureDimension_2D,
  TextureDimension_3D,
  TextureDimension_Cubemap,
  
  TextureDimension_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Формат пикселей
///////////////////////////////////////////////////////////////////////////////////////////////////
enum PixelFormat
{
  PixelFormat_RGB8,
  PixelFormat_RGBA8,
  PixelFormat_L8,
  PixelFormat_A8,
  PixelFormat_LA8,
  PixelFormat_DXT1,
  PixelFormat_DXT3,
  PixelFormat_DXT5,
  PixelFormat_RGB_PVRTC2,
  PixelFormat_RGB_PVRTC4,
  PixelFormat_RGBA_PVRTC2,
  PixelFormat_RGBA_PVRTC4,
  PixelFormat_ATC_RGB_AMD,
  PixelFormat_ATC_RGBA_EXPLICIT_ALPHA_AMD,
  PixelFormat_ATC_RGBA_INTERPOLATED_ALPHA_AMD,
  PixelFormat_D16,
  PixelFormat_D24X8,
  PixelFormat_D24S8,
  PixelFormat_D32,
  PixelFormat_S8,

  PixelFormat_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Утилиты
///////////////////////////////////////////////////////////////////////////////////////////////////
const char* get_name (PixelFormat); //получение имени формата

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текстура
///////////////////////////////////////////////////////////////////////////////////////////////////
class Texture
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Texture  (const Texture&);
    ~Texture ();

    Texture& operator = (const Texture&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    ();
    void        SetName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размерность
///////////////////////////////////////////////////////////////////////////////////////////////////
    TextureDimension Dimension () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Формат и размеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    PixelFormat  Format () const;
    unsigned int Width  () const;
    unsigned int Height () const;
    unsigned int Depth  () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение цели рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    manager::RenderTarget RenderTarget (unsigned int layer=0, unsigned int mip_level=0) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление образа
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (const media::Image&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Захват образа
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Capture (unsigned int layer, unsigned int mip_level, media::Image& image);
    void Capture (unsigned int mip_level, media::Image& image);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Texture&);
  
  private:
    Texture (TextureImpl*);
  
  private:
    TextureImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Texture&, Texture&);

}

}

#endif
