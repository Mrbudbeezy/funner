#ifndef RENDER_MANAGER_RENDER_TARGET_HEADER
#define RENDER_MANAGER_RENDER_TARGET_HEADER

#include <cstddef>

#include <render/manager/common.h>

namespace media
{

//forward declarations
class Image;
class CompressedImage;

}

namespace render
{

namespace manager
{

//implementation forwards
class RenderTargetImpl;
class RenderTargetMapImpl;
class ViewportImpl;
class Wrappers;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цель рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderTarget
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTarget  (const RenderTarget&);
    ~RenderTarget ();
    
    RenderTarget& operator = (const RenderTarget&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры цели рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Width  () const;
    size_t Height () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Захват изображения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Capture (media::Image&) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (RenderTarget&);
    
  private:
    RenderTarget (RenderTargetImpl*);

  private:
    RenderTargetImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (RenderTarget&, RenderTarget&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class Viewport
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Viewport  ();
    Viewport  (const manager::Rect& rect, float min_depth = 0.0f, float max_depth = 1.0f);
    ~Viewport ();
    
    Viewport& operator = (const Viewport&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры области
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                 SetRect (const manager::Rect& rect);
    void                 SetRect (int x, int y, size_t width, size_t height);
    RectArea             Area    () const;
    const manager::Rect& Rect    () const;
    int                  X       () const;
    int                  Y       () const;
    size_t               Width   () const;
    size_t               Height  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Диапазон глубины для области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    float MinDepth    () const;
    float MaxDepth    () const;
    void  SetMinDepth (float value);
    void  SetMaxDepth (float value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Viewport&);
  
  private:
    Viewport (ViewportImpl*);
    
  private:
    ViewportImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Viewport&, Viewport&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Карта целей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderTargetMap
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTargetMap  ();
    RenderTargetMap  (const RenderTargetMap&);
    ~RenderTargetMap ();
    
    RenderTargetMap& operator = (const RenderTargetMap&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация целевых буферов отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetRenderTarget        (const char* name, const manager::RenderTarget& target);
    void SetRenderTarget        (const char* name, const manager::RenderTarget& target, const manager::Viewport& viewport);
    void SetRenderTarget        (const char* name, const manager::RenderTarget& target, const manager::Viewport& viewport, const RectArea& scissor);
    void RemoveRenderTarget     (const char* name);
    void RemoveAllRenderTargets ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение целевых буферов отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool                  HasRenderTarget (const char* name) const;
    manager::RenderTarget RenderTarget    (const char* name) const;
    manager::Viewport     Viewport        (const char* name) const;
    RectArea              Scissor         (const char* name) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (RenderTargetMap&);

  protected:
    RenderTargetMap (RenderTargetMapImpl*);
    
  private:
    RenderTargetMapImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (RenderTargetMap&, RenderTargetMap&);

}

}

#endif
