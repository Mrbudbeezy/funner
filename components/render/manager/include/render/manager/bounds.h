#ifndef RENDER_MANAGER_BOUNDS_HEADER
#define RENDER_MANAGER_BOUNDS_HEADER

namespace render
{

namespace manager
{

//implementation forwards
class RectAreaImpl;
class BoxAreaImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Прямоугольная область
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Rect
{
  int    x;      //абсцисса левого верхнего угла области
  int    y;      //ордината левого верхнего угла области
  size_t width;  //ширина области
  size_t height; //высота области
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
  Rect ();
  Rect (int x, int y, size_t width, size_t height);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение
///////////////////////////////////////////////////////////////////////////////////////////////////
  bool operator == (const Rect&) const;
  bool operator != (const Rect&) const;    
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Прямоугольная область (для совместного доступа нескольких областей вывода)
///////////////////////////////////////////////////////////////////////////////////////////////////
class RectArea
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    RectArea  ();
    RectArea  (const RectArea&);
    RectArea  (const manager::Rect&);
    ~RectArea ();
    
    RectArea& operator = (const RectArea&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры области
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                 SetRect (const manager::Rect& rect);
    void                 SetRect (int x, int y, size_t width, size_t height);
    const manager::Rect& Rect    () const;
    int                  X       () const;
    int                  Y       () const;
    size_t               Width   () const;
    size_t               Height  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (RectArea&);
  
  private:
    RectArea (RectAreaImpl*);
    
  private:
    RectAreaImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (RectArea&, RectArea&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параллелепипед
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Box
{
  math::vec3f min_extent; //минимальная экстента
  math::vec3f max_extent; //максимальная экстента
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
  Box ();
  Box (const math::vec3f& min_extent, const math::vec3f& max_extent);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение
///////////////////////////////////////////////////////////////////////////////////////////////////
  bool operator == (const Box&) const;
  bool operator != (const Box&) const;    
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Прямоугольный объем (для совместного доступа нескольких объектов рендеринга)
///////////////////////////////////////////////////////////////////////////////////////////////////
class BoxArea
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    BoxArea  ();
    BoxArea  (const BoxArea&);
    BoxArea  (const manager::Box&);
    ~BoxArea ();
    
    BoxArea& operator = (const BoxArea&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры области
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                SetBox (const manager::Box& Box);
    void                SetBox (const math::vec3f& min_extent, const math::vec3f& max_extent);
    const manager::Box& Box    () const;
    const math::vec3f&  Min    () const;
    const math::vec3f&  Max    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (BoxArea&);
  
  private:
    BoxArea (BoxAreaImpl*);
    
  private:
    BoxAreaImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (BoxArea&, BoxArea&);

}

}

#endif
