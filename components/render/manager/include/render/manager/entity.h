#ifndef RENDER_MANAGER_ENTITY_HEADER
#define RENDER_MANAGER_ENTITY_HEADER

#include <common/property_map.h>

#include <math/matrix.h>

#include <render/manager/bounds.h>
#include <render/manager/primitive.h>

namespace render
{

namespace manager
{

//implementation forwards
class EntityImpl;
class Wrappers;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Entity
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Entity  (const Entity&);
    ~Entity ();
    
    Entity& operator = (const Entity&);   

///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetProperties (const common::PropertyMap&);
    const common::PropertyMap& Properties    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Макро-определения шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetShaderOptions (const common::PropertyMap&);
    const common::PropertyMap& ShaderOptions    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица мировых преобразований
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetWorldMatrix     (const math::mat4f&);
    const math::mat4f& WorldMatrix        () const;
    const math::mat4f& InverseWorldMatrix () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Пользовательские данные
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetUserData (void* data);
    void* UserData    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с костями (для скиннинга)
///  преобразования умножаются на матрицу Entity::Transformation в случае если она не единична
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetJointsCount         (size_t count);
    size_t             JointsCount            () const;
    void               SetJointTransformation (size_t joint_index, const math::mat4f&);
    const math::mat4f& JointTransformation    (size_t joint_index) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с уровнями детализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t LodsCount () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с примитивом
///////////////////////////////////////////////////////////////////////////////////////////////////
    manager::Primitive Primitive           (size_t level_of_detail = 0) const;
    const char*        PrimitiveName       (size_t level_of_detail = 0) const;
    void               SetPrimitive        (const manager::Primitive&, size_t level_of_detail = 0);
    void               SetPrimitive        (const char* name, size_t level_of_detail = 0);
    void               ResetPrimitive      (size_t level_of_detail = 0);
    bool               HasPrimitive        (size_t level_of_detail = 0) const;
    void               ResetAllPrimitives  ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Точка в локальной системе координат объекта для расчёта удаленности от камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
   void               SetLodPoint (const math::vec3f&);
   const math::vec3f& LodPoint    () const;
   
///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление областью отсечения объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
   void           SetWorldScissor (const BoxArea& scissor);
   const BoxArea& WorldScissor    () const;
   void           SetScissorState (bool state);
   void           EnableScissor   () { SetScissorState (true); }
   void           DisableScissor  () { SetScissorState (false); }
   bool           ScissorState    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление кэшированием
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateCache ();
    void ResetCache  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Entity&);
    
  private:
    Entity (EntityImpl*);
    
  private:
    EntityImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Entity&, Entity&);

}

}

#endif
