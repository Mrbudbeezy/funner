#ifndef RENDER_MANAGER_FRAME_HEADER
#define RENDER_MANAGER_FRAME_HEADER

#include <math/matrix.h>

#include <render/manager/entity.h>
#include <render/manager/render_target.h>

namespace render
{

namespace manager
{

//implementation forwards
class FrameImpl;
class Wrappers;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги очистки
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ClearFlag
{
  ClearFlag_RenderTarget  = 1, //очистка буфера цвета
  ClearFlag_Depth         = 2, //очистка буфера глубины
  ClearFlag_Stencil       = 4, //очистка буфера трафарета
  ClearFlag_ViewportOnly  = 8, //очистка только области вывода (могут быть потери производительности)

  ClearFlag_DepthStencil = ClearFlag_Depth | ClearFlag_Stencil,
  ClearFlag_All          = ClearFlag_DepthStencil | ClearFlag_RenderTarget
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры отрисовки объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
struct EntityDrawParams
{
  common::PropertyMap properties; //свойства пары фрейм-объект
  math::mat4f         mvp_matrix; //матрица model-view-projection
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Визуализируемый кадр
///////////////////////////////////////////////////////////////////////////////////////////////////
class Frame
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Frame  (const Frame&);
    ~Frame ();

    Frame& operator = (const Frame&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Карта целей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void            SetRenderTargets (const RenderTargetMap&);
    RenderTargetMap RenderTargets    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация целевых буферов отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetRenderTarget        (const char* name, const manager::RenderTarget& target);
    void SetRenderTarget        (const char* name, const manager::RenderTarget& target, const manager::Viewport& viewport);
    void SetRenderTarget        (const char* name, const manager::RenderTarget& target, const manager::Viewport& viewport, const RectArea& scissor);
    void RemoveRenderTarget     (const char* name);
    void RemoveAllRenderTargets ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение целевых буферов отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool                  HasRenderTarget (const char* name) const;
    manager::RenderTarget RenderTarget    (const char* name) const;
    manager::Viewport     Viewport        (const char* name) const;
    RectArea              Scissor         (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление отсечением
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetScissorState (bool state);
    bool ScissorState    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги очистки кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetClearFlags (size_t clear_flags);
    size_t ClearFlags    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры очистки буфера цвета
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetClearColor (const math::vec4f& color);
    const math::vec4f& ClearColor    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры очистки буфера попиксельного отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          SetClearDepthValue   (float depth_value);
    void          SetClearStencilIndex (unsigned char stencil_index);
    float         ClearDepthValue      () const;
    unsigned char ClearStencilIndex    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Локальные текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetLocalTexture        (const char* name, const Texture& texture);
    void RemoveLocalTexture     (const char* name);
    void RemoveAllLocalTextures ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение локальной текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool    HasLocalTexture (const char* name) const;
    Texture LocalTexture    (const char* name) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка эффекта рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetEffect (const char* name);
    const char* Effect    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetProperties (const common::PropertyMap&);
    const common::PropertyMap& Properties    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Макро-определения шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetShaderOptions (const common::PropertyMap&);
    const common::PropertyMap& ShaderOptions    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t EntitiesCount     () const;
    void   AddEntity         (const Entity& entity, void* user_data = 0);
    void   RemoveAllEntities ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление кадра (порядок отрисовки определяется по тэгам при описании эффекта)
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t FramesCount     () const;
    void   AddFrame        (const Frame& frame);
    void   RemoveAllFrames ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление всех объектов из кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RemoveAllFramesAndEntities ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Автоматическая очистка кадра после отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetAutoCleanup       (bool state);
    bool IsAutoCleanupEnabled () const;
    void EnableAutoCleanup    () { SetAutoCleanup (true); }
    void DisableAutoCleanup   () { SetAutoCleanup (false); }
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Пользовательский обработчик отрисовки объектов
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (Frame& frame, Entity& entity, void* user_data, EntityDrawParams& out_params)> EntityDrawFunction;

    void                      SetEntityDrawHandler (const EntityDrawFunction& handler);
    const EntityDrawFunction& EntityDrawHandler    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка свойств пары frame-entity
/// (могут быть изменены в процессе вызова пользовательского обработчика отрисовки объектов)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetEntityDependentProperties (const common::PropertyMap&);
    const common::PropertyMap& EntityDependentProperties    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка матрицы vipew * projection
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetViewProjectionMatrix (const math::mat4f&);
    const math::mat4f& ViewProjectionMatrix    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рисование кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Draw ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление кэшированием
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateCache ();
    void ResetCache  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Frame&);
    
  private:
    Frame (FrameImpl*);
    
  private:
    FrameImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Frame&, Frame&);

}

}

#endif
