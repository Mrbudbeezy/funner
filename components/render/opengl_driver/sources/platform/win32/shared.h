#ifndef RENDER_GL_DRIVER_WIN32_SHARED_HEADER
#define RENDER_GL_DRIVER_WIN32_SHARED_HEADER

#define _WIN32_WINNT 0x0501 //for ChangeDisplaySettingsEx

#include <windows.h>

#include <stl/vector>
#include <stl/string>

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>
#include <xtl/trackable_ptr.h>

#include <common/singleton.h>
#include <common/strlib.h>

#include <syslib/dll.h>

#include <shared/object.h>
#include <shared/property_list.h>
#include <shared/platform.h>

#include "wgl_entries.h"

namespace render
{

namespace low_level
{

namespace opengl
{

namespace windows
{

//forward declarations
class Adapter;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип ускорения
///////////////////////////////////////////////////////////////////////////////////////////////////
enum Acceleration
{
  Acceleration_No,  //программный рендеринг
  Acceleration_MCD, //частичное ускорение / программная эмуляция
  Acceleration_ICD, //полное ускорение через клиентский драйвер
  
  Acceleration_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дексриптор формата пикселей
///////////////////////////////////////////////////////////////////////////////////////////////////
struct PixelFormatDesc
{
  Adapter*                   adapter;                 //адаптер, поддерживающий указанный формат
  const WglExtensionEntries* wgl_extension_entries;   //таблица WGL-расширений (должна быть скопирована в методе, получившем PixelFormatDesc, может быть 0)
  int                        pixel_format_index;      //индекс формата пикселей в таблице форматов адаптера
  Acceleration               acceleration;            //тип ускорения формата пикселей
  size_t                     color_bits;              //количество бит на цвет
  size_t                     alpha_bits;              //количество бит на альфу
  size_t                     depth_bits;              //количество бит на глубину
  size_t                     stencil_bits;            //количество бит на трафарет
  size_t                     samples_count;           //количество sample'ов (0=multisample off)
  size_t                     buffers_count;           //количество буферов в цепочке обмена (0=default 2 buffers)
  SwapMethod                 swap_method;             //метод обмена заднего и переднего буферов
  size_t                     aux_buffers;             //количество вспомогательных буферов отрисовки
  bool                       support_draw_to_pbuffer; //поддержка рисования в PBuffer
  bool                       support_stereo;          //поддержка стерео-рендеринга
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель оконных сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
class IWindowListener
{
  public:
    virtual void OnDestroy           () = 0; //вызывается при удалении окна
    virtual void OnDisplayModeChange () = 0; //вызывается при смене видео-режима

  protected:
    virtual ~IWindowListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст устройства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class ISwapChainImpl: virtual public ISwapChain
{
  public:
    virtual Adapter*                   GetAdapterImpl         () = 0; //получение реализации адаптера
    virtual HDC                        GetDC                  () = 0; //контекст устройства вывода
    virtual int                        GetPixelFormat         () = 0; //формат пикселей устройства вывода
    virtual bool                       HasVSync               () = 0; //есть ли вертикальная синхронизация
    virtual const WglExtensionEntries& GetWglExtensionEntries () = 0; //получение таблицы WGL-расширений

  protected:
    virtual ~ISwapChainImpl () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Устройство вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class Output: virtual public IOutput, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Output  (const DISPLAY_DEVICE&);
    ~Output ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetName ();
    const char* GetWinName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение списка видео-режимов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetModesCount ();
    void   GetModeDesc   (size_t mode_index, OutputModeDesc& mode_desc);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего видео-режима
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetCurrentMode (const OutputModeDesc&);
    void GetCurrentMode (OutputModeDesc&);
    void RestoreDefaultMode ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление гамма-коррекцией
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetGammaRamp (const Color3f table [256]);
    void GetGammaRamp (Color3f table [256]);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение экранных координат и размеров устройства вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetScreenRect (Rect&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список свойств устройства вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPropertyList* GetProperties ();
    
  private:
    Output (const Output&); //no impl
    Output& operator = (const Output&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Класс, инкапсулирующий работу с низкоуровневыми устройствами вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class OutputManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    OutputManager  ();
    ~OutputManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных устройств вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t  GetOutputsCount () const;
    Output* GetOutput       (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск устройства вывода, перекрытие которого с окном максимально
///////////////////////////////////////////////////////////////////////////////////////////////////
    Output* FindContainingOutput (HWND window) const;

  private:
    OutputManager (const OutputManager&); //no impl
    OutputManager& operator = (const OutputManager&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Пустое макетное окно
///////////////////////////////////////////////////////////////////////////////////////////////////
class DummyWindow
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    DummyWindow  (HWND parent = 0, IWindowListener* listener = 0);
    ~DummyWindow ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    HWND GetHandle () const;

  private:
    DummyWindow (const DummyWindow&); //no impl
    DummyWindow& operator = (const DummyWindow&); //no impl        

  private:
    HWND window; //дескриптор окна
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Первичная цепочка обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
class PrimarySwapChain: virtual public ISwapChainImpl, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PrimarySwapChain  (const SwapChainDesc& sc_desc, const PixelFormatDesc& pf_desc);
    ~PrimarySwapChain ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение адаптера
///////////////////////////////////////////////////////////////////////////////////////////////////
    IAdapter* GetAdapter ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (SwapChainDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение устройства вывода с максимальным размером области перекрытия
///////////////////////////////////////////////////////////////////////////////////////////////////
    IOutput* GetContainingOutput ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / взятие состояния full-screen mode
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetFullscreenState (bool state);
    bool GetFullscreenState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен текущего заднего буфера и переднего буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Present ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список свойств цепочки обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPropertyList* GetProperties ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реалиация интерфейса IDeviceContext
///////////////////////////////////////////////////////////////////////////////////////////////////
    Adapter*                   GetAdapterImpl         (); //получение реализации адаптера
    HDC                        GetDC                  (); //контекст устройства вывода
    int                        GetPixelFormat         (); //формат пикселей устройства вывода
    bool                       HasVSync               (); //есть ли вертикальная синхронизация
    const WglExtensionEntries& GetWglExtensionEntries (); //получение таблицы WGL-расширений

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на событие измененения видео-режима
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void ()> EventHandler;

    xtl::connection RegisterDisplayModeChangeHandler (const EventHandler&);
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///PBuffer
///////////////////////////////////////////////////////////////////////////////////////////////////
class PBuffer: virtual public ISwapChainImpl, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PBuffer  (PrimarySwapChain* primary_swap_chain, size_t width, size_t height);
    PBuffer  (PrimarySwapChain* swap_chain);
    ~PBuffer ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение адаптера
///////////////////////////////////////////////////////////////////////////////////////////////////
    IAdapter* GetAdapter ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (SwapChainDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение устройства вывода с максимальным размером области перекрытия
///////////////////////////////////////////////////////////////////////////////////////////////////
    IOutput* GetContainingOutput ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / взятие состояния full-screen mode
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetFullscreenState (bool state);
    bool GetFullscreenState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен текущего заднего буфера и переднего буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Present ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реалиация интерфейса IDeviceContext
///////////////////////////////////////////////////////////////////////////////////////////////////
    Adapter*                   GetAdapterImpl         (); //получение реализации адаптера
    HDC                        GetDC                  (); //контекст устройства вывода
    int                        GetPixelFormat         (); //формат пикселей устройства вывода
    bool                       HasVSync               (); //есть ли вертикальная синхронизация
    const WglExtensionEntries& GetWglExtensionEntries (); //получение таблицы WGL-расширений

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
class Context: virtual public IContext, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Context  (ISwapChain* swap_chain);
    ~Context ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего контектса
///////////////////////////////////////////////////////////////////////////////////////////////////
    void MakeCurrent (ISwapChain* swap_chain);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка совместимости цепочки обмена с контекстом
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsCompatible (ISwapChain* swap_chain);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение интерфейса библиотеки OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    ILibrary& GetLibrary ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachListener (IContextListener*);
    void DetachListener (IContextListener*);

  private:
    Context (const Context&); //no impl
    Context& operator = (const Context&); //no impl
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Адаптер
///////////////////////////////////////////////////////////////////////////////////////////////////
class Adapter: virtual public IAdapter, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Adapter  (const char* name, const char* dll_path);
    ~Adapter ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя адаптера / путь к модулю / описание
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetName        ();
    const char* GetPath        ();
    const char* GetDescription ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных устройств вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t   GetOutputsCount      ();
    IOutput* GetOutput            (size_t index);
    Output*  FindContainingOutput (HWND window);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных форматов пикселей
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef stl::vector<PixelFormatDesc>     PixelFormatArray;
    typedef stl::vector<WglExtensionEntries> WglExtensionEntriesArray;

    void EnumPixelFormats (HWND window, HDC device_context, PixelFormatArray& pixel_formats, WglExtensionEntriesArray& entries);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка слушателя событий контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    void              SetContextListener (IContextListener* listener);
    IContextListener* GetContextListener ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение интерфейса библиотеки OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    ILibrary& GetLibrary ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Диспетчеры вызовов WGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    HGLRC CreateContext     (HDC dc);
    void  DeleteContext     (HGLRC context);
    HGLRC GetCurrentContext ();
    HDC   GetCurrentDC      ();
    PROC  GetProcAddress    (const char* name);
    void  MakeCurrent       (HDC device_context, HGLRC context);
    void  SetPixelFormat    (HDC dc, int pixel_format);
    void  SwapBuffers       (HDC dc);

  private:
    Adapter (const Adapter&); //no impl
    Adapter& operator = (const Adapter&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Генерация исключения с передачей контекста ошибки GetLastError ()
///////////////////////////////////////////////////////////////////////////////////////////////////
void raise_error (const char* source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка поддержки расширений
///////////////////////////////////////////////////////////////////////////////////////////////////
stl::string get_wgl_extensions_string (const WglExtensionEntries& wgl_extension_entries, HDC device_context);
bool        has_extension             (const char* extensions_string, const char* extension);

}

}

}

}

#endif
