#ifndef RENDER_GL_DRIVER_WIN32_SHARED_HEADER
#define RENDER_GL_DRIVER_WIN32_SHARED_HEADER

#define _WIN32_WINNT 0x0501 //for ChangeDisplaySettingsEx

#include <stl/hash_map>
#include <stl/list>
#include <stl/string>
#include <stl/vector>

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/implicit_cast.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/ref.h>
#include <xtl/reference_counter.h>
#include <xtl/trackable_ptr.h>

#include <common/singleton.h>
#include <common/strlib.h>

#include <render/low_level/utils.h>

#include <shared/driver_output_manager.h>
#include <shared/gl.h>
#include <shared/log.h>
#include <shared/object.h>
#include <shared/property_list.h>
#include <shared/platform.h>

#include "wgl_entries.h"

#include <windows.h>

namespace render
{

namespace low_level
{

namespace opengl
{

namespace windows
{

//forward declarations
class Adapter;
class IAdapterLibrary;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип ускорения
///////////////////////////////////////////////////////////////////////////////////////////////////
enum Acceleration
{
  Acceleration_No,  //программный рендеринг
  Acceleration_MCD, //частичное ускорение / программная эмуляция
  Acceleration_ICD, //полное ускорение через клиентский драйвер
  
  Acceleration_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дексриптор формата пикселей
///////////////////////////////////////////////////////////////////////////////////////////////////
struct PixelFormatDesc
{
  Adapter*                   adapter;                 //адаптер, поддерживающий указанный формат
  const WglExtensionEntries* wgl_extension_entries;   //таблица WGL-расширений (должна быть скопирована в методе, получившем PixelFormatDesc, может быть 0)
  int                        pixel_format_index;      //индекс формата пикселей в таблице форматов адаптера
  Acceleration               acceleration;            //тип ускорения формата пикселей
  unsigned int               color_bits;              //количество бит на цвет
  unsigned int               alpha_bits;              //количество бит на альфу
  unsigned int               depth_bits;              //количество бит на глубину
  unsigned int               stencil_bits;            //количество бит на трафарет
  unsigned int               samples_count;           //количество sample'ов (0=multisample off)
  unsigned int               buffers_count;           //количество буферов в цепочке обмена (0=default 2 buffers)
  SwapMethod                 swap_method;             //метод обмена заднего и переднего буферов
  unsigned int               aux_buffers;             //количество вспомогательных буферов отрисовки
  bool                       support_draw_to_pbuffer; //поддержка рисования в PBuffer
  bool                       support_stereo;          //поддержка стерео-рендеринга
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель оконных сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
class IWindowListener
{
  public:
    virtual void OnDestroy           () = 0; //вызывается при удалении окна
    virtual void OnDisplayModeChange () = 0; //вызывается при смене видео-режима

  protected:
    virtual ~IWindowListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст устройства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class ISwapChainImpl: virtual public ISwapChain
{
  public:
    virtual Adapter*                   GetAdapterImpl         () = 0; //получение реализации адаптера
    virtual HDC                        GetDC                  () = 0; //контекст устройства вывода
    virtual int                        GetPixelFormat         () = 0; //формат пикселей устройства вывода
    virtual bool                       HasVSync               () = 0; //есть ли вертикальная синхронизация
    virtual const WglExtensionEntries& GetWglExtensionEntries () = 0; //получение таблицы WGL-расширений

  protected:
    virtual ~ISwapChainImpl () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Пустое макетное окно
///////////////////////////////////////////////////////////////////////////////////////////////////
class DummyWindow
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    DummyWindow  (HWND parent = 0, IWindowListener* listener = 0);
    ~DummyWindow ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    HWND GetHandle () const;

  private:
    DummyWindow (const DummyWindow&); //no impl
    DummyWindow& operator = (const DummyWindow&); //no impl        

  private:
    HWND window; //дескриптор окна
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер форматов пикселей устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
class PixelFormatManager
{
  public:
    typedef int (WINAPI *DescribePixelFormatFn)(HDC dc, int pixel_format, UINT size, LPPIXELFORMATDESCRIPTOR pfd);
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Перенаправление вызовов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RedirectApiCalls (HMODULE module);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / получение формата пикселей
///////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL        SetPixelFormat  (HDC dc, int pixel_format, DescribePixelFormatFn describe_pixel_format);
    static BOOL        CopyPixelFormat (HDC src_dc, HDC dst_dc);
    static BOOL WINAPI SetPixelFormat  (HDC dc, int pixel_format, PIXELFORMATDESCRIPTOR* pfd);
    static int  WINAPI GetPixelFormat  (HDC dc);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание формата пикселей
///////////////////////////////////////////////////////////////////////////////////////////////////
    static int WINAPI DescribePixelFormat (HDC dc, int pixel_format, UINT size, LPPIXELFORMATDESCRIPTOR pfd);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка библиотеки "по умолчанию"
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetDefaultLibrary (IAdapterLibrary* library);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка ресурсов контекста устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void ReleasePixelFormat (HDC dc);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Первичная цепочка обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
class PrimarySwapChain: virtual public ISwapChainImpl, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PrimarySwapChain  (const SwapChainDesc& sc_desc, const PixelFormatDesc& pf_desc);
    ~PrimarySwapChain ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение адаптера
///////////////////////////////////////////////////////////////////////////////////////////////////
    IAdapter* GetAdapter ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (SwapChainDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение устройства вывода с максимальным размером области перекрытия
///////////////////////////////////////////////////////////////////////////////////////////////////
    IOutput* GetContainingOutput ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / взятие состояния full-screen mode
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetFullscreenState (bool state);
    bool GetFullscreenState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен текущего заднего буфера и переднего буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Present ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список свойств цепочки обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPropertyList* GetProperties ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реалиация интерфейса IDeviceContext
///////////////////////////////////////////////////////////////////////////////////////////////////
    Adapter*                   GetAdapterImpl         (); //получение реализации адаптера
    HDC                        GetDC                  (); //контекст устройства вывода
    int                        GetPixelFormat         (); //формат пикселей устройства вывода
    bool                       HasVSync               (); //есть ли вертикальная синхронизация
    const WglExtensionEntries& GetWglExtensionEntries (); //получение таблицы WGL-расширений

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на событие измененения видео-режима
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void ()> EventHandler;

    xtl::connection RegisterDisplayModeChangeHandler (const EventHandler&);
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///PBuffer
///////////////////////////////////////////////////////////////////////////////////////////////////
class PBuffer: virtual public ISwapChainImpl, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PBuffer  (PrimarySwapChain* primary_swap_chain, unsigned int width, unsigned int height);
    PBuffer  (PrimarySwapChain* swap_chain);
    ~PBuffer ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение адаптера
///////////////////////////////////////////////////////////////////////////////////////////////////
    IAdapter* GetAdapter ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (SwapChainDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение устройства вывода с максимальным размером области перекрытия
///////////////////////////////////////////////////////////////////////////////////////////////////
    IOutput* GetContainingOutput ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / взятие состояния full-screen mode
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetFullscreenState (bool state);
    bool GetFullscreenState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен текущего заднего буфера и переднего буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Present ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реалиация интерфейса IDeviceContext
///////////////////////////////////////////////////////////////////////////////////////////////////
    Adapter*                   GetAdapterImpl         (); //получение реализации адаптера
    HDC                        GetDC                  (); //контекст устройства вывода
    int                        GetPixelFormat         (); //формат пикселей устройства вывода
    bool                       HasVSync               (); //есть ли вертикальная синхронизация
    const WglExtensionEntries& GetWglExtensionEntries (); //получение таблицы WGL-расширений

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
class Context: virtual public IContext, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Context  (ISwapChain* swap_chain);
    ~Context ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего контектса
///////////////////////////////////////////////////////////////////////////////////////////////////
    void MakeCurrent (ISwapChain* swap_chain);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка совместимости цепочки обмена с контекстом
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsCompatible (ISwapChain* swap_chain);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение интерфейса библиотеки OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    ILibrary& GetLibrary ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachListener (IContextListener*);
    void DetachListener (IContextListener*);

  private:
    Context (const Context&); //no impl
    Context& operator = (const Context&); //no impl
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель события потери контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
class IContextLostListener
{
  public:
    virtual void OnLostCurrent () = 0;

  protected:
    virtual ~IContextLostListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загружаемая библиотека OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
class IAdapterLibrary: virtual public ILibrary
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Путь к библиотеке
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* GetName () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с форматом пикселей
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual int  DescribePixelFormat (HDC dc, int pixel_format, unsigned int size, PIXELFORMATDESCRIPTOR* out_pfd) = 0;
    virtual void SetPixelFormat      (HDC dc, int pixel_format) = 0;    
    virtual void ReleasePixelFormat  (HDC dc) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание и удаление контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual HGLRC CreateContext (HDC dc) = 0;
    virtual void  DeleteContext (HGLRC context) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void  MakeCurrent       (HDC dc, HGLRC context, IContextLostListener* = 0) = 0; //установка текущего контекста
    virtual HGLRC GetCurrentContext () = 0; //получение текущего контекста
    virtual HDC   GetCurrentDC      () = 0; //получение текущего устройства вывода

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SwapBuffers (HDC dc) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;
};

typedef xtl::com_ptr<IAdapterLibrary> AdapterLibraryPtr;  

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер загружаемых библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
class LibraryManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    static AdapterLibraryPtr LoadLibrary (const char* name);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Адаптер
///////////////////////////////////////////////////////////////////////////////////////////////////
class Adapter: virtual public IAdapter, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Adapter  (const char* name, const char* dll_path, const char* init_string);
    ~Adapter ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя адаптера / путь к модулю / описание
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetName        ();
    const char* GetPath        ();
    const char* GetDescription ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных устройств вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t   GetOutputsCount      ();
    IOutput* GetOutput            (size_t index);
    Output*  FindContainingOutput (HWND window);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных форматов пикселей
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef stl::vector<PixelFormatDesc>     PixelFormatArray;
    typedef stl::vector<WglExtensionEntries> WglExtensionEntriesArray;

    void EnumPixelFormats (HWND window, HDC device_context, PixelFormatArray& pixel_formats, WglExtensionEntriesArray& entries);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение интерфейса библиотеки адаптера OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    IAdapterLibrary& GetLibrary ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список свойств адаптера
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPropertyList* GetProperties ();

  private:
    Adapter (const Adapter&); //no impl
    Adapter& operator = (const Adapter&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Генерация исключения с передачей контекста ошибки GetLastError ()
///////////////////////////////////////////////////////////////////////////////////////////////////
void raise_error (const char* source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка поддержки расширений
///////////////////////////////////////////////////////////////////////////////////////////////////
stl::string get_wgl_extensions_string (const WglExtensionEntries& wgl_extension_entries, HDC device_context);
bool        has_extension             (const char* extensions_string, const char* extension);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение индекса точки входа в таблице ICD-драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
int get_icd_table_index (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перенаправление вызовов Dll
///////////////////////////////////////////////////////////////////////////////////////////////////
void redirect_dll_call (HMODULE module, const char* import_module_name, void* src_thunk, void* dst_thunk);

}

}

}

}

#endif
