#ifndef RENDER_GL_DRIVER_WIN32_SHARED_HEADER
#define RENDER_GL_DRIVER_WIN32_SHARED_HEADER

#define _WIN32_WINNT 0x0501 //for ChangeDisplaySettingsEx

#include <windows.h>
#include <gl/glew.h>
#include <gl/wglew.h>

#include <stl/vector>
#include <stl/string>

#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>
#include <xtl/trackable_ptr.h>
#include <xtl/bind.h>
#include <xtl/common_exceptions.h>

#include <common/strlib.h>

#include <shared/platform/output_manager.h>
#include <shared/platform/swap_chain_manager.h>
#include <shared/platform/context.h>
#include <shared/object.h>
#include <shared/property_list.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Устройство вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class Output: virtual public IOutput, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Output  (const DISPLAY_DEVICE&);
    ~Output ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetName ();
    const char* GetWinName () { return win_name.c_str (); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение списка видео-режимов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetModesCount ();
    void   GetModeDesc   (size_t mode_index, OutputModeDesc& mode_desc);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего видео-режима
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetCurrentMode (const OutputModeDesc&);
    void GetCurrentMode (OutputModeDesc&);
    void RestoreDefaultMode ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление гамма-коррекцией
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetGammaRamp (const Color3f table [256]);
    void GetGammaRamp (Color3f table [256]);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение экранных координат и размеров устройства вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetScreenRect (Rect&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список свойств устройства вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPropertyList* GetProperties ();

  private:    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескприптора контекста устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    HDC GetDC ();    
    
  private:
    typedef stl::vector<OutputModeDesc> OutputModeArray;

  private:
    stl::string     name;        //имя устройства
    stl::string     win_name;    //имя устройства в Windows
    PropertyList    properties;  //свойства устройства
    OutputModeArray modes;       //режимы работы устройства
    HDC             hDC;         //хэндл контекста устройства
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цепочка обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
class SwapChain: virtual public ISwapChain, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст устройства вывода / WGLEW контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual HDC                 GetDC           () = 0;
    virtual const WGLEWContext* GetWGLEWContext () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Есть ли вертикальная синхронизация
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool HasVSync () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на событие потери контекста устройства вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
//    typedef xtl::slot<void ()> LostDCHandler;

//    virtual void RegisterLostDCHandler (LostDCHandler&) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Первичная цепочка обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
class PrimarySwapChain: public SwapChain
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PrimarySwapChain  (const SwapChainDesc& desc, OutputManager& output_manager);
    ~PrimarySwapChain ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (SwapChainDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Есть ли вертикальная синхронизация
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool HasVSync () { return desc.vsync; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение устройства вывода с максимальным размером области перекрытия
///////////////////////////////////////////////////////////////////////////////////////////////////
    IOutput* GetContainingOutput ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / взятие состояния full-screen mode
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetFullscreenState (bool state);
    bool GetFullscreenState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен текущего заднего буфера и переднего буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Present ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст устройства вывода / WGLEW контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
    HDC                 GetDC           () { return output_context; }
    const WGLEWContext* GetWGLEWContext () { return &wglew_context; }
    
  private:
    WGLEWContext     wglew_context;  //контекст WGLEW
    HWND             output_window;  //окно вывода
    HDC              output_context; //контекст вывода
    SwapChainDesc    desc;           //дескриптор цепочки обмена    
    OutputManager&   output_manager; //менеджер устройств вывода
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///PBuffer
///////////////////////////////////////////////////////////////////////////////////////////////////
  //сделать слежение за потерей PBuffer!!!
class PBuffer: public SwapChain
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PBuffer  (PrimarySwapChain* primary_swap_chain, const SwapChainDesc& desc);
    PBuffer  (PrimarySwapChain* swap_chain);
    ~PBuffer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (SwapChainDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Есть ли вертикальная синхронизация
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool HasVSync () { return false; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение устройства вывода с максимальным размером области перекрытия
///////////////////////////////////////////////////////////////////////////////////////////////////
    IOutput* GetContainingOutput ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / взятие состояния full-screen mode
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetFullscreenState (bool state);
    bool GetFullscreenState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен текущего заднего буфера и переднего буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Present ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст устройства вывода / WGLEW контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
    HDC                 GetDC           ();
    const WGLEWContext* GetWGLEWContext ();

  private:
    typedef xtl::com_ptr<PrimarySwapChain> SwapChainPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание / уничтожение буфера
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void Create  ();
    void Destroy ();
    
  private:
    SwapChainPtr  primary_swap_chain;  //основная цепочка обмена
    SwapChainDesc desc;                //дескриптор буфера
    HPBUFFERARB   pbuffer;             //дескриптор PBuffer'а
    HDC           output_context;      //контекст устройства вывода
    bool          create_largest_flag; //флаг, сигнализирующий о необходимости создания максимально возможного pbuffer'а
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Генерация исключения с передачей контекста ошибки GetLastError ()
///////////////////////////////////////////////////////////////////////////////////////////////////
void raise_error (const char* source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выбор / взятие информации о пиксельном формате
///////////////////////////////////////////////////////////////////////////////////////////////////
int  choose_pixel_format (HDC device_context, const SwapChainDesc& swap_chain_desc);          //выбор формата пикселей
void get_pixel_format    (HDC device_context, int format, SwapChainDesc& swap_chain_desc);    //получение формата пикселей

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
void make_current_context (HGLRC context, HDC draw_dc, HDC read_dc);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Инициализация контекста WGLEW
///////////////////////////////////////////////////////////////////////////////////////////////////
void init_wglew_context (const SwapChainDesc& swap_chain_desc, WGLEWContext* wglew_context);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/установка контекста GLEW/WGLEW (имя функций выбрано исходя из требований GLEW)
///////////////////////////////////////////////////////////////////////////////////////////////////
void                glewSetContext  (const GLEWContext*);
void                wglewSetContext (const WGLEWContext*);
const GLEWContext*  glewGetContext  ();
const WGLEWContext* wglewGetContext ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блок работы с WGLEW контекстом (сохраняет контекст, устанавливает указанный, восстанавливает контекст)
///////////////////////////////////////////////////////////////////////////////////////////////////
class WGLEWScope
{
  public:
    WGLEWScope  ();
    WGLEWScope  (const WGLEWContext* new_context);
    ~WGLEWScope ();

  private:
    WGLEWScope (const WGLEWScope&); //no impl
    WGLEWScope& operator = (const WGLEWScope&); //no impl
    
  private:
    const WGLEWContext* old_context;
};

}

}

}

#endif
