#ifndef RENDER_GL_DRIVER_OUTPUT_MANAGER_HEADER
#define RENDER_GL_DRIVER_OUTPUT_MANAGER_HEADER

#include <stl/auto_ptr.h>

#include <render/low_level/driver.h>

#include <shared/object.h>

namespace syslib
{

//implementation forwards
class Screen;

}

namespace render
{

namespace low_level
{

namespace opengl
{

//forward declaration
class OutputManager;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Устройство вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class Output: virtual public IOutput, public Object
{
  friend class OutputManager;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Output  (const syslib::Screen& screen);
    ~Output ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Платформо-зависимый дескриптор окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    const void* Handle ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение списка видео-режимов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetModesCount ();
    void   GetModeDesc   (size_t mode_index, OutputModeDesc& mode_desc);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего видео-режима
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetCurrentMode     (const OutputModeDesc&);
    void GetCurrentMode     (OutputModeDesc&);
    void RestoreDefaultMode ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление гамма-коррекцией
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetGammaRamp (const Color3f table [256]);
    void GetGammaRamp (Color3f table [256]);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список свойств устройства вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPropertyList* GetProperties ();

  private:
    Output (const Output&); //no impl
    Output& operator = (const Output&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Класс, инкапсулирующий работу с низкоуровневыми устройствами вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class OutputManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    OutputManager  ();
    ~OutputManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных устройств вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t  GetOutputsCount () const;
    Output* GetOutput       (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск устройства вывода, перекрытие которого с окном максимально
///////////////////////////////////////////////////////////////////////////////////////////////////
    Output* FindContainingOutput (const void* native_window_handle) const;

  private:
    OutputManager (const OutputManager&); //no impl
    OutputManager& operator = (const OutputManager&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

}

}

}

#endif
