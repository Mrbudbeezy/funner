#ifndef RENDER_GL_DRIVER_CONTEXT_MANAGER_HEADER
#define RENDER_GL_DRIVER_CONTEXT_MANAGER_HEADER

#include <xtl/array>
#include <render/low_level/driver.h>

#include <shared/gl_entries.h>
#include <shared/extensions.h>
#include <shared/context_caps.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификаторы уровней устройства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
enum Stage
{
  Stage_Common,
  Stage_Input,
  Stage_Shading,
  Stage_Output,
  Stage_TextureManager,
  Stage_QueryManager,

  Stage_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификаторы элементов кэша контекстной таблицы общего уровня
///////////////////////////////////////////////////////////////////////////////////////////////////
enum CommonCache
{
  CommonCache_ActiveTextureSlot,   //номер текущего активного слота текстурироания
  CommonCache_EnabledTextures,     //маска: установлена ли текстура в определенном слоте

  CommonCache_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Маски уровней
///////////////////////////////////////////////////////////////////////////////////////////////////
enum StageFlag
{
  StageFlag_Input          = 1 << Stage_Input,
  StageFlag_Shading        = 1 << Stage_Shading,
  StageFlag_Output         = 1 << Stage_Output,
  StageFlag_TextureManager = 1 << Stage_TextureManager,
  StageFlag_QueryManager   = 1 << Stage_QueryManager,
  StageFlag_All            = ~0
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество элементов в каждой из таблиц локальных данных контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
const size_t CONTEXT_DATA_TABLE_SIZE = 64;

typedef xtl::array<size_t, CONTEXT_DATA_TABLE_SIZE> ContextDataTable;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер контекстов OpenGL (политика копирования - подсчёт ссылок)
///////////////////////////////////////////////////////////////////////////////////////////////////
class ContextManager
{
  public:
    typedef xtl::function<void (const char*)> LogHandler;    
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    ContextManager  (ISwapChain* swap_chain, const char* init_string, const LogHandler& log_handler);
    ContextManager  (const ContextManager&);
    ~ContextManager ();

    ContextManager& operator = (const ContextManager&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание совместимой цепочки обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
    ISwapChain* CreateCompatibleSwapChain (ISwapChain*);
    ISwapChain* CreateCompatibleSwapChain (ISwapChain*, const SwapChainDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выбор текущей цепочки обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetSwapChain (ISwapChain* swap_chain);
    ISwapChain* GetSwapChain () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Активация текущего контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    void MakeContextCurrent () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с таблицами локальных данных текущего контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    const ContextDataTable& GetContextDataTable (Stage table_id) const;
          ContextDataTable& GetContextDataTable (Stage table_id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение информации о текущей реализации OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetExtensions () const;
    const char* GetVersion    () const;
    const char* GetVendor     () const;
    const char* GetRenderer   () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Определение поддержки расширения контекстом
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsSupported (const Extension& extension) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поулчение аппаратно поддерживаемых возможностей контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    const ContextCaps& GetCaps () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка совместимости контекста и цепочки обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsCompatible (ISwapChain* swap_chain) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка совместимости менеджеров контекстов
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsCompatible (const ContextManager&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Протоколирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LogPrintf  (const char* format, ...) const;
    void LogVPrintf (const char* format, va_list args) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка ошибок OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetValidationState (bool state); //включение / отключение проверки ошибок
    bool GetValidationState () const;
    void CheckErrors        (const char* source) const;
    void RaiseError         (const char* source) const;
    void ClearErrors        () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещение о необходимости ребинда уровня / очистка флагов ребиндинга / проверка необходимости ребинда уровней
///////////////////////////////////////////////////////////////////////////////////////////////////
    void StageRebindNotify        (Stage);
    void ResetRebindNotifications ();
    bool NeedStageRebind          (Stage) const;

  private:
    struct Impl;
    Impl* impl;
};

}

}

}

#endif
