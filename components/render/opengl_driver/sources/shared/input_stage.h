#ifndef RENDER_GL_DRIVER_INPUT_STAGE_HEADER
#define RENDER_GL_DRIVER_INPUT_STAGE_HEADER

#include <stl/auto_ptr.h>
#include <render/low_level/device.h>
#include <shared/context_manager.h>
#include <shared/stage_state.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор расположения индексов
///////////////////////////////////////////////////////////////////////////////////////////////////
struct IndicesLayout
{
  GLenum      type; //тип индексов
  const void* data; //указатель на начало индексов / смещение от начала индексного буфера
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буфер, устанавливаемый в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
class IBindableBuffer: virtual public IBuffer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка буфера в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Bind () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Указатель на данные буфера (для буферов в системной памяти) / смещение от начала буфера (для аппаратных буферов)
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void* GetDataPointer () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение хеша данных (0 - данные не хешируются)
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t GetDataHash () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Входной уровень конвейера OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
class InputStage
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    InputStage  (const ContextManager&);
    ~InputStage ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание объекта состояния уровня
///////////////////////////////////////////////////////////////////////////////////////////////////
    IStageState* CreateStageState ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание ресурсов уровня
///////////////////////////////////////////////////////////////////////////////////////////////////
    IInputLayout*  CreateInputLayout    (const InputLayoutDesc& desc);
    IBuffer*       CreateVertexBuffer   (const BufferDesc& desc);
    IBuffer*       CreateIndexBuffer    (const BufferDesc& desc);
    IBuffer*       CreateConstantBuffer (const BufferDesc& desc);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление конфигурацией входных данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          SetInputLayout (IInputLayout* state);
    IInputLayout* GetInputLayout () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление вершинными буферами
///////////////////////////////////////////////////////////////////////////////////////////////////
    void     SetVertexBuffer (size_t vertex_buffer_slot, IBuffer* buffer);
    IBuffer* GetVertexBuffer (size_t vertex_buffer_slot) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление индексным буфером
///////////////////////////////////////////////////////////////////////////////////////////////////
    void     SetIndexBuffer (IBuffer* buffer);
    IBuffer* GetIndexBuffer () const;    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка состояния уровня в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind (size_t base_vertex, size_t base_index, IndicesLayout* out_indices_layout);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени семантики
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const char* GetVertexAttributeSemanticName (VertexAttributeSemantic semantic);

  private:
    InputStage (const InputStage&); //no impl
    InputStage& operator = (const InputStage&); //no impl

  private:  
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
