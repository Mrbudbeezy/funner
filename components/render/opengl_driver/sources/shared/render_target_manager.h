#ifndef RENDER_GL_DRIVER_RENDER_TARGET_MANAGER_HEADER
#define RENDER_GL_DRIVER_RENDER_TARGET_MANAGER_HEADER

#include <stl/auto_ptr.h>
#include <render/low_level/device.h>
#include <shared/stage_state.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер целевых буферов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderTargetManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTargetManager  (const ContextManager&, ISwapChain* swap_chain);
    ~RenderTargetManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание объекта состояния уровня
///////////////////////////////////////////////////////////////////////////////////////////////////
    IStageState* CreateStageState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание текстур
///////////////////////////////////////////////////////////////////////////////////////////////////
    ITexture* CreateTexture             (const TextureDesc&);
    ITexture* CreateRenderTargetTexture (ISwapChain* swap_chain, size_t buffer_index);
    ITexture* CreateDepthStencilTexture (ISwapChain* swap_chain);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание отображений
///////////////////////////////////////////////////////////////////////////////////////////////////
    IView* CreateView (ITexture* texture, const ViewDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выбор целевых отображений
///////////////////////////////////////////////////////////////////////////////////////////////////
    void    SetRenderTargets    (IView* render_target_view, IView* depth_stencil_view);
    IView*  GetRenderTargetView () const;
    IView*  GetDepthStencilView () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройка подуровня растеризации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void            SetViewport (const Viewport& viewport);
    void            SetScissor  (const Rect& scissor_rect);
    const Viewport& GetViewport () const;
    const Rect&     GetScissor  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка буферов отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ClearRenderTargetView (const Color4f& color);
    void ClearDepthStencilView (size_t clear_flags, float depth, unsigned char stencil);
    void ClearViews            (size_t clear_flags, const Color4f& color, float depth, unsigned char stencil);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление целевых буферов отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateRenderTargets ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка состояния уровня в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind ();

  private:
    RenderTargetManager (const RenderTargetManager&); //no impl
    RenderTargetManager& operator = (const RenderTargetManager&); //no impl
  
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
