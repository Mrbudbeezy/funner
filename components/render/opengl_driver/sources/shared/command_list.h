#ifndef RENDER_GL_DRIVER_COMMAND_LIST_HEADER
#define RENDER_GL_DRIVER_COMMAND_LIST_HEADER

#include <xtl/functional_fwd>
#include <xtl/intrusive_ptr.h>

namespace render
{

namespace low_level
{

namespace opengl
{

namespace detail
{

//forward declaration
class ICommand;

}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Исполнитель списка команд
///////////////////////////////////////////////////////////////////////////////////////////////////      
class ICommandListExecuter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Выполнение команд
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void ExecuteCommands () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;                

  protected:
    virtual ~ICommandListExecuter () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Построитель списка команд (аналог дисплейных списков)
///////////////////////////////////////////////////////////////////////////////////////////////////
class CommandListBuilder
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    CommandListBuilder  ();
    ~CommandListBuilder ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление команды
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class Fn>
    void Add (Fn fn);
    
    template <class Fn, class T1>
    void Add (Fn fn, const T1& arg1);
    
    template <class Fn, class T1, class T2>
    void Add (Fn fn, const T1& arg1, const T2& arg2);
    
    template <class Fn, class T1, class T2, class T3>
    void Add (Fn fn, const T1& arg1, const T2& arg2, const T3& arg3);

    template <class Fn, class T1, class T2, class T3, class T4>
    void Add (Fn fn, const T1& arg1, const T2& arg2, const T3& arg3, const T4& arg4);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Завершение списка команд
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::com_ptr<ICommandListExecuter> ExecuterPtr;

    ExecuterPtr Finish ();

  private:
    void AddCore (detail::ICommand*);

  private:
    CommandListBuilder (const CommandListBuilder&); //no impl
    CommandListBuilder& operator = (const CommandListBuilder&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

#include <shared/detail/command_list.inl>

}

}

}

#endif
