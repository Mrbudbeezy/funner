#ifndef RENDER_GL_DRIVER_RASTERIZER_STAGE_HEADER
#define RENDER_GL_DRIVER_RASTERIZER_STAGE_HEADER

#include <render/low_level/device.h>

#include <shared/context_manager.h>
#include <shared/context_object.h>
#include <shared/stage_state.h>

#include <stl/auto_ptr.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Растеризатор
///////////////////////////////////////////////////////////////////////////////////////////////////
class RasterizerStage
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RasterizerStage  (const ContextManager&);
    ~RasterizerStage ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание объекта состояния уровня
///////////////////////////////////////////////////////////////////////////////////////////////////
    IStageState* CreateStageState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Биндинг состояния, вьюпорта и отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание дескриптора растерайзера
///////////////////////////////////////////////////////////////////////////////////////////////////
    IRasterizerState* CreateRasterizerState (const RasterizerDesc&);    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка состояния, вьюпорта и отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetState    (IRasterizerState* state);
    void SetViewport (const Viewport& viewport);
    void SetScissor  (const Rect& scissor_rect);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение состояния, вьюпорта и отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    IRasterizerState* GetState    ();
    const Viewport&   GetViewport ();
    const Rect&       GetScissor  ();

  private:
    RasterizerStage (const RasterizerStage&);             //no impl
    RasterizerStage& operator = (const RasterizerStage&); //no impl
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
