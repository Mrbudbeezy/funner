#ifndef RENDER_GL_DRIVER_QUERY_MANAGER_HEADER
#define RENDER_GL_DRIVER_QUERY_MANAGER_HEADER

#include <render/low_level/query.h>

#include <shared/context_manager.h>
#include <shared/stage_state.h>

#include <stl/auto_ptr.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер запросов
///////////////////////////////////////////////////////////////////////////////////////////////////
class QueryManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    QueryManager  (const ContextManager&);
    ~QueryManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание объекта состояния уровня
///////////////////////////////////////////////////////////////////////////////////////////////////
    IStageState* CreateStageState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание предикатов
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPredicate* CreatePredicate ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление предикатами отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetPredication    (IPredicate* predicate, bool predicate_value);
    IPredicate* GetPredicate      ();
    bool        GetPredicateValue ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение результата предиката
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool GetPredicateAsyncResult ();

  private:
    QueryManager (const QueryManager&);              //no impl
    QueryManager& operator = (const QueryManager&);  //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
