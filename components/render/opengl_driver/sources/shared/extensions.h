#ifndef RENDER_GL_DRIVER_EXTENSION_HEADER
#define RENDER_GL_DRIVER_EXTENSION_HEADER

#include <stddef.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оболочка над идентификатором расширения OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
class Extension
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
    Extension (size_t id);
    Extension (const char* full_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя расширения
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const { return id; }

  private:
    size_t id;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Множество расширений
///////////////////////////////////////////////////////////////////////////////////////////////////
class ExtensionSet
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    ExtensionSet  ();
    ExtensionSet  (const ExtensionSet&);
    ~ExtensionSet ();

    ExtensionSet& operator = (const ExtensionSet&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество расширений в множестве
///////////////////////////////////////////////////////////////////////////////////////////////////
    static size_t Size ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / получение флагов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Set (const Extension& extension, bool state);
    bool Get (const Extension& extension) const;
    void Set (bool state);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка флагов по строке содержащей имена расширений и wildcard маски
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetGroup (const char* extension_names, bool state);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Логические операции
///////////////////////////////////////////////////////////////////////////////////////////////////
    ExtensionSet& operator |= (const ExtensionSet&);
    ExtensionSet& operator &= (const ExtensionSet&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (ExtensionSet&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение списка псевдо-расширений (багов)
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const ExtensionSet& BugExtensions ();

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (ExtensionSet&, ExtensionSet&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение идентификатора расширения по строковому имени и обратная операция
///////////////////////////////////////////////////////////////////////////////////////////////////
size_t      get_extension_id   (const char* full_name);
size_t      get_extension_id   (const char* full_name, size_t length);
const char* get_extension_name (size_t extension_id);

}

}

}

#endif
