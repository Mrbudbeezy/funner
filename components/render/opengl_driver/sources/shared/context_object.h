#ifndef RENDER_GL_DRIVER_CONTEXT_OBJECT_HEADER
#define RENDER_GL_DRIVER_CONTEXT_OBJECT_HEADER

#include <xtl/common_exceptions.h>

#include <shared/object.h>
#include <shared/context_manager.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекстный объект
///////////////////////////////////////////////////////////////////////////////////////////////////
class ContextObject: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ContextObject (const ContextManager&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка совместимости
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsCompatible (const ContextManager&) const;
    bool IsCompatible (const ContextObject&) const;  

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер контекстов
///////////////////////////////////////////////////////////////////////////////////////////////////
          ContextManager& GetContextManager ()       { return context_manager; }
    const ContextManager& GetContextManager () const { return context_manager; }    

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Активация текущего контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    void MakeContextCurrent    () const;
    bool TryMakeContextCurrent () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с кэшем текущего контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    const size_t* GetContextCache      () const;
          size_t* GetContextCache      ();
          void    SetContextCacheValue (size_t entry_id, size_t value);
          size_t  GetContextCacheValue (size_t entry_id) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Определение поддержки расширения контекстом
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsSupported (size_t context_id, const Extension& extension) const;
    bool IsSupported (const Extension& extension) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поулчение аппаратно поддерживаемых возможностей контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    const ContextCaps& GetCaps () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Протоколирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LogPrintf  (const char* format, ...) const;
    void LogVPrintf (const char* format, va_list args) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка ошибок OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetValidationState (bool state); //включение / отключение проверки ошибок
    bool GetValidationState () const;
    void CheckErrors        (const char* source) const;
    void RaiseError         (const char* source) const;
    void ClearErrors        () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещение о необходимости ребинда уровня
///////////////////////////////////////////////////////////////////////////////////////////////////
    void StageRebindNotify (Stage);

  private:
    ContextManager context_manager;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Приведение типов объектов с проверкой совместимости
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class DstT, class SrcT>
DstT* cast_object (const ContextManager& owner, SrcT* ptr, const char* source, const char* argument_name);

template <class DstT, class SrcT>
DstT* cast_object (const ContextObject& owner, SrcT* ptr, const char* source, const char* argument_name);

#include <shared/detail/context_object.inl>

}

}

}

#endif
