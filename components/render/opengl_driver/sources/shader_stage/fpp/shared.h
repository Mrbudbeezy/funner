#ifndef RENDER_GL_DRIVER_FPP_SHADER_MANAGER_SHARED_HEADER
#define RENDER_GL_DRIVER_FPP_SHADER_MANAGER_SHARED_HEADER

#include "../shared.h"

#include <stl/string>
#include <stl/hash_map>

#include <xtl/string.h>

#include <common/parser.h>
#include <common/strlib.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Константы
///////////////////////////////////////////////////////////////////////////////////////////////////
const size_t FPP_MAX_LIGHTS_COUNT = 8; //максимальное количество источников освещения

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
enum LightType
{
  LightType_Point,  //точечный источник света
  LightType_Remote, //удалённый направленный источник света
  LightType_Spot,   //конусоидальный направленный источник света
  
  LightType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
struct LightDesc
{
  LightType type;                  //тип источника света
  int       enable;                //состояние источника света: включён/выключен
  float     position [3];          //положение источника света
  float     direction [3];         //направление источника света
  Color4f   ambient_color;         //веса поглащаемой составляющей света
  Color4f   diffuse_color;         //веса рассеиваемой составляющей света
  Color4f   specular_color;        //веса отражённой составляющей света
  float     angle;                 //угол излучения
  float     exponent;              //экспонента затухания освещения по углу
  float     constant_attenuation;  //константное затухание от расстояния
  float     linear_attenuation;    //линейное затухание от расстояния
  float     quadratic_attenuation; //квадратичное затухание от расстояния
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник текстурных координат
///////////////////////////////////////////////////////////////////////////////////////////////////
enum TexcoordSource
{
  TexcoordSource_Explicit,      //текстурные координаты задаются явно
  TexcoordSource_SphereMap,     //генерация текстурных координат: сферическая карта
  TexcoordSource_ReflectionMap, //генерация текстурных координат: карта отражения
  TexcoordSource_ObjectSpace,   //генерация текстурных координат: texmap.transform * position
  TexcoordSource_ViewerSpace,   //генерация текстурных координат: texmap.transform * modelviewprojection * position
  
  TexcoordSource_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Смешивание цветов при текстурировании
///////////////////////////////////////////////////////////////////////////////////////////////////
enum TextureBlend
{
  TextureBlend_Replace,  //замена вычисленного цвета цветом текстуры
  TextureBlend_Modulate, //умножение вычисленного цвета на цвет текстуры
  TextureBlend_Blend,    //смешивание

  TextureBlend_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор текстурной карты
///////////////////////////////////////////////////////////////////////////////////////////////////
struct TexmapDesc
{
  TextureBlend   blend;     //смешивание цветов
  Matrix4f       transform; //матрица преобразования текстурных координат
  Matrix4f       texgen;    //матрица параметров генерации текстурных координат
  TexcoordSource source_u;  //источник текстурных координат для U-координаты
  TexcoordSource source_v;  //источник текстурных координат для V-координаты
  TexcoordSource source_w;  //источник текстурных координат для W-координаты
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройка передачи цвета материала
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ColorMaterial
{
  ColorMaterial_Explicit,          //цвет материала задаётся параметрами материала
  ColorMaterial_Emission,          //цвет геометрии задаёт emission-составляющую материала
  ColorMaterial_Ambient,           //цвет геометрии задаёт ambient-составляющую материала
  ColorMaterial_Diffuse,           //цвет геометрии задаёт diffuse-составляющую материала
  ColorMaterial_Specular,          //цвет геометрии задаёт specular-составляющую материала
  ColorMaterial_AmbientAndDiffuse, //цвет геометрии задаёт ambient и diffuse составляющие материала  
  
  ColorMaterial_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор материала
///////////////////////////////////////////////////////////////////////////////////////////////////
struct MaterialDesc
{
  Color4f       emission_color;     //цвет излучения
  Color4f       ambient_color;      //цвет поглощения
  Color4f       diffuse_color;      //цвет рассеивания
  Color4f       specular_color;     //цвет отражения
  float         shininess;          //"металличность"
  ColorMaterial color_material;     //настройка передачи цвета материала
  CompareMode   alpha_compare_mode; //режим альфа теста
  float         alpha_reference;    //константа альфа теста
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор наблюдателя
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ViewerDesc
{
  Matrix4f projection_matrix; //матрица проецирования
  Matrix4f view_matrix;       //матрица вида
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ObjectDesc
{
  Matrix4f matrix; //матрица преобразований объекта
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор режимов визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ModesDesc
{
  bool normalize; //необходимо ли нормализировать нормали  
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры растеризации
///////////////////////////////////////////////////////////////////////////////////////////////////
struct RasterizationDesc
{
  float point_size;           //размер точки
  float line_width;           //ширина линии
  int   line_stipple_factor;  //количество повторений пикселя в маске линии
  int   line_stipple_pattern; //маска линии
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние фиксированной программы шейдинга
///////////////////////////////////////////////////////////////////////////////////////////////////
struct FppState
{
  ModesDesc         modes;                              //режимы визуализации
  ViewerDesc        viewer;                             //параметры наблюдателя
  ObjectDesc        object;                             //параметры объекта
  RasterizationDesc rasterization;                      //параметры растеризации
  LightDesc         lights [FPP_MAX_LIGHTS_COUNT];      //параметры источников освещения
  MaterialDesc      material;                           //праметры материала
  TexmapDesc        maps [DEVICE_SAMPLER_SLOTS_COUNT];  //параметры текстурирования
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип динамического параметра
///////////////////////////////////////////////////////////////////////////////////////////////////
enum FppDynamicParameterType
{
  FppDynamicParameterType_Int,   //целое число
  FppDynamicParameterType_Float, //вещественное число
  
  FppDynamicParameterType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Массив смещений полей структуры FppState, обновляемых вместе с динамическим параметром
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef stl::vector<size_t> FppFieldOffsetArray;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамический параметр fpp-шейдера (аналог uniform-var в glsl)
///////////////////////////////////////////////////////////////////////////////////////////////////
struct FppDynamicParameter
{
  FppDynamicParameterType type;          //тип параметра
  size_t                  count;         //количество элементов
  FppFieldOffsetArray     field_offsets; //смещения полей в структуре FppState, обновляемых при изменении параметра
};

typedef stl::hash_map<stl::hash_key<const char*>, FppDynamicParameter> FppDynamicParameterMap;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Fixed-pipeline-program
///////////////////////////////////////////////////////////////////////////////////////////////////
class FppProgram: virtual public ICompiledProgram, virtual public IShader, public ContextObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FppProgram  (const ContextManager&, const ShaderDesc& shader_desc, const LogFunction& error_log);
    ~FppProgram ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовое состояние фиксированной программы шейдинга
///////////////////////////////////////////////////////////////////////////////////////////////////
    const FppState& GetBaseState () const { return base_state; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с динамическими параметрами
///////////////////////////////////////////////////////////////////////////////////////////////////
    const FppDynamicParameter* FindDynamicParameter (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание программы, устанавливаемой в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    IBindableProgram* CreateBindableProgram (ProgramParametersLayout* layout);

  private:
    FppState               base_state;         //базовое состояние фиксированной программы шейдинга
    FppDynamicParameterMap dynamic_parameters; //массив динамических параметров
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Fixed-pipeline-program устанавливаемая в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
class FppBindableProgram: virtual public IBindableProgram, public ContextObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FppBindableProgram (const ContextManager& manager, FppProgram& compiled_program, ProgramParametersLayout* layout);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка программы в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind (ConstantBufferPtr* constant_buffers);  
    
  private:
    void UpdateHashes ();
    
  private:
    struct Parameter;
    struct Group;

    typedef stl::vector<Parameter>  ParameterArray;
    typedef stl::vector<Group>      GroupArray;

  private:
    ParameterArray  parameters;         //параметры программы
    GroupArray      groups;             //группы параметров
    FppState        fpp_state;          //состояние фиксированной программы шейдинга
    Matrix4f        view_object_matrix; //композиция преобразований вида и объекта
    size_t          viewer_hash;        //хэш параметров наблюдателя
    size_t          object_hash;        //хэш параметров объекта
    size_t          rasterization_hash; //хэш параметров растеризации
    size_t          material_hash;      //хэш параметров материала
    size_t          lighting_hash;      //хэш параметров освещения
    size_t          texmaps_hash;       //хэш параметров текстурирования
    size_t          modes_hash;         //хэш режимов визуализации
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер fixed-pipeline-program шейдеров
///////////////////////////////////////////////////////////////////////////////////////////////////
class FppShaderManager : virtual public IShaderManager, public ContextObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FppShaderManager (const ContextManager& manager);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество поддерживаемых профилей
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetProfilesCount ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имена поддерживаемых профилей
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetProfile (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    IShader*          CreateShader  (const ShaderDesc& shader_desc, const LogFunction& error_log);
    ICompiledProgram* CreateProgram (size_t shaders_count, IShader** shaders, const LogFunction& error_log);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матричные утилиты
///////////////////////////////////////////////////////////////////////////////////////////////////
void identity_matrix  (Matrix4f); //инициализация единичной матрицы
void mult_matrix      (const Matrix4f a, const Matrix4f b, Matrix4f result); //result = a * b
void transpose_matrix (const Matrix4f source, Matrix4f result); //транспонирование матрицы

}

}

}

#endif
