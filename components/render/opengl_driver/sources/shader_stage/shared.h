#ifndef RENDER_GL_DRIVER_SHADER_STAGE_SHARED_HEADER
#define RENDER_GL_DRIVER_SHADER_STAGE_SHARED_HEADER

#include <stl/vector>
#include <stl/algorithm>
#include <stl/string>

#include <xtl/intrusive_ptr.h>
#include <xtl/trackable_ptr.h>
#include <xtl/uninitialized_storage.h>
#include <xtl/common_exceptions.h>

#include <render/low_level/utils.h>

#include <shared/shader_stage.h>
#include <shared/input_stage.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Элементы таблицы локальных данных контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ShaderStageCache
{
  ShaderStageCache_UsedProgram,          //ID текущей используемой программы
  ShaderStageCache_FppViewerStateHash,   //хэш параметров наблюдателя
  ShaderStageCache_FppObjectStateHash,   //хэш параметров объекта
  ShaderStageCache_FppMaterialStateHash, //хэш параметров материала
  ShaderStageCache_FppLightingStateHash, //хэш параметров освещения
  ShaderStageCache_FppTexmapsStateHash,  //хэш параметров текстурирования
  ShaderStageCache_FppModesStateHash,    //хэш режимов визуализации
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание расположения параметров в группе (группировка произодится по индексам константных буферов)
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ProgramParameterGroup
{
  size_t            slot;       //индекс константного буфера
  size_t            count;      //количество параметров в группе
  ProgramParameter* parameters; //указатель на начало области с параметрами группы
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание расположения параметров программы шейдинга
///////////////////////////////////////////////////////////////////////////////////////////////////
class ProgramParametersLayout: virtual public IProgramParametersLayout, public ContextObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ProgramParametersLayout (const ContextManager&, const ProgramParametersLayoutDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetDesc (const ProgramParametersLayoutDesc& in_desc);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t            GetParametersCount () const { return parameters.size (); }    
    ProgramParameter* GetParameters      ()       { return &parameters [0]; }
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение групп
///////////////////////////////////////////////////////////////////////////////////////////////////    
    size_t                 GetGroupsCount () const { return groups.size (); }
    ProgramParameterGroup* GetGroups      ()       { return &groups [0]; }
    ProgramParameterGroup& GetGroup       (size_t index);

  private:
    typedef stl::vector<ProgramParameter>      ParameterArray;
    typedef stl::vector<ProgramParameterGroup> GroupArray;

  private:  
    ParameterArray parameters; //параметры программы шейдинга
    GroupArray     groups;     //группы параметров программы шейдинга
    stl::string    names;      //имена параметров
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Шейдер
///////////////////////////////////////////////////////////////////////////////////////////////////
class IShader: virtual public IObject
{
  protected:
    virtual ~IShader () {}
};

typedef xtl::trackable_ptr<IBindableBuffer> ConstantBufferPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Программа шейдинга с возможностью установки в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
class IBindableProgram: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка состояния в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Bind (ConstantBufferPtr* constant_buffers) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Скомпилированная программа шейдинга
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICompiledProgram: virtual public IProgram
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание программы с возможностью установки в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IBindableProgram* CreateBindableProgram (ProgramParametersLayout* layout) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер шейдеров
///////////////////////////////////////////////////////////////////////////////////////////////////
class IShaderManager : virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество поддерживаемых профилей
///////////////////////////////////////////////////////////////////////////////////////////////////
   virtual size_t GetProfilesCount () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имена поддерживаемых профилей
///////////////////////////////////////////////////////////////////////////////////////////////////
   virtual const char* GetProfile (size_t index) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание шейдера / программы
///////////////////////////////////////////////////////////////////////////////////////////////////
   virtual IShader*          CreateShader  (const ShaderDesc& shader_desc, const LogFunction& error_log) = 0;
   virtual ICompiledProgram* CreateProgram (size_t shaders_count, IShader** shaders, const LogFunction& error_log) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание шейдер менеджеров
///////////////////////////////////////////////////////////////////////////////////////////////////
IShaderManager* create_fpp_shader_manager  (const ContextManager& manager);
IShaderManager* create_glsl_shader_manager (const ContextManager& manager);

}

}

}

#endif
