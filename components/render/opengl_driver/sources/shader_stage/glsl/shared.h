#ifndef RENDER_GL_DRIVER_SHADER_STAGE_GLSL_SHARED_HEADER
#define RENDER_GL_DRIVER_SHADER_STAGE_GLSL_SHARED_HEADER

#include "../shared.h"

#include <stl/algorithm>
#include <stl/hash_map>
#include <stl/string>
#include <stl/vector>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///GLSL-шейдер
///////////////////////////////////////////////////////////////////////////////////////////////////
class GlslShader: virtual public IShader, public ContextObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    GlslShader  (const ContextManager& manager, GLenum shader_type, const ShaderDesc& shader_desc, const LogFunction& error_log);
    ~GlslShader ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение OpenGL дескриптора шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    GLhandleARB GetHandle () { return handle; }

  private:
    void DeleteShader ();

  private:
    GLhandleARB handle; //дескриптор шейдера
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///GLSL-программа
///////////////////////////////////////////////////////////////////////////////////////////////////
class GlslProgram: virtual public ICompiledProgram, public ContextObject, public IVertexAttributeDictionary
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметр программы
///////////////////////////////////////////////////////////////////////////////////////////////////  
    struct Parameter
    {
      stl::string          name;           //имя параметра
      size_t               name_hash;      //хэш имени
      ProgramParameterType type;           //тип параметра
      size_t               elements_count; //количество элементов
    };
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    GlslProgram (const ContextManager& manager, size_t shaders_count, IShader** shaders, const LogFunction& error_log);
    ~GlslProgram ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание программы, устанавливаемой в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    IBindableProgram* CreateBindableProgram (ProgramParametersLayout* layout);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение словаря атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
    IVertexAttributeDictionary* GetVertexAttributeDictionary ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение индекса атрибута по имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    int FindAttribute (const char* name); //returns -1 in case of fail

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение trackable
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::trackable& GetDictionaryTrackable () { return GetTrackable (); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение OpenGL дескриптора программы
///////////////////////////////////////////////////////////////////////////////////////////////////
    GLhandleARB GetHandle () { return handle; }
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с идентификатором последней установленной программы
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetLastBindableProgramId (size_t id) { last_bindable_program_id = id; }
    size_t GetLastBindableProgramId ()          { return last_bindable_program_id; }
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение параметров программы
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t           GetParametersCount ();
    const Parameter* GetParameters      ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение лога OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetProgramLog (stl::string&);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление шейдеров
///////////////////////////////////////////////////////////////////////////////////////////////////
    void DeleteProgram ();

  private:
    struct Attribute
    {
      stl::string name;      //имя атрибута
      size_t      name_hash; //хэш имени
      int         location;  //индекс атрибута
    };

    typedef xtl::com_ptr<GlslShader> ShaderPtr;
    typedef stl::vector<ShaderPtr>   ShaderArray;
    typedef stl::vector<Parameter>   ParameterArray;
    typedef stl::vector<Attribute>   AttributeArray;

  private:
    GLhandleARB    handle;                   //дескриптор программы
    ShaderArray    shaders;                  //используемые шейдеры
    ParameterArray parameters;               //параметры программы
    AttributeArray attributes;               //атрибуты программы
    size_t         last_bindable_program_id; //идентификатор последней установленной программы
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///GLSL-программа, устанавливаемая в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
class GlslBindableProgram: virtual public IBindableProgram, public ContextObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    GlslBindableProgram (const ContextManager&, GlslProgram& program, ProgramParametersLayout* layout);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка программы в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind (ConstantBufferPtr* constant_buffers);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка корректности контекста выполнения программы
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Validate ();
    
  private:
    struct Parameter;
    struct Group;

    typedef stl::vector<Parameter>  ParameterArray;
    typedef stl::vector<Group>      GroupArray;

  private:
    GlslProgram&   program;    //программа
    ParameterArray parameters; //параметры программы
    GroupArray     groups;     //группы параметров программы
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер GLSL шейдеров
///////////////////////////////////////////////////////////////////////////////////////////////////
class GlslShaderManager: virtual public IShaderManager, public ContextObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / Деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    GlslShaderManager (const ContextManager& manager);
    ~GlslShaderManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество поддерживаемых профилей
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetProfilesCount ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имена поддерживаемых профилей
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetProfile (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    IShader*          CreateShader  (const ShaderDesc& shader_desc, const LogFunction& error_log);
    ICompiledProgram* CreateProgram (size_t shaders_count, IShader** shaders, const LogFunction& error_log);
};

}

}

}

#endif
