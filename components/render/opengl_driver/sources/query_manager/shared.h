#ifndef RENDER_GL_DRIVER_QUERY_MANAGER_SHARED_HEADER
#define RENDER_GL_DRIVER_QUERY_MANAGER_SHARED_HEADER

#include <xtl/common_exceptions.h>
#include <xtl/trackable_ptr.h>

#include <shared/context_object.h>
#include <shared/query_manager.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Элементы таблицы локальных данных контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
enum QueryManagerCacheEntry
{
  CacheEntry_IsInQueryRanges = CacheEntry_QueryManagerPrivateFirst  //находимся ли в рамках begin-end
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Предикат, создаваемый при отсутствии аппаратной поддержки occlusion query
///////////////////////////////////////////////////////////////////////////////////////////////////
class NullPredicate : virtual public IPredicate, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Указание границ запроса
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Begin () {}
    void End   () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение результата отрисовки
///  (операция может привести к остановке выполнения нити до завершения отрисовки)
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool GetResult () { return true; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение доступности результата отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsResultAvailable () { return true; }
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Предикат с асинхронным запросом результатов
///////////////////////////////////////////////////////////////////////////////////////////////////
class AsyncPredicate : virtual public IPredicate, public ContextObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    AsyncPredicate  (const ContextManager&);
    ~AsyncPredicate ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Указание границ запроса
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Begin ();
    void End   ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение результата отрисовки
///  (операция может привести к остановке выполнения нити до завершения отрисовки)
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool GetResult ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение доступности результата отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsResultAvailable ();

  private:
    GLuint query; //OpenGL id запроса
};

}

}

}

#endif
