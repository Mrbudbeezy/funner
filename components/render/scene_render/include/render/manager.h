#ifndef RENDER_SCENE_RENDER_MANAGER_HEADER
#define RENDER_SCENE_RENDER_MANAGER_HEADER

#include <xtl/functional_fwd>

#include <mathlib.h>

#include <render/viewport.h>

namespace xtl
{

//forward declarations
template <class T> class iterator;

}


namespace render
{

namespace mid_level
{

//forward declaration
class IRenderer;

}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class IRenderContext
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Система рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual mid_level::IRenderer& Renderer () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя пути рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* RenderPath () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Камера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const scene_graph::Camera* Camera () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Расчёт области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Rect TransformViewport (const Rect& client_rect) = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры очистки области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool               NeedClearViewport () = 0; //нужно ли очищать область вывода
    virtual const math::vec4f& ClearColor        () = 0; //цвет очистки

///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* GetProperty (const char* name) = 0;
    virtual bool        HasProperty (const char* name) = 0;

  protected:
    virtual ~IRenderContext () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс рендера сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICustomSceneRender
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Рисование сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Render (IRenderContext& render_context) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~ICustomSceneRender () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер рендеров сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneRenderManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс для перебора путей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    class IRenderPath
    {
      public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя пути
///////////////////////////////////////////////////////////////////////////////////////////////////
        virtual const char* Name () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание рендера
///////////////////////////////////////////////////////////////////////////////////////////////////
        virtual ICustomSceneRender* CreateRender (mid_level::IRenderer*) = 0;

      protected:
        virtual ~IRenderPath () {}
    };

    typedef xtl::function<ICustomSceneRender* (mid_level::IRenderer* renderer, const char* path_name)> RenderCreater;    
    typedef xtl::iterator<IRenderPath> Iterator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация путей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterRender       (const char* path_name, const RenderCreater& creater);
    static void UnregisterRender     (const char* path_name);
    static void UnregisterAllRenders ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор путей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Iterator CreateIterator ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение типизированных свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> T get_property (IRenderContext&, const char* name);
template <class T> T get_property (IRenderContext&, const char* name, const T& default_value);

#include <render/detail/manager.inl>

}

#endif
