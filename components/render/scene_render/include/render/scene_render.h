#ifndef RENDER_SCENE_RENDER_HEADER
#define RENDER_SCENE_RENDER_HEADER

#include <stl/auto_ptr.h>
#include <render/viewport.h>

namespace render
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рендер сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneRender
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneRender  ();
    SceneRender  (const char* driver_name_mask, const char* renderer_name_mask);
    ~SceneRender ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetRenderer  (const char* driver_name_mask, const char* renderer_name_mask);
    const char* DriverName   () const;
    const char* RendererName () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление доступными путями рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetRenderPathState  (const char* path_mask, bool state);
    bool IsRenderPathEnabled (const char* path_name) const; 
    void EnableRenderPath    (const char* path_mask) { SetRenderPathState (path_mask, true); }
    void DisableRenderPath   (const char* path_mask) { SetRenderPathState (path_mask, false); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление областей вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach             (const Viewport&);
    void Detach             (const Viewport&);
    void DetachAllViewports ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка размеров виртуального экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetWindow (const Rect& window);
    void        SetWindow (int x, int y, size_t width, size_t height);
    const Rect& Window    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет очистки буфера отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetBackgroundColor (const math::vec4f& color);
    const math::vec4f& BackgroundColor    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отрисовка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Render ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Захват изображения (screen-shot)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CaptureImage (media::Image&);
    void CaptureImage (const char* image_name);

  private:
    SceneRender (const SceneRender&); //no impl
    SceneRender& operator = (const SceneRender&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

#endif
