#ifndef RENDER_SCENE_RENDER_HEADER
#define RENDER_SCENE_RENDER_HEADER

#include <stl/auto_ptr.h>
#include <xtl/functional_fwd>

#include <mathlib.h>

#include <render/screen.h>

//!!добавить тесты RenderTarget на смену SceneRender::SetRenderer

namespace media
{

//forward declaration
class Image;

}

namespace render
{

//forward declaration
class RenderTargetImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цель рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderTarget
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTarget  ();
    RenderTarget  (const RenderTarget&);
    ~RenderTarget ();

    RenderTarget& operator = (const RenderTarget&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка связи цели рендеринга с рендером
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsBindedToRender () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Экран (политика владения - weak-ref)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void            SetScreen (render::Screen* screen);
    render::Screen* Screen    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Захват изображения (screen-shot)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CaptureImage (media::Image&);
    void CaptureImage (const char* image_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (RenderTarget&);

  protected:
    RenderTarget (RenderTargetImpl*);

  private:
    RenderTargetImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (RenderTarget&, RenderTarget&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рендер сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneRender
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneRender  ();
    SceneRender  (const char* driver_name_mask, const char* renderer_name_mask, const char* render_path_masks="*");
    ~SceneRender ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / сброс системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetRenderer (const char* driver_name_mask,          //маска имени драйвера системы рендеринга
                      const char* renderer_name_mask,        //маска имени системы рендеринга в драйвере
                      const char* render_path_masks = "*");  //список масок имён требуемых путей рендеринга (разделитель - пробел)
    void ResetRenderer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение параметров текущей системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* RendererDescription () const; //описание системы рендеринга
    const char* RenderPaths         () const; //список доступных путей рендеринга
    bool        HasRenderPath       (const char* name) const; //проверка доступности указанного пути рендеринга

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор целей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t               RenderTargetsCount () const;
    render::RenderTarget RenderTarget       (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка функции отладочного протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* message)> LogFunction;

    void               SetLogHandler (const LogFunction&);
    const LogFunction& LogHandler    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация функций обработки запросов рендеринга (дочерний рендеринг)
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (render::RenderTarget& render_target, const char* query_string)> QueryFunction;

    void RegisterQueryHandler       (const char* query_string_mask, const QueryFunction& handler);
    void UnregisterQueryHandler     (const char* query_string_mask);
    void UnregisterAllQueryHandlers ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Максимальный уровень вложенности рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetMaxDrawDepth (size_t level);
    size_t MaxDrawDepth    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с ресурсами
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadResource   (const char* tag, const char* file_name);
    void LoadResource   (const char* file_name) { LoadResource ("auto", file_name); }
    void UnloadResource (const char* tag, const char* file_name);
    void UnloadResource (const char* file_name) { UnloadResource ("auto", file_name); }

  private:
    SceneRender (const SceneRender&); //no impl
    SceneRender& operator = (const SceneRender&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

#endif
