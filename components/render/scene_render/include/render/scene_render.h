#ifndef RENDER_SCENE_RENDER_HEADER
#define RENDER_SCENE_RENDER_HEADER

#include <stl/auto_ptr.h>
#include <xtl/functional_fwd>

#include <mathlib.h>

#include <render/viewport.h>

namespace media
{

//forward declaration
class Image;

}

namespace render
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рендер сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneRender
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneRender  ();
    SceneRender  (const char* driver_name_mask, const char* renderer_name_mask, const char* render_path_masks="*");
    ~SceneRender ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / сброс системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetRenderer (const char* driver_name_mask,          //маска имени драйвера системы рендеринга
                      const char* renderer_name_mask,        //маска имени системы рендеринга в драйвере
                      const char* render_path_masks = "*");  //список масок имён требуемых путей рендеринга (разделитель - пробел)
    void ResetRenderer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение параметров текущей системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* RendererDescription () const; //описание системы рендеринга
    const char* RenderPaths         () const; //список доступных путей рендеринга
    bool        HasRenderPath       (const char* name) const; //проверка доступности указанного пути рендеринга

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление областями вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach             (const Viewport&);
    void Detach             (const Viewport&);
    void DetachAllViewports ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка логического окна вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetWindow (const Rect& window);
    void        SetWindow (int left, int top, size_t width, size_t height);
    const Rect& Window    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет очистки буфера отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetBackgroundColor (const math::vec4f& color);
    const math::vec4f& BackgroundColor    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отрисовка
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* message)> LogHandler;

    void Render ();
    void Render (const LogHandler&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Захват изображения (screen-shot)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CaptureImage (media::Image&);
    void CaptureImage (const char* image_name);

  private:
    SceneRender (const SceneRender&); //no impl
    SceneRender& operator = (const SceneRender&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

#endif
