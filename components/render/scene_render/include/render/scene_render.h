#ifndef RENDER_SCENE_RENDER_HEADER
#define RENDER_SCENE_RENDER_HEADER

#include <stl/auto_ptr.h>
#include <xtl/functional_fwd>

#include <mathlib.h>

#include <render/desktop.h>

namespace media
{

//forward declaration
class Image;

}

namespace render
{

//forward declaration
class RenderTargetManager;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Целевые буферы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
enum RenderTargetAttachment
{
  RenderTargetAttachment_DepthStencil, //буфер попиксельного отсечения
  RenderTargetAttachment_Color,        //буфер цвета

  RenderTargetAttachment_Num  
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цель рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderTarget
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTarget  (RenderTargetManager& manager, const char* color_attachment_name, const char* depth_stencil_attachment_name);
    RenderTarget  (const RenderTarget&); //политика копирования - подсчёт ссылок
    ~RenderTarget ();

    RenderTarget& operator = (const RenderTarget&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор цели рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имена ассоциированных буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Attachment (RenderTargetAttachment buffer_id) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Логические размеры целевого буфера рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetArea   (const Rect& rect);
    void        SetArea   (int left, int top, size_t width, size_t height);    
    void        SetOrigin (int left, int top);
    void        SetSize   (size_t width, size_t height);
    const Rect& Area      () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рабочий стол (политика владения - weak-ref)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                   SetDesktop (render::Desktop* desktop);
    render::Desktop*       Desktop    ();
    const render::Desktop* Desktop    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Захват изображения (screen-shot)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CaptureImage (media::Image&);
    void CaptureImage (const char* image_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (RenderTarget&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (RenderTarget&, RenderTarget&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рендер сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneRender
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneRender  ();
    SceneRender  (const char* driver_name_mask, const char* renderer_name_mask, const char* render_path_masks="*");
    ~SceneRender ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / сброс системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetRenderer (const char* driver_name_mask,          //маска имени драйвера системы рендеринга
                      const char* renderer_name_mask,        //маска имени системы рендеринга в драйвере
                      const char* render_path_masks = "*");  //список масок имён требуемых путей рендеринга (разделитель - пробел)
    void ResetRenderer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение параметров текущей системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* RendererDescription () const; //описание системы рендеринга
    const char* RenderPaths         () const; //список доступных путей рендеринга
    bool        HasRenderPath       (const char* name) const; //проверка доступности указанного пути рендеринга

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание цели рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTarget CreateRenderTarget (const char* color_attachment_name, const char* depth_stencil_attachment_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка функции отладочного протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* message)> LogFunction;

    void               SetLogHandler (const LogFunction&);
    const LogFunction& LogHandler    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с ресурсами
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadResource (const char* tag, const char* file_name);
    void LoadResource (const char* file_name) { LoadResource ("auto", file_name); }

  private:
    SceneRender (const SceneRender&); //no impl
    SceneRender& operator = (const SceneRender&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

#endif
