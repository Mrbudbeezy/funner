#ifndef RENDER_SCENE_RENDER_HEADER
#define RENDER_SCENE_RENDER_HEADER

#include <stl/auto_ptr.h>
#include <xtl/functional_fwd>

#include <render/manager.h>
#include <sg/screen.h>

namespace render
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рендер сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneRender
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneRender  ();
    SceneRender  (const SceneRender&);
    ~SceneRender ();
    
    SceneRender& operator = (const SceneRender&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / сброс системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                   SetRenderManager (render::RenderManager* manager);
    render::RenderManager* RenderManager    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка связи цели рендеринга с рендером
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsBindedToRender () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Экран (политика владения - weak-ref)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void            SetScreen (render::Screen* screen);
    render::Screen* Screen    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация целевых буферов отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetRenderTarget        (const char* name, const render::RenderTarget& target);
    void RemoveRenderTarget     (const char* name);
    void RemoveAllRenderTargets ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение целевых буферов отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool                 HasRenderTarget (const char* name) const;
    render::RenderTarget RenderTarget    (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение параметров текущей системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* RenderPaths   () const; //список доступных путей рендеринга
    bool        HasRenderPath (const char* name) const; //проверка доступности указанного пути рендеринга    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (SceneRender&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (SceneRender&, SceneRender&);

}

#endif
