#ifndef RENDER_SCENE_RENDER_MANAGER_HEADER
#define RENDER_SCENE_RENDER_MANAGER_HEADER

#include <xtl/functional_fwd>

namespace scene_graph
{

//forward declaration
class Camera;
class Scene;

}

namespace render
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода рендера
///////////////////////////////////////////////////////////////////////////////////////////////////
class IRenderView
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Целевые буферы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
//????????????????????
    virtual void SetRenderTargets (render::mid_level::IRenderTarget* render_target,
                                   render::mid_level::IRenderTarget* depth_stencil_target) = 0;
    virtual render::mid_level::IRenderTarget* GetRenderTarget       () = 0;
    virtual render::mid_level::IRenderTarget* GetDepthStencilTarget () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetViewport (const Rect&) = 0;
    virtual void GetViewport (Rect&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void                 SetCamera (scene_graph::Camera*) = 0;
    virtual scene_graph::Camera* GetCamera () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void                       SetProperties (const common::PropertyMap&) = 0;
    virtual const common::PropertyMap& GetProperties () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рисование
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Draw () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~IRenderView () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс рендера сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICustomSceneRender
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание областей вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IRenderView* CreateRenderView (scene_graph::Scene* scene) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~ICustomSceneRender () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер рендеров сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneRenderManager
{
  public:
    typedef xtl::function<ICustomSceneRender* (RenderManager& manager, const char* render_path)> RenderCreater;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация путей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterRender       (const char* path_name, const RenderCreater& creater);
    static void UnregisterRender     (const char* path_name);
    static void UnregisterAllRenders ();
};

}

#endif
