#ifndef RENDER_SCENE_RENDER_MANAGER_HEADER
#define RENDER_SCENE_RENDER_MANAGER_HEADER

#include <xtl/functional_fwd>

#include <mathlib.h>

#include <render/common.h>

namespace xtl
{

//forward declarations
template <class T> class iterator;

}

namespace scene_graph
{

//forward declaration
class Camera;
class Scene;

}

namespace render
{

namespace mid_level
{

//forward declaration
class IRenderer;
class IRenderTarget;

}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода рендера
///////////////////////////////////////////////////////////////////////////////////////////////////
class IRenderView
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Целевые буферы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetRenderTargets (render::mid_level::IRenderTarget* render_target,
                                   render::mid_level::IRenderTarget* depth_stencil_target) = 0;
    virtual render::mid_level::IRenderTarget* GetRenderTarget       () = 0;
    virtual render::mid_level::IRenderTarget* GetDepthStencilTarget () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetViewport (const Rect&) = 0;
    virtual void GetViewport (Rect&) = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void                 SetCamera (scene_graph::Camera*) = 0;
    virtual scene_graph::Camera* GetCamera () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / чтение свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetProperty (const char* name, const char* value) = 0;
    virtual void GetProperty (const char* name, size_t buffer_size, char* value_buffer) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рисование
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Draw () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~IRenderView () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Запрос дочернего рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class IRenderQuery
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление ассоциированных целей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Update () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~IRenderQuery () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс рендера сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICustomSceneRender
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание областей вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IRenderView* CreateRenderView (scene_graph::Scene* scene) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с ресурсами
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void LoadResource (const char* tag, const char* file_name) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка функции отладочного протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* message)> LogFunction;

    virtual void               SetLogHandler (const LogFunction&) = 0;
    virtual const LogFunction& GetLogHandler () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка функции создания дочерних запросов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<IRenderQuery* (mid_level::IRenderTarget* render_target,
                                         mid_level::IRenderTarget* depth_stencil_target,
                                         const char*               query_string)> QueryFunction;

    virtual void                 SetQueryHandler (const QueryFunction&) = 0;
    virtual const QueryFunction& GetQueryHandler () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~ICustomSceneRender () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер рендеров сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneRenderManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс для перебора путей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    class IRenderPath
    {
      public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя пути
///////////////////////////////////////////////////////////////////////////////////////////////////
        virtual const char* Name () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание рендера
///////////////////////////////////////////////////////////////////////////////////////////////////
        virtual ICustomSceneRender* CreateRender (mid_level::IRenderer*) = 0;

      protected:
        virtual ~IRenderPath () {}
    };

    typedef xtl::function<ICustomSceneRender* (mid_level::IRenderer* renderer, const char* path_name)> RenderCreater;    
    typedef xtl::iterator<IRenderPath> Iterator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация путей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterRender       (const char* path_name, const RenderCreater& creater);
    static void UnregisterRender     (const char* path_name);
    static void UnregisterAllRenders ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор путей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Iterator CreateIterator ();
};

}

#endif
