#ifndef RENDER_CUSTOM_SCENE_RENDER_HEADER
#define RENDER_CUSTOM_SCENE_RENDER_HEADER

#include <xtl/functional_fwd.h>

namespace render
{

namespace scene
{

//TODO: pragma pack

///////////////////////////////////////////////////////////////////////////////////////////////////
///Определения базовых типов
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef   signed int   int32;
typedef unsigned int   uint32;
typedef   signed short int16;
typedef unsigned short uint16;
typedef   signed char  int8;
typedef unsigned char  uint8;

typedef uint32         command_id_t;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Заголовок команды рендеру
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Command
{
  command_id_t command_id;   //идентификатор команды
  uint32       command_size; //размер команды
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс рендера сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class ISceneRender
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Отсылка команд / прием данных
///////////////////////////////////////////////////////////////////////////////////////////////////
     virtual void   SendCommands   (const void* buffer, size_t size) = 0;
     virtual size_t ReceiveResults (void* buffer, size_t max_size) = 0;

  protected:
    virtual ~ISceneRender () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер рендеров сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneRenderManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация рендеров
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterRender       (const char* name, ISceneRender* render);
    static void UnregisterRender     (const char* name);
    static void UnregisterAllRenders ();
};

}

}

#endif

