#ifndef RENDER_Screen_HEADER
#define RENDER_Screen_HEADER

#include <render/viewport.h>

namespace render
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель событий рабочего стола
///////////////////////////////////////////////////////////////////////////////////////////////////
class IScreenListener
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///События
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnChangeName       (const char* new_name) {}
    virtual void OnChangeBackground (bool state, const math::vec4f& new_color) {}
    virtual void OnAttachViewport   (Viewport&) {}
    virtual void OnDetachViewport   (Viewport&) {}
    virtual void OnDestroy          () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () {}
    virtual void Release () {}
    
  protected:
    virtual ~IScreenListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Визуализируемое пространство - рабочий стол
///////////////////////////////////////////////////////////////////////////////////////////////////
class Screen
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Screen  ();
    Screen  (const Screen&); //политика копирования - подсчёт ссылок
    ~Screen ();

    Screen& operator = (const Screen&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор рабочего стола
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetName (const char* name);
    const char* Name    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет фона
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetBackgroundColor (const math::vec4f& color);
    void               SetBackgroundColor (float red, float green, float blue, float alpha=0.0f);
    const math::vec4f& BackgroundColor    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Нужно ли очищать рабочий стол при каждой перерисовке
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetBackgroundState (bool state);
    void EnableBackground   () { SetBackgroundState (true); }
    void DisableBackground  () { SetBackgroundState (false); }
    bool BackgroundState    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление областей вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (const Viewport&);
    void Detach (const Viewport&);

    void DetachAllViewports ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество областей вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t ViewportsCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////    
          render::Viewport& Viewport (size_t index);
    const render::Viewport& Viewport (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа со слушателями
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachListener     (IScreenListener*);
    void DetachListener     (IScreenListener*);
    void DetachAllListeners ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Screen&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Screen&, Screen&);

}

#endif
