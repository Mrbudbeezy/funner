#ifndef RENDER_SCENE_RENDER_CORE_SHARED_HEADER
#define RENDER_SCENE_RENDER_CORE_SHARED_HEADER

#include <stl/algorithm>
#include <stl/hash_map>

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/connection.h>
#include <xtl/function.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>
#include <xtl/trackable.h>

#include <common/component.h>
#include <common/log.h>
#include <common/property_map.h>
#include <common/singleton.h>
#include <common/strlib.h>

#include <render/scene_render.h>

namespace render
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderableView: public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderableView  (RenderManager& manager, scene_graph::Screen& screen, scene_graph::Viewport& viewport);
    ~RenderableView ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода / экран
///////////////////////////////////////////////////////////////////////////////////////////////////
    const scene_graph::Viewport& Viewport ();
    const scene_graph::Screen&   Screen   ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация целевых буферов отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetRenderTarget    (const char* name, const RenderTarget& target);
    void RemoveRenderTarget (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateFrame (Frame* parent_frame = 0);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

typedef xtl::intrusive_ptr<RenderableView> RenderableViewPtr;

}

#endif
