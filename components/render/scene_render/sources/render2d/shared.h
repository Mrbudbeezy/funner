#ifndef SCENE_GRAPH_RENDER2D_HEADER
#define SCENE_GRAPH_RENDER2D_HEADER

#include <xtl/common_exceptions.h>
#include <xtl/function.h>
#include <xtl/reference_counter.h>
#include <xtl/intrusive_ptr.h>

#include <common/component.h>

#include <sg/scene.h>
#include <sg/camera.h>
#include <sg/sprite.h>

#include <render/mid_level/renderer2d.h>

#include <render/custom_render.h>

namespace render
{

namespace render2d
{

/*///////////////////////////////////////////////////////////////////////////////////////////////////
///Примитив - объект
///////////////////////////////////////////////////////////////////////////////////////////////////
class 

///////////////////////////////////////////////////////////////////////////////////////////////////
///Примитив - спрайт
///////////////////////////////////////////////////////////////////////////////////////////////////
class SpritePrimitive
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SpritePrimitive  (scene_graph::Sprite*);
    ~SpritePrimitive ();
    
  private:
    scene_graph::Sprite* sprite; //спрайт
};*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рендер двумерной сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class Render: public ICustomSceneRender, public xtl::reference_counter
{
  typedef mid_level::renderer2d::IPrimitive IPrimitive;
  typedef mid_level::renderer2d::IRenderer  IRenderer;
  typedef xtl::com_ptr<IPrimitive>          PrimitivePtr; 
  typedef xtl::com_ptr<IRenderer>           RendererPtr;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Render  (mid_level::IRenderer*);
    ~Render ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание областей вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    IRenderView* CreateRenderView (scene_graph::Scene* scene);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка цвета очистка буфера кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetBackgroundColor (const math::vec4f& color);
    void GetBackgroundColor (math::vec4f& color);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка функции отладочного протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetLogHandler (const LogFunction&);
    const LogFunction& GetLogHandler ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  ();
    void Release ();

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с кэшем примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
//    Primitive* FindPrimitive   (scene_graph::Entity*);
//    void       InsertPrimitive (scene_graph::Sprite*);
//    void       RemovePrimitive (scene_graph::Entity*);

  private:
//    typedef stl::hash_map<scene_graph::Entity*, PrimitivePtr> PrimitiveMap;

  private:
    math::vec4f  clear_color;      //цвет очистки
    LogFunction  log_handler;      //функция протоколирования    
    RendererPtr  renderer;         //система рендеринга
//    PrimitiveMap primitives_cache; //кэш примитивов
};

}

}

#endif
