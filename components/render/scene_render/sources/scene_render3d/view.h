///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class View: public xtl::noncopyable, public xtl::reference_counter, public ISceneRender
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    View  (RenderManager&);
    ~View ();    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Кадр
///////////////////////////////////////////////////////////////////////////////////////////////////
    render::Frame& Frame ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateCamera (scene_graph::Camera* camera);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление свойств ренедринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateProperties (const common::PropertyMap&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление содержимого кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateFrame ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  ();
    void Release ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
