///////////////////////////////////////////////////////////////////////////////////////////////////
///Сцена рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Scene: public xtl::noncopyable, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Scene  (scene_graph::Scene& scene, const RenderPtr& render);
    ~Scene ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    Node* GetEntity (scene_graph::Node& entity);    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация объектов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RegisterEntity   (scene_graph::Node& entity, Node& renderable);
    void UnregisterEntity (scene_graph::Node& entity);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обход сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Traverse (const bound_volumes::plane_listf& frustum, TraverseResults& results);
    void Traverse (const bound_volumes::plane_listf& frustum, TraverseResults& results, size_t filter);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
