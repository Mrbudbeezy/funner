///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс диспетчера объектов при обходе сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class IVisitor
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Диспетчеризация по типам
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Visit (Node& entity) {}
    virtual void Visit (Renderable& entity) {}
    virtual void Visit (VisualModel& entity) {}
    virtual void Visit (Light& entity) {}

  protected:
    virtual ~IVisitor () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Результаты обхода сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
struct TraverseResults
{
  typedef stl::vector<RenderablePtr> RenderableArray;
  typedef stl::vector<LightPtr>      LightArray;
  
  RenderableArray renderables; //список отображаемых объектов
  LightArray      lights;      //список источников света  
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги для коллекционирующего диспетчера объектов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum CollectionVisitorFilter
{
  Collect_Renderables = 1, //коллекционировать визуализируемые объекты
  Collect_Lights      = 2, //коллекционировать источники света

  Collect_All         = ~0u,
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Коллекционирующий диспетчер объектов
///////////////////////////////////////////////////////////////////////////////////////////////////
class CollectionVisitor: public IVisitor
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    CollectionVisitor (size_t filter);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Диспетчеризация по типам
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Visit (Renderable& entity);
    void Visit (VisualModel& entity);
    void Visit (Light& entity);
    
  private:
    size_t           filter;
    TraverseResults& results; 
};
