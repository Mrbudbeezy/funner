///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
enum LightType
{
  LightType_Point,  //точечный источник света
  LightType_Direct, //направленный источник света
  LightType_Spot,   //конический источник света
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник света
///////////////////////////////////////////////////////////////////////////////////////////////////
class Light: public Node
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Light  (Scene& scene, scene_graph::PointLight& light);
    Light  (Scene& scene, scene_graph::DirectLight& light);
    Light  (Scene& scene, scene_graph::SpotLight& light);    
    ~Light ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
    LightType Type ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры источника
///////////////////////////////////////////////////////////////////////////////////////////////////          
    const math::vec3f&  LightColor  ();
    float               Intensity   ();
    const math::vec3f&  Attenuation ();
    float               Range       ();
    float               Radius      (); 
    const math::anglef& Angle       ();
    float               Exponent    ();    

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление состояния
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateCore ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обход
///////////////////////////////////////////////////////////////////////////////////////////////////
    void VisitCore (IVisitor&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
