///////////////////////////////////////////////////////////////////////////////////////////////////
///Техника рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Technique: public xtl::noncopyable, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Technique  ();
    virtual ~Technique ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя техники
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetName (const char* name);
    const char* Name    ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Камера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                 SetCamera (scene_graph::Camera* camera);
    scene_graph::Camera* Camera    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление свойств ренедринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateProperties (const common::PropertyMap&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateFrame (Scene& scene, Frame& frame, ITraverseResultCache& traverse_result_cache);
    
  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка свойств по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                      SetDefaultProperties (const common::PropertyMap& properties);
    void                      SetDefaultProperties (const common::ParseNode& node);
    const common::PropertyMap DefaultProperties    ();

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void UpdateFrameCore (Scene& scene, Frame& frame, ITraverseResultCache& traverse_result_cache) = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void ResetPropertiesCore  () = 0;
    virtual void UpdatePropertiesCore (const common::PropertyMap&) = 0;

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер техник рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class TechniqueManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание техники
///////////////////////////////////////////////////////////////////////////////////////////////////  
    static TechniquePtr CreateTechnique (const char* technique, RenderManager& manager, common::ParseNode& configuration);
};
