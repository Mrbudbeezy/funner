///////////////////////////////////////////////////////////////////////////////////////////////////
///Техника рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Technique: public xtl::noncopyable, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Technique  ();
    ~Technique ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateCamera (scene_graph::Camera* camera);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление свойств ренедринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateProperties (const common::PropertyMap&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateFrame (Scene& scene, Frame& frame);
    
  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Отрисовка
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void UpdateFrameCore (Scene& scene, Frame& frame) = 0;

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
