//forward declarations
struct SceneUpdateList;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер сцен
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneManager: public xtl::noncopyable
{
  friend class SceneObject;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneManager  (ClientImpl& client, Context& context);
    ~SceneManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    ScenePtr GetScene (scene_graph::Scene&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Клиент
///////////////////////////////////////////////////////////////////////////////////////////////////
    ClientImpl& Client ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
    client::Context& Context ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение узла
///////////////////////////////////////////////////////////////////////////////////////////////////
    NodePtr GetNode (scene_graph::Node&); //may be null if object type is unsupported

///////////////////////////////////////////////////////////////////////////////////////////////////
///Синхронизация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update ();

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Список обновлений
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneUpdateList& UpdateList ();    

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Фабрика объектов
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneFactory
{
  public:
    static Node* Create (scene_graph::Node& src_node, SceneManager& scene_manager);
};
