class SceneManager;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация рендера сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class ClientImpl: public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ClientImpl  ();
    ~ClientImpl ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание с контекстом
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetContext (Context*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выделение идентификаторов
///////////////////////////////////////////////////////////////////////////////////////////////////
    interchange::object_id_t AllocateId   (ObjectType type);
    void                     DeallocateId (ObjectType type, interchange::object_id_t id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Синхронизация свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    PropertyMapSynchronizer CreateSynchronizer  (const common::PropertyMap&);
    common::PropertyMap     GetServerProperties (object_id_t id); 

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выполнение синхронизации с сервером
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Synchronize ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработчики ответов сервера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdatePropertyMap    (interchange::InputStream&);
    void RemovePropertyMap    (object_id_t id);
    void RemovePropertyLayout (object_id_t id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    client::SceneManager& SceneManager ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
