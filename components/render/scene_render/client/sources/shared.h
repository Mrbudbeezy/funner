#include <stl/auto_ptr.h>

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/function.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>
#include <xtl/trackable_ptr.h>

#include <common/action_queue.h>
#include <common/property_map.h>
#include <common/strlib.h>

#include <syslib/condition.h>
#include <syslib/thread.h>

#include <render/scene_render.h>

#include <render/scene/interchange/connection_manager.h>
#include <render/scene/interchange/context.h>
#include <render/scene/interchange/serializer.h>

namespace render
{

namespace scene
{

namespace client
{

typedef interchange::Context<interchange::ClientToServerSerializer, interchange::ServerToClientDeserializer> Context;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация рендера сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneRenderImpl: public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneRenderImpl  ();
    ~SceneRenderImpl ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработчики ответов сервера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Dummy ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Соединение с сервером
///////////////////////////////////////////////////////////////////////////////////////////////////
class Connection: public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Connection  (const char* connection_name, const char* init_string, size_t logon_timeout_ms);
    ~Connection ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание соединения
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Description ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рендер сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneRenderImpl& Render ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
     client::Context& Context ();

  private:
    struct Impl;
    Impl* impl;  
};

}

}

}
