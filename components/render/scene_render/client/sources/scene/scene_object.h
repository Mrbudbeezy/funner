#ifndef RENDER_SCENE_CLIENT_IMPL_SCENE_SCENE_OBJECT_SHARED_HEADER
#define RENDER_SCENE_CLIENT_IMPL_SCENE_SCENE_OBJECT_SHARED_HEADER

#include <shared/types.h>

namespace render
{

namespace scene
{

namespace client
{

//forward declarations
class SceneObject;
class SceneManager;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Узел списка обновлений
///////////////////////////////////////////////////////////////////////////////////////////////////
struct SceneUpdateListNode
{
  SceneObject* prev_update;
  SceneObject* next_update;
  bool         need_update;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список обновлений
///////////////////////////////////////////////////////////////////////////////////////////////////
struct SceneUpdateList
{
  SceneObject* first;
  SceneObject* last;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneObject: private SceneUpdateListNode
{
  friend class SceneManager;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneObject  (SceneManager&);
    ~SceneObject ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Запрос синхронизации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateNotify ();

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Ассоциированный менеджер сцен
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneManager& Scenes () { return scene_manager; }

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация синхронизации
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void UpdateCore (client::Context&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* NameCore ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Синхронизация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (client::Context&);

  private:
    SceneObject (const SceneObject&); //no implementation
    SceneObject& operator = (const SceneObject&); //no implementation

  private:
    SceneManager& scene_manager;
};

}

}

}

#endif
