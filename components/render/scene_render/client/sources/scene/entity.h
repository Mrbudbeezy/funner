#ifndef RENDER_SCENE_CLIENT_IMPL_SCENE_ENTITY_SHARED_HEADER
#define RENDER_SCENE_CLIENT_IMPL_SCENE_ENTITY_SHARED_HEADER

#include <sg/entity.h>

#include "node.h"

namespace render
{

namespace scene
{

namespace client
{


///////////////////////////////////////////////////////////////////////////////////////////////////
///Сущность
///////////////////////////////////////////////////////////////////////////////////////////////////
class Entity: public Node
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Entity  (scene_graph::Entity&, SceneManager&, interchange::NodeType node_type = interchange::NodeType_Entity);
    ~Entity ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Исходный узел
///////////////////////////////////////////////////////////////////////////////////////////////////
    scene_graph::Entity& SourceNode () const { return static_cast<scene_graph::Entity&> (Node::SourceNode ()); }

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация синхронизации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateCore (client::Context&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
