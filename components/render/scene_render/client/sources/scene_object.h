//forward declarations
class Scene;
class SceneObject;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Узел списка обновлений
///////////////////////////////////////////////////////////////////////////////////////////////////
struct SceneUpdateListNode
{
  SceneObject* prev_update;
  SceneObject* next_update;
  bool         need_update;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список обновлений
///////////////////////////////////////////////////////////////////////////////////////////////////
struct SceneUpdateList
{
  SceneObject* first;
  SceneObject* last;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneObject: private SceneUpdateListNode
{
  friend class SceneManager;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneObject  (Scene&);
    ~SceneObject ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Запрос синхронизации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateNotify ();

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Ассоциированное соединение
///////////////////////////////////////////////////////////////////////////////////////////////////
    client::Connection& Connection () { return scene.Connection (); }

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация синхронизации
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void UpdateCore () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual stl::string NameCore () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Синхронизация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update ();

  private:
    SceneObject (const SceneObject&); //no implementation
    SceneObject& operator = (const SceneObject&); //no implementation

  private:
    Scene& scene;
};
