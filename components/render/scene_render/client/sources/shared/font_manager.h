#ifndef RENDER_SCENE_CLIENT_FONT_MANAGER_SHARED_HEADER
#define RENDER_SCENE_CLIENT_FONT_MANAGER_SHARED_HEADER

#include <stl/auto_ptr.h>

namespace media
{

//forward declarations
class  Font;
struct FontCreationParams;

}

namespace render
{

namespace scene
{

namespace client
{

//forward declarations
class MaterialManager;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о растеризованном глифе
///////////////////////////////////////////////////////////////////////////////////////////////////
struct RasterizedGlyphInfo
{
  unsigned short material_index; //индекс материала в шрифте
  math::vec2f    tex_offset;     //смещение в текстуре
  math::vec2f    tex_size;       //размер в текстуре
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Шрифт
///////////////////////////////////////////////////////////////////////////////////////////////////
class Font: public xtl::reference_counter, public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Font  (const media::Font& font, const RasterizedFontCreationParams& creation_params);
    ~Font ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размер таблицы глифов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GlyphsCount ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Код первого глифа
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t FirstGlyphCode ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Растеризованные глифы
///////////////////////////////////////////////////////////////////////////////////////////////////
    const RasterizedGlyphInfo* RasterizedGlyphs ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество материалов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t MaterialsCount ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* MaterialName (size_t material_index);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

typedef xtl::intrusive_ptr<Font> FontPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер шрифтов
///////////////////////////////////////////////////////////////////////////////////////////////////
class FontManager: public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontManager  (MaterialManager&);
    ~FontManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение библиотеки шрифтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachFontLibrary      (const media::FontLibrary&);
    void DetachFontLibrary      (const media::FontLibrary&);
    void DetachAllFontLibraries ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    FontPtr FindFont (const media::Font&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Предварительный рендеринг шрифтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void PrefetchFont (const char* name, const media::FontCreationParams& params);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
