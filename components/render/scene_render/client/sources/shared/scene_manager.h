#ifndef RENDER_SCENE_CLIENT_SCENE_MANAGER_SHARED_HEADER
#define RENDER_SCENE_CLIENT_SCENE_MANAGER_SHARED_HEADER

#include <stl/auto_ptr.h>

#include <shared/scene.h>

namespace render
{

namespace scene
{

namespace client
{

//forward declarations
class  ClientImpl;
class  Node;
class  SceneObject;
struct SceneUpdateList;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер сцен
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneManager: public xtl::noncopyable
{
  friend class SceneObject;
  public:
    typedef xtl::intrusive_ptr<Node> NodePtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneManager  (ClientImpl& client, Context& context);
    ~SceneManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    ScenePtr GetScene  (scene_graph::Scene&);
    ScenePtr FindScene (scene_graph::Scene&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Клиент
///////////////////////////////////////////////////////////////////////////////////////////////////
    ClientImpl& Client ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
    client::Context& Context ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение узла
///////////////////////////////////////////////////////////////////////////////////////////////////
    NodePtr GetNode  (scene_graph::Node&); //may be null if object type is unsupported
    NodePtr FindNode (scene_graph::Node&); //may be null if object is not found

///////////////////////////////////////////////////////////////////////////////////////////////////
///Синхронизация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update ();

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Список обновлений
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneUpdateList& UpdateList ();    

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
