#ifndef RENDER_SCENE_CLIENT_SCENE_SHARED_HEADER
#define RENDER_SCENE_CLIENT_SCENE_SHARED_HEADER

#include <stl/auto_ptr.h>

#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>
#include <xtl/trackable.h>

#include <sg/scene.h>

namespace render
{

namespace scene
{

namespace client
{


//forward declarations
class SceneManager;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сцена
///////////////////////////////////////////////////////////////////////////////////////////////////
class Scene: public xtl::reference_counter, public xtl::trackable, public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Scene  (scene_graph::Scene&, SceneManager& scene_manager, object_id_t id);
    ~Scene ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    object_id_t Id ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сцена-источник
///////////////////////////////////////////////////////////////////////////////////////////////////
    scene_graph::Scene& SourceScene ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

typedef xtl::intrusive_ptr<Scene> ScenePtr;

}

}

}

#endif
