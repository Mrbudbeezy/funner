#ifndef RENDER_SCENE_SERVER_SHARED_HEADER
#define RENDER_SCENE_SERVER_SHARED_HEADER

#include <stl/auto_ptr.h>

#include <xtl/trackable.h>

#include <common/log.h>

#include <render/manager.h>

#include <shared/window_manager.h>

namespace render
{

namespace scene
{

namespace server
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация сервера рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class ServerImpl: public xtl::noncopyable, public xtl::trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ServerImpl  (const char* name);
    ~ServerImpl ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поток отладочного протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    common::Log& Log ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    manager::RenderManager& RenderManager ();
    server::WindowManager&  WindowManager ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
