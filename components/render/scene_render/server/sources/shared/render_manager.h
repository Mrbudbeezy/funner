#ifndef RENDER_SCENE_SERVER_RENDER_MANAGER_SHARED_HEADER
#define RENDER_SCENE_SERVER_RENDER_MANAGER_SHARED_HEADER

#include <stl/auto_ptr.h>

#include <common/log.h>

#include <render/manager.h>

namespace common
{

//forward declaration
class ParseNode;

}

namespace render
{

namespace scene
{

namespace server
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель событий менеджера рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class IRenderManagerListener
{
  public:
    virtual void OnRenderManagerConfigurationChanged (const common::ParseNode&) {}

  protected:
    virtual ~IRenderManagerListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обертка над менеджером рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderManager: public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderManager  (const char* name);
    RenderManager  (const RenderManager&);
    ~RenderManager ();

    RenderManager& operator = (const RenderManager&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поток отладочного протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    common::Log& Log ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер
///////////////////////////////////////////////////////////////////////////////////////////////////
    manager::RenderManager& Manager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события менеджера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachListener     (IRenderManagerListener*);
    void DetachListener     (IRenderManagerListener*);
    void DetachAllListeners ();

  private:
    struct Impl;
    Impl* impl;
};

}

}

}

#endif
