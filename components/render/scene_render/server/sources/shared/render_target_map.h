#ifndef RENDER_SCENE_SERVER_RENDER_TARGET_MAP_SHARED_HEADER
#define RENDER_SCENE_SERVER_RENDER_TARGET_MAP_SHARED_HEADER

#include <render/manager/common.h>

namespace render
{

namespace scene
{

namespace server
{

using manager::Rect;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание цели рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderTargetDesc
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTargetDesc  (const char* name, const manager::RenderTarget& target, const Rect& rect);
    RenderTargetDesc  (const RenderTargetDesc&);
    ~RenderTargetDesc ();  

    RenderTargetDesc& operator = (const RenderTargetDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цель рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char*                  Name   () const;
    const Rect&                  Rect   () const;
    const manager::RenderTarget& Target () const;
          manager::RenderTarget  Target ();

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель карты целей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class IRenderTargetMapListener
{
  public:
    virtual void OnRenderTargetAdded   (const RenderTargetDesc& desc) = 0;
    virtual void OnRenderTargetRemoved (const char* name) = 0;

  protected:
    virtual ~IRenderTargetMapListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Карта целей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderTargetMap
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTargetMap  ();
    RenderTargetMap  (const RenderTargetMap&);
    ~RenderTargetMap ();

    RenderTargetMap& operator = (const RenderTargetMap&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество целей
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск по имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    const RenderTargetDesc* Find (const char* name) const;
          RenderTargetDesc* Find (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление целей 
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Add (const char* name, const manager::RenderTarget& target, const Rect& rect);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление целей
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление слушателей
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachListener     (IRenderTargetMapListener*);
    void DetachListener     (IRenderTargetMapListener*);
    void DetachAllListeners ();

  private:
    struct Impl;
    Impl* impl;
};

}

}

}

#endif
