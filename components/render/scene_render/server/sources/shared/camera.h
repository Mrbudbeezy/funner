#ifndef RENDER_SCENE_SERVER_CAMERA_SHARED_HEADER
#define RENDER_SCENE_SERVER_CAMERA_SHARED_HEADER

#include <stl/auto_ptr.h>

#include <math/matrix.h>

#include <bv/plane_list.h>

namespace render
{

namespace scene
{

namespace server
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Камера
///////////////////////////////////////////////////////////////////////////////////////////////////
class Camera
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Camera  ();
    ~Camera ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetName (const char* name);
    const char* Name    () const;   

///////////////////////////////////////////////////////////////////////////////////////////////////
///Индекс изменений
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t TransactionId () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица вида
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetWorldMatrix          (const math::mat4f&);
    const math::mat4f& WorldMatrix             () const;
    const math::mat4f& ViewMatrix              () const;
    size_t             ViewMatrixTransactionId () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица проецирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetProjectionMatrix           (const math::mat4f&);
    const math::mat4f& ProjectionMatrix              () const;
    size_t             ProjectionMatrixTransactionId () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица суперпозиции преобразований
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f& ViewProjectionMatrix              () const;
    size_t             ViewProjectionMatrixTransactionId () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение пирамиды видимости
///////////////////////////////////////////////////////////////////////////////////////////////////
    const bound_volumes::plane_listf& Frustum              () const;
    size_t                            FrustumTransactionId () const;

  private:
    Camera  (const Camera&);
    Camera& operator = (const Camera&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
