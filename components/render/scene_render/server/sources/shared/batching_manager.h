#ifndef RENDER_SCENE_SERVER_BATCHING_MANAGER_SHARED_HEADER
#define RENDER_SCENE_SERVER_BATCHING_MANAGER_SHARED_HEADER

#include <stl/auto_ptr.h>

#include <common/log.h>

#include <render/manager.h>

namespace common
{

//forward declaration
class ParseNode;

}

namespace render
{

namespace scene
{

namespace server
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обертка над менеджером рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class BatchingManager: public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    BatchingManager  (const manager::RenderManager& manager, const common::Log& log);
    ~BatchingManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перезагрузка конфигурации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ReloadConfiguration (const common::ParseNode&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление групп пакетирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddBatchGroup        (const char* group_wildcard, size_t vertices_count, size_t indices_count);
    void RemoveAllBatchGroups ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение буфера примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    manager::PrimitiveBuffers GetBatch (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление всех пакетов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RemoveAllBatches ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
