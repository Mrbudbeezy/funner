#ifndef RENDER_SCENE_SERVER_TECHNIQUE_SHARED_HEADER
#define RENDER_SCENE_SERVER_TECHNIQUE_SHARED_HEADER

#include <cstring>
#include <new>
#include <typeinfo>

#include <stl/auto_ptr.h>

#include <xtl/exception.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>

#include <shared/rendering_context.h>

namespace common
{

//forward declarations
class ParseNode;
class PropertyMap;
class PropertyBindingMap;

}

namespace render
{

namespace scene
{

namespace server
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Данные техники
///////////////////////////////////////////////////////////////////////////////////////////////////
class TechniquePrivateData
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    TechniquePrivateData  ();
    TechniquePrivateData  (const TechniquePrivateData&);
    ~TechniquePrivateData ();

    TechniquePrivateData& operator = (const TechniquePrivateData&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class T, class Technique>       T& Get (Technique&);
    template <class T, class Technique> const T& Get (Technique&) const;

  private:
    void RaiseSizeError (const std::type_info&, size_t size);

  private:
    enum { DATA_BUFFER_SIZE = 256 };

    struct ITypeInfo;

    template <class T> struct TypeInfoImpl;

  private:
    char       buffer [DATA_BUFFER_SIZE];
    ITypeInfo* type_info;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Техника рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Technique: public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
            Technique  ();
    virtual ~Technique ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя техники
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetName (const char* name);
    const char* Name    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetProperties (const common::PropertyMap&);
    const common::PropertyMap& Properties    () const;
          common::PropertyMap& Properties    ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateFrame (RenderingContext& context, TechniquePrivateData& private_data);
    
  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка свойств по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetDefaultProperties (const common::PropertyMap& properties);
    void                       SetDefaultProperties (const common::ParseNode& node);
    const common::PropertyMap& DefaultProperties    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание свойств техники с методами техники
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void BindProperties (common::PropertyBindingMap&);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void UpdateFrameCore (RenderingContext&, TechniquePrivateData&) = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
            void UpdateProperties     ();
    virtual void UpdatePropertiesCore () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение свойств
///////////////////////////////////////////////////////////////////////////////////////////////////

  private:
    Technique (const Technique&); //no implementation
    Technique& operator = (const Technique&); //no implementation

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

typedef xtl::intrusive_ptr<Technique> TechniquePtr;

#include <shared/detail/technique.inl>

}

}

}

#endif
