#ifndef RENDER_SCENE_SERVER_TECHNIQUE_SHARED_HEADER
#define RENDER_SCENE_SERVER_TECHNIQUE_SHARED_HEADER

#include <typeinfo>
#include <cstring>

#include <stl/auto_ptr.h>

#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>

namespace common
{

//forward declarations
class ParseNode;
class PropertyMap;
class PropertyBindingMap;

}

namespace render
{

namespace manager
{

//forward declarations
class Frame;

}

namespace scene
{

namespace server
{

//forward declarations
class RenderManager;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Данные техники
///////////////////////////////////////////////////////////////////////////////////////////////////
class TechniquePrivateData
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    TechniquePrivateData ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class T>       T& Get ();
    template <class T> const T& Get () const;

  private:
    void RaiseSizeError (const std::type_info&, size_t size);

  private:
    enum { DATA_BUFFER_SIZE = 256 };

  private:
    char buffer [DATA_BUFFER_SIZE];
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Context
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Context (manager::Frame& frame);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Аксцессоры
///////////////////////////////////////////////////////////////////////////////////////////////////
    manager::Frame& Frame () { return frame; }  

  private:
    Context (const Context&); //no implementation
    Context& operator = (const Context&); //no implementation

  private:
    manager::Frame& frame;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Техника рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Technique: public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
            Technique  ();
    virtual ~Technique ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя техники
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetName (const char* name);
    const char* Name    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetProperties (const common::PropertyMap&);
    const common::PropertyMap& Properties    () const;
          common::PropertyMap& Properties    ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateFrame (Context& context, TechniquePrivateData& private_data);
    
  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка свойств по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetDefaultProperties (const common::PropertyMap& properties);
    void                       SetDefaultProperties (const common::ParseNode& node);
    const common::PropertyMap& DefaultProperties    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание свойств техники с методами техники
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void BindProperties (common::PropertyBindingMap&);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void UpdateFrameCore (Context&, TechniquePrivateData&) = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
            void UpdateProperties     ();
    virtual void UpdatePropertiesCore () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение свойств
///////////////////////////////////////////////////////////////////////////////////////////////////

  private:
    Technique (const Technique&); //no implementation
    Technique& operator = (const Technique&); //no implementation

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

typedef xtl::intrusive_ptr<Technique> TechniquePtr;

#include <shared/detail/technique.inl>

}

}

}

#endif
