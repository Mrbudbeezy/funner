#ifndef RENDER_SCENE_SERVER_SCENE_MANAGER_SHARED_HEADER
#define RENDER_SCENE_SERVER_SCENE_MANAGER_SHARED_HEADER

#include <xtl/intrusive_ptr.h>

#include <bv/plane_list.h>

#include <render/scene/interchange/types.h>

namespace render
{

namespace scene
{

namespace server
{

//forward declaration
class  Entity;
class  Node;
class  ISceneVisitor;
struct TraverseResult;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сцена
///////////////////////////////////////////////////////////////////////////////////////////////////
class Scene
{
  friend class Entity;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Scene  ();
    Scene  (const Scene&);
    ~Scene ();

    Scene& operator = (const Scene&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetName (const char* name);
    const char* Name    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обход сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Traverse (const bound_volumes::plane_listf& frustum, ISceneVisitor& visitor);
    void Traverse (const bound_volumes::plane_listf& frustum, TraverseResult& result);
    void Traverse (const bound_volumes::plane_listf& frustum, TraverseResult& result, size_t filter);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение узла
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachNode (Entity* node);
    void DetachNode (Entity* node);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер сцен
///////////////////////////////////////////////////////////////////////////////////////////////////
class SceneManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SceneManager  (const RenderManager&);
    ~SceneManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление и удаление сцен
///////////////////////////////////////////////////////////////////////////////////////////////////
    Scene CreateScene (interchange::object_id_t id);
    void  RemoveScene (interchange::object_id_t id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
    Scene& GetScene (interchange::object_id_t id) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление и удаление узла
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::intrusive_ptr<Node> CreateNode (interchange::object_id_t id, interchange::NodeType type);
    void                     RemoveNode (interchange::object_id_t id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск узла
///////////////////////////////////////////////////////////////////////////////////////////////////
    Node& GetNode (interchange::object_id_t id) const;

  private:
    SceneManager (const SceneManager&); //no impl
    SceneManager& operator = (const SceneManager&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
