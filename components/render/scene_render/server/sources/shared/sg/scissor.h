#ifndef RENDER_SCENE_SERVER_SCISSOR_SHARED_HEADER
#define RENDER_SCENE_SERVER_SCISSOR_SHARED_HEADER

#include <shared/sg/entity.h>

namespace render
{

namespace scene
{

namespace server
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область обрезки
///////////////////////////////////////////////////////////////////////////////////////////////////
class Scissor: public Entity
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Scissor  ();
    ~Scissor ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область
///////////////////////////////////////////////////////////////////////////////////////////////////
    const manager::BoxArea& Area ();

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обход
///////////////////////////////////////////////////////////////////////////////////////////////////
    void VisitCore (ISceneVisitor&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещение об обновлении ограничивающего тела
///////////////////////////////////////////////////////////////////////////////////////////////////
    void OnUpdateBounds ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
