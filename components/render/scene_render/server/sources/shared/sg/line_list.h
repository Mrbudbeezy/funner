#ifndef RENDER_SCENE_SERVER_LINE_LIST_SHARED_HEADER
#define RENDER_SCENE_SERVER_LINE_LIST_SHARED_HEADER

#include <shared/sg/visual_model.h>

namespace render
{

namespace scene
{

namespace server
{

using interchange::PrimitiveUsage;
using interchange::LineDesc;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
class LineList: public VisualModel
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    LineList  (RenderManager& render_manager);
    ~LineList ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Основные параметры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void           SetParams (PrimitiveUsage usage, const char* batch);
    PrimitiveUsage Usage     () const;
    const char*    Batch     () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetMaterial (const char* name);
    const char* Material    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество спрайтов / размер буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size     () const;
    size_t Capacity () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение размера списка спрайтов / резервирование места для хранения спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Resize  (size_t count);
    void Reserve (size_t count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление дескрипторов спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetDescs (size_t first, size_t count, const LineDesc* descs);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
