#ifndef RENDER_SCENE_SERVER_ENTITY_SHARED_HEADER
#define RENDER_SCENE_SERVER_ENTITY_SHARED_HEADER

#include <bv/axis_aligned_box.h>

#include <shared/sg/node.h>

namespace render
{

namespace scene
{

namespace server
{

//forward declarations
class Scene;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сущность
///////////////////////////////////////////////////////////////////////////////////////////////////
class Entity: public Node
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Entity  ();
    ~Entity ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Видимость объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetVisible (bool state);
    bool IsVisible  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ограничивающее тело
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                         SetBounds        (bool is_infinite, const bound_volumes::aaboxf& box);
    bool                         IsInfiniteBounds () const;
    const bound_volumes::aaboxf& BoundBox         () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сцена
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetSceneOwner (Scene* scene);
    Scene* SceneOwner    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обход
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Visit (ISceneVisitor&);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обход
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void VisitCore (ISceneVisitor&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещение об обновлении ограничивающего тела
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnUpdateBounds ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
