#ifndef RENDER_SCENE_SERVER_LIGHT_SHARED_HEADER
#define RENDER_SCENE_SERVER_LIGHT_SHARED_HEADER

#include <shared/sg/entity.h>

namespace render
{

namespace scene
{

namespace server
{

//forward declarations
class Camera;

using interchange::LightParams;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник света
///////////////////////////////////////////////////////////////////////////////////////////////////
class Light: public Entity
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / Деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Light  (interchange::NodeType type);
    ~Light ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры источника
///////////////////////////////////////////////////////////////////////////////////////////////////          
    void               SetParams (const LightParams&);
    const LightParams& Params    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип источника
///////////////////////////////////////////////////////////////////////////////////////////////////          
    interchange::NodeType Type () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление камер из источника
///////////////////////////////////////////////////////////////////////////////////////////////////          
    size_t                CamerasCount () const;
    const server::Camera& Camera       (size_t index) const;

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обход
///////////////////////////////////////////////////////////////////////////////////////////////////
    void VisitCore (ISceneVisitor&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещение об обновлении мировой матрицы
///////////////////////////////////////////////////////////////////////////////////////////////////
    void OnWorldMatrixUpdated ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
