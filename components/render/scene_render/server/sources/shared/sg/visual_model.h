#ifndef RENDER_SCENE_SERVER_VISUAL_MODEL_SHARED_HEADER
#define RENDER_SCENE_SERVER_VISUAL_MODEL_SHARED_HEADER

#include <shared/sg/entity.h>

namespace render
{

namespace scene
{

namespace server
{

//forward declarations
class RenderingContext;
class RenderManager;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отображаемая модель
///////////////////////////////////////////////////////////////////////////////////////////////////
class VisualModel: public Entity
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ~VisualModel ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetScissor (Node*);
    Node* Scissor    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отрисовка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Draw (RenderingContext&, void* user_data);

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    VisualModel (RenderManager& render_manager);
    VisualModel (manager::Entity& entity);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сущность, принадлежащая модели
///////////////////////////////////////////////////////////////////////////////////////////////////
          manager::Entity& Entity ();
    const manager::Entity& Entity () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отрисовка
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void DrawCore (RenderingContext&, void* user_data);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обход
///////////////////////////////////////////////////////////////////////////////////////////////////
    void VisitCore (ISceneVisitor&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
