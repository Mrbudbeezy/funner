#ifndef RENDER_SCENE_SERVER_VISUAL_MODEL_SHARED_HEADER
#define RENDER_SCENE_SERVER_VISUAL_MODEL_SHARED_HEADER

#include <shared/sg/entity.h>

namespace render
{

namespace scene
{

namespace server
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отображаемая модель
///////////////////////////////////////////////////////////////////////////////////////////////////
class VisualModel: public Entity
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    VisualModel  ();
    ~VisualModel ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetScissor (Node*);
    Node* Scissor    () const;

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
