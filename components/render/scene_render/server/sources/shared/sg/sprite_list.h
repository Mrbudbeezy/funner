#ifndef RENDER_SCENE_SERVER_SPRITE_LIST_SHARED_HEADER
#define RENDER_SCENE_SERVER_SPRITE_LIST_SHARED_HEADER

#include <shared/sg/visual_model.h>

namespace render
{

namespace scene
{

namespace server
{

using interchange::SpriteMode;
using interchange::PrimitiveUsage;
using interchange::SpriteDesc;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
class SpriteList: public VisualModel
{
  public:
   typedef interchange::uint32 subid_t;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    SpriteList  (RenderManager& render_manager);
    ~SpriteList ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CreateList   (subid_t subid, SpriteMode mode, PrimitiveUsage usage, const math::vec3f& up, const char* batch);
    void RemoveList   (subid_t subid);
    void ReserveLists (subid_t count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Основные параметры
///////////////////////////////////////////////////////////////////////////////////////////////////
    SpriteMode         Mode  (subid_t subid) const;
    PrimitiveUsage     Usage (subid_t subid) const;
    const math::vec3f& OrtUp (subid_t subid) const;
    const char*        Batch (subid_t subid) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetMaterial (subid_t subid, const char* name);
    const char* Material    (subid_t subid) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество спрайтов / размер буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size     (subid_t subid) const;
    size_t Capacity (subid_t subid) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение размера списка спрайтов / резервирование места для хранения спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Resize  (subid_t subid, size_t count);
    void Reserve (subid_t subid, size_t count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление дескрипторов спрайтов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetDescs (subid_t subid, size_t first, size_t count, const SpriteDesc* descs);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
