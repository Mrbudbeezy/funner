#ifndef RENDER_SCENE_SERVER_COLLECTION_VISITOR_SHARED_HEADER
#define RENDER_SCENE_SERVER_COLLECTION_VISITOR_SHARED_HEADER

#include <shared/sg/traverse_result.h>
#include <shared/sg/visitor.h>

namespace render
{

namespace scene
{

namespace server
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги для коллекционирующего диспетчера объектов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum CollectionVisitorFilter
{
  Collect_VisualModels = 1, //коллекционировать визуализируемые объекты
  Collect_Lights       = 2, //коллекционировать источники света

  Collect_All = ~0u,
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Коллекционирующий диспетчер объектов
///////////////////////////////////////////////////////////////////////////////////////////////////
class CollectionVisitor: public ISceneVisitor, public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    CollectionVisitor (TraverseResult& results, size_t filter = Collect_All);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Диспетчеризация по типам
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Visit (VisualModel& entity);
    void Visit (Light& entity);
    
  private:
    size_t          filter;
    TraverseResult& result; 
};

}

}

}

#endif
