#ifndef RENDER_SCENE_SERVER_SCREEN_MANAGER_SHARED_HEADER
#define RENDER_SCENE_SERVER_SCREEN_MANAGER_SHARED_HEADER

#include <stl/auto_ptr.h>

#include <xtl/rect.h>

#include <render/scene/interchange/types.h>

namespace render
{

namespace scene
{

namespace server
{

using interchange::object_id_t;

typedef xtl::rect<int> Rect;

//forward declarations
class WindowManager;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Экран
///////////////////////////////////////////////////////////////////////////////////////////////////
class Screen
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Screen  (const char* name);
    Screen  (const Screen&);
    ~Screen ();

    Screen& operator = (const Screen&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Активность экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetActive (bool active);
    bool IsActive  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetScreenArea (const Rect&);
    const Rect& ScreenArea    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Задний фон
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetBackground   (bool state, const math::vec4f& color);
    bool               BackgroundState () const;
    const math::vec4f& BackgroundColor () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание с областями вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    //TODO

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update ();

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер экранов
///////////////////////////////////////////////////////////////////////////////////////////////////
class ScreenManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ScreenManager  (WindowManager&);
    ~ScreenManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    Screen GetScreen (object_id_t id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание экрана / удаление экрана
///////////////////////////////////////////////////////////////////////////////////////////////////
    Screen CreateScreen (object_id_t id, const char* name);
    void   RemoveScreen (object_id_t id);

  private:
    ScreenManager (const ScreenManager&); //no impl
    ScreenManager& operator = (const ScreenManager&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
