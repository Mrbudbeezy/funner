#ifndef RENDER_SCENE_SERVER_VIEWPORT_SHARED_HEADER
#define RENDER_SCENE_SERVER_VIEWPORT_SHARED_HEADER

#include <shared/render_target_map.h>

namespace render
{

namespace scene
{

namespace server
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class IViewportListener
{
  public:
    virtual void OnViewportZOrderUpdated (int zorder) {}

  protected:
    virtual ~IViewportListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class Viewport
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Viewport  (RenderManager& render_manager, const RenderTargetMap& render_target_map); //TODO: RenderTargetMap as getter/setter
    Viewport  (const Viewport&);
    ~Viewport ();

    Viewport& operator = (const Viewport&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetName (const char* name);
    const char* Name    () const;   

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetArea (const Rect&);
    const Rect& Area    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Диапазон глубины для области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    float MinDepth    () const;
    float MaxDepth    () const;
    void  SetMinDepth (float value);
    void  SetMaxDepth (float value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Активность области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetActive (bool active);
    bool IsActive  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Порядок вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetZOrder (int order);
    int  ZOrder    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Задний фон
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetBackground   (bool state, const math::vec4f& color);
    bool               BackgroundState () const;
    const math::vec4f& BackgroundColor () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Техника отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetTechnique (const char* name);
    const char* Technique    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetProperties (const common::PropertyMap&);
    const common::PropertyMap& Properties    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединенный кадр
///////////////////////////////////////////////////////////////////////////////////////////////////
    manager::Frame& Frame () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (manager::Frame* parent_frame = 0);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление слушателей
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachListener     (IViewportListener*);
    void DetachListener     (IViewportListener*);
    void DetachAllListeners ();

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер областей вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class ViewportManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ViewportManager  (WindowManager&);
    ~ViewportManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    Viewport GetViewport (object_id_t id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание области вывода / удаление области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    Viewport CreateViewport (object_id_t id);
    void     RemoveViewport (object_id_t id);

  private:
    ViewportManager (const ViewportManager&); //no impl
    ViewportManager& operator = (const ViewportManager&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
