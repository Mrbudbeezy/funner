#ifndef RENDER_SCENE_SERVER_RENDERING_CONTEXT_SHARED_HEADER
#define RENDER_SCENE_SERVER_RENDERING_CONTEXT_SHARED_HEADER

#include <xtl/exception.h>

#include <shared/sg/traverse_result.h>

namespace render
{

namespace manager
{

//forward declarations
class Frame;

}

namespace scene
{

namespace server
{

//forward declarations
class RenderManager;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderingContext
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderingContext (manager::Frame& frame, server::RenderManager& render_manager, ITraverseResultCache& traverse_result_cache);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текущий кадр
///////////////////////////////////////////////////////////////////////////////////////////////////
    manager::Frame& Frame () { return frame; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Результат обхода
///////////////////////////////////////////////////////////////////////////////////////////////////
    server::TraverseResult& TraverseResult ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    server::RenderManager& RenderManager ();

  private:
    RenderingContext (const RenderingContext&); //no implementation
    RenderingContext& operator = (const RenderingContext&); //no implementation

  private:
    manager::Frame&         frame;
    server::RenderManager&  render_manager;
    server::TraverseResult* traverse_result;
    ITraverseResultCache&   traverse_result_cache;
};

#include <shared/detail/rendering_context.inl>

}

}

}

#endif
