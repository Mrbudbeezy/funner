#ifndef RENDER_SCENE_COMMAND_BUFFER_HEADER
#define RENDER_SCENE_COMMAND_BUFFER_HEADER

#include <render/scene/interchange/types.h>

namespace render
{

namespace scene
{

namespace interchange
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буфер команд
///////////////////////////////////////////////////////////////////////////////////////////////////
class CommandBuffer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    CommandBuffer  ();
    CommandBuffer  (const CommandBuffer&);
    ~CommandBuffer ();

    CommandBuffer& operator = (const CommandBuffer&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размер буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к данным
///////////////////////////////////////////////////////////////////////////////////////////////////
    const void* Data () const;
          void* Data ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Счетчик ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t UseCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение размера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Resize (size_t new_size, bool copy_data = true);
    void Clear  () { Resize (0, false); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование размера
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Capacity () const;
    void   Reserve  (size_t new_size);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (CommandBuffer&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (CommandBuffer&, CommandBuffer&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Пул буферов команд
///////////////////////////////////////////////////////////////////////////////////////////////////
class CommandBufferPool
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    CommandBufferPool  ();
    CommandBufferPool  (const CommandBufferPool&);
    ~CommandBufferPool ();

    CommandBufferPool& operator = (const CommandBufferPool&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервируемый размер буфера по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetDefaultBufferSize (size_t size);
    size_t DefaultBufferSize    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    CommandBuffer CreateBuffer ();

  private:
    struct Impl;
    Impl* impl;
};

}

}

}

#endif
