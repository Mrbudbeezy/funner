#ifndef RENDER_SCENE_COMMAND_QUEUE_HEADER
#define RENDER_SCENE_COMMAND_QUEUE_HEADER

#include <xtl/intrusive_ptr.h>

#include <render/scene/interchange/command_buffer.h>
#include <render/scene/interchange/connection.h>

namespace render
{

namespace scene
{

namespace interchange
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Команда
///////////////////////////////////////////////////////////////////////////////////////////////////
struct CommandQueueItem
{
  xtl::com_ptr<IConnection> connection; //соединение
  CommandBuffer             buffer;     //буфер команд

/// Конструкторы
  CommandQueueItem () {}  
  CommandQueueItem (IConnection* in_connection, const CommandBuffer& in_buffer) : connection (in_connection), buffer (in_buffer) {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очередь команд
///////////////////////////////////////////////////////////////////////////////////////////////////
class CommandQueue
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    CommandQueue  (size_t max_queue_size);
    ~CommandQueue ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размер очереди / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size    () const;
    bool   IsEmpty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Помещение элемента в очередь / извлечение из очереди
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Push (const CommandQueueItem& command);
    bool Pop  (CommandQueueItem& command, size_t timeout = size_t (-1));

  private:
    CommandQueue (const CommandQueue&); //no impl
    CommandQueue& operator = (const CommandQueue&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
