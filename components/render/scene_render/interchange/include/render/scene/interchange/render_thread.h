#ifndef RENDER_SCENE_INTERCHANGE_RENDER_THREAD_HEADER
#define RENDER_SCENE_INTERCHANGE_RENDER_THREAD_HEADER

#include <cstddef>

#include <xtl/functional_fwd>

#include <render/scene/interchange/connection.h>

namespace render
{

namespace scene
{

namespace interchange
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель событий нити
///////////////////////////////////////////////////////////////////////////////////////////////////
class IRenderThreadListener
{
  public:
    virtual void OnRenderThreadStarted () {}
    virtual void OnRenderThreadStopped () {}

  protected:
    virtual ~IRenderThreadListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Нить рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderThread
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderThread  (const char* name, size_t render_queue_size, IRenderThreadListener* listener = 0);
    RenderThread  (const RenderThread&);
    ~RenderThread ();

    RenderThread& operator = (const RenderThread&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание соединения-посредника
///////////////////////////////////////////////////////////////////////////////////////////////////
    IConnection* CreateConnection           (IConnection* source_connection);
    IConnection* CreateConnectionFromThread (const xtl::function<IConnection* ()>& creator, size_t timeout_ms);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ожидание незавершенных операций
///////////////////////////////////////////////////////////////////////////////////////////////////
    void WaitQueuedCommands ();
    bool WaitQueuedCommands (size_t timeout_ms);

  private:
    struct Impl;
    Impl* impl;
};

}

}

}

#endif
