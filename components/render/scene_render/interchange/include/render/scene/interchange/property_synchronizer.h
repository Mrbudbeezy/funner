#ifndef RENDER_SCENE_INTERCHANGE_PROPERTY_SYNCHRONIZER_HEADER
#define RENDER_SCENE_INTERCHANGE_PROPERTY_SYNCHRONIZER_HEADER

#include <stl/auto_ptr.h>

#include <common/property_map.h>

#include <render/scene/interchange/streams.h>

namespace render
{

namespace scene
{

namespace interchange
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель синхронизатора карты свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
class IPropertyMapWriterListener
{
  public:
    virtual void OnPropertyMapRemoved    (size_t id) = 0;
    virtual void OnPropertyLayoutRemoved (size_t id) = 0;

  protected:
    virtual ~IPropertyMapWriterListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Синхронизатор карт свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
class PropertyMapWriter: public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PropertyMapWriter  (IPropertyMapWriterListener* listener = 0);
    ~PropertyMapWriter ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Запись карты свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Write (OutputStream&, const common::PropertyMap&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Приемник карт свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
class PropertyMapReader: public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PropertyMapReader  ();
    ~PropertyMapReader ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение карты свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    common::PropertyMap GetProperties (size_t id) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление карты
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Read (InputStream&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление карты свойств и лэйаута
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RemoveProperties (size_t id);
    void RemoveLayout     (size_t id);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
