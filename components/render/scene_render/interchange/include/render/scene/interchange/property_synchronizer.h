#ifndef RENDER_SCENE_INTERCHANGE_PROPERTY_SYNCHRONIZER_HEADER
#define RENDER_SCENE_INTERCHANGE_PROPERTY_SYNCHRONIZER_HEADER

#include <stl/auto_ptr.h>

#include <common/property_map.h>

#include <render/scene/interchange/streams.h>

namespace render
{

namespace scene
{

namespace interchange
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Синхронизатор карт свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
class PropertyMapSender: public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PropertyMapSender  (OutputStream&);
    ~PropertyMapSender ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отсылка карты свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Send (const common::PropertyMap&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Приемник карт свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
class PropertyMapReceiver: public xtl::noncopyable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PropertyMapReceiver  (InputStream&);
    ~PropertyMapReceiver ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение карты свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Receive (common::PropertyMap&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
