#ifndef RENDER_SCENE_RENDER_HEADER
#define RENDER_SCENE_RENDER_HEADER

#include <stl/auto_ptr.h>
#include <xtl/functional_fwd>

#include <sg/camera.h>
#include <sg/screen.h>

namespace media
{

//forward declaration
class Image;

}

namespace render
{

namespace scene
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цель рендеринга сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderTarget
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTarget  ();
    RenderTarget  (const RenderTarget&);
    ~RenderTarget ();

    RenderTarget& operator = (const RenderTarget&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Экран (политика владения - weak-ref)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                 SetScreen (scene_graph::Screen* screen);
    scene_graph::Screen* Screen    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка связи цели рендеринга с рендером
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsBindedToRenderer () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Захват изображения (screen-shot)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CaptureImage (media::Image&);
    void CaptureImage (const char* image_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (RenderTarget&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (RenderTarget&, RenderTarget&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рендер сцены
///////////////////////////////////////////////////////////////////////////////////////////////////
class Render
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Render  ();
    Render  (const Render&);
    ~Render ();
    
    Render& operator = (const Render&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* RendererDescription () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание цели рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTarget CreateRenderTarget (const char* scene_render_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Максимальный уровень вложенности рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetMaxDrawDepth (size_t level);
    size_t MaxDrawDepth    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с ресурсами
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadResource   (const char* file_name);
    void UnloadResource (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Render&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Render&, Render&);

}

typedef scene::RenderTarget SceneRenderTarget;
typedef scene::Render       SceneRender;

}

#endif
