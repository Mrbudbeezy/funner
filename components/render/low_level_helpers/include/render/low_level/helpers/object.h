#ifndef RENDER_LOW_LEVEL_HELPERS_OBJECT_HEADER
#define RENDER_LOW_LEVEL_HELPERS_OBJECT_HEADER

#include <typeinfo>

#include <xtl/common_exceptions.h>
#include <xtl/reference_counter.h>
#include <xtl/trackable.h>

#include <render/low_level/object.h>

#ifdef _MSC_VER
  #pragma warning (disable : 4250) //'class1' : inherits 'class2::member' via dominance
#endif

namespace render
{

namespace low_level
{

namespace helpers
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый объект семейства низкоуровневых средств отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class Object: virtual public IObject, public xtl::reference_counter
{
  public:
    typedef size_t Id;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Object ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///По умолчанию объекты не имеют списка свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPropertyList* GetProperties ();    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void         AddRef  ();
    void         Release ();
    unsigned int UseCount ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение trackable
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::trackable& GetTrackable ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация обработчиков события удаления объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::connection RegisterDestroyHandler (xtl::trackable::slot_type& handler);
    xtl::connection RegisterDestroyHandler (const xtl::trackable::function_type& handler);
    xtl::connection RegisterDestroyHandler (const xtl::trackable::function_type& handler, xtl::trackable& trackable);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Уникальный идентификатор объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    Id GetId () const { return id; }

  private:
    Object (const Object&); //no impl
    Object& operator = (const Object&); //no impl

  private:
    size_t         id;
    xtl::trackable trackable;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Приведение типов объектов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class DstT, class SrcT>
DstT* cast_object (SrcT* ptr, const char* source, const char* argument_name);

#include <render/low_level/helpers/detail/object.inl>

}

}

}

#endif
