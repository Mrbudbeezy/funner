#ifndef RENDER_MID_LEVEL_RENDERER_HEADER
#define RENDER_MID_LEVEL_RENDERER_HEADER

#include <mathlib.h>

namespace media
{

//forward declaration
class Image;

}

namespace render
{

namespace mid_level
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс
///////////////////////////////////////////////////////////////////////////////////////////////////
class IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~IObject () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Целевой буфер отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class IRenderTarget: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t GetWidth  () = 0;
    virtual size_t GetHeight () = 0;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование образа текстуры в картинку
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void CaptureImage (media::Image&) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Viewport
{
  int    x;      //абсцисса левого верхнего угла области
  int    y;      //ордината левого верхнего угла области
  size_t width;  //ширина области
  size_t height; //высота области
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс для визуализируемых кадров
///////////////////////////////////////////////////////////////////////////////////////////////////
class IFrame: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Целевые буферы отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void           SetRenderTargets      (IRenderTarget* render_target, IRenderTarget* depth_stencil_target) = 0;
    virtual IRenderTarget* GetRenderTarget       () = 0; //целевой буфер цвета
    virtual IRenderTarget* GetDepthStencilTarget () = 0; //целевой буфер попиксельного отсечения

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetViewport (const Viewport&) = 0;
    virtual void GetViewport (Viewport&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры очистки целевых буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetClearBuffers      (bool clear_render_target, bool clear_depth_stencil_target) = 0;
    virtual void GetClearBuffers      (bool& clear_render_target, bool& clear_depth_stencil_target) = 0;
    virtual void SetClearColor        (const math::vec4f& color) = 0;
    virtual void SetClearDepthStencil (float depth_value, unsigned char stencil_index) = 0;
    virtual void GetClearColor        (math::vec4f& color) = 0;
    virtual void GetClearDepthStencil (float& depth_value, unsigned char& stencil_index) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class IRenderer: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* GetDescription () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Внутренний идентификатор пула ресурсов
///  (необходим для совместного использования ресурсов, созданных на разных IRenderer)
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t GetResourcePoolId () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение буфера цвета и буфера попиксельного отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IRenderTarget* GetColorBuffer () = 0;
    virtual IRenderTarget* GetDepthStencilBuffer () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IRenderTarget* CreateDepthStencilBuffer () = 0;
    virtual IRenderTarget* CreateRenderBuffer       () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление кадра в список отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddFrame (IFrame*) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конец отрисовки / сброс отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void DrawFrames   () = 0;
    virtual void CancelFrames () = 0;
};

}

}

#endif
