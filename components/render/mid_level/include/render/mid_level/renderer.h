#ifndef RENDER_MID_LEVEL_RENDERER_HEADER
#define RENDER_MID_LEVEL_RENDERER_HEADER

namespace media
{

//forward declaration
class Image;

}

namespace render
{

namespace mid_level
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс
///////////////////////////////////////////////////////////////////////////////////////////////////
class IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~IObject () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текстура
///////////////////////////////////////////////////////////////////////////////////////////////////
class ITexture: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование образа текстуры в картинку
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void CaptureImage (media::Image&) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class IRenderer: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* GetDescription () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение буфера цвета и буфера попиксельного отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ITexture* GetColorBuffer () = 0;
    virtual ITexture* GetDepthStencilBuffer () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ITexture* CreateDepthStencilBuffer () = 0;
    virtual ITexture* CreateRenderBuffer       () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конец отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void DrawFrames () = 0;
};

}

}

#endif
