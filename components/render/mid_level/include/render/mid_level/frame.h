#ifndef RENDER_MID_LEVEL_FRAME_HEADER
#define RENDER_MID_LEVEL_FRAME_HEADER

#include <math/matrix.h>

#include <render/render_target.h>
#include <render/primitive.h>

namespace render
{

namespace mid_level
{

//implementation forwards
class FrameImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Viewport
{
  int    x;      //абсцисса левого верхнего угла области
  int    y;      //ордината левого верхнего угла области
  size_t width;  //ширина области
  size_t height; //высота области
  
  Viewport ();
  Viewport (int x, int y, size_t width, size_t height);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги очистки
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ClearFlag
{
  ClearFlag_RenderTarget  = 1, //очистка буфера цвета
  ClearFlag_Depth         = 2, //очистка буфера глубины
  ClearFlag_Stencil       = 4, //очистка буфера трафарета
  ClearFlag_ViewportOnly  = 8, //очистка только области вывода (могут быть потери производительности)

  ClearFlag_DepthStencil = ClearFlag_Depth | ClearFlag_Stencil,
  ClearFlag_All          = ClearFlag_DepthStencil | ClearFlag_RenderTarget
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Порядок кадров
///////////////////////////////////////////////////////////////////////////////////////////////////
enum FrameOrder
{
  FrameOrder_PreRender,  //кадр рисуется до основного и до всех его дочерних кадров
  FrameOrder_Child,      //дочерний кадр
  FrameOrder_PostRender, //кадр рисуется после основного и всех его дочерних кадров
  
  FrameOrder_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Визуализируемый кадр
///////////////////////////////////////////////////////////////////////////////////////////////////
class Frame
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Frame  (const Frame&);
    ~Frame ();

    Frame& operator = (const Frame&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Целевые буферы отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetRenderTargets      (const RenderTarget& render_target, const RenderTarget& depth_stencil_target);
          RenderTarget GetRenderTarget       ();
          RenderTarget GetDepthStencilTarget ();
    const RenderTarget GetRenderTarget       () const;
    const RenderTarget GetDepthStencilTarget () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void            SetViewport (const Viewport&);
    const Viewport& Viewport    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги очистки кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetClearFlags (size_t clear_flags);
    size_t ClearFlags    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры очистки буфера цвета
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetClearColor (const math::vec4f& color);
    void ClearColor    (math::vec4f& color);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры очистки буфера попиксельного отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          SetClearDepthValue   (float depth_value);
    void          SetClearStencilIndex (unsigned char stencil_index);
    float         ClearDepthValue   ();
    unsigned char ClearStencilIndex ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица вида / матрица преобразования
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetViewMatrix       (const math::mat4f&);
    void               SetProjectionMatrix (const math::mat4f&);
    const math::mat4f& ViewMatrix          () const;
    const math::mat4f& ProjectionMatrix    () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetRenderingProperties (const common::PropertyMap&);
    const common::PropertyMap& RenderingProperties    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t EntitiesCount     ();
    void   AddEntity         (const Entity&);
    void   RemoveAllEntities ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление пре-рендеринга и пост-рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddFrame        (FrameOrder order, const Frame& frame);
    void RemoveAllFrames ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание кадров и добавление их к данному
///////////////////////////////////////////////////////////////////////////////////////////////////
    Frame AddPreRenderFrame  ();
    Frame AddChildFrame      ();
    Frame AddPostRenderFrame ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление всех объектов из кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RemoveAll ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рисование кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Draw ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Frame&);
    
  private:
    Frame (FrameImpl*);
    
  private:
    FrameImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Frame&, Frame&);

}

}

#endif
