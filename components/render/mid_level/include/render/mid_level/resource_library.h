#ifndef RENDER_MID_LEVEL_RESOURCE_LIBRARY_HEADER
#define RENDER_MID_LEVEL_RESOURCE_LIBRARY_HEADER

namespace render
{

namespace mid_level
{

//implementation forwards
class ResourceLibraryImpl;
class Wrappers;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека ресурсов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class ResourceLibrary
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    ResourceLibrary  ();
    ResourceLibrary  (const ResourceLibrary&);
    ~ResourceLibrary ();
    
    ResourceLibrary& operator = (const ResourceLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach             (const ResourceLibrary&);
    void Detach             (const ResourceLibrary&);
    void DetachAllLibraries ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (ResourceLibrary&);

  private:
    ResourceLibrary (ResourceLibraryImpl*);

  private:
    ResourceLibraryImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (ResourceLibrary&, ResourceLibrary&);

}

}

#endif
