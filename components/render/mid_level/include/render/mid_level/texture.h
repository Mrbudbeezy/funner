#ifndef RENDER_MID_LEVEL_TEXTURE_HEADER
#define RENDER_MID_LEVEL_TEXTURE_HEADER

#include <render/mid_level/render_target.h>

namespace render
{

namespace mid_level
{

//implementation forwards
class TextureImpl;
class Wrappers;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размерность текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
enum TextureDimension
{
  TextureDimension_2D,
  TextureDimension_3D,
  TextureDimension_Cubemap,
  
  TextureDimension_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текстура
///////////////////////////////////////////////////////////////////////////////////////////////////
class Texture
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Texture  (const Texture&);
    ~Texture ();

    Texture& operator = (const Texture&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размерность
///////////////////////////////////////////////////////////////////////////////////////////////////
    TextureDimension Dimension () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Формат и размеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    PixelFormat Format () const;
    size_t      Width  () const;
    size_t      Height () const;
    size_t      Depth  () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение цели рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    mid_level::RenderTarget RenderTarget (size_t layer=0, size_t mip_level=0) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление образа
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (const media::Image&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Захват образа
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Capture (size_t layer, size_t mip_level, media::Image& image);
    void Capture (size_t mip_level, media::Image& image);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Texture&);
  
  private:
    Texture (TextureImpl*);
  
  private:
    TextureImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Texture&, Texture&);

}

}

#endif
