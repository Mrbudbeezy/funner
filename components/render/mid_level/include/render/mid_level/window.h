#ifndef RENDER_MANAGER_WINDOW_HEADER
#define RENDER_MANAGER_WINDOW_HEADER

#include <xtl/functional_fwd>

#include <render/mid_level/render_target.h>

namespace render
{

namespace mid_level
{

//implementation forwards
class WindowImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///События окна рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
enum WindowEvent
{
  WindowEvent_OnUpdate, //окно требует перерисовки
  WindowEvent_OnResize, //размер окна изменился
  
  WindowEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Окно рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Window
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Window  ();
    Window  (const Window&);
    ~Window ();
    
    Window& operator = (const Window&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Цели рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTarget ColorBuffer        () const;
    RenderTarget DepthStencilBuffer () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры целей рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Width  () const;
    size_t Height () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация обработчиков событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (Window&)> EventHandler;

    xtl::connection RegisterEventHandler (WindowEvent event, const EventHandler& handler) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Window&);
    
  private:
    Window (WindowImpl*);

  private:
    WindowImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Window&, Window&);

}

}

#endif
