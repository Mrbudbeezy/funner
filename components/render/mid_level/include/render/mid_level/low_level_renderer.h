#ifndef RENDER_MID_LEVEL_LOW_LEVEL_RENDERER_HEADER
#define RENDER_MID_LEVEL_LOW_LEVEL_RENDERER_HEADER

#include <render/mid_level/renderer.h>

namespace render
{

namespace low_level
{

//forward declarations
class IDevice;

}

namespace mid_level
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Кадр системы рендеринга, работающий через render::low_level::IDevice (для тестов)
///////////////////////////////////////////////////////////////////////////////////////////////////
class ILowLevelFrame: virtual public IFrame
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс обратной связи
///////////////////////////////////////////////////////////////////////////////////////////////////
    class IDrawCallback
    {
      public:
        virtual void Draw (low_level::IDevice& device) = 0;

      protected:
        virtual ~IDrawCallback () {}
    };

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка интерфейса обратного вызова
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetCallback (IDrawCallback*) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система рендеринга, работающая через render::low_level::IDevice (для тестов)
///////////////////////////////////////////////////////////////////////////////////////////////////
class ILowLevelRenderer: virtual public IRenderer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ILowLevelFrame* CreateFrame () = 0;
};

}

}

#endif
