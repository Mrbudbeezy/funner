#ifndef RENDER_MID_LEVEL_RENDERER2D_HEADER
#define RENDER_MID_LEVEL_RENDERER2D_HEADER

#include <render/mid_level/renderer.h>

namespace media
{

//forward declarations
enum PixelFormat;
class Image;

}

namespace render
{

namespace mid_level
{

namespace renderer2d
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///ƒвумерна€ текстура
///////////////////////////////////////////////////////////////////////////////////////////////////
class ITexture: virtual public IRenderTarget {};

///////////////////////////////////////////////////////////////////////////////////////////////////
///–ежимы смешивани€ цветов при наложении спрайта
///////////////////////////////////////////////////////////////////////////////////////////////////
enum BlendMode
{
  BlendMode_None,        //без смешивани€
  BlendMode_Translucent, //полупрозрачность
  BlendMode_Mask,        //наложение по маске - спрайт €вл€етс€ маской при наложении
  BlendMode_Additive,    //аддитивное наложение
  BlendMode_AlphaClamp,  //отсечение по альфа

  BlendMode_Num 
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///—прайт
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Sprite
{
  math::vec3f position;   //положение центра спрайта
  math::vec2f size;       //размер спрайта
  math::vec4f color;      //цвет спрайта
  math::vec2f tex_offset; //смещение начала спрайта в текстуре [0;1]
  math::vec2f tex_size;   //размер спрайта в текстуре [0;1]
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕримитив
///////////////////////////////////////////////////////////////////////////////////////////////////
class IPrimitive: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///ћатрица преобразований
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetTransform (const math::mat4f&) = 0;
    virtual void GetTransform (math::mat4f&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///”становка базовой текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void      SetTexture (ITexture*) = 0;
    virtual ITexture* GetTexture () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///–ежим смешивани€ цветов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void      SetBlendMode (BlendMode blend_mode) = 0;
    virtual BlendMode GetBlendMode () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///”становка параметра дл€ работы альфа-теста
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void  SetAlphaReference (float ref) = 0;
    virtual float GetAlphaReference () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///—прайты
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t GetSpritesCount  () = 0;                                            //количество спрайтов
    virtual void   GetSprite        (size_t index, Sprite& sprite) = 0;                //получение спрайта
    virtual size_t AddSprites       (size_t sprites_count, const Sprite* sprites) = 0; //добавление спрайтов
    virtual void   RemoveSprites    (size_t first_sprite, size_t sprites_count) = 0;   //удаление спрайтов
    virtual void   RemoveAllSprites () = 0;                                            //удаление всех спрайтов
    virtual void   ReserveSprites   (size_t sprites_count) = 0;                        //резервирование места дл€ спрайтов
};

///////////////////////////////////////////////////////////////////////////////////////////////////
/// адр 2D визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
class IFrame: virtual public mid_level::IFrame
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///ћатрица вида / матрица преобразовани€
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetViewPoint  (const math::vec3f&) = 0;
    virtual void SetProjection (const math::mat4f&) = 0;
    virtual void GetViewPoint  (math::vec3f&) = 0;
    virtual void GetProjection (math::mat4f&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕримитивы
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t PrimitivesCount () = 0;            //количество примитивов в кадре
    virtual void   AddPrimitive    (IPrimitive*) = 0; //добавление примитива
    virtual void   Clear           () = 0;            //очистка кадра
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///—истема рендеринга 2D-примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
class IRenderer: virtual public mid_level::IRenderer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///—оздание ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ITexture*   CreateTexture   (const media::Image& image) = 0;
    virtual ITexture*   CreateTexture   (size_t width, size_t height, media::PixelFormat pixel_format) = 0;
    virtual IPrimitive* CreatePrimitive () = 0;
    virtual IFrame*     CreateFrame     () = 0;
};

}

}

}

#endif
