#ifndef RENDER_MID_LEVEL_RENDERER2D_HEADER
#define RENDER_MID_LEVEL_RENDERER2D_HEADER

#include <render/mid_level/renderer.h>
#include <render/mid_level/common.h>

namespace media
{

//forward declaration
enum PixelFormat;

}

namespace render
{

namespace mid_level
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режимы смешивания цветов при наложении спрайта
///////////////////////////////////////////////////////////////////////////////////////////////////
enum BlendMode
{
  BlendMode_None,        //без смешивания
  BlendMode_Translucent, //полупрозрачность
  BlendMode_Mask,        //наложение по маске - спрайт является маской при наложении
  BlendMode_Additive,    //аддитивное наложение

  BlendMode_Num 
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Спрайт
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Sprite
{
  ITexture*   texture;    //базовая текстура
  math::vec3f position;   //положение левого центра спрайта
  float       angle;      //угол поворота спрайта против часовой стрелки (в градусах)
  math::vec2f size;       //размер спрайта
  math::vec4f color;      //цвет спрайта
  math::vec2f tex_offset; //смещение начала спрайта в текстуре [0;1]
  math::vec2f tex_size;   //размер спрайта в текстуре [0;1]
  BlendMode   blend_mode; //режим наложения
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Пакет визуализации 2D-примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Frame2d: public Frame
{
  math::vec2f size;          //логические размеры кадра
  size_t      sprites_count; //количество спрайтов в кадре
  Sprite**    sprites;       //спрайты
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система рендеринга 2D-примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
class IRenderer2d: virtual public IRenderer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ITexture* CreateTexture (const char* texture_name) = 0;
    virtual ITexture* CreateTexture (size_t width, size_t height, media::PixelFormat pixel_format) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление кадра на отрисовку
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddFrame (Frame2d*) = 0;
};

}

}

#endif
