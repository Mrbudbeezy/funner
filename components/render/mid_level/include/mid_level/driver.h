#ifndef RENDER_MID_LEVEL_RENDERER_DRIVER_HEADER
#define RENDER_MID_LEVEL_RENDERER_DRIVER_HEADER

#include <render/mid_level/renderer.h>

namespace render
{

namespace mid_level
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Драйвер систем рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class IDriver: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* GetDescription () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных систем визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t      GetRenderersCount () = 0;
    virtual const char* GetRendererName   (size_t index) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создаение устройства визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IRenderer* CreateRenderer (const char* name) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер драйверов систем рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class DriverManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация драйверов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterDriver       (const char* name, IDriver* driver);
    static void UnregisterDriver     (const char* name);
    static void UnregisterAllDrivers ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск драйвера по имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    static IDriver* FindDriver (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление драйверов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static size_t      DriversCount ();
    static IDriver*    Driver       (size_t index);
    static const char* DriverName   (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    static IRenderer* CreateRenderer (const char* driver_mask, const char* device_mask);
};

}

}

#endif
