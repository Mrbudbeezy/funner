class PrimitiveBuffersImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вершинный буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class VertexBuffer: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexBuffer (const media::geometry::VertexBuffer& source, PrimitiveBuffersImpl& buffers, MeshBufferUsage usage);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Вершинные потоки
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                   StreamsCount ();
    const LowLevelBufferPtr* Streams      ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение лэйаута
///////////////////////////////////////////////////////////////////////////////////////////////////
    LowLevelInputLayoutPtr CreateLayout (low_level::IDevice& device, low_level::InputDataType type);
    
  private:
    typedef stl::vector<LowLevelBufferPtr>           BufferArray;
    typedef stl::vector<low_level::VertexAttribute>  VertexAttributeArray;  

  private:
    BufferArray            streams;
    VertexAttributeArray   attributes; 
    LowLevelInputLayoutPtr layouts [low_level::InputDataType_Num];
};

typedef xtl::intrusive_ptr<VertexBuffer> VertexBufferPtr;
