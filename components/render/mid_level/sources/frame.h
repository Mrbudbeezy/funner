///////////////////////////////////////////////////////////////////////////////////////////////////
///Визуализируемый кадр
///////////////////////////////////////////////////////////////////////////////////////////////////
class FrameImpl: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FrameImpl  ();
    ~FrameImpl ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Целевые буферы отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                    SetRenderTargets   (const RenderTargetPtr& render_target, const RenderTargetPtr& depth_stencil_target);
    const RenderTargetPtr&  RenderTarget       ();
    const RenderTargetPtr&  DepthStencilTarget ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetViewport (const Rect&);
    const Rect& Viewport    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetScissor      (const Rect&);
    const Rect& Scissor         ();
    void        SetScissorState (bool state);
    bool        ScissorState    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги очистки кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetClearFlags (size_t clear_flags);
    size_t ClearFlags    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры очистки буфера цвета
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetClearColor (const math::vec4f& color);
    const math::vec4f& ClearColor    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры очистки буфера попиксельного отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          SetClearDepthValue   (float depth_value);
    void          SetClearStencilIndex (unsigned char stencil_index);
    float         ClearDepthValue      ();
    unsigned char ClearStencilIndex    ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица вида / матрица преобразования
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetViewMatrix       (const math::mat4f&);
    void               SetProjectionMatrix (const math::mat4f&);
    const math::mat4f& ViewMatrix          ();
    const math::mat4f& ProjectionMatrix    ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка техники рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetTechnique (const char* name);
    const char* Tehcnique    ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                       SetProperties (const common::PropertyMap&);
    const common::PropertyMap& Properties    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t EntitiesCount     ();
    void   AddEntity         (const EntityPtr&);
    void   RemoveAllEntities ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление пре-рендеринга и пост-рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddFrame        (FrameOrder order, const Frame& frame);
    void RemoveAllFrames ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание кадров и добавление их к данному
///////////////////////////////////////////////////////////////////////////////////////////////////
    FramePtr AddPreRenderFrame  ();
    FramePtr AddChildFrame      ();
    FramePtr AddPostRenderFrame ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление всех объектов из кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RemoveAll ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рисование кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Draw ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение обёртки
///////////////////////////////////////////////////////////////////////////////////////////////////
    Frame Wrap ();

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};
