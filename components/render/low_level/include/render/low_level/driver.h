#ifndef RENDER_LOW_LEVEL_DRIVER_HEADER
#define RENDER_LOW_LEVEL_DRIVER_HEADER

#include <render/low_level/object.h>
#include <render/low_level/common.h>

namespace xtl
{

//forward declaration
template <class T> class com_ptr;

}

namespace render
{

namespace low_level
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор видео-режима
///////////////////////////////////////////////////////////////////////////////////////////////////
struct OutputModeDesc
{
  size_t width;        //ширина фрейм-буфера
  size_t height;       //высота фрейм-буфера
  size_t color_bits;   //количество бит на цвет
  size_t refresh_rate; //частота обновления монитора (0-default)
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Устройство вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class IOutput: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* GetName () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение списка видео-режимов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t GetModesCount () = 0;
    virtual void   GetModeDesc   (size_t mode_index, OutputModeDesc& mode_desc) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего видео-режима
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetCurrentMode (const OutputModeDesc&) = 0;
    virtual void GetCurrentMode (OutputModeDesc&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление гамма-коррекцией
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetGammaRamp (const Color3f table [256]) = 0;
    virtual void GetGammaRamp (Color3f table [256]) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Адаптер отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class IAdapter: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя адаптера / путь к модулю / описание
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* GetName        () = 0;
    virtual const char* GetPath        () = 0;
    virtual const char* GetDescription () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных устройств вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t   GetOutputsCount () = 0;
    virtual IOutput* GetOutput       (size_t index) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод обмена заднего и переднего буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum SwapMethod
{
  SwapMethod_Discard, //состояние заднего буфера после обмена не определено
  SwapMethod_Flip,    //обмен местами заднего и переднего буфера
  SwapMethod_Copy,    //копирование заднего буфера в передний

  SwapMethod_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор буфера кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
struct FrameBufferDesc
{
  size_t width;        //ширина буферов
  size_t height;       //высота буферов
  size_t color_bits;   //количество бит на цвет
  size_t alpha_bits;   //количество бит на альфу
  size_t depth_bits;   //количество бит на глубину
  size_t stencil_bits; //количество бит на шаблон
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор цепочки обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
struct SwapChainDesc
{
  FrameBufferDesc frame_buffer;  //дескриптор буфера кадра
  size_t          samples_count; //количество sample'ов (0=multisample off)
  size_t          buffers_count; //количество буферов в цепочке обмена (0=default 2 buffers)
  SwapMethod      swap_method;   //метод обмена заднего и переднего буферов  
  bool            vsync;         //необходимо ли использовать VSync
  bool            fullscreen;    //необходимо ли переводить устройство в FullScreen mode
  const void*     window_handle; //дескриптор окна отрисовки
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цепочка обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
class ISwapChain: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void GetDesc (SwapChainDesc&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение адаптера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IAdapter* GetAdapter () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение устройства вывода с максимальным размером области перекрытия
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IOutput* GetContainingOutput () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен текущего заднего буфера и переднего буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Present () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / взятие состояния full-screen mode
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetFullscreenState (bool state) = 0;
    virtual bool GetFullscreenState () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Драйвер отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class IDriver: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* GetDescription () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных адаптеров
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t    GetAdaptersCount () = 0;
    virtual IAdapter* GetAdapter       (size_t index) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание адаптера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IAdapter* CreateAdapter (const char* name, const char* path, const char* init_string = "") = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание цепочки обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ISwapChain* CreateSwapChain (size_t               prefered_adapters_count, //количество предпочтительных адаптеров
                                         IAdapter**           prefered_adapters,       //массив предпочтительных адаптеров
                                         const SwapChainDesc& desc) = 0;               //дескриптор цепочки обмена

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание устройства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IDevice* CreateDevice (ISwapChain* swap_chain, const char* init_string = "") = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка функции отладочного протоколирования драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void               SetDebugLog (const LogFunction&) = 0;
    virtual const LogFunction& GetDebugLog () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер драйверов отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class DriverManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация драйверов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterDriver       (const char* name, IDriver* driver);
    static void UnregisterDriver     (const char* name);
    static void UnregisterAllDrivers ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск драйвера по имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    static IDriver* FindDriver (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание адаптера
///////////////////////////////////////////////////////////////////////////////////////////////////
    static IAdapter* CreateAdapter (const char* driver_name, const char* adapter_name, const char* path, const char* init_string = "");

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание цепочки обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
    static ISwapChain* CreateSwapChain (const char*          driver_mask,      //маска имени драйвера
                                        const char*          adapter_mask,     //маска имени адаптера
                                        const SwapChainDesc& swap_chain_desc); //дескриптор цепочки обмена

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание устройства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void CreateSwapChainAndDevice (const char*          driver_mask,     //маска имени драйвера
                                          const char*          adapter_mask,    //маска имени адаптера
                                          const SwapChainDesc& swap_chain_desc, //дескриптор цепочки обмена
                                          const char*          init_string,     //строка инициализации
                                          ISwapChain*&         out_swap_chain,  //результирующая цепочка обмена
                                          IDevice*&            out_device);     //результирующее устройство отрисовки
    static void CreateSwapChainAndDevice (const char*               driver_mask,     //маска имени драйвера
                                          const char*               adapter_mask,    //маска имени адаптера
                                          const SwapChainDesc&      swap_chain_desc, //дескриптор цепочки обмена
                                          const char*               init_string,     //строка инициализации
                                          xtl::com_ptr<ISwapChain>& out_swap_chain,  //результирующая цепочка обмена
                                          xtl::com_ptr<IDevice>&    out_device);     //результирующее устройство отрисовки
};

}

}

#endif
