#ifndef RENDER_LOW_LEVEL_COMMON_HEADER
#define RENDER_LOW_LEVEL_COMMON_HEADER

#include <cstddef>
#include <xtl/functional_fwd>

namespace render
{

namespace low_level
{

typedef unsigned long long UInt64;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Константы устройства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
const unsigned int DEVICE_VERTEX_BUFFER_SLOTS_COUNT   = 8; //количество слотов для размещения вершинных буферов
const unsigned int DEVICE_SAMPLER_SLOTS_COUNT         = 8; //количество слотов для размещения сэмплеров
const unsigned int DEVICE_CONSTANT_BUFFER_SLOTS_COUNT = 8; //количество слотов для размещения константных буферов
const unsigned int DEVICE_RENDER_TARGET_SLOTS_COUNT   = 8; //максимальное количество целей рендеринга
const unsigned int DEVICE_STREAM_OUTPUT_SLOTS_COUNT   = 4; //максимальное количество выходных потоков геометрии

///////////////////////////////////////////////////////////////////////////////////////////////////
///Функция протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef xtl::function<void (const char*)> LogFunction;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Матрица
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef float Matrix4f [4][4];

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвета
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Color3f
{
  float red, green, blue;  
};

struct Color4f
{
  float red, green, blue, alpha;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Прямоугольная область
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Rect
{
  int          x;      //абсцисса левого верхнего угла области
  int          y;      //ордината левого верхнего угла области
  unsigned int width;  //ширина области
  unsigned int height; //высота области
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Viewport: public Rect
{
  float  min_depth; //минимальная глубина [0;1]
  float  max_depth; //максимальная глубина [0;1]
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим сравнения
///////////////////////////////////////////////////////////////////////////////////////////////////
enum CompareMode
{
  CompareMode_AlwaysFail,   //результат сравнения всегда ложь
  CompareMode_AlwaysPass,   //результат сравнения всегда истина
  CompareMode_Equal,        //new_value == reference_value
  CompareMode_NotEqual,     //new_value != reference_value
  CompareMode_Less,         //new_value <  reference_value
  CompareMode_LessEqual,    //new_value <= reference_value
  CompareMode_Greater,      //new_value >  reference_value
  CompareMode_GreaterEqual, //new_value >= reference_value

  CompareMode_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим использования буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum UsageMode
{
  UsageMode_Default,  //тип буфера выбирается в соответствии с предпочтениями устройства отрисовки
  UsageMode_Static,   //созданный буфер не может быть изменён
  UsageMode_Dynamic,  //буфер может меняться каждый кадр
  UsageMode_Stream,   //буфер создан для обмена CPU<->GPU
  
  UsageMode_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги биндинга объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
enum BindFlag
{
  BindFlag_VertexBuffer   = 1,  //объект может быть присоединён как вершинный буфер
  BindFlag_IndexBuffer    = 2,  //объект может быть присоединён как индексный буфер
  BindFlag_ConstantBuffer = 4,  //объект может быть присоединён как константный буфер
  BindFlag_Texture        = 8,  //объект может быть присоединён как текстура
  BindFlag_RenderTarget   = 16, //объект может выступать в качестве целевого буфера отрисовки
  BindFlag_DepthStencil   = 32, //объект может выступать в качестве dpeth-stencil буфера отрисовки
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги доступа к объекту
///////////////////////////////////////////////////////////////////////////////////////////////////
enum AccessFlag
{
  AccessFlag_Read      = 1,                                 //доступ на чтение
  AccessFlag_Write     = 2,                                 //доступ на запись
  AccessFlag_ReadWrite = AccessFlag_Read | AccessFlag_Write //доступ на чтение и запись
};

}

}

#endif
