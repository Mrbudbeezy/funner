#ifndef RENDER_LOW_LEVEL_QUERY_HEADER
#define RENDER_LOW_LEVEL_QUERY_HEADER

#include <render/low_level/object.h>

namespace render
{

namespace low_level
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип запроса
///////////////////////////////////////////////////////////////////////////////////////////////////  
enum QueryType
{
  QueryType_Event,               //событие
  QueryType_Occlusion,           //количество нарисованных пикселей
  QueryType_OcclusionPredicate,  //был ли нарисован хотя бы один пиксель
  QueryType_PipelineStatistics,  //статистика конвейера
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание стастистики отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
struct PipelineStatisticsQueryDesc
{
  size_t state_changes;       //количество переключений состояний
  size_t draw_calls;          //количество вызовов Draw
  size_t draw_indexed_calls;  //количество вызовов DrawIndexed
  size_t primitives_count;    //количество примитивов
};

typedef size_t OcclusionQueryDesc;
typedef bool   OcclusionPredicateQueryDesc;
typedef bool   EventQueryDesc;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Запрос к устойству отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class IQuery: virtual public IObject
{
  public:    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип запроса
///////////////////////////////////////////////////////////////////////////////////////////////////  
    virtual QueryType GetType () = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение данных
///////////////////////////////////////////////////////////////////////////////////////////////////  
    virtual void GetData    (size_t size, void* data) = 0;
    virtual bool TryGetData (size_t size, void* data) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Предикат отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class IPredicate: virtual public IQuery {};

}

}

#endif
