#ifndef RENDER_LOW_LEVEL_QUERY_HEADER
#define RENDER_LOW_LEVEL_QUERY_HEADER

#include <render/low_level/object.h>

namespace render
{

namespace low_level
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Запрос к устойству отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class IQuery: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Указание границ запроса
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Begin () = 0;
    virtual void End   () = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Готов ли результат (вызов последующих синхронных операций может остановить текущую нить)
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool IsResultAvailable () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание стастистики отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
struct StatisticsQueryDesc
{
  size_t state_changes;       //количество переключений состояний
  size_t draw_calls;          //количество вызовов Draw
  size_t draw_indexed_calls;  //количество вызовов DrawIndexed
  size_t primitives_count;    //количество примитивов
    //дополнить!!!
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Запрос стастистики отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class IStatisticsQuery: virtual public IQuery
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение статистики
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void GetDesc (StatisticsQueryDesc&) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Предикат отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class IPredicate: virtual public IQuery
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение результата отрисовки
///  (операция может привести к остановке выполнения нити до завершения отрисовки)
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool GetResult () = 0;
};

}

}

#endif
