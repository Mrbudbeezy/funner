#ifndef RENDER_LOW_LEVEL_QUERY_HEADER
#define RENDER_LOW_LEVEL_QUERY_HEADER

#include <render/low_level/object.h>

namespace render
{

namespace low_level
{

//forwards
class IDeviceContext;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип запроса
///////////////////////////////////////////////////////////////////////////////////////////////////  
enum QueryType
{
  QueryType_Event,                   //событие
  QueryType_Occlusion,               //количество нарисованных пикселей
  QueryType_OcclusionPredicate,      //был ли нарисован хотя бы один пиксель
  QueryType_PipelineStatistics,      //статистика конвейера
  QueryType_StreamOutput0Statistics, //статистика потокового вывода вершин в поток 0
  QueryType_StreamOutput1Statistics, //статистика потокового вывода вершин в поток 1
  QueryType_StreamOutput2Statistics, //статистика потокового вывода вершин в поток 2
  QueryType_StreamOutput3Statistics, //статистика потокового вывода вершин в поток 3
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание стастистики отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
struct PipelineStatisticsQueryDesc
{
  size_t state_changes;       //количество переключений состояний
  size_t draw_calls;          //количество вызовов Draw
  size_t draw_indexed_calls;  //количество вызовов DrawIndexed
  size_t primitives_count;    //количество примитивов
};

typedef size_t OcclusionQueryDesc;
typedef bool   OcclusionPredicateQueryDesc;
typedef bool   EventQueryDesc;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание стастистики потокового вывода вершин
///////////////////////////////////////////////////////////////////////////////////////////////////
struct StreamOutputStatisticsQueryDesc
{
  UInt64 written_primitives_count;           //количество записанных примитивов
  UInt64 required_storage_primitives_count;  //требуемое для записи количество примитивов
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Запрос к устойству отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class IQuery: virtual public IObject
{
  public:    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип запроса
///////////////////////////////////////////////////////////////////////////////////////////////////  
    virtual QueryType GetType () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Указание границ запроса
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Begin (IDeviceContext* context = 0) = 0;
    virtual void End   (IDeviceContext* context = 0) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void GetData    (size_t size, void* data, IDeviceContext* context = 0) = 0;
    virtual bool TryGetData (size_t size, void* data, IDeviceContext* context = 0) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Предикат отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class IPredicate: virtual public IQuery {};

}

}

#endif
