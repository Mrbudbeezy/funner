#ifndef RENDER_LOW_LEVEL_ARRAY_HEADER
#define RENDER_LOW_LEVEL_ARRAY_HEADER

#include <cstddef>

namespace render
{

namespace low_level
{

//forward declarations
template <class T, size_t N> class IArray;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Массив фиксированного размера
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T, size_t N> class Array
{
  public:
    enum { MaxElementsCount = N };

    typedef T ValueType;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Array ();
    Array (size_t count, const T* items);
    Array (const IArray<T>&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Assign (size_t count, const T* items);
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество элементов / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size    () const;
    void   Resize  (size_t count); //doesn't initialize items data
    bool   IsEmpty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение элемента
///////////////////////////////////////////////////////////////////////////////////////////////////
          T& operator [] (size_t index);
    const T& operator [] (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const Array& a) const;
    bool operator != (const Array& a) const;

  private:
    size_t count;     //количество элементов
    T      items [N]; //элементы
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Массив фиксированного размера
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class IArray
{
  public:
    typedef T ValueType;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество элементов / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size    () const;
    bool   IsEmpty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение элемента
///////////////////////////////////////////////////////////////////////////////////////////////////
    T operator [] (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование в массив
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <size_t N> void CopyTo (Array<T, N>& result) const;

  protected:
    virtual ~IArray () {}

  protected:
    struct Selector {};

  private:
    virtual size_t SizeCore   (Selector dummy) const = 0;
    virtual T      ItemCore   (size_t index, Selector dummy) const = 0;
    virtual size_t CopyToCore (size_t items_count, T* items, Selector dummy) const = 0;
};

#include <render/low_level/detail/array.inl>

}

}

#endif
