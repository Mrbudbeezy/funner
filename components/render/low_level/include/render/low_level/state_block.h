#ifndef RENDER_LOW_LEVEL_STATE_BLOCK_HEADER
#define RENDER_LOW_LEVEL_STATE_BLOCK_HEADER

#include <render/low_level/common.h>
#include <render/low_level/object.h>

namespace render
{

namespace low_level
{

//forward declarations
class IDeviceContext;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Группа флагов маски состояния устройства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
enum StateBlockGroup
{
  StateBlockGroup_InputStage,      //флаги входного уровня устройства отрисовки
  StateBlockGroup_ShaderStage,     //флаги уровня шейдинга устройства отрисовки
  StateBlockGroup_RasterizerStage, //флаги уровня растеризации устройства отрисовки
  StateBlockGroup_OutputStage,     //флаги выходного уровня устройства отрисовки

  StateBlockGroup_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Маска состояния устройства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
struct StateBlockMask
{
///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги маски
///////////////////////////////////////////////////////////////////////////////////////////////////
  bool is_layout;
  bool is_vertex_buffers [DEVICE_VERTEX_BUFFER_SLOTS_COUNT];
  bool is_index_buffer;
  bool ss_program;
  bool ss_constant_buffers [DEVICE_CONSTANT_BUFFER_SLOTS_COUNT];
  bool ss_program_parameters_layout;
  bool ss_samplers [DEVICE_SAMPLER_SLOTS_COUNT];
  bool ss_textures [DEVICE_SAMPLER_SLOTS_COUNT];
  bool rs_state;
  bool rs_viewports;
  bool rs_scissors;
  bool os_blend_state;
  bool os_depth_stencil_state;
  bool os_render_target_views;
  bool os_depth_stencil_view;
  bool predication;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
  struct Uninitialized {};

  StateBlockMask ();
  StateBlockMask (Uninitialized) {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Групповая установка
///////////////////////////////////////////////////////////////////////////////////////////////////
  void Set   (StateBlockGroup group, bool value);
  void Set   (StateBlockGroup group);
  void Clear (StateBlockGroup group);
  void Set   ();
  void Clear ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Хэш
///////////////////////////////////////////////////////////////////////////////////////////////////
  size_t Hash () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Покомопонентные логические операции
///////////////////////////////////////////////////////////////////////////////////////////////////
  StateBlockMask  operator ~  () const;
  StateBlockMask& operator |= (const StateBlockMask&);
  StateBlockMask& operator &= (const StateBlockMask&);
  StateBlockMask& operator ^= (const StateBlockMask&);
  StateBlockMask  operator |  (const StateBlockMask&) const;
  StateBlockMask  operator &  (const StateBlockMask&) const;
  StateBlockMask  operator ^  (const StateBlockMask&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение
///////////////////////////////////////////////////////////////////////////////////////////////////
  bool operator == (const StateBlockMask&) const;
  bool operator != (const StateBlockMask&) const;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние устройства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class IStateBlock: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение маски блока
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void GetMask (StateBlockMask&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Захват настроек устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Capture (IDeviceContext* context) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Применение настроек устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Apply (IDeviceContext* context) = 0;
};

}

}

#endif
