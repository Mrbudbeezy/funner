#ifndef RENDER_LOW_LEVEL_BUFFER_HEADER
#define RENDER_LOW_LEVEL_BUFFER_HEADER

#include <render/low_level/object.h>
#include <render/low_level/common.h>

namespace render
{

namespace low_level
{

//forwards
class IDeviceContext;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
struct BufferDesc
{
  size_t    size;         //размер буфера
  UsageMode usage_mode;   //режим использования буфера
  size_t    bind_flags;   //флаги биндинга буфера
  size_t    access_flags; //флаги доступа к буферу
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class IBuffer: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void GetDesc (BufferDesc&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение / запись из буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetData (size_t offset, size_t size, const void* data, IDeviceContext* context = 0) = 0;
    virtual void GetData (size_t offset, size_t size, void* data, IDeviceContext* context = 0) = 0;
};

}

}

#endif
