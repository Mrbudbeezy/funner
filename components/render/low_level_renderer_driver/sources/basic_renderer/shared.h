#ifndef RENDER_MID_LEVEL_LOW_LEVEL_DRIVER_BASIC_RENDERER_SHARED_HEADER
#define RENDER_MID_LEVEL_LOW_LEVEL_DRIVER_BASIC_RENDERER_SHARED_HEADER

#include <stl/string>

#include <xtl/common_exceptions.h>
#include <xtl/shared_ptr.h>

#include <common/singleton.h>

#include <media/image.h>

#include <render/low_level/utils.h>

#include <render/mid_level/low_level_driver.h>

#include <shared/basic_renderer.h>

namespace render
{

namespace mid_level
{

namespace low_level_driver
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация очищающего кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
class ClearFrame: virtual public IClearFrame, public BasicFrame
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ClearFrame ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги очистки кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetFlags (size_t clear_flags);
    size_t GetFlags () { return clear_flags; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры очистки буфера цвета
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetColor (const math::vec4f& color);
    void GetColor (math::vec4f& color);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры очистки буфера попиксельного отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          SetDepthValue   (float depth_value);
    void          SetStencilIndex (unsigned char stencil_index);
    float         GetDepthValue   () { return clear_depth_value; }
    unsigned char GetStencilIndex () { return clear_stencil_index; }

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void DrawCore (render::low_level::IDevice*);

  private:
    size_t                     clear_flags;
    render::low_level::Color4f clear_color;
    float                      clear_depth_value;
    unsigned char              clear_stencil_index;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отладочный драйвер системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Driver: virtual public IDriver
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Driver  ();
    ~Driver ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetDescription ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных систем визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      GetRenderersCount ();    
    const char* GetRendererName   (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание системы визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    IRenderer* CreateRenderer (const char* name);    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация систем рендернинга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RegisterRenderer (const char*             name,
                           low_level::IDevice*     device,
                           size_t                  swap_chains_count,
                           low_level::ISwapChain** swap_chains);

    void UnregisterRenderer     (const char* name);
    void UnregisterAllRenderers ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  () {}
    void Release () {}

  private:
    void UnregisterDriver ();

  private:
    struct RendererEntry;

    typedef xtl::shared_ptr<RendererEntry> RendererEntryPtr;
    typedef stl::vector<RendererEntryPtr>  RendererEntries;

  private:
    RendererEntries renderer_entries;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовая система рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class RendererDispatch: virtual public renderer2d::IRenderer, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RendererDispatch  (low_level::IDevice* device, size_t swap_chains_count, low_level::ISwapChain** swap_chains);
    ~RendererDispatch ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetDescription ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество буферов кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetFrameBuffersCount ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение буфера цвета и буфера попиксельного отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    IRenderTarget* GetColorBuffer        (size_t frame_buffer_index);
    IRenderTarget* GetDepthStencilBuffer (size_t frame_buffer_index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    IRenderTarget* CreateDepthStencilBuffer (size_t width, size_t height);
    IRenderTarget* CreateRenderBuffer       (size_t width, size_t height);
    IClearFrame*   CreateClearFrame         ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление кадра в список отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddFrame (IFrame*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество кадров / позиция вставки следующего кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t FramesCount      ();
    void   SetFramePosition (size_t position);
    size_t GetFramePosition ();    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конец отрисовки / сброс отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void DrawFrames   ();
    void CancelFrames ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    render::mid_level::renderer2d::ITexture*   CreateTexture   (const media::Image& image);
    render::mid_level::renderer2d::ITexture*   CreateTexture   (size_t width, size_t height, media::PixelFormat pixel_format);
    render::mid_level::renderer2d::IPrimitive* CreatePrimitive ();
    render::mid_level::renderer2d::IFrame*     CreateFrame     ();

  private:
    struct FrameBuffer;

    typedef xtl::intrusive_ptr<BasicFrame> FramePtr;
    typedef stl::list<FramePtr>            FrameList;
    typedef stl::vector<FrameBuffer>       FrameBufferArray;
    typedef xtl::com_ptr<render::low_level::IDevice> DevicePtr;  

  private:
    DevicePtr           device;
    FrameBufferArray    frame_buffers;  //массив буферов кадра
    FrameList           frames;         //массив кадров
    FrameList::iterator frame_position; //текущая позиция вставки кадров
    size_t              frames_count;   //количество кадров
    Renderer2D          renderer2d;     //2д рендерер
};

}

}

}

#endif

