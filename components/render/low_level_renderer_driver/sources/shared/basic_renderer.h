#ifndef RENDER_MID_LEVEL_LOW_LEVEL_DRIVER_BASIC_RENDERER_HEADER
#define RENDER_MID_LEVEL_LOW_LEVEL_DRIVER_BASIC_RENDERER_HEADER

#include <stl/vector>

#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>

#include <render/low_level/device.h>
#include <render/low_level/driver.h>

#include <render/mid_level/driver.h>

#ifdef _MSC_VER
  #pragma warning (disable : 4250) //'class1' : inherits 'class2::member' via dominance
#endif

namespace render
{

namespace mid_level
{

namespace low_level_driver
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый объект
///////////////////////////////////////////////////////////////////////////////////////////////////
class Object: virtual public IObject, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  ();    
    void Release ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип целевого буфера отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
enum RenderTargetType
{
  RenderTargetType_Color,        //буфер цвета
  RenderTargetType_DepthStencil, //буфер попиксельного отсечения
  
  RenderTargetType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Целевой буфер отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderTarget: virtual public IRenderTarget, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTarget (render::low_level::IView* render_target_view, RenderTargetType type);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип целевого буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTargetType GetType () { return type; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetWidth  ();
    size_t GetHeight ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование образа текстуры в картинку
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CaptureImage (media::Image&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение View
///////////////////////////////////////////////////////////////////////////////////////////////////
    render::low_level::IView* GetView () { return render_target_view.get (); } 
  
  private:
    typedef xtl::com_ptr<render::low_level::IView> ViewPtr;

  private:
    ViewPtr          render_target_view;
    RenderTargetType type;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовая реализация кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
class BasicFrame: virtual public IFrame, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    BasicFrame ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Целевые буферы отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void           SetRenderTargets      (IRenderTarget* render_target, IRenderTarget* depth_stencil_target);
    IRenderTarget* GetRenderTarget       (); //целевой буфер цвета
    IRenderTarget* GetDepthStencilTarget (); //целевой буфер попиксельного отсечения

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetViewport (const render::mid_level::Viewport&);
    void GetViewport (render::mid_level::Viewport&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Визуализация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Draw (render::low_level::IDevice* device);

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void BindViewport (render::low_level::IDevice* device);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void DrawCore (render::low_level::IDevice* device) = 0;

  private:
    typedef xtl::com_ptr<RenderTarget> RenderTargetPtr;

  private:
    RenderTargetPtr             render_target;
    RenderTargetPtr             depth_stencil_target;
    render::low_level::Viewport viewport;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовая система рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class BasicRenderer: virtual public IRenderer, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    BasicRenderer  (low_level::IDevice* device, size_t swap_chains_count, low_level::ISwapChain** swap_chains);
    ~BasicRenderer ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetDescription ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество буферов кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetFrameBuffersCount ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение буфера цвета и буфера попиксельного отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    IRenderTarget* GetColorBuffer        (size_t frame_buffer_index);
    IRenderTarget* GetDepthStencilBuffer (size_t frame_buffer_index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    IRenderTarget* CreateDepthStencilBuffer (size_t width, size_t height);
    IRenderTarget* CreateRenderBuffer       (size_t width, size_t height);
    IClearFrame*   CreateClearFrame         ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление кадра в список отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddFrame (IFrame*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конец отрисовки / сброс отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void DrawFrames   ();
    void CancelFrames ();

  protected:
    typedef xtl::com_ptr<render::low_level::IDevice> DevicePtr;  

    DevicePtr device;

  private:
    struct FrameBuffer;

    typedef xtl::intrusive_ptr<BasicFrame> FramePtr;
    typedef stl::vector<FramePtr>          FrameArray;
    typedef stl::vector<FrameBuffer>       FrameBufferArray;

  private:
    FrameBufferArray frame_buffers; //массив буферов кадра
    FrameArray       frames;        //массив кадров
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
IRenderer* create_renderer2d (low_level::IDevice* device, size_t swap_chains_count, low_level::ISwapChain** swap_chains);

}

}

}

#endif
