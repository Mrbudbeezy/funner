#ifndef RENDER_MID_LEVEL_LOW_LEVEL_DRIVER_HEADER
#define RENDER_MID_LEVEL_LOW_LEVEL_DRIVER_HEADER

namespace render
{

namespace low_level
{

//forward declarations
class IDevice;
class ISwapChain;

}

namespace mid_level
{

//forward declaration
class IDriver;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Драйвер низкоуровневой системы рендернинга
///////////////////////////////////////////////////////////////////////////////////////////////////
class LowLevelDriver
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const char* Name ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
    static IDriver* Driver ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация систем рендернинга
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterRenderer       (const char* name, low_level::IDevice* device, low_level::ISwapChain* swap_chain);
    static void UnregisterRenderer     (const char* name);
    static void UnregisterAllRenderers ();
};

}

}

#endif
