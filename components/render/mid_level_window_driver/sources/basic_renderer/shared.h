#ifndef RENDER_MID_WINDOW_DRIVER_BASIC_RENDERER_SHARED_HEADER
#define RENDER_MID_WINDOW_DRIVER_BASIC_RENDERER_SHARED_HEADER

#include <stl/set>
#include <stl/string>

#include <xtl/any.h>
#include <xtl/bind.h>
#include <xtl/connection.h>
#include <xtl/common_exceptions.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>
#include <xtl/string.h>
#include <xtl/trackable.h>

#include <common/parser.h>
#include <common/singleton.h>

#include <media/image.h>

#include <render/low_level/utils.h>

#include <render/mid_level/low_level_renderer.h>
#include <render/mid_level/window_driver.h>

#include <shared/basic_renderer.h>

namespace render
{

namespace mid_level
{

namespace window_driver
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация очищающего кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
class ClearFrame: virtual public IClearFrame, public BasicFrame
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ClearFrame ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги очистки кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetFlags (size_t clear_flags);
    size_t GetFlags () { return clear_flags; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры очистки буфера цвета
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetColor (const math::vec4f& color);
    void GetColor (math::vec4f& color);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры очистки буфера попиксельного отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          SetDepthValue   (float depth_value);
    void          SetStencilIndex (unsigned char stencil_index);
    float         GetDepthValue   () { return clear_depth_value; }
    unsigned char GetStencilIndex () { return clear_stencil_index; }

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void DrawCore (render::low_level::IDevice*);

  private:
    size_t                     clear_flags;
    render::low_level::Color4f clear_color;
    float                      clear_depth_value;
    unsigned char              clear_stencil_index;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отладочный драйвер системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class Driver: virtual public IDriver
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Driver  ();
    ~Driver ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetDescription ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных систем визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      GetRenderersCount ();    
    const char* GetRendererName   (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание системы визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    IRenderer* CreateRenderer (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Предварительная регистрация системы рендеринга (для конфигурирования)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RegisterRenderer (const char* renderer_name, const common::ParseNode& configuration_node);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация окон
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RegisterWindow       (const char* renderer_name, syslib::Window& window, const common::ParseNode& configuration_node);
    void UnregisterWindow     (const char* renderer_name, syslib::Window& window);
    void UnregisterAllWindows (const char* renderer_name);
    void UnregisterAllWindows ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  () {}
    void Release () {}

  private:
    class RendererEntry;
    
  private:
    typedef xtl::intrusive_ptr<RendererEntry> RendererEntryPtr;
    typedef stl::vector<RendererEntryPtr>     RendererEntries;

  private:
    RendererEntries renderer_entries;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буфер кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
class FrameBuffer: virtual public IFrameBuffer, public Object, public xtl::trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FrameBuffer  (low_level::IDevice& device, low_level::ISwapChain& in_swap_chain);
    ~FrameBuffer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение буфера цвета и буфера попиксельного отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    IRenderTarget* GetColorBuffer        ();
    IRenderTarget* GetDepthStencilBuffer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вызов показа цепи обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Present () { swap_chain->Present (); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка размера / смещения области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetSize           (size_t width, size_t height);
    void SetViewportOffset (int x, int y);

  private:
    typedef xtl::intrusive_ptr<RenderTarget>    RenderTargetPtr;
    typedef xtl::com_ptr<low_level::ISwapChain> SwapChainPtr;

  private:
    RenderTargetPtr color_buffer;         //буфер цвета
    RenderTargetPtr depth_stencil_buffer; //буфер попиксельного отсечения
    SwapChainPtr    swap_chain;           //цепь обмена
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Диспетчеризация вызовов системы двумерного рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class IRenderer2dDispatch: virtual public renderer2d::IRenderer
{
  public:
    virtual render::mid_level::renderer2d::IFrame* CreateFrame   () { return CreateFrame2d (); }
    virtual render::mid_level::renderer2d::IFrame* CreateFrame2d () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Диспетчеризация вызовов системы низкоуровневого рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class ILowLevelRendererDispatch: virtual public ILowLevelRenderer
{
  public:
    virtual render::mid_level::ILowLevelFrame* CreateFrame () { return CreateLowLevelFrame (); }
    virtual render::mid_level::ILowLevelFrame* CreateLowLevelFrame () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовая система рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class RendererDispatch: virtual public IRenderer2dDispatch, virtual public ILowLevelRendererDispatch, public Object, public xtl::trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RendererDispatch  (low_level::IDevice& device);
    ~RendererDispatch ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация/удаление окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddFrameBuffer    (FrameBuffer*, size_t tag);
    void RemoveFrameBuffer (FrameBuffer*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetDescription ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество буферов кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t        GetFrameBuffersCount ();
    IFrameBuffer* GetFrameBuffer       (size_t index);
    size_t        GetFrameBufferTag    (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    IRenderTarget* CreateDepthStencilBuffer (size_t width, size_t height);
    IRenderTarget* CreateRenderBuffer       (size_t width, size_t height);
    IClearFrame*   CreateClearFrame         ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление кадра в список отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddFrame (IFrame*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество кадров / позиция вставки следующего кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t FramesCount      ();
    void   SetFramePosition (size_t position);
    size_t GetFramePosition ();    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конец отрисовки / сброс отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void DrawFrames   ();
    void CancelFrames ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события системы рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachListener (IRendererListener*);
    void DetachListener (IRendererListener*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    render::mid_level::renderer2d::ITexture*   CreateTexture   (const media::Image& image);
    render::mid_level::renderer2d::ITexture*   CreateTexture   (const media::CompressedImage& image);
    render::mid_level::renderer2d::ITexture*   CreateTexture   (size_t width, size_t height, PixelFormat pixel_format);
    render::mid_level::renderer2d::IPrimitive* CreatePrimitive ();    
    render::mid_level::renderer2d::IFrame*     CreateFrame2d   ();        
    render::mid_level::ILowLevelFrame*         CreateLowLevelFrame ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void FrameBufferCreateNotify  (IFrameBuffer* frame_buffer, size_t tag);
    void FrameBufferDestroyNotify (IFrameBuffer* frame_buffer);
    void FrameBufferUpdateNotify  (IFrameBuffer* frame_buffer);
    void FrameBufferResizeNotify  (IFrameBuffer* frame_buffer, size_t width, size_t height);

  private:
    struct FrameBufferDesc
    {
      FrameBuffer* frame_buffer;
      size_t       tag;
      
      FrameBufferDesc (FrameBuffer* in_frame_buffer, size_t in_tag)
        : frame_buffer (in_frame_buffer)
        , tag (in_tag)
      {
      }        
    };
  
    typedef xtl::intrusive_ptr<BasicFrame>           FramePtr;
    typedef stl::list<FramePtr>                      FrameList;
    typedef stl::vector<FrameBufferDesc>             FrameBufferArray;
    typedef xtl::com_ptr<render::low_level::IDevice> DevicePtr;  
    typedef stl::auto_ptr<Renderer2D>                Renderer2DPtr;
    typedef stl::auto_ptr<LowLevelRenderer>          LowLevelRendererPtr;
    typedef stl::set<IRendererListener*>             ListenerSet;

  private:
    DevicePtr           device;             //устройство вывода
    FrameBufferArray    frame_buffers;      //массив буферов кадра
    FrameList           frames;             //массив кадров
    FrameList::iterator frame_position;     //текущая позиция вставки кадров
    size_t              frames_count;       //количество кадров
    Renderer2DPtr       renderer2d;         //2д рендерер
    LowLevelRendererPtr low_level_renderer; //низкоуровневая система визуализации
    ListenerSet         listeners;          //слушатели событий
};

}

}

}

#endif

