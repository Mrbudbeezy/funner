#ifndef RENDER_MID_WINDOW_DRIVER_LOW_LEVEL_RENDERER_SHARED_HEADER
#define RENDER_MID_WINDOW_DRIVER_LOW_LEVEL_RENDERER_SHARED_HEADER

#include <render/low_level/utils.h>

#include <shared/basic_renderer.h>

namespace render
{

namespace mid_level
{

namespace window_driver
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Кадр системы рендеринга, работающий через render::low_level::IDevice (для тестов)
///////////////////////////////////////////////////////////////////////////////////////////////////
class LowLevelFrame: virtual public ILowLevelFrame, public BasicFrame
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    LowLevelFrame  ();
    ~LowLevelFrame ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка интерфейса обратного вызова
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetCallback (IDrawCallback*);
    
  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация визуализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void DrawCore (render::low_level::IDevice* device, render::low_level::IDeviceContext* device_context);

  private:
    LowLevelFrame (const LowLevelFrame&); //no impl
    LowLevelFrame& operator = (const LowLevelFrame&); //no impl

  private:
    IDrawCallback* draw_callback; //интерфейс обратного вызова визуализатора
};

}

}

}

#endif
