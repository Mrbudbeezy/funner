#ifndef RENDER_SYSTEM_HEADER
#define RENDER_SYSTEM_HEADER

#include <stl/auto_ptr.h>
#include <xtl/functional_fwd>

namespace render
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Функтор создания динамической текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef xtl::function<Texture (low_level::IDevice& device, const char* name)> DynamicTextureCreateFunction;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Опция рендера
///////////////////////////////////////////////////////////////////////////////////////////////////
class Option
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя опции
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* Name () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / чтение значения
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void        SetValue (const char* value);
    virtual const char* Value () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение допустимых значений
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t      PossibleValuesCount () const;
    virtual const char* PossibleValue       (size_t index) const;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рендер
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderSystem
{
  public:  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конфигурирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    static size_t          OptionsCount    ();
    static render::Option& Option          (size_t index);
    static render::Option& Option          (const char* name);
    static int             FindOptionIndex (const char* name); //no throw, return -1 if fail
    static void            SetOptionValue  (const char* name, const char* value);
    static const char*     OptionValue     (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оповещение об обновлении динамических ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Invalidate (media::Image&); //???
    static void Invalidate (media::Material&);
//    static void Invalidate (media::Font&);
    static void Invalidate (media::IndexBuffer&);
    static void Invalidate (media::VertexBuffer&);
    static void Invalidate (media::VertexStream&);
    static void Invalidate (media::Mesh&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация функций создания динамических текстур
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterDynamicTexture       (const char* texture_name, const DynamicTextureCreateFunction& creater);
    static void UnregisterDynamicTexture     (const char* texture_name);
    static void UnregisterAllDynamicTextures ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с кэшем
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Prefetch     ();
    static void Flush        ();
    static void SetAutoFlush (bool state);
    static bool IsAutoFlush  ();
};

}

#endif
