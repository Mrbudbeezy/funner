#ifndef RENDER_RENDER_TARGET_HEADER
#define RENDER_RENDER_TARGET_HEADER

namespace render
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Целевой буфер отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderTarget
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
     RenderTarget  (syslib::Window& window);
     RenderTarget  (Texture& texture); //????политика копирования???
     ~RenderTarget ();  
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры целевого буфера отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Width  () const;
    size_t Height () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры целевого буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t ColorBits   () const;
    size_t AlphaBits   () const;
    size_t DepthBits   () const;
    size_t StencilBits () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление областей вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddViewport        (const Viewport&);
    void   RemoveViewport     (size_t viewport_index);
    void   RemoveAllViewports ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение порядка следования областей вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void MoveViewport  (size_t old_viewport_index, size_t new_viewport_index);
    void SwapViewports (size_t viewport_index1, size_t viewport_index2);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор областей вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t          ViewportsCount () const;
    const Viewport& Viewport       (size_t viewport_index) const;
          Viewport& Viewport       (size_t viewport_index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цвет очистки буфера отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetBackgroundColor (const math::vec4f& color);
    const math::vec4f& BackgroundColor    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выбор буферов, автоматически очищаемых при каждой перерисовке
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetAutoClearBuffers (size_t clear_flags);
    size_t AutoClearBuffers    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Захват изображения (screen-shot)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CaptureImage (const char* file_name);
    void CaptureImage (media::Image&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление целевого буфера отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (RenderTarget&);

  private:
      //???политика копирования

    RenderTarget (const RenderTarget&); //no impl
    RenderTarget& operator = (const RenderTarget&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (RenderTarget&, RenderTarget&);

}

#endif
