///////////////////////////////////////////////////////////////////////////////////////////////////
///Исходный константный буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class SourceConstantBuffer: virtual public IBuffer, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SourceConstantBuffer (const BufferDesc&, const void*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (BufferDesc&);

    UsageMode GetUsageMode () const { return desc.usage_mode; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение / запись из буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetData (size_t offset, size_t size, const void* data, IDeviceContext*);
    void GetData (size_t offset, size_t size, void* data, IDeviceContext*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Указатель на данные буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    const void* GetDataPointer () const { return buffer.data (); }
    size_t      GetDataSize    () const { return buffer.size (); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Хэш данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetHash () const;

  private:
    xtl::uninitialized_storage<char> buffer;           //буфер в системной памяти
    BufferDesc                       desc;             //описание буфера
    mutable size_t                   hash;             //хэш
    mutable bool                     need_update_hash; //хэш требует обновления
};

typedef xtl::com_ptr<SourceConstantBuffer> SourceConstantBufferPtr;
