#ifndef RENDER_DX11_DRIVER_SHADER_STAGE_SHARED_HEADER
#define RENDER_DX11_DRIVER_SHADER_STAGE_SHARED_HEADER

#include <D3Dcommon.h>
#include <D3DX11async.h>

#include <stl/vector>

#include <xtl/function.h>
#include <xtl/ref.h>

#include <common/file.h>
#include <common/string.h>
#include <common/strlib.h>

#include <shared/error.h>
#include <shared/log.h>
#include <shared/shader_manager.h>

namespace render
{

namespace low_level
{

namespace dx11
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ShaderType
{
  ShaderType_Compute,
  ShaderType_Domain,
  ShaderType_Geometry,
  ShaderType_Hull,
  ShaderType_Pixel,
  ShaderType_Vertex,
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Шейдер
///////////////////////////////////////////////////////////////////////////////////////////////////
class Shader: public DeviceObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Shader  (ShaderType shader_type, const ShaderCode& shader_code);
    ~Shader ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderType GetShaderType () const { return type; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ID3D11DeviceChild& GetHandle () const { return *shader; }

  private:
    ShaderType       type;   //тип шейдера
    DxDeviceChildPtr shader; //объект шейдера
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Программа
///////////////////////////////////////////////////////////////////////////////////////////////////
class Program: virtual public IProgram, public DeviceObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Program  (const DeviceManager& device_manager);
    ~Program ();

  private:
    
};

}

}

}

#endif
