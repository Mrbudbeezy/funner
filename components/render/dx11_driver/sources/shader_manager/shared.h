#ifndef RENDER_DX11_DRIVER_SHADER_STAGE_SHARED_HEADER
#define RENDER_DX11_DRIVER_SHADER_STAGE_SHARED_HEADER

#include <D3Dcommon.h>
#include <D3DX11async.h>
#include <D3D11Shader.h>

#include <stl/hash_map>
#include <stl/vector>

#include <xtl/bind.h>
#include <xtl/function.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/ref.h>
#include <xtl/shared_ptr.h>

#include <common/file.h>
#include <common/hash.h>
#include <common/string.h>
#include <common/strlib.h>

#include <shared/error.h>
#include <shared/log.h>
#include <shared/input_layout.h>
#include <shared/shader_manager.h>

namespace render
{

namespace low_level
{

namespace dx11
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ShaderType
{
  ShaderType_Compute,
  ShaderType_Domain,
  ShaderType_Geometry,
  ShaderType_Hull,
  ShaderType_Pixel,
  ShaderType_Vertex,

  ShaderType_Num
};

typedef xtl::shared_ptr<ShaderCode> ShaderCodePtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание параметра шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ShaderParameter: public ProgramParameter {};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Лэйаут константного буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
class ConstantBufferLayout: public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ConstantBufferLayout  (ID3D11ShaderReflectionConstantBuffer& buffer);
    ~ConstantBufferLayout ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество параметров в буфере
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                 GetParamsCount () const { return params.size (); }
    const ShaderParameter* GetParams      () const { return params.empty () ? (ShaderParameter*)0 : &params [0]; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип буфера / размер буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    D3D11_CBUFFER_TYPE GetType () const { return type; }
    size_t             GetSize () const { return buffer_size; }

  private:
    ConstantBufferLayout (const ConstantBufferLayout&); //no implementation
    ConstantBufferLayout& operator = (const ConstantBufferLayout&); //no implementation

  private:
    typedef stl::vector<ShaderParameter> ShaderParameterArray;

  private:
    ShaderParameterArray params;      //параметры константного буфера
    common::StringArray  strings;     //строки с именами параметров
    D3D11_CBUFFER_TYPE   type;        //тип буфера
    size_t               buffer_size; //размер буфера
};

typedef xtl::intrusive_ptr<ConstantBufferLayout> ConstantBufferLayoutPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Шейдер
///////////////////////////////////////////////////////////////////////////////////////////////////
class Shader: public DeviceObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Shader  (ShaderType shader_type, const ShaderCodePtr& shader_code);
    ~Shader ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderType GetType () const { return type; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ID3D11DeviceChild& GetHandle () const { return *shader; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Код шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderCode& GetShaderCode () const { return *code; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление константных буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetConstantBuffersCount () const;
      

  private:
    ShaderType       type;   //тип шейдера
    DxDeviceChildPtr shader; //объект шейдера
    ShaderCodePtr    code;   //код шейдера
};

typedef xtl::com_ptr<Shader> ShaderPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека шейдеров
///////////////////////////////////////////////////////////////////////////////////////////////////
class ShaderLibrary: public DeviceObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderLibrary  (const DeviceManager& device_manager);
    ~ShaderLibrary ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderPtr CreateShader (const ShaderDesc& shader_desc, const LogFunction& error_log);

  private:
    void RemoveShaderByHash (size_t hash);

  private:
    typedef stl::hash_map<size_t, Shader*> ShaderMap;

  private:
    ShaderMap shaders; //шейдеры
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Программа
///////////////////////////////////////////////////////////////////////////////////////////////////
class Program: virtual public IProgram, public DeviceObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Program  (ShaderLibrary& library, size_t shaders_count, const ShaderDesc* shader_descs, const LogFunction& error_log);
    ~Program ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка программы в контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind (ID3D11DeviceContext& context);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание входного лэйаута
///////////////////////////////////////////////////////////////////////////////////////////////////
    DxInputLayoutPtr CreateInputLayout (const D3D11_INPUT_ELEMENT_DESC* descs, size_t descs_count);

  private:
    struct ShaderSlot
    {
      ShaderPtr          holder;
      ID3D11DeviceChild* shader;

      ShaderSlot () : shader () {}
    };

    template <class T, ShaderType Type> T* Get ();

  private:
    ShaderSlot shaders [ShaderType_Num]; //использованные шейдеры
};

}

}

}

#endif
