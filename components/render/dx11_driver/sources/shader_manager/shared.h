#ifndef RENDER_DX11_DRIVER_SHADER_STAGE_SHARED_HEADER
#define RENDER_DX11_DRIVER_SHADER_STAGE_SHARED_HEADER

#include <D3Dcommon.h>
#include <D3DX11async.h>
#include <D3D11Shader.h>
#include <D3Dcompiler.h>

#include <stl/hash_map>
#include <stl/vector>

#include <xtl/bind.h>
#include <xtl/function.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/ref.h>
#include <xtl/shared_ptr.h>
#include <xtl/uninitialized_storage.h>

#include <common/file.h>
#include <common/hash.h>
#include <common/string.h>
#include <common/strlib.h>

#include <render/low_level/helpers/program_parameters_layout.h>

#include <shared/error.h>
#include <shared/log.h>
#include <shared/input_layout.h>
#include <shared/shader_manager.h>

namespace render
{

namespace low_level
{

namespace dx11
{

using helpers::ProgramParameterGroup;

//forwards
class ShaderLibrary;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ShaderType
{
  ShaderType_Compute,
  ShaderType_Domain,
  ShaderType_Geometry,
  ShaderType_Hull,
  ShaderType_Pixel,
  ShaderType_Vertex,

  ShaderType_Num
};

typedef xtl::shared_ptr<ShaderCode> ShaderCodePtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание параметра шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ShaderParameter: public ProgramParameter {};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Лэйаут константного буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
class ConstantBufferLayout: public xtl::reference_counter, public xtl::trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ConstantBufferLayout  (ID3D11ShaderReflectionConstantBuffer& buffer);
    ~ConstantBufferLayout ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество параметров в буфере
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                 GetParamsCount () const { return params.size (); }
    const ShaderParameter* GetParams      () const { return params.empty () ? (ShaderParameter*)0 : &params [0]; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип буфера / размер буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    D3D11_CBUFFER_TYPE GetType () const { return type; }
    size_t             GetSize () const { return buffer_size; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение хэша
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetHash () const { return hash; }

  private:
    ConstantBufferLayout (const ConstantBufferLayout&); //no implementation
    ConstantBufferLayout& operator = (const ConstantBufferLayout&); //no implementation

  private:
    typedef stl::vector<ShaderParameter> ShaderParameterArray;

  private:
    ShaderParameterArray params;      //параметры константного буфера
    common::StringArray  strings;     //строки с именами параметров
    D3D11_CBUFFER_TYPE   type;        //тип буфера
    size_t               buffer_size; //размер буфера
    size_t               hash;        //хэш лэйаута для идентификации
};

typedef xtl::intrusive_ptr<ConstantBufferLayout> ConstantBufferLayoutPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Шейдер
///////////////////////////////////////////////////////////////////////////////////////////////////
class Shader: public DeviceObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Shader  (ShaderType shader_type, const ShaderCodePtr& shader_code, ShaderLibrary& library);
    ~Shader ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderType GetType () const { return type; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ID3D11DeviceChild& GetHandle () const { return *shader; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Код шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderCode& GetShaderCode () const { return *code; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление константных буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                  GetConstantBufferLayoutsCount () const { return buffer_layouts.size (); }
    ConstantBufferLayoutPtr GetConstantBufferLayout       (size_t index) const;

  private:
    typedef stl::vector<ConstantBufferLayoutPtr> BufferLayoutArray;

  private:
    ShaderType        type;           //тип шейдера
    DxDeviceChildPtr  shader;         //объект шейдера
    ShaderCodePtr     code;           //код шейдера
    BufferLayoutArray buffer_layouts; //лэйауты буферов
};

typedef xtl::com_ptr<Shader> ShaderPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека шейдеров
///////////////////////////////////////////////////////////////////////////////////////////////////
class ShaderLibrary: public DeviceObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderLibrary  (const DeviceManager& device_manager);
    ~ShaderLibrary ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderPtr CreateShader (const ShaderDesc& shader_desc, const LogFunction& error_log);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск лэйаута константного буфера по хэшу
///////////////////////////////////////////////////////////////////////////////////////////////////
    ConstantBufferLayoutPtr FindConstantBufferLayout (size_t hash) const; 

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление лэйаута константного буфера по хэшу
///////////////////////////////////////////////////////////////////////////////////////////////////
    ConstantBufferLayoutPtr AddConstantBufferLayout    (const ConstantBufferLayoutPtr& layout);
    void                    RemoveConstantBufferLayout (size_t hash);

  private:
    void RemoveShaderByHash (size_t hash);

  private:
    typedef stl::hash_map<size_t, Shader*>               ShaderMap;
    typedef stl::hash_map<size_t, ConstantBufferLayout*> BufferLayoutMap;

  private:
    ShaderMap       shaders;         //шейдеры
    BufferLayoutMap buffer_layouts;  //лэйауты константных буферов
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание буфера программы
///////////////////////////////////////////////////////////////////////////////////////////////////
class ProgramBufferLayout: public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ProgramBufferLayout (const ConstantBufferLayoutPtr& in_layout, ShaderType in_type, size_t in_slot)
      : layout (in_layout)
      , shader_type (in_type)
      , slot (in_slot)
    {
    }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ
///////////////////////////////////////////////////////////////////////////////////////////////////
    const ConstantBufferLayoutPtr& GetLayout () const { return layout; }
    ShaderType                     GetType   () const { return shader_type; }
    size_t                         GetSlot   () const { return slot; }

  private:
    ProgramBufferLayout (const ProgramBufferLayout&); //no implementation
    ProgramBufferLayout& operator = (const ProgramBufferLayout&); //no implementation

  private:
    ConstantBufferLayoutPtr layout;      //исходный лэйаут
    ShaderType              shader_type; //тип шейдера
    size_t                  slot;        //индекс слота
};

typedef xtl::intrusive_ptr<ProgramBufferLayout> ProgramBufferLayoutPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Программа
///////////////////////////////////////////////////////////////////////////////////////////////////
class Program: virtual public IProgram, public DeviceObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Program  (ShaderLibrary& library, size_t shaders_count, const ShaderDesc* shader_descs, const LogFunction& error_log);
    ~Program ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка программы в контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind (ID3D11DeviceContext& context);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание входного лэйаута
///////////////////////////////////////////////////////////////////////////////////////////////////
    DxInputLayoutPtr CreateInputLayout (const D3D11_INPUT_ELEMENT_DESC* descs, size_t descs_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление константных буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                     GetConstantBufferLayoutsCount () const { return buffer_layouts.size (); }
    const ProgramBufferLayout& GetConstantBufferLayout       (size_t index) const;

  private:
    struct ShaderSlot
    {
      ShaderPtr          holder;
      ID3D11DeviceChild* shader;

      ShaderSlot () : shader () {}
    };

    template <class T, ShaderType Type> T* Get ();

    typedef stl::vector<ProgramBufferLayoutPtr> BufferLayoutArray;

  private:
    ShaderSlot        shaders [ShaderType_Num]; //использованные шейдеры
    BufferLayoutArray buffer_layouts;           //лэйауты буферов
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Лэйаут входных параметров программы
///////////////////////////////////////////////////////////////////////////////////////////////////
class ProgramParametersLayout: public helpers::ProgramParametersLayout, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ProgramParametersLayout (const ProgramParametersLayoutDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск параметра
///////////////////////////////////////////////////////////////////////////////////////////////////
    const ProgramParameter* FindParameter (const char* name) const;

  private:
    typedef stl::hash_map<stl::hash_key<const char*>, const ProgramParameter*> ParameterMap;

  private:
    ParameterMap params;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Исходный константный буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class SourceConstantBuffer: virtual public IBuffer, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SourceConstantBuffer (const BufferDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (BufferDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение / запись из буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetData (size_t offset, size_t size, const void* data);
    void GetData (size_t offset, size_t size, void* data);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Указатель на данные буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    const void* GetDataPointer () const { return buffer.data (); }
    size_t      GetDataSize    () const { return buffer.size (); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Хэш данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetHash () const;

  private:
    xtl::uninitialized_storage<char> buffer;           //буфер в системной памяти
    BufferDesc                       desc;             //описание буфера
    mutable size_t                   hash;             //хэш
    mutable bool                     need_update_hash; //хэш требует обновления
};

typedef xtl::com_ptr<SourceConstantBuffer> SourceConstantBufferPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Синхронизатор буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
class ShaderBuffersSynchronizer: public xtl::reference_counter, public xtl::trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderBuffersSynchronizer (const ProgramParametersLayout& src_layout, const ConstantBufferLayout& dst_layout);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
/// (без проверок корректности аргументов)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CopyTo (size_t slot_index, const char* src_buffer, char* dst_buffer) const
    {
      const Slot&  slot  = slots [slot_index];
      const Chunk* chunk = &chunks [0] + slot.first_chunk;

      for (size_t i=0, count=slot.chunks_count; i<count; i++, chunk++)
      {
        memcpy (dst_buffer + chunk->dst_offset, src_buffer + chunk->src_offset, chunk->size);
      }
    }

  private:
    struct Chunk
    {
      size_t src_offset; //смещение в исходном буфере
      size_t dst_offset; //смещение в результирующем буфере
      size_t size;       //размер блока

      Chunk () : src_offset (), dst_offset (), size () {}
    };

    struct Slot
    {
      size_t first_chunk;   //индекс первого блока
      size_t chunks_count;  //количество блоков

      Slot () : first_chunk (), chunks_count () {}
    };

    typedef stl::vector<Chunk> ChunkArray;

  private:
    ChunkArray chunks;                                     //блоки синхронизации
    Slot       slots [DEVICE_CONSTANT_BUFFER_SLOTS_COUNT]; //соответствие слоту консткнтного буфера
};

}

}

}

#endif
