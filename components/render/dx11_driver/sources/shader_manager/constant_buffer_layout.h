///////////////////////////////////////////////////////////////////////////////////////////////////
///Операция преобразования параметра шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ShaderParameterConvertOperation
{
  ShaderParameterConvertOperation_Copy,              //копировать параметр
  ShaderParameterConvertOperation_TransposeFloat2x2, //транспонировать матрицу 2x2
  ShaderParameterConvertOperation_TransposeFloat3x3, //транспонировать матрицу 3x3
  ShaderParameterConvertOperation_TransposeFloat4x4, //транспонировать матрицу 4x4
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание параметра шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ShaderParameter: public ProgramParameter
{
  ShaderParameterConvertOperation convert_operation; //операция конвертации параметра
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Лэйаут константного буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
class ConstantBufferLayout: public xtl::reference_counter, public xtl::trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ConstantBufferLayout  (ID3D11ShaderReflectionConstantBuffer& buffer);
    ~ConstantBufferLayout ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество параметров в буфере
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                 GetParamsCount () const { return params.size (); }
    const ShaderParameter* GetParams      () const { return params.empty () ? (ShaderParameter*)0 : &params [0]; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип буфера / размер буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    D3D11_CBUFFER_TYPE GetType () const { return type; }
    size_t             GetSize () const { return buffer_size; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение хэша
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetHash () const { return hash; }

  private:
    ConstantBufferLayout (const ConstantBufferLayout&); //no implementation
    ConstantBufferLayout& operator = (const ConstantBufferLayout&); //no implementation

  private:
    typedef stl::vector<ShaderParameter> ShaderParameterArray;

  private:
    ShaderParameterArray params;      //параметры константного буфера
    common::StringArray  strings;     //строки с именами параметров
    D3D11_CBUFFER_TYPE   type;        //тип буфера
    size_t               buffer_size; //размер буфера
    size_t               hash;        //хэш лэйаута для идентификации
};

typedef xtl::intrusive_ptr<ConstantBufferLayout> ConstantBufferLayoutPtr;
