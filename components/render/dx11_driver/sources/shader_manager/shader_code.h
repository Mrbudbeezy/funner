///////////////////////////////////////////////////////////////////////////////////////////////////
///Шейдер
///////////////////////////////////////////////////////////////////////////////////////////////////
class ShaderCode: public DeviceObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderCode  (const DeviceManager& device_manager,
                 const char*          name,
                 const char*          profile,
                 const char*          source_code,
                 size_t               source_code_length = (size_t)-1,
                 const char*          options = "",
                 const LogFunction&   log_fn = LogFunction (),
                 size_t               flags1 = 0,
                 size_t               flags2 = 0);
    ~ShaderCode ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение скомпилированного шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    const void* GetCompiledData     () const;
    size_t      GetCompiledDataSize () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Хэш данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetCompiledDataHash () const;

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

typedef xtl::shared_ptr<ShaderCode> ShaderCodePtr;
