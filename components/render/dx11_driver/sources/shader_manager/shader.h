///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ShaderType
{
  ShaderType_Compute,
  ShaderType_Domain,
  ShaderType_Geometry,
  ShaderType_Hull,
  ShaderType_Pixel,
  ShaderType_Vertex,

  ShaderType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Шейдер
///////////////////////////////////////////////////////////////////////////////////////////////////
class Shader: public DeviceObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Shader  (ShaderType shader_type, const ShaderCodePtr& shader_code, ShaderLibrary& library);
    ~Shader ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderType GetType () const { return type; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ID3D11DeviceChild& GetHandle () const { return *shader; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Код шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderCode& GetShaderCode () const { return *code; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление константных буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t                  GetConstantBufferLayoutsCount () const { return buffer_layouts.size (); }
    ConstantBufferLayoutPtr GetConstantBufferLayout       (size_t index) const;

  private:
    typedef stl::vector<ConstantBufferLayoutPtr> BufferLayoutArray;

  private:
    ShaderType        type;           //тип шейдера
    DxDeviceChildPtr  shader;         //объект шейдера
    ShaderCodePtr     code;           //код шейдера
    BufferLayoutArray buffer_layouts; //лэйауты буферов
};

typedef xtl::com_ptr<Shader> ShaderPtr;
