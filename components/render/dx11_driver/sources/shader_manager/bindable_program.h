///////////////////////////////////////////////////////////////////////////////////////////////////
///Программа, устанавливаемая в контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
class BindableProgram: public xtl::reference_counter, public xtl::trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    BindableProgram  (ShaderLibrary& library, Program& program, ProgramParametersLayout& layout);
    ~BindableProgram ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Биндинг в контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind (ID3D11DeviceContext& context, ShaderLibrary& library, const SourceConstantBufferPtr buffers [DEVICE_CONSTANT_BUFFER_SLOTS_COUNT]);

  private:
    typedef stl::vector<TargetConstantBufferPrototypePtr> BufferPrototypeArray;
    
  private:
    Program&                 program;           //исходная программа
    ProgramParametersLayout& parameters_layout; //расположение параметров
    BufferPrototypeArray     buffer_prototypes; //прототипы буферов
};
