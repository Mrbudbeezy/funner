///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека шейдеров
///////////////////////////////////////////////////////////////////////////////////////////////////
class ShaderLibrary: public DeviceObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderLibrary  (const DeviceManager& device_manager);
    ~ShaderLibrary ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderPtr CreateShader (const ShaderDesc& shader_desc, const LogFunction& error_log);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск лэйаута константного буфера по хэшу
///////////////////////////////////////////////////////////////////////////////////////////////////
    ConstantBufferLayoutPtr FindConstantBufferLayout (size_t hash) const; 

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление лэйаута константного буфера по хэшу
///////////////////////////////////////////////////////////////////////////////////////////////////
    ConstantBufferLayoutPtr AddConstantBufferLayout    (const ConstantBufferLayoutPtr& layout);
    void                    RemoveConstantBufferLayout (size_t hash);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение синхронизатора
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderBuffersSynchronizer& GetSynchronizer (const ProgramParametersLayout& src_layout, const ConstantBufferLayout& dst_layout);

  private:
    typedef stl::pair<const ProgramParametersLayout*, const ConstantBufferLayout*> SyncLayoutPair;

    void RemoveShaderByHash (size_t hash);
    void RemoveSynchronizer (const SyncLayoutPair&);

  private:
    typedef stl::hash_map<size_t, Shader*>                              ShaderMap;
    typedef stl::hash_map<size_t, ConstantBufferLayout*>                BufferLayoutMap;
    typedef stl::hash_map<SyncLayoutPair, ShaderBuffersSynchronizerPtr> SyncLayoutMap;

  private:
    ShaderMap       shaders;         //шейдеры
    BufferLayoutMap buffer_layouts;  //лэйауты константных буферов
    SyncLayoutMap   layout_syncs;    //синхронизаторы лэйаутов
};
