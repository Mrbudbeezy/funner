#ifndef RENDER_DX11_DRIVER_OUTPUT_STAGE_SHARED_HEADER
#define RENDER_DX11_DRIVER_OUTPUT_STAGE_SHARED_HEADER

#include <render/low_level/utils.h>

#include <shared/error.h>
#include <shared/output_manager.h>

namespace render
{

namespace low_level
{

namespace dx11
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние подуровня смешивания цветов
///////////////////////////////////////////////////////////////////////////////////////////////////
class BlendState: virtual public IBlendState, public DeviceObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    BlendState  (const DeviceManager&, const BlendDesc&);
    ~BlendState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (BlendDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Низкроуровневый дескриптор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ID3D11BlendState& GetHandle () { return *state; }

  private:
    BlendDesc       desc;  //дескриптор состояния
    DxBlendStatePtr state; //состояние
};

typedef xtl::com_ptr<BlendState> BlendStatePtr;

}

}

}

#endif
