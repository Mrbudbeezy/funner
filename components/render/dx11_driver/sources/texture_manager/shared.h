#ifndef RENDER_DX11_DRIVER_TEXTURE_SHARED_HEADER
#define RENDER_DX11_DRIVER_TEXTURE_SHARED_HEADER

#include <xtl/common_exceptions.h>
#include <xtl/stat_counter.h>
#include <xtl/trackable_ptr.h>

#include <render/low_level/utils.h>

#include <shared/error.h>
#include <shared/texture.h>
#include <shared/texture_manager.h>

namespace render
{

namespace low_level
{

namespace dx11
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сэмплер
///////////////////////////////////////////////////////////////////////////////////////////////////
class SamplerState: virtual public ISamplerState, public DeviceObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SamplerState  (const DeviceManager&, const SamplerDesc& desc);
    ~SamplerState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение/получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetDesc (const SamplerDesc&);
    void GetDesc (SamplerDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Низкоуровневый дескриптор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ID3D11SamplerState& GetHandle () { return *sampler; }

  private:
    DxSamplerStatePtr sampler;
    SamplerDesc       desc;
};

}

}

}

#endif
