#ifndef RENDER_DX11_DRIVER_INPUT_LAYOUT_HEADER
#define RENDER_DX11_DRIVER_INPUT_LAYOUT_HEADER

#include <D3D11.h>

#include <stl/auto_ptr.h>

#include <render/low_level/state.h>

#include <shared/object.h>

namespace render
{

namespace low_level
{

namespace dx11
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Входной лэйаут
///////////////////////////////////////////////////////////////////////////////////////////////////
class InputLayout: virtual public IInputLayout, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    InputLayout  (const InputLayoutDesc&);
    ~InputLayout ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры вершинного доступа
///////////////////////////////////////////////////////////////////////////////////////////////////
    const D3D11_INPUT_ELEMENT_DESC* GetVertexElements      () const;
    size_t                          GetVertexElementsCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Шаги между вершинами
///////////////////////////////////////////////////////////////////////////////////////////////////
    const UINT* GetStrides () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры индексного доступа
///////////////////////////////////////////////////////////////////////////////////////////////////
    DXGI_FORMAT GetIndexFormat       () const;
    size_t      GetIndexBufferOffset () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение хэша
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetHash               () const;
    size_t GetVertexElementsHash () const;

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

typedef xtl::com_ptr<InputLayout> InputLayoutPtr;

}

}

}

#endif
