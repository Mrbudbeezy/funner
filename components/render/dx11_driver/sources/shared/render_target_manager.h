#ifndef RENDER_DX11_DRIVER_RENDER_TARGET_MANAGER_HEADER
#define RENDER_DX11_DRIVER_RENDER_TARGET_MANAGER_HEADER

#include <stl/auto_ptr.h>

#include <render/low_level/device.h>

#include <shared/common.h>
#include <shared/device_manager.h>

namespace render
{

namespace low_level
{

namespace dx11
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние контекста целевых буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderTargetContextState
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTargetContextState  (const DeviceManager&);
    ~RenderTargetContextState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выбор целевых отображений
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetRenderTargetView  (size_t render_target_slot, IView* render_target_view);
    void   SetDepthStencilView  (IView* depth_stencil_view);
    IView* GetRenderTargetView  (size_t render_target_slot) const;
    IView* GetDepthStencilView  () const;
    void   HasRenderTargetViews (bool states [DEVICE_RENDER_TARGET_SLOTS_COUNT]) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройка подуровня растеризации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void            SetViewport (size_t render_target_slot, const Viewport& viewport);
    void            SetScissor  (size_t render_target_slot, const Rect& scissor_rect);
    const Viewport& GetViewport (size_t render_target_slot) const;
    const Rect&     GetScissor  (size_t render_target_slot) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование состояния
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CopyTo (const StateBlockMask&, RenderTargetContextState& dst_state) const;

  protected:
    struct Impl;

    RenderTargetContextState (Impl*);

    Impl& GetImpl () const;

  private:
    stl::auto_ptr<Impl> impl;

  private:
    RenderTargetContextState (const RenderTargetContextState&); //no impl
    RenderTargetContextState& operator = (const RenderTargetContextState&); //no impl
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние контекста целевых буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderTargetContext: public RenderTargetContextState
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTargetContext  (const DeviceManager&, const DxContextPtr&);
    ~RenderTargetContext ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка буферов отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ClearRenderTargetView (size_t render_target_slot, const Color4f& color);
    void ClearDepthStencilView (size_t clear_flags, float depth, unsigned char stencil);
    void ClearViews            (size_t clear_flags, size_t views_count, const size_t* view_indices, const Color4f* colors, float depth, unsigned char stencil);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Биндинг
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind ();

  private:
    struct Impl;

    Impl& GetImpl () const;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер целевых буферов рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderTargetManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RenderTargetManager  (const DeviceManager&);
    ~RenderTargetManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание текстур
///////////////////////////////////////////////////////////////////////////////////////////////////
    ITexture* CreateRenderTargetTexture (ISwapChain* swap_chain, size_t buffer_index);
    ITexture* CreateDepthStencilTexture (ISwapChain* swap_chain);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание отображений
///////////////////////////////////////////////////////////////////////////////////////////////////
    IView* CreateView (ITexture* texture, const ViewDesc&);

  private:
    RenderTargetManager (const RenderTargetManager&); //no impl
    RenderTargetManager& operator = (const RenderTargetManager&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
