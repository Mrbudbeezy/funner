#ifndef RENDER_DX11_DEVICE_MANAGER_HEADER
#define RENDER_DX11_DEVICE_MANAGER_HEADER

#include <D3D11.h>

#include <xtl/intrusive_ptr.h>

#include <render/low_level/context.h>

#include <shared/library.h>
#include <shared/object.h>

namespace render
{

namespace low_level
{

namespace dx11
{

//forwards
class IDeviceContextImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
class DeviceManager
{
  public:
    typedef xtl::com_ptr<ID3D11Device> DxDevicePtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    DeviceManager  (const Library& library, const DxDevicePtr& device);
    DeviceManager  (const DeviceManager&);
    ~DeviceManager ();

    DeviceManager& operator = (const DeviceManager&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
    Library& GetLibrary () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    ID3D11Device&        GetDevice           () const;
    ID3D11DeviceContext& GetImmediateContext () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор семейства
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetFamilySubId () const { return (size_t)impl; }  

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (DeviceManager&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект устройства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class DeviceObject: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    DeviceObject (const DeviceManager&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение менеджера устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const DeviceManager& GetDeviceManager () const { return manager; }
          DeviceManager& GetDeviceManager ()       { return manager; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение семейства объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetFamily (ObjectFamily& family, void*& root);

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    ID3D11Device& GetDevice () const;

  private:
    DeviceManager manager; //менеджер устройства отрисовки
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Внутренний интерфейс контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
class IDeviceContextImpl: virtual public IDeviceContext, public DeviceObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    IDeviceContextImpl (const DeviceManager& manager) : DeviceObject (manager) {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Низкоуровневый дескриптор
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ID3D11DeviceContext& GetHandle () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Приведение типов объектов с проверкой совместимости
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class DstT, class SrcT>
DstT* cast_object (const DeviceManager& owner, SrcT* ptr, const char* source, const char* argument_name);

template <class DstT, class SrcT>
DstT* cast_object (const DeviceObject& owner, SrcT* ptr, const char* source, const char* argument_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
ID3D11DeviceContext& get_dx_context (const DeviceManager& owner, IDeviceContext* context, const char* source = "");
ID3D11DeviceContext& get_dx_context (const DeviceObject& owner, IDeviceContext* context, const char* source = "");

#include <shared/detail/device_manager.inl>

}

}

}

#endif

