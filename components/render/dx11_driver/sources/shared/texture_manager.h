#ifndef RENDER_DX11_DRIVER_TEXTURE_MANAGER_HEADER
#define RENDER_DX11_DRIVER_TEXTURE_MANAGER_HEADER

#include <render/low_level/device.h>

#include <shared/common.h>
#include <shared/device_manager.h>

#include <stl/auto_ptr.h>

namespace render
{

namespace low_level
{

namespace dx11
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние контекста менеджера текстур
///////////////////////////////////////////////////////////////////////////////////////////////////
class TextureManagerContextState
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    TextureManagerContextState  (const DeviceManager&);
    ~TextureManagerContextState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущей текстуры и сэмплера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void           SetTexture (size_t sampler_slot, ITexture* texture);
    void           SetSampler (size_t sampler_slot, ISamplerState* state);
    ITexture*      GetTexture (size_t sampler_slot) const;
    ISamplerState* GetSampler (size_t sampler_slot) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование состояния
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CopyTo (const StateBlockMask&, TextureManagerContextState& dst_state) const;

  protected:
    struct Impl;

    TextureManagerContextState (Impl*);

    Impl& GetImpl () const;

  private:
    TextureManagerContextState (const TextureManagerContextState&); //no impl
    TextureManagerContextState& operator = (const TextureManagerContextState&); //no impl

  private:
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние менеджера текстур
///////////////////////////////////////////////////////////////////////////////////////////////////
class TextureManagerContext: public TextureManagerContextState
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    TextureManagerContext  (const DeviceManager& device_manager, const DxContextPtr& context);
    ~TextureManagerContext ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Генерация мип-уровней текстуры (необходимо для текстур в которые ведется рендеринг)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GenerateMips (ITexture* texture);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Биндинг
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind ();

  private:
    struct Impl;

    Impl& GetImpl () const;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер текстур
///////////////////////////////////////////////////////////////////////////////////////////////////
class TextureManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    TextureManager  (const DeviceManager&);
    ~TextureManager ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание текстуры и сэмплера
///////////////////////////////////////////////////////////////////////////////////////////////////
    ITexture*      CreateTexture      (const TextureDesc&, const TextureData*);
    ISamplerState* CreateSamplerState (const SamplerDesc&);

  private:
    TextureManager (const TextureManager&);             //no impl
    TextureManager& operator = (const TextureManager&); //no impl
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
