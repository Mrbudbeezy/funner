#ifndef RENDER_DX11_DRIVER_TEXTURE_HEADER
#define RENDER_DX11_DRIVER_TEXTURE_HEADER

#include <stl/auto_ptr.h>

#include <render/low_level/driver.h>

#include <shared/common.h>
#include <shared/device_manager.h>

namespace render
{

namespace low_level
{

namespace dx11
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текстура
///////////////////////////////////////////////////////////////////////////////////////////////////
class Texture: virtual public ITexture, public DeviceObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Texture  (const DeviceManager& manager, const TextureDesc& desc, const DxResourcePtr& resource);
    Texture  (const DeviceManager& manager, const TextureDesc& desc, const TextureData* data);
    ~Texture ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Низкоуровневый дескриптор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ID3D11Resource&           GetHandle             ();
    ID3D11ShaderResourceView& GetShaderResourceView ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (TextureDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с данными
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetData (size_t layer, size_t mip_level, size_t x, size_t y, size_t width, size_t height, PixelFormat source_format, const void* buffer, IDeviceContext*);
    void GetData (size_t layer, size_t mip_level, size_t x, size_t y, size_t width, size_t height, PixelFormat target_format, void* buffer, IDeviceContext*); 

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
