#ifndef RENDER_GL_DRIVER_CONTEXT_HEADER
#define RENDER_GL_DRIVER_CONTEXT_HEADER

#include <render/low_level/driver.h>
#include <stl/auto_ptr.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
class Context
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Context  (ISwapChain* basic_chain);
    Context  (ISwapChain* basic_chain, const Context& shared_context);
    ~Context ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего контектса
///////////////////////////////////////////////////////////////////////////////////////////////////
    void MakeCurrent (ISwapChain* draw_read);
    void MakeCurrent (ISwapChain* draw, ISwapChain* read);
    bool IsCurrent   (ISwapChain* draw_read) const;
    bool IsCurrent   (ISwapChain* draw, ISwapChain* read) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка совместимости цепочки обмена с контекстом
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsCompatible (ISwapChain* swap_chain) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение списка расширений, зависящих от текущей цепочки обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const char* GetSwapChainExtensionString ();        

  private:
    Context (const Context&); //no impl
    Context& operator = (const Context&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
