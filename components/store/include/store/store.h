#ifndef STORE_STORE_HEADER
#define STORE_STORE_HEADER

namespace store
{

//count -> quantity

enum TransactionState
{
  TransactionState_New,
  TransactionState_Purchasing,
  TransactionState_Purchased,
  TransactionState_Failed,
  TransactionState_Restored,
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Транзакция
///////////////////////////////////////////////////////////////////////////////////////////////////
class Transaction
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние
///////////////////////////////////////////////////////////////////////////////////////////////////
    TransactionState State () const;

    const char* Status () const;

    const char* ProductId () const;
    size_t      Count () const;

    size_t ReceiptSize () const;
    const void* ReceiptData () const;
    
    void Finish ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Продукт
///////////////////////////////////////////////////////////////////////////////////////////////////
class Product
{
  public:
    const char* Description () const;

    const char* Id () const;

    const common::PropertyMap& Properties () const;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Магазин
///////////////////////////////////////////////////////////////////////////////////////////////////
class Store
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Description () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Можно ли осуществлять покупки
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool CanBuyProducts () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение товаров
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const ProductList& products)> LoadProductsCallback;

    void LoadProducts (const char* product_ids, const LoadProductsCallback& callback) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Покупка / восстановление покупок
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const Transaction&)> PurchaseCallback;
    
    //+RegisterEventHandler

    void RestorePurchases () const;

    Transaction BuyProduct (const char* product_id, size_t count, const PurchaseCallback& callback) const;
    Transaction BuyProduct (const char* product_id, size_t count) const;
};

}

#endif
