#ifndef STORE_STORE_HEADER
#define STORE_STORE_HEADER

namespace store
{

enum TransactionState
{
  TransactionState_Purchasing,
  TransactionState_Purchased,
  TransactionState_Failed,
  TransactionState_Restored,
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Транзакция
///////////////////////////////////////////////////////////////////////////////////////////////////
class Transaction
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние
///////////////////////////////////////////////////////////////////////////////////////////////////
    TransactionState State () const;

    const char* Status () const;

    const char* ProductIdentifier () const;
    size_t      ProductCount () const;

    size_t ReceiptSize () const;
    const void* ReceiptData () const;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Продукт
///////////////////////////////////////////////////////////////////////////////////////////////////
class Product
{
  public:
    const char* Description () const;

    const char* Identifier () const;

    const common::PropertyMap& Properties () const;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Магазин
///////////////////////////////////////////////////////////////////////////////////////////////////
class Store
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Description () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Можно ли осуществлять покупки
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool CanBuyProducts () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение товаров
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const Product* loaded_products, size_t loaded_products_count)> LoadProductsCallback;

    void LoadProducts (const char** identifiers, size_t count, const LoadProductsCallback&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Покупка / восстановление покупок
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const Transaction&)> PurchaseCallback;

    void RestorePurchases (const PurchaseCallback& callback) const;
    void BuyProduct (const Product& product, size_t count, const PurchaseCallback& callback) const;
    void BuyProduct (const char* product_identifier, size_t count, const PurchaseCallback& callback) const;

    void FinishTransaction (const Transaction& transaction);
};

}

#endif
