#include <stl/auto_ptr.h>
#include <stl/hash_map>
#include <stl/list>
#include <stl/string>

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/connection.h>
#include <xtl/function.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/iterator.h>
#include <xtl/reference_counter.h>
#include <xtl/ref.h>
#include <xtl/shared_ptr.h>
#include <xtl/signal.h>
#include <xtl/string.h>
#include <xtl/trackable.h>

#include <common/component.h>
#include <common/file.h>
#include <common/parser.h>
#include <common/singleton.h>
#include <common/strlib.h>
#include <common/var_registry.h>
#include <common/var_registry_container.h>

namespace common
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Точка монтирования
///////////////////////////////////////////////////////////////////////////////////////////////////
class MountPoint : public xtl::trackable, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    MountPoint (const char* in_name, ICustomVarRegistry* in_registry);
    ~MountPoint ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    const stl::string& Name () const { return name; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение реестра
///////////////////////////////////////////////////////////////////////////////////////////////////
    ICustomVarRegistry* Registry () const { return registry.get (); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события реестра
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* mount_point_name, const char* var_name, VarRegistryEvent event)> EventHandler;

    xtl::connection RegisterEventHandler (const EventHandler& handler);

  private:
    void Notify (const char* var_name, VarRegistryEvent event);

  private:
    typedef xtl::com_ptr<ICustomVarRegistry>                               CustomVarRegistryPtr;
    typedef xtl::signal<void (const char*, const char*, VarRegistryEvent)> MountPointSignal;

  private:
    stl::string          name;
    CustomVarRegistryPtr registry;
    MountPointSignal     signal;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Карта точек монтирования
///////////////////////////////////////////////////////////////////////////////////////////////////
class MountPointsMap
{
  public:
    typedef xtl::shared_ptr<MountPointsMap> Pointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ~MountPointsMap ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Созданеие/удаление ссылки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Link   (const char* link_name, const char* source);
    void Unlink (const char* link_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Монтирование реестров
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Mount      (const char* branch_name, ICustomVarRegistry* registry);
    void Unmount    (const char* branch_name, ICustomVarRegistry* registry);
    void Unmount    (const char* branch_name);
    void UnmountAll (ICustomVarRegistry* registry);
    void UnmountAll ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск точки монтирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    MountPoint* FindMountPoint (const char* full_var_name, stl::string& var_sub_name);
    MountPoint* FindMountPoint (const char* branch_name, const char* var_name, stl::string& var_sub_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события карты
///////////////////////////////////////////////////////////////////////////////////////////////////
    class IListener
    {
      public:
        virtual void OnMount   (MountPoint*) = 0;
        virtual void OnUnmount (MountPoint*) = 0;

      protected:
        virtual ~IListener () {}
    };

    void RegisterListener   (IListener*);
    void UnregisterListener (IListener*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение глобальной карты точек монтирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer GetGlobalMap ();

  private:
    void OnUnmount (MountPoint*);

  private:
    typedef xtl::intrusive_ptr<MountPoint>                           MountPointPtr;
    typedef stl::hash_map<stl::hash_key<const char*>, MountPointPtr> MountMap;
    typedef stl::list<IListener*>                                    ListenersList;

  private:
    MountMap      mount_points_map;
    ListenersList listeners;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Набор переменных одного уровня вложения
///////////////////////////////////////////////////////////////////////////////////////////////////
class BranchLevelVarSet
{
  public:
    typedef VarRegistry::Iterator Iterator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    BranchLevelVarSet (const VarRegistry& registry);
    ~BranchLevelVarSet ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator CreateIterator ();

  private:
    BranchLevelVarSet (const BranchLevelVarSet&);             //no impl
    BranchLevelVarSet& operator = (const BranchLevelVarSet&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}
