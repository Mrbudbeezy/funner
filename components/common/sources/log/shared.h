#ifndef COMMONLIB_LOG_SHARED_HEADER
#define COMMONLIB_LOG_SHARED_HEADER

#include <ctime>

#include <stl/algorithm>
#include <stl/functional>
#include <stl/list>
#include <stl/set>
#include <stl/string>
#include <stl/vector>

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/connection.h>
#include <xtl/function.h>
#include <xtl/lexical_cast.h>
#include <xtl/reference_counter.h>
#include <xtl/shared_ptr.h>
#include <xtl/signal.h>
#include <xtl/string.h>
#include <xtl/uninitialized_storage.h>

#include <common/file.h>
#include <common/lockable.h>
#include <common/log.h>
#include <common/singleton.h>
#include <common/strlib.h>

namespace common
{

class LogSystemImpl;

typedef xtl::intrusive_ptr<LogSystemImpl> LogSystemPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание реализации фильтра протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
class LogFilterImpl: public xtl::reference_counter, public Lockable
{
  friend class LogImpl;
  public:
    typedef LogFilter::LogHandler LogHandler;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    LogFilterImpl  (const char* mask, const LogHandler& handler);
    ~LogFilterImpl ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Маска имени источников протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Mask ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Протоколирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Print (const char* log_name, const char* log_message);

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление источников
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddSource    (LogImpl*);
    void RemoveSource (LogImpl*);

  private:
    LogFilterImpl (const LogFilterImpl&); //no impl
    LogFilterImpl& operator = (const LogFilterImpl&); //no impl
    
  private:
    typedef stl::list<LogImpl*> LogList;

  private:
    LogSystemPtr log_system;  //указатель на систему протоколирования
    stl::string  mask;        //маска имени источников протоколирования
    LogHandler   log_handler; //обработчик протоколирования
    LogList      sources;     //источники протоколирования
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание реализации источника протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
class LogImpl: public xtl::reference_counter, public Lockable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    LogImpl  (const char* log_name);
    ~LogImpl ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя протокола
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление фильтров
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddFilter    (LogFilterImpl*);
    void RemoveFilter (LogFilterImpl*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Протоколирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Print (const char* message);

  private:
    LogImpl (const LogImpl&); //no impl
    LogImpl& operator = (const LogImpl&); //no impl
    
  private:
    typedef stl::list<LogFilterImpl*> FilterList;

  private:
    LogSystemPtr log_system; //указатель на систему протоколирования
    stl::string  name;       //имя протокола    
    FilterList   filters;    //фильтры
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
class LogSystemImpl: public Lockable, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    LogSystemImpl  ();
    ~LogSystemImpl ();  
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация источников протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Register   (LogImpl*);
    void Unregister (LogImpl*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация фильтров протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Register   (LogFilterImpl*);
    void Unregister (LogFilterImpl*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение и освобождение экземпляра системы протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    static LogSystemPtr Instance ();
    
  private:
    LogSystemImpl (const LogSystemImpl&); //no impl
    LogSystemImpl& operator = (const LogSystemImpl&); //no impl

  private:
    typedef stl::list<LogImpl*>       LogList;
    typedef stl::list<LogFilterImpl*> FilterList;

  private:
    LogList    sources; //источники протоколирования
    FilterList filters; //фильтры протоколирования
};

}

#endif
