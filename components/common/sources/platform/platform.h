#ifndef COMMONLIB_PLATFORM_HEADER
#define COMMONLIB_PLATFORM_HEADER

#include <cstddef>

namespace common
{

//implementation forwards
class ICustomAllocator;
class ICustomFileSystem;

/*
    Платформо-независимые интерфейсы
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс обратной связи нити
///////////////////////////////////////////////////////////////////////////////////////////////////
class IThreadCallback
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Запуск на выполнение
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Run () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~IThreadCallback () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс очистки ресурсов нити
///////////////////////////////////////////////////////////////////////////////////////////////////
class IThreadCleanupCallback
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Cleanup (void* data) = 0;

  protected:
    virtual ~IThreadCleanupCallback () {}  
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс управления нитями
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICustomThreadSystem
{
  public:
    struct thread_handle;
    struct tls_handle;
  
    typedef thread_handle* thread_t;
    typedef tls_handle*    tls_t;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание / удаление нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual thread_t CreateThread (IThreadCallback*) = 0;
    virtual void     DeleteThread (thread_t) = 0;    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Отмена нити
///////////////////////////////////////////////////////////////////////////////////////////////////    
    virtual void CancelThread (thread_t) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ожидание завершения нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void JoinThread (thread_t) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени текущей нити
///////////////////////////////////////////////////////////////////////////////////////////////////
//    virtual const char* GetCurrentThreadName () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с локальными данными нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual tls_t CreateTls (IThreadCleanupCallback* cleanup) = 0;
    virtual void  DeleteTls (tls_t tls) = 0;
    virtual void  SetTls    (tls_t tls, void* data) = 0;
    virtual void* GetTls    (tls_t tls) = 0;

  protected:
    virtual ~ICustomThreadSystem () {}
};

/*
    Платформо-зависимые интерфейсы
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Платформа по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
class DefaultPlatform
{
  public:
    static ICustomAllocator*    GetSystemAllocator ();
    static ICustomFileSystem*   GetFileSystem ();
    static ICustomFileSystem*   GetIOSystem ();
    static ICustomThreadSystem* GetThreadSystem ();
    static size_t               GetMilliseconds ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Платформа Win32
///////////////////////////////////////////////////////////////////////////////////////////////////
class Win32Platform: public DefaultPlatform
{
  public:
    static ICustomThreadSystem* GetThreadSystem ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Unistd
///////////////////////////////////////////////////////////////////////////////////////////////////
class UnistdPlatform: public DefaultPlatform
{
  public:
    static ICustomFileSystem*   GetFileSystem   ();
    static ICustomThreadSystem* GetThreadSystem ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Darwin
///////////////////////////////////////////////////////////////////////////////////////////////////
class MacOsXPlatform : public UnistdPlatform
{
  public:
    static size_t GetMilliseconds ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Указание текущей платформы
///////////////////////////////////////////////////////////////////////////////////////////////////
#ifdef _WIN32
  typedef Win32Platform Platform;
#elif defined (__APPLE__)
  typedef MacOsXPlatform Platform;
#elif defined __GNUC__
  typedef UnistdPlatform Platform;
#else
  #error Unknown compiler
#endif

}

#endif
