#ifndef COMMONLIB_PLATFORM_HEADER
#define COMMONLIB_PLATFORM_HEADER

#include <cstddef>

namespace common
{

//implementation forwards
class ICustomAllocator;
class ICustomFileSystem;

/*
    Платформо-зависимые интерфейсы
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Платформа по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
class DefaultPlatform
{
  public:
    typedef void* lockable_t;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение системного распределителя памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
    static ICustomAllocator* GetSystemAllocator ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение файловых систем
///////////////////////////////////////////////////////////////////////////////////////////////////
    static ICustomFileSystem* GetFileSystem ();
    static ICustomFileSystem* GetIOSystem   ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение системного времени
///////////////////////////////////////////////////////////////////////////////////////////////////
    static size_t GetMilliseconds ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с блокировками
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void InitLockable    (lockable_t&);
    static void DestroyLockable (lockable_t&);
    static void Lock            (lockable_t&);
    static void Unlock          (lockable_t&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение идентификатора текущей нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef size_t threadid_t;
    
    static threadid_t GetCurrentThreadId ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация путей монтирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void MountSystemPaths ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Платформа Win32
///////////////////////////////////////////////////////////////////////////////////////////////////
class Win32Platform: public DefaultPlatform
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с блокировками
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void InitLockable    (lockable_t&);
    static void DestroyLockable (lockable_t&);
    static void Lock            (lockable_t&);
    static void Unlock          (lockable_t&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение идентификатора текущей нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    static threadid_t GetCurrentThreadId ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация путей монтирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void MountSystemPaths ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Unistd
///////////////////////////////////////////////////////////////////////////////////////////////////
class UnistdPlatform: public DefaultPlatform
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение файловых систем
///////////////////////////////////////////////////////////////////////////////////////////////////
    static ICustomFileSystem* GetFileSystem ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с блокировками
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void InitLockable    (lockable_t&);
    static void DestroyLockable (lockable_t&);
    static void Lock            (lockable_t&);
    static void Unlock          (lockable_t&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение идентификатора текущей нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    static threadid_t GetCurrentThreadId ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Carbon
///////////////////////////////////////////////////////////////////////////////////////////////////
class CarbonPlatform: public UnistdPlatform
{
  public:
    static size_t GetMilliseconds ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///iPhone
///////////////////////////////////////////////////////////////////////////////////////////////////
class IPhonePlatform: public UnistdPlatform
{
  public:
    static size_t GetMilliseconds ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Указание текущей платформы
///////////////////////////////////////////////////////////////////////////////////////////////////
#ifdef BADA_DEVICE
  typedef UnistdPlatform Platform;
#elif defined _WIN32
  typedef Win32Platform Platform;
#elif defined __IPHONE__
  typedef IPhonePlatform Platform;
#elif defined __APPLE__
  typedef CarbonPlatform Platform;
#elif defined __GNUC__
  typedef UnistdPlatform Platform;
#else
  #error Unknown compiler
#endif

}

#endif
