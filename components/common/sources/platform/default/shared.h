#ifndef COMMLIB_DEFAULT_PLATFORM_HEADER
#define COMMLIB_DEFAULT_PLATFORM_HEADER

#include <stdio.h>
#include <ctime>
#include <errno.h>
#include <sys/stat.h>
#include <stdlib.h>

#ifdef _WIN32
  #include <io.h>
  #include <direct.h>

  #ifdef _MSC_VER
    #pragma warning (disable : 4996) //declare deprecated
  #endif

#elif __GNUC__
  #include <unistd.h>
#else
  #error Unknown compiler
#endif

#include <xtl/bind.h>
#include <xtl/connection.h>
#include <xtl/common_exceptions.h>
#include <xtl/function.h>
#include <xtl/string.h>

#include <common/component.h>
#include <common/console.h>
#include <common/file.h>
#include <common/heap.h>
#include <common/singleton.h>
#include <common/strlib.h>

#include <platform/platform.h>

namespace common
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Системный распределитель памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
class MallocAllocator: public ICustomAllocator
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Заказ / освобождение памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
    void* Allocate   (size_t size);
    void  Deallocate (void* ptr);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  () {}
    void Release () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файловая система
///////////////////////////////////////////////////////////////////////////////////////////////////
class StdioFileSystem: public ICustomFileSystem
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с файлом
///////////////////////////////////////////////////////////////////////////////////////////////////
    file_t     FileOpen     (const char* name,filemode_t mode_flags,size_t buffer_size);
    void       FileClose    (file_t);
    size_t     FileRead     (file_t,void* buf,size_t size);
    size_t     FileWrite    (file_t,const void* buf,size_t size);
    void       FileRewind   (file_t);
    filepos_t  FileSeek     (file_t,filepos_t pos);
    filepos_t  FileTell     (file_t);
    filesize_t FileSize     (file_t);
    void       FileResize   (file_t,filesize_t new_size);
    bool       FileEof      (file_t);
    void       FileFlush    (file_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление расположением файлов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove (const char* file_name);
    void Rename (const char* file_name,const char* new_name);
    void Mkdir  (const char* dir_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение информации о файле
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsFileExist (const char* file_name);
    bool GetFileInfo (const char* file_name,FileInfo& info);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о файловой системе
///////////////////////////////////////////////////////////////////////////////////////////////////
    filesize_t GetFreeSpace (const char* path);   //returns (filesize_t)-1 if free space can't be determined
    filesize_t GetTotalSpace (const char* path);  //returns (filesize_t)-1 if free space can't be determined

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файловые атрибуты
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetFileAttribute    (const char* file_name, const char* attribute, const void* data, size_t size);
    void GetFileAttribute    (const char* file_name, const char* attribute, void* data, size_t size);
    bool HasFileAttribute    (const char* file_name, const char* attribute);
    void RemoveFileAttribute (const char* file_name, const char* attribute);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Search (const char* wc_mask,const FileSearchHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  () {}
    void Release () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система ввода / вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class StdioIOSystem: public StdioFileSystem
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с файлом
///////////////////////////////////////////////////////////////////////////////////////////////////
    file_t     FileOpen       (const char* name,filemode_t mode_flags,size_t buffer_size);
    void       FileClose      (file_t);
    size_t     FileWrite      (file_t,const void* buf,size_t size);
    size_t     FileBufferSize (file_t) { return (size_t)-1; } //кэширование не нужно
    filepos_t  FileTell       (file_t);    
    filesize_t FileSize       (file_t);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление расположением файлов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove (const char* file_name);
    void Rename (const char* file_name,const char* new_name);
    void Mkdir  (const char* dir_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение информации о файле
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsFileExist (const char* file_name);
    bool GetFileInfo (const char* file_name,FileInfo& info);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск файлов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Search (const char* wc_mask,const FileSearchHandler& handler);
};

}

#endif
