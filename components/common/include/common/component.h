#ifndef COMMONLIB_COMPONENT_HEADER
#define COMMONLIB_COMPONENT_HEADER

#include <xtl/functional_fwd>

namespace xtl
{

//forward declaration
template <class T> class iterator;

}

namespace common
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс компонента (thread safe)
///////////////////////////////////////////////////////////////////////////////////////////////////
class IComponent
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / выгрузка компонента
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Load   () = 0;
    virtual void Unload () = 0;

  protected:    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~IComponent () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние компонента (thread safe)
///////////////////////////////////////////////////////////////////////////////////////////////////
class IComponentState
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* Name () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загружен ли компонент
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool IsLoaded () = 0;
    
  protected:
    virtual ~IComponentState () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер компонентов (thread safe)
///////////////////////////////////////////////////////////////////////////////////////////////////
class ComponentManager
{
  public:
    typedef xtl::function<void (const char*)> LogHandler;
    typedef xtl::iterator<IComponentState>    Iterator;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация компонента
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Register   (const char* name, IComponent* component);
    static void Unregister (IComponent* component);
    static void Unregister (const char* wc_component_mask);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка компонентов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Load   (const char* wc_component_mask);
    static void Load   (const char* wc_component_mask, const LogHandler& log);
    static void Unload (const char* wc_component_mask);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор компонентов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Iterator CreateIterator ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Переход в многопоточный режим
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SwitchToMultiThreadMode ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистратор компонента (thread safe)
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Component>
class ComponentRegistrator: private IComponent
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ComponentRegistrator  (const char* name);
    ~ComponentRegistrator ();

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / выгрузка по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load   ();
    void Unload ();

  private:
    Component* component;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузчик компонентов (thread safe)
///////////////////////////////////////////////////////////////////////////////////////////////////
class ComponentLoader
{
  public:
    ComponentLoader (const char* wc_component_mask);
};

#include <common/detail/component.inl>

}

#endif
