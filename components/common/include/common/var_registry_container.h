#ifndef COMMONLIB_VAR_REGISTRY_CONTAINER_HEADER
#define COMMONLIB_VAR_REGISTRY_CONTAINER_HEADER

#include <stl/hash_map>
#include <stl/string>

#include <xtl/any.h>
#include <xtl/common_exceptions.h>
#include <xtl/reference_counter.h>
#include <xtl/function.h>

#include <common/var_registry.h>

namespace common
{

namespace detail
{

//forward declaration
class VarRegistryContainerImpl;

}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый реестр переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
class VarRegistryContainer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
    VarRegistryContainer ();
    VarRegistryContainer (const VarRegistryContainer& source);
    ~VarRegistryContainer ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    VarRegistryContainer& operator = (const VarRegistryContainer& source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/установка данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    const T& GetValue (const char* var_name) const;
    void     SetValue (const char* var_name, const T& value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RemoveVariable (const char* var_name);
    void RemoveAllVariables ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool HasVariable (const char* var_name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение/отсоединение реестра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Mount      (const char* branch_name);
    void Unmount    (const char* branch_name);
    void UnmountAll ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (VarRegistryContainer& source);

  private:
    detail::VarRegistryContainerImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
void swap (VarRegistryContainer<T>& source1, VarRegistryContainer<T>& source2);

#include <common/detail/var_registry_container.inl>

}

#endif
