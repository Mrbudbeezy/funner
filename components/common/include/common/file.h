#ifndef COMMONLIB_FILE_SYSTEM_HEADER
#define COMMONLIB_FILE_SYSTEM_HEADER

#include <ctime>

#include <xtl/intrusive_ptr.h>
#include <xtl/functional_fwd>
#include <xtl/exception.h>

#include <stl/string_fwd>

#include <common/action_queue.h>

#ifdef GetFreeSpace
#undef GetFreeSpace
#endif

namespace common
{

//implementation forwards
class FileImpl;
class FileList;
class FileListImpl;
class FileListBuilder;
class ICustomFileSystem;

//intrusive pointers
typedef xtl::intrusive_ptr<FileImpl>     FileImplPtr;
typedef xtl::intrusive_ptr<FileListImpl> FileListImplPtr;
typedef xtl::com_ptr<ICustomFileSystem>  ICustomFileSystemPtr;

/*
    Основные структуры
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файловые атрибуты
///////////////////////////////////////////////////////////////////////////////////////////////////
enum FileMode
{
  FileMode_Read        = 1,  //чтение разрешено
  FileMode_Write       = 2,  //запись разрешена
  FileMode_Resize      = 4,  //изменение размера разрешено
  FileMode_Rewind      = 8,  //сброс файлового указателя разрешён
  FileMode_Seek        = 16, //перемещение файлового указателя разрешено
  FileMode_Create      = 32, //при отсутствии файл создаётся, размер файла усекается
  FileMode_StreamRead  = FileMode_Read | FileMode_Rewind,                        //чтение потока
  FileMode_StreamWrite = FileMode_Write | FileMode_Rewind | FileMode_Resize,     //запись потока
  FileMode_ReadOnly    = FileMode_StreamRead | FileMode_Seek,                    //чтение файла произвольного доступа
  FileMode_WriteOnly   = FileMode_Create | FileMode_StreamWrite | FileMode_Seek, //запись файла произвольного доступа (сброс размера файла)
  FileMode_ReadWrite   = FileMode_ReadOnly | FileMode_StreamWrite,               //чтение/запись файла произвольного доступа
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги поиска файла
///////////////////////////////////////////////////////////////////////////////////////////////////
enum FileSearch
{
  FileSearch_Files        = 1,  //искать файлы
  FileSearch_Dirs         = 2,  //искать каталоги
  FileSearch_Sort         = 4,  //отсортировать по имени
  FileSearch_NoPacks      = 8,  //не искать в паках
  FileSearch_SubDirs      = 16, //искать в подкаталогах
  FileSearch_FullPaths    = 32, //выводить полные пути
  FileSearch_FilesAndDirs = FileSearch_Files | FileSearch_Dirs
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим изменения файловой позиции
///////////////////////////////////////////////////////////////////////////////////////////////////
enum FileSeekMode
{
  FileSeekMode_Set,     //установка позиции от начала файла
  FileSeekMode_Current, //установка позиции от текущего положения файлового указателя
  FileSeekMode_End      //установка позиции от конца файла
};

typedef size_t             filemode_t;
typedef unsigned long long filesize_t;
typedef time_t             filetime_t;
typedef long long          filepos_t;
typedef char               filecryptokey_t [16];

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о файле
///////////////////////////////////////////////////////////////////////////////////////////////////
struct FileInfo
{
  filetime_t time_create;  //время создания файла
  filetime_t time_access;  //время последнего доступа к файлу
  filetime_t time_modify;  //время последней модификации файла
  filesize_t size;         //размер файла
  bool       is_dir;       //является ли файл директорией
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Хэш суммы содержимого файла
///////////////////////////////////////////////////////////////////////////////////////////////////
struct FileHash
{
  size_t        crc32;    //хэш-сумма CRC32
  unsigned char md5 [16]; //хэш-сумма MD5
};

/*
    Импортируемые интерфейсы файловой системы
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс пользовательской файловой системы
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICustomFileSystem
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с файлом
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef void* file_t;

    virtual file_t     FileOpen   (const char* name, filemode_t mode_flags, size_t buffer_size) = 0;
    virtual void       FileClose  (file_t) = 0;
    virtual size_t     FileBufferSize (file_t) { return 0; } //ret (size_t)-1 - буферизация невозможна
    virtual size_t     FileRead   (file_t, void* buf, size_t size) = 0;
    virtual size_t     FileWrite  (file_t, const void* buf, size_t size) = 0;
    virtual void       FileRewind (file_t) = 0;
    virtual filepos_t  FileSeek   (file_t, filepos_t pos) = 0;
    virtual filepos_t  FileTell   (file_t) = 0;
    virtual filesize_t FileSize   (file_t) = 0;
    virtual void       FileResize (file_t, filesize_t new_size) = 0; 
    virtual bool       FileEof    (file_t) = 0;    
    virtual void       FileFlush  (file_t) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление расположением файлов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Remove (const char* file_name) = 0;
    virtual void Rename (const char* file_name, const char* new_name) = 0;
    virtual void Mkdir  (const char* dir_name) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение информации о файле
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool IsFileExist (const char* file_name) = 0;
    virtual bool GetFileInfo (const char* file_name, FileInfo& info) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о файловой системе
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual filesize_t GetFreeSpace  (const char* path) = 0;  //returns (filesize_t)-1 if free space can't be determined
    virtual filesize_t GetTotalSpace (const char* path) = 0;  //returns (filesize_t)-1 if free space can't be determined

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файловые атрибуты
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetFileAttribute    (const char* file_name, const char* attribute, const void* data, size_t size) = 0;
    virtual void GetFileAttribute    (const char* file_name, const char* attribute, void* data, size_t size) = 0;
    virtual bool HasFileAttribute    (const char* file_name, const char* attribute) = 0;
    virtual void RemoveFileAttribute (const char* file_name, const char* attribute) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* file, const FileInfo& info)> FileSearchHandler;

    virtual void Search (const char* wc_mask, const FileSearchHandler& handler) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;
    
  protected:
    virtual ~ICustomFileSystem () {}
};

/*
    Классы для работы с файлом
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файл
///////////////////////////////////////////////////////////////////////////////////////////////////
class File
{
  friend class FileSystem;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    File  ();
    File  (const File&);
    ~File ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    File& operator = (const File&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение пути к файлу
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Path () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим работы файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    filemode_t Mode        () const;
    bool       CanRead     () const;
    bool       CanWrite    () const;
    bool       CanResize   () const;
    bool       CanSeek     () const;
    bool       CanRewind   () const;
    bool       IsReadOnly  () const;
    bool       IsWriteOnly () const;
    bool       IsClosed    () const;
    bool       IsBuffered  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение / запись
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Read  (void* buf, size_t size);
    size_t Write (const void* buf, size_t size);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файловый указатель
///////////////////////////////////////////////////////////////////////////////////////////////////
    void      Rewind ();
    filepos_t Seek   (filepos_t pos, FileSeekMode mode = FileSeekMode_Set);
    filepos_t Tell   () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размер файла / проверка на конец файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    filesize_t Size   () const;
    void       Resize (filesize_t new_size); 
    bool       Eof    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс буферов на диск
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Flush ();
    
    size_t BufferSize () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Закрытие файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Close ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение двух файлов на эквивалентность
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const File&) const;
    bool operator != (const File&) const;    
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора файла (для внутреннего использования)
///////////////////////////////////////////////////////////////////////////////////////////////////    
    FileImplPtr GetImpl () const;

  protected:
    File (FileImplPtr);

  private:
    FileImplPtr impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Стандартный именованный файл
///////////////////////////////////////////////////////////////////////////////////////////////////
class StdFile: public File
{
  public:
    StdFile (const char* file_name, filemode_t mode_flags);
    StdFile (const char* file_name, filemode_t mode_flags, size_t buffer_size);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Стандартный именованный файл для чтения
///////////////////////////////////////////////////////////////////////////////////////////////////
class InputFile: public StdFile
{
  public:
    explicit InputFile (const char* file_name);
             InputFile (const char* file_name, size_t buffer_size);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Стандартный именованный файл для записи
///////////////////////////////////////////////////////////////////////////////////////////////////
class OutputFile: public StdFile
{
  public:
    explicit OutputFile (const char* file_name);
             OutputFile (const char* file_name, size_t buffer_size);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Временный файл
///////////////////////////////////////////////////////////////////////////////////////////////////
class TempFile: public StdFile
{
  public:
    explicit TempFile (const char* file_name_pattern); //printf-like format string
             TempFile (const char* file_name_pattern, size_t buffer_size); //printf-like format string
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Стандартный именованный файл для дозаписи
///////////////////////////////////////////////////////////////////////////////////////////////////
class AppendFile: public StdFile
{
  public:
    explicit AppendFile (const char* file_name);
             AppendFile (const char* file_name, size_t buffer_size);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файл в памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
class MemFile: public File
{
  public:
    MemFile (size_t buffer_reserved_size = 0, filemode_t mode_flags = FileMode_ReadWrite);
    MemFile (void* buf, size_t size, filemode_t mode_flags = FileMode_Write | FileMode_Read | FileMode_Seek | FileMode_Rewind);
    
    void* Buffer () const;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Пользовательский файл
///////////////////////////////////////////////////////////////////////////////////////////////////
class CustomFile: public File
{
  public:
    CustomFile (ICustomFileSystemPtr file_system, const char* file_name, filemode_t mode);
    CustomFile (ICustomFileSystemPtr      file_system, 
                ICustomFileSystem::file_t handle, 
                filemode_t                mode, 
                bool                      auto_close = false);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файл с шифрованием
///////////////////////////////////////////////////////////////////////////////////////////////////
class CryptoFile: public File
{
  public:
    CryptoFile (const File& source_file, 
                const char* read_crypto_method, 
                const void* key, 
                unsigned short key_bits);
    CryptoFile (const File& source_file, 
                const char* read_crypto_method, 
                const char* write_crypto_method, 
                const void* key, 
                unsigned short key_bits);
};

/*
    Классы обслуживающие поиск файлов
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Элемент списка файлов
///////////////////////////////////////////////////////////////////////////////////////////////////
struct FileListItem
{
  const char* name; //имя файла
  FileInfo    info; //информация о файле
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Итератор обхода списка файлов
///////////////////////////////////////////////////////////////////////////////////////////////////
class FileListIterator
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FileListIterator  ();
    FileListIterator  (const FileList&);
    FileListIterator  (const FileListIterator&);
    ~FileListIterator ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    FileListIterator& operator = (const FileListIterator&);
    FileListIterator& operator = (const FileList&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Переход по файлам
///////////////////////////////////////////////////////////////////////////////////////////////////
    FileListIterator& operator ++ ();
    FileListIterator& operator -- ();
    FileListIterator  operator ++ (int);
    FileListIterator  operator -- (int);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение информации о файле
///////////////////////////////////////////////////////////////////////////////////////////////////
    const FileListItem* operator -> () const;
    const FileListItem& operator *  () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка корректности итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    operator bool () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const FileListIterator&) const;
    bool operator != (const FileListIterator&) const;
    bool operator <  (const FileListIterator&) const;
    bool operator >  (const FileListIterator&) const;
    bool operator <= (const FileListIterator&) const;
    bool operator >= (const FileListIterator&) const;          

  private:
    FileListImplPtr list_impl;
    size_t          pos;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список файлов
///////////////////////////////////////////////////////////////////////////////////////////////////
class FileList
{
  friend class FileListIterator;
  friend class FileListBuilder;
  public:
    typedef FileListIterator Iterator;
    typedef FileListItem     ItemType;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктры / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FileList  ();
    FileList  (const FileList&);
    ~FileList ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    FileList& operator = (const FileList&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество файлов / информация об i-м файле
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t          Size () const;
    const ItemType& Item (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итератора перебора списка
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator GetIterator () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение двух списков на эквивалентность
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const FileList&) const;
    bool operator != (const FileList&) const;

  private:
    FileList (FileListImpl*);

  private:
    FileListImplPtr impl;
};

/*
    Классы обеспечивающие настройку шифрования файлов
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры шифрования
///////////////////////////////////////////////////////////////////////////////////////////////////
class FileCryptoParameters
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    FileCryptoParameters  (const char* read_method, const char* write_method, const void* key, unsigned short key_bits);
    FileCryptoParameters  (const char* read_method, const char* write_method, const char* key_string);
    FileCryptoParameters  (const FileCryptoParameters&);
    ~FileCryptoParameters ();

    FileCryptoParameters& operator = (const FileCryptoParameters&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char*    ReadMethod  () const; //метод шифрования при чтении из файла
    const char*    WriteMethod () const; //метод шифрования при записи в файл
    const void*    Key         () const; //указатель на буфер, содержащий ключ шифрования
    unsigned short KeyBits     () const; //количество битов в ключе

  private:
    struct Impl;
    Impl* impl;
};



/*
    Классы обеспечивающие управление файловой системой
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Статус операции фонового копирования
///////////////////////////////////////////////////////////////////////////////////////////////////
enum BackgroundCopyStateStatus
{
  BackgroundCopyStateStatus_Started,      //Копирование началось
  BackgroundCopyStateStatus_InProgress,   //Копирование в процессе
  BackgroundCopyStateStatus_Finished,     //Копирование успешно завершено
  BackgroundCopyStateStatus_Failed        //Произошла ошибка во время копирования
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние фонового копирования
///////////////////////////////////////////////////////////////////////////////////////////////////
class BackgroundCopyState
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор/копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    BackgroundCopyState  ();
    BackgroundCopyState  (const BackgroundCopyState&);
    ~BackgroundCopyState ();

    BackgroundCopyState& operator = (const BackgroundCopyState&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Клонирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    BackgroundCopyState Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
//Получение размера файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    void       SetFileSize (filesize_t size);
    filesize_t FileSize    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение количества скопированных байт
///////////////////////////////////////////////////////////////////////////////////////////////////
    void       SetBytesCopied (filesize_t size);
    filesize_t BytesCopied    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
////Статус операции
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                      SetStatus (BackgroundCopyStateStatus status);
    BackgroundCopyStateStatus Status    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текст ошибки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetStatusText (const char* error);
    const char* StatusText    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (BackgroundCopyState&);
    
  private:
    struct Impl;

    BackgroundCopyState (Impl*);

  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (BackgroundCopyState&, BackgroundCopyState&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файловая система
///////////////////////////////////////////////////////////////////////////////////////////////////
class FileSystem
{
  public:
    typedef xtl::function<void (const char* message)>            LogHandler;
    typedef xtl::function<ICustomFileSystem* (const char* path)> PackFileCreater;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего каталога
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void        SetCurrentDir (const char* path);
    static const char* GetCurrentDir ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление путей поиска
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void AddSearchPath        (const char* path);
    static void AddSearchPath        (const char* path, const LogHandler& log_handler);
    static void RemoveSearchPath     (const char* path);
    static void RemoveAllSearchPaths ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление пользовательских типов пак-файлов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterPackFile   (const char* extension, const PackFileCreater& creater);
    static void UnregisterPackFile (const char* extension);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Монтирование пользовательской файловой системы
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Mount       (const char* path_prefix, ICustomFileSystemPtr file_system);
    static void Mount       (const char* path_prefix, const char* path, const char* force_extension=0);
    static void MountLink   (const char* path_prefix, const char* path);
    static void Unmount     (const char* path_prefix);
    static void Unmount     (ICustomFileSystemPtr file_system);
    static void UnmountAll  ();
    static bool IsPathMount (const char* path); //проверка: смонтирован ли путь

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройка шифрования
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetCryptoParameters (const char* path, 
                                     const char* read_crypto_method, 
                                     const char* write_crypto_method, 
                                     const void* key, 
                                     unsigned short key_bits);
    static void                 SetCryptoParameters       (const char* path, const FileCryptoParameters& parameters);
    static bool                 HasCryptoParameters       (const char* path);
    static FileCryptoParameters GetCryptoParameters       (const char* path);
    static void                 RemoveCryptoParameters    (const char* path);
    static void                 RemoveAllCryptoParameters ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение ключа шифрования по файлу
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void GetFileCryptoKey (const char* file_name, filecryptokey_t key);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файловые атрибуты
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetFileAttribute    (const char* file_name, const char* attribute, const void* data, size_t size);
    static void GetFileAttribute    (const char* file_name, const char* attribute, void* data, size_t size);
    static bool HasFileAttribute    (const char* file_name, const char* attribute);
    static void RemoveFileAttribute (const char* file_name, const char* attribute);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление / переименование файла, создание каталога
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Remove (const char* file_name);
    static void Rename (const char* file_name, const char* new_name);
    static void Mkdir  (const char* dir_name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void        CopyFile       (const char* source_file_name, const char* destination_file_name, size_t buffer_size = 0);
    static stl::string CopyToTempFile (const char* source_file_name);

    typedef xtl::function<void (const BackgroundCopyState&)> BackgroundCopyFileCallback;

    static Action BackgroundCopyFile (const char* source_file_name, const char* destination_file_name, const BackgroundCopyFileCallback& callback, ActionThread thread, size_t buffer_size = 0);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о файле
///////////////////////////////////////////////////////////////////////////////////////////////////
    static bool       GetFileInfo (const char* file_name, FileInfo& info);
    static bool       IsFileExist (const char* file_name);
    static bool       IsDir       (const char* file_name);
    static filetime_t GetFileTime (const char* file_name);
    static filesize_t GetFileSize (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о файловой системе
///////////////////////////////////////////////////////////////////////////////////////////////////
    static filesize_t GetFreeSpace  (const char* path);  //returns (unsigned long long)-1 if free space can't be determined
    static filesize_t GetTotalSpace (const char* path);  //returns (unsigned long long)-1 if free space can't be determined

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рассчёт хэш сумм содержимого файла
///////////////////////////////////////////////////////////////////////////////////////////////////        
    static void GetFileHash (File& file, FileHash& out_hash_value);
    static void GetFileHash (File& file, size_t max_hash_size, FileHash& out_hash_value);    
    static void GetFileHash (const char* file_name, FileHash& out_hash_value);
    static void GetFileHash (const char* file_name, size_t max_hash_size, FileHash& out_hash_value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о файле
///////////////////////////////////////////////////////////////////////////////////////////////////
    static FileList Search (const char* wc_mask, size_t flags=FileSearch_FilesAndDirs);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка размера буфера файла по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void   SetDefaultFileBufferSize (size_t buffer_size);
    static size_t GetDefaultFileBufferSize ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка размера буфера файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void   SetFileBufferSize (const char* file_name, size_t buffer_size);
    static size_t GetFileBufferSize (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Закрытие всех открытых файлов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void CloseAllFiles ();    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Приведение файлового имени к стандартному виду
///////////////////////////////////////////////////////////////////////////////////////////////////
    static stl::string GetNormalizedFileName (const char* file_name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение текстового файла в строку
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void        LoadTextFile (const char* file_name, stl::string& buffer);
    static stl::string LoadTextFile (const char* file_name);
};

}

#endif
