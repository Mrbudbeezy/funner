#ifndef COMMONLIB_THREAD_HEADER
#define COMMONLIB_THREAD_HEADER

#include <xtl/functional_fwd>

namespace common
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Константы
///////////////////////////////////////////////////////////////////////////////////////////////////
const int THREAD_CANCELED_EXIT_CODE = -1; //од завершения сброшенной нити

///////////////////////////////////////////////////////////////////////////////////////////////////
///Нить
///////////////////////////////////////////////////////////////////////////////////////////////////
class Thread
{
  public:
    typedef xtl::function<int ()> Function;
    
      //продумать автоматическое удаление ресурсов!!!
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Thread  ();
    Thread  (const Function& thread_function);
    Thread  (const char* name, const Function& thread_function);
    Thread  (const Thread&);
    ~Thread ();

    Thread& operator = (const Thread&);    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отмена нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Cancel ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ожидание завершения нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    int Join (); //return exit code

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Thread&);        

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение текущей нити
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Thread GetCurrent ();
    
  private:
    struct Impl;

    Thread (Impl*);

  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Thread&, Thread&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Критическая секция кода - запрещает отмену текущей нити
///////////////////////////////////////////////////////////////////////////////////////////////////
class CriticalSection
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Вход / выход из критической секции (может быть рекурсивным)
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Enter ();
    static void Exit  ();
};

}

#endif
