#ifndef COMMONLIB_CRYPTO_HEADER
#define COMMONLIB_CRYPTO_HEADER

#include <stl/auto_ptr.h>
#include <xtl/functional_fwd>

namespace common
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст шифрования
///////////////////////////////////////////////////////////////////////////////////////////////////
class CryptoContext
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    CryptoContext  (const char* method, const void* key, unsigned short key_bits, const char* init_string = "");
    ~CryptoContext ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение информации о контексте
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t BlockSize () const; //размер блока шифрования в байтах (0 - только поточное шифрование)

//////////////////////////////////////////////////////////////////////////////////////////////////
///Шифрование / дешифровка данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Update (size_t data_size, const void* src_buffer, void* dst_buffer);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (CryptoContext&);

  private:
    CryptoContext (const CryptoContext&); //no impl
    CryptoContext& operator = (const CryptoContext&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (CryptoContext&, CryptoContext&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс контекста шифрования
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICryptoContext
{
  public:
    virtual ~ICryptoContext () {}
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение информации о контексте
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t GetBlockSize () = 0; //размер блока шифрования в байтах (0 - только поточное шифрование)

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Update (size_t data_size, const void* src_buffer, void* dst_buffer) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система управления шифрованием
///////////////////////////////////////////////////////////////////////////////////////////////////
class CryptoSystem
{
  public:
    typedef xtl::function<ICryptoContext* (const char* method, const void* key, unsigned short key_bits, const char* init_string)> CrypterCreator;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация систем шифрования
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterCrypter       (const char* method, const CrypterCreator& creator);
    static void UnregisterCrypter     (const char* method);
    static void UnregisterAllCrypters ();
};

}

#endif
