#ifndef COMMONLIB_LOG_HEADER
#define COMMONLIB_LOG_HEADER

#include <xtl/functional_fwd>

namespace common
{

//forward declarations
class LogImpl;
class LogFilterImpl;
class File;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Именованный протокол
///////////////////////////////////////////////////////////////////////////////////////////////////
class Log
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Log  (const char* name);
    Log  (const Log&);
    ~Log ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Log& operator = (const Log&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Печать сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Print   (const char* message) const;
    void Printf  (const char* message, ...) const;
    void VPrintf (const char* message, va_list list) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Log&);

  private:
    LogImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Log&, Log&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Фильтр протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
class LogFilter
{
  public:
    typedef xtl::function<void (const char* log_name, const char* message)> LogHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    LogFilter  (const char* log_name_mask, const LogHandler& handler);
    LogFilter  (const LogFilter&);
    ~LogFilter ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    LogFilter& operator = (const LogFilter&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение маски
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Mask () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (LogFilter&);

  private:
    LogFilterImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (LogFilter&, LogFilter&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Запись протокола в файл
///////////////////////////////////////////////////////////////////////////////////////////////////
class LogFile
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    LogFile  ();
    LogFile  (const common::File& file);
    ~LogFile ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение текущего файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                SetFile (const common::File& file);
    const common::File& File    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Печать сообщения в файл
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Print (const char* log_name, const char* message);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/удаление фильтров замены сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddFilter        (const char* replace_mask, const char* replacement, size_t sort_order=~0);
    void   SetFilter        (size_t filter_index, const char* replace_mask, const char* replacement, size_t sort_order=~0);
    void   RemoveFilter     (size_t filter_index);
    void   RemoveAllFilters ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс файлового буффера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Flush ();

  private:
    LogFile (const LogFile&);                   //no impl
    const LogFile& operator = (const LogFile&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
