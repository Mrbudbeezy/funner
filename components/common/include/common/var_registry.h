#ifndef COMMONLIB_VAR_REGISTRY_HEADER
#define COMMONLIB_VAR_REGISTRY_HEADER

#include <xtl/functional_fwd>

namespace common
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///События реестра переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
enum VarRegistryEvent
{
  VarRegistryEvent_OnCreateVar, //появление новой переменной
  VarRegistryEvent_OnDeleteVar, //удаление переменной
  VarRegistryEvent_OnChangeVar, //изменение значения переменной

  VarRegistryEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реестр переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICustomVarRegistry
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/установка данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* GetValue (const char* var_name) = 0;
    virtual       void  SetValue (const char* var_name, const char* value) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool HasVariable (const char* var_name) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обход всех переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* var_name)> EnumHandler;

    virtual void EnumerateVars (const EnumHandler& handler) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление ссылки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef () = 0;
    virtual void Release () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на добавление/изменение/удаление переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function <void (const char* var_name, VarRegistryEvent event)> EventHandler;

    virtual void                SetEventHandler (const EventHandler& handler) = 0;
    virtual const EventHandler& GetEventHandler () = 0;

  protected:
    virtual ~ICustomVarRegistry () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обёртка над реестром переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
class VarRegistry
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
    VarRegistry ();
    VarRegistry (const char* branch_name);
    VarRegistry (const VarRegistry& source);
    ~VarRegistry ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    VarRegistry& operator = (const VarRegistry& source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/установка данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetValue (const char* var_name) const;
          void  SetValue (const char* var_name, const char* value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool HasVariable (const char* var_name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* BranchName () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка подключен ли реестр
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsOpened () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подключение/отключение реестра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Open  (const char* branch_name);
    void Close ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обход всех переменных / переменных по маске
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef ICustomVarRegistry::EnumHandler EnumHandler;

    void EnumerateVars (const EnumHandler& handler);
    void EnumerateVars (const char* var_name_mask, const EnumHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на добавление/изменение/удаление переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function <void (const char* var_name)> EventHandler;

    xtl::connection RegisterEventHandler (const char* var_name_mask, VarRegistryEvent event, const EventHandler& handler) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (VarRegistry& source);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (VarRegistry& source1, VarRegistry& source2);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реестр строковых переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
class StringRegistry
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
    StringRegistry ();
    StringRegistry (const StringRegistry& source);
    ~StringRegistry ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    StringRegistry& operator = (const StringRegistry& source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/установка данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetValue (const char* var_name) const;
          void  SetValue (const char* var_name, const char* value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RemoveVariable (const char* var_name);
    void RemoveAllVariables ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool HasVariable (const char* var_name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение/отсоединение реестра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Mount      (const char* branch_name);
    void Unmount    (const char* branch_name);
    void UnmountAll ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (StringRegistry& source);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (StringRegistry& source1, StringRegistry& source2);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система реестров переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
class VarRegistrySystem
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение/отсоединение реестра
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Mount      (const char* branch_name, ICustomVarRegistry* registry);
    static void Unmount    (const char* branch_name);
    static void UnmountAll ();
};

}

#endif