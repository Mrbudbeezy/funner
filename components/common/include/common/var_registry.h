#ifndef COMMONLIB_VAR_REGISTRY_HEADER
#define COMMONLIB_VAR_REGISTRY_HEADER

#include <xtl/functional_fwd>

namespace common
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реестр переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICustomVarRegistry
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/установка данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* GetValue (const char* var_name) = 0;
    virtual       void  SetValue (const char* var_name, const char* value) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обход всех переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* var_name)> EnumHandler;

    virtual void ForEach (const EnumHandler& handler) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление ссылки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef () = 0;
    virtual void Release () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///TODO: Добавить подписку на добавление/изменение/удаление!!!!!!!!!!!
///////////////////////////////////////////////////////////////////////////////////////////////////

  protected:
    virtual ~ICustomVarRegistry ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обёртка над реестром переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
class VarRegistry
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
    VarRegistry ();
    VarRegistry (ICustomVarRegistry* registry, bool add_ref = true);
    VarRegistry (const VarRegistry& source);
    ~VarRegistry ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    VarRegistry& operator = (const VarRegistry& source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/установка данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetValue (const char* var_name) const;
          void  SetValue (const char* var_name, const char* value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool HasVariable (const char* var_name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка установлен ли реестр
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsBinded () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подключение/отключение реестра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind   (ICustomVarRegistry* registry);
    void Unbind ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обход всех переменных / переменных по маске
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef ICustomVarRegistry::EnumHandler EnumHandler;

    void ForEach (const EnumHandler& handler);
    void ForEach (const char* mask, const EnumHandler& handler);

  private:
    ICustomVarRegistry* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ссылка на часть реестра переменных имена которой начинаются на prefix
///////////////////////////////////////////////////////////////////////////////////////////////////
class RegistryReference : public VarRegistry
{
  RegistryReference (const char* prefix, const VarRegistry& source);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ссылка на часть реестра переменных имена которой начинаются на prefix
///////////////////////////////////////////////////////////////////////////////////////////////////
class StringRegistry
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение/установка данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetValue (const char* var_name) const;
          void  SetValue (const char* var_name, const char* value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RemoveVariable (const char* var_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool HasVariable (const char* var_name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение реестра
///////////////////////////////////////////////////////////////////////////////////////////////////
    VarRegistry GetRegistry () const;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Составной реестр
///////////////////////////////////////////////////////////////////////////////////////////////////
class CompositeVarRegistry
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение/отсоединение реестра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach (const char* prefix, const VarRegistry& registry);
    void Detach (const char* prefix);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение реестра
///////////////////////////////////////////////////////////////////////////////////////////////////
    VarRegistry GetComposite () const;

  private:
    struct Impl;
    Impl* impl;
};

}

#endif