#ifndef COMMONLIB_COMMAND_LINE_HEADER
#define COMMONLIB_COMMAND_LINE_HEADER

#include <cstddef>

#include <xtl/functional_fwd>

namespace common
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Разбор коммандной строки
///////////////////////////////////////////////////////////////////////////////////////////////////
class CommandLine
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    CommandLine ();
    ~CommandLine ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация обработчиков параметров коммандной строки
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char*)> SwitchHandler;

    void SetSwitchHandler (const char* switch_long_name, char switch_short_name, const char* arg_name, const SwitchHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработка коммандной строки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Process (int argc, const char** argv);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение списка параметров (аргументы в коммандной строке без ключа)
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      ParamsCount () const;
    const char* Param       (size_t index) const;

  private:
    CommandLine (const CommandLine&);             //no impl
    CommandLine& operator = (const CommandLine&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
