#ifndef COMMONLIB_ACTION_QUEUE_HEADER
#define COMMONLIB_ACTION_QUEUE_HEADER

#include <xtl/functional_fwd>

namespace common
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очередь действий
///////////////////////////////////////////////////////////////////////////////////////////////////
class ActionQueue
{
  public:
    typedef size_t time_t;

    typedef xtl::function<void (size_t action_id)>    ActionHandler;
    typedef xtl::function<void (const char* message)> LogHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ActionQueue  ();
    ~ActionQueue ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление действий
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetAction    (size_t action_id, time_t target_time, const ActionHandler&);
    void SetAction    (size_t action_id, time_t first_time, time_t period, const ActionHandler&);
    void RemoveAction (size_t action_id);
    void Clear        ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение состояний
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsEmpty   () const;
    bool HasAction (size_t action_id) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Инициация действий (no throw) (time должен отличаться между двумя соседними вызовами)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void DoActions (time_t time, const LogHandler&);
    void DoActions (time_t time);
  
  private:
    ActionQueue (const ActionQueue&); //no impl
    ActionQueue& operator = (const ActionQueue&); //no impl
  
  private:
    struct Impl;
    Impl* impl;
};

}

#endif
