#ifndef COMMONLIB_STRING_HEADER
#define COMMONLIB_STRING_HEADER

#include <cstddef>

namespace common
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Массив строк (политика копирования - подсчёт ссылок)
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Char> class BasicStringArray
{
  public:
    typedef Char value_type;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    BasicStringArray  ();
    BasicStringArray  (const BasicStringArray&);
    BasicStringArray  (size_t string_count, const value_type** string_array);
    ~BasicStringArray ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    BasicStringArray Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    BasicStringArray& operator = (const BasicStringArray&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество строк / проверка на пустоту / зарезервированное число строк / размер буфера символов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size           () const;
    bool   IsEmpty        () const;
    size_t Capacity       () const;
    size_t BufferSize     () const;
    size_t BufferCapacity () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение строк
///////////////////////////////////////////////////////////////////////////////////////////////////
    const value_type*  Buffer () const;
    const value_type** Data   () const;
    const value_type*  operator [] (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление строк
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Add    (const value_type* string);
    size_t Add    (size_t string_count, const value_type** string_array);
    size_t Add    (const BasicStringArray&);
    void   Insert (size_t index, const value_type* string);
    void   Insert (size_t index, size_t string_count, const value_type** string_array);
    void   Insert (size_t index, const BasicStringArray&);
    
    BasicStringArray& operator += (const value_type*);
    BasicStringArray& operator += (const BasicStringArray&);
    BasicStringArray  operator +  (const value_type*) const;
    BasicStringArray  operator +  (const BasicStringArray&) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление строк
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Set (size_t index, const value_type* string);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление строк
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Remove (size_t first, size_t count);
    void Remove (size_t index);
    void Clear  ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование числа строк / резервирование места в буфере строк
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Reserve       (size_t string_count);
    void ReserveBuffer (size_t buffer_size);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (BasicStringArray&);
    
  private:
    class Impl;  
  
    BasicStringArray (Impl*);

  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Псевдонимы
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef BasicStringArray<char>    StringArray;
typedef BasicStringArray<wchar_t> WStringArray;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (StringArray&,  StringArray&);
void swap (WStringArray&, WStringArray&);

}

#endif
