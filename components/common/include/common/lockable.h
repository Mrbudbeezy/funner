#ifndef COMMONLIB_LOCKABLE_HEADER
#define COMMONLIB_LOCKABLE_HEADER

namespace common
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блокировка
///  - динамическая память при создании объекта не выделяется
///////////////////////////////////////////////////////////////////////////////////////////////////
class Lockable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Lockable  ();
    ~Lockable ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вход / выход в критическую секцию кода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Lock   ();
    void Unlock ();

  private:
    Lockable (const Lockable&); //no impl
    Lockable& operator = (const Lockable&); //no impl

  private:
    typedef void* handle_t;

  private:  
    handle_t handle;    
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блокировка в пределах блока
///////////////////////////////////////////////////////////////////////////////////////////////////
class Lock
{
  public:
    Lock  (Lockable& in_lockable);
    ~Lock ();

  private:
    Lock (const Lock&); //no impl
    Lock& operator = (const Lock&); //no impl
    
  private:
    Lockable& lockable;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Функции для взаимодействия с XTL
///////////////////////////////////////////////////////////////////////////////////////////////////
void lock   (Lockable&);
void unlock (Lockable&);

#include <common/detail/lockable.inl>

}

#endif
