#ifndef COMMONLIB_LOCKABLE_HEADER
#define COMMONLIB_LOCKABLE_HEADER

namespace common
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блокировка
///////////////////////////////////////////////////////////////////////////////////////////////////
class Lockable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Lockable  ();
    ~Lockable ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вход / выход в критическую секцию кода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Lock   ();
    void Unlock ();

  private:
    Lockable (const Lockable&); //no impl
    Lockable& operator = (const Lockable&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

/*

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс менеджера блокировок
///////////////////////////////////////////////////////////////////////////////////////////////////
class LockableSystem
{
  public:
    struct lockable_t { void* data; };    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Инициализация / удаление блокировок
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void InitLockable    (lockable_t&);
    static void DestroyLockable (lockable_t&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вход / выход в критическую секцию кода
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Lock   (lockable_t&);
    static void Unlock (lockable_t&);
};*/

}

#endif
