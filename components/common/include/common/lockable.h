#ifndef COMMONLIB_LOCKABLE_HEADER
#define COMMONLIB_LOCKABLE_HEADER

namespace common
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блокируемый объект
///////////////////////////////////////////////////////////////////////////////////////////////////
class Lockable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Lockable  ();
    ~Lockable ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блокировка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Lock   ();
    void Unlock ();

  private:
    Lockable (const Lockable&); //no impl
    Lockable& operator = (const Lockable&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс блокируемого объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
class ILockable
{
  public:
    virtual ~ILockable () {}
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Блокировка
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Lock   () = 0;
    virtual void Unlock () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание блокируемого объекта (external linkage)
///////////////////////////////////////////////////////////////////////////////////////////////////
ILockable* create_lockable ();

}

#endif
