Results of compress_test:
source string:
This is hello\b\b\b\b\bworld string with '\132'\n
compressed string:
This is helloworld string with 'Z'
decompressed string:
This is hello\b\b\b\b\bworld string with 'Z'\n
Results of format_test:
string::format test, x=A, y=12, pi=3.1415
wstring::format test, x=A, y=12, pi=3.1415
Results of path1_test:
basename ('hello/world/base.suffix')='hello/world/base'
suffix ('hello/world/base.suffix')='.suffix'
basename ('.suffix')=''
suffix ('.suffix')='.suffix'
basename ('base')='base'
suffix ('base')=''
basename ('.')=''
suffix ('.')='.'
basename ('x/y.z')='x/y'
suffix ('x/y.z')='.z'
dir ('x/y/z')='x/y/'
notdir ('x/y/z')='z'
dir ('x')='./'
notdir ('x')='x'
dir ('/x')='/'
notdir ('/x')='x'
dir ('/')='/'
notdir ('/')=''
dir ('a/b/c')='a/b/'
notdir ('a/b/c')='c'
Results of regexp_test:
parse 'hello world' (pattern='(hello) ([[:lower:]]+)', locale='C') on 2 tokens:
    'hello'
    'world'
Results of split_test:
split 'hello world' (delimiters=' ', spaces=' \t') on 2 tokens:
    'hello'
    'world'
split 'hello, world' (delimiters=',', spaces=' \t') on 2 tokens:
    'hello'
    'world'
split 'hello,world' (delimiters=',', spaces=' \t') on 2 tokens:
    'hello'
    'world'
split ',world' (delimiters=',', spaces=' \t') on 2 tokens:
    ''
    'world'
split 'hello,' (delimiters=',', spaces=' \t') on 1 tokens:
    'hello'
split ',,hello,world,' (delimiters=',', spaces=' \t') on 4 tokens:
    ''
    ''
    'hello'
    'world'
split 'hello world ' (delimiters=' ', spaces=' \t') on 2 tokens:
    'hello'
    'world'
split '' (delimiters='', spaces='') on 0 tokens:
split 'hello world' (delimiters='', spaces=' \t') on 1 tokens:
    'hello world'
Results of sprintf_test:
result='Hello w', len=-1
control: 'A'
len=11
result='Hello w', len=-1
control: 'A'
len=11
Results of strcmp_test:
Compare tests:
strcmp('','Hello')=-1
strncmp('hello','hello',4)=0
strncmp('abcd','abc',5)=1
strncmp('hello','world',0)=0
strncmp('','',10)=0
strcmp('hello','Hello')=1
strncmp('abcde','abcdf',5)=-1
Case compare tests:
stricmp('','Hello')=-1
strnicmp('hello','hello',4)=0
strnicmp('abcd','abc',5)=1
strnicmp('hello','world',0)=0
strnicmp('','',10)=0
stricmp('hello','Hello')=0
strnicmp('abcde','abcdf',5)=-1
Results of wildcard_test:
case-sensetive:
'hello world' match 'hello*'
'hello world' match 'hello*?*'
'hello world' match '*world'
'hello world' match 'hell*world*'
'hello world' match '*hello*?*world*???'
'hello world' match '*world?'
'hello world' not match 'Hello World'
'hello world' not match 'HeLlO*'
'hello world' not match '*WorlD?'
'hello world' match '*'
'hello world' not match '?'
'hello world' not match 'hello wor'
'' match '*'
'' match '?'
'' match ''
'' not match 'hello world'
'hello world' not match ''
case-insensetive:
'hello world' match 'hello*'
'hello world' match 'hello*?*'
'hello world' match '*world'
'hello world' match 'hell*world*'
'hello world' match '*hello*?*world*???'
'hello world' match '*world?'
'hello world' match 'Hello World'
'hello world' match 'HeLlO*'
'hello world' match '*WorlD?'
'hello world' match '*'
'hello world' not match '?'
'hello world' not match 'hello wor'
'' match '*'
'' match '?'
'' match ''
'' not match 'hello world'
'hello world' not match ''
