namespace common
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Валидатор переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
class VarValidator
{
  public:    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Освобождение валидатора
///////////////////////////////////////////////////////////////////////////////////////////////////        
    void release ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Функция проверки и исправления значения переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void validate (Var&) = 0;    
    
  protected:    
    VarValidator ();

    virtual ~VarValidator () {}
    
  private:
    size_t ref_count;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Фабрика создания валидаторов
///////////////////////////////////////////////////////////////////////////////////////////////////
class VarValidatorFactory
{
  public:
    ~VarValidatorFactory ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание валидаторов
///////////////////////////////////////////////////////////////////////////////////////////////////    
    VarValidator* create (int min,int max);
    VarValidator* create (float min,float max);
    VarValidator* create (const math::vec2i& min,const math::vec2i& max);
    VarValidator* create (const math::vec3i& min,const math::vec3i& max);
    VarValidator* create (const math::vec4i& min,const math::vec4i& max);
    VarValidator* create (const math::vec2f& min,const math::vec2f& max);
    VarValidator* create (const math::vec3f& min,const math::vec3f& max);
    VarValidator* create (const math::vec4f& min,const math::vec4f& max);
    VarValidator* create (size_t count,const char** values);
    VarValidator* create (const stl::vector<stl::string>&);
};

}
