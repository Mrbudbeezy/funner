#ifndef __COMMONLIB_FILE_SYSTEM__
#define __COMMONLIB_FILE_SYSTEM__

#include <time.h>
#include <design/intrusive_ptr.h>
#include <common/callback.h>
#include <common/exception.h>

namespace common
{

//implementation forwards
class FileImpl;
class FileList;
class FileListImpl;
class FileListBuilder;

//intrusive pointers
typedef design::intrusive_ptr<FileImpl>     FileImplPtr;
typedef design::intrusive_ptr<FileListImpl> FileListImplPtr;

void intrusive_ptr_addref  (FileImpl*);
void intrusive_ptr_release (FileImpl*);
void intrusive_ptr_addref  (FileListImpl*);
void intrusive_ptr_release (FileListImpl*);

/*
    Файловые исключения
*/

struct FileExceptionTag;         //тэг базового класса файловых исключений
struct FileNotFoundExceptionTag; //файл не найден
struct FileNotDirExceptionTag;   //файл не является каталогом
struct FileLoadExceptionTag;     //ошибка загрузки файла
struct FileClosedExceptionTag;   //попытка обращения к закрытому файлу
struct FileNoSpaceExceptionTag;  //недостаточно места на носителе для завершения операции
struct FileMountExceptionTag;    //ошибка монтирования файловой системы
struct BufferedFileExceptionTag; //исключения связанные с буферизацией файла

typedef DerivedException<Exception,FileExceptionTag>              FileException;
typedef DerivedException<FileException,FileNotFoundExceptionTag>  FileNotFoundException;
typedef DerivedException<FileException,FileNotDirExceptionTag>    FileNotDirException;
typedef DerivedException<FileException,FileLoadExceptionTag>      FileLoadException;
typedef DerivedException<FileException,FileClosedExceptionTag>    FileClosedException;
typedef DerivedException<FileException,FileNoSpaceExceptionTag>   FileNoSpaceException;
typedef DerivedException<FileException,FileMountExceptionTag>     FileMountException;
typedef DerivedException<FileException,BufferedFileExceptionTag>  BufferedFileException;

/*
    Основные структуры
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файловые атрибуты 
///////////////////////////////////////////////////////////////////////////////////////////////////
enum FileModeFlags
{
  FILE_MODE_READ          = 1,  //чтение разрешено
  FILE_MODE_WRITE         = 2,  //запись разрешена
  FILE_MODE_RESIZE        = 4,  //изменение размера разрешено
  FILE_MODE_REWIND        = 8,  //сброс файлового указателя разрешён
  FILE_MODE_SEEK          = 16, //перемещение файлового указателя разрешено
  FILE_MODE_CREATE        = 32, //при отсутствии файл создаётся, размер файла усекается
  FILE_MODE_STREAM_READ   = FILE_MODE_READ|FILE_MODE_REWIND,         //чтение потока
  FILE_MODE_STREAM_WRITE  = FILE_MODE_WRITE|FILE_MODE_REWIND|FILE_MODE_RESIZE, //запись потока
  FILE_MODE_READ_ONLY     = FILE_MODE_STREAM_READ|FILE_MODE_SEEK,    //чтение файла произвольного доступа
  FILE_MODE_WRITE_ONLY    = FILE_MODE_CREATE|FILE_MODE_STREAM_WRITE|FILE_MODE_SEEK,   //запись файла произвольного доступа (сброс размера файла)
  FILE_MODE_READ_WRITE    = FILE_MODE_READ_ONLY|FILE_MODE_STREAM_WRITE, //чтение/запись файла произвольного доступа
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги поиска файла
///////////////////////////////////////////////////////////////////////////////////////////////////
enum FileSearchFlags
{
  FILE_SEARCH_FILES          = 1,  //искать файлы
  FILE_SEARCH_DIRS           = 2,  //искать каталоги
  FILE_SEARCH_SORT           = 4,  //отсортировать по имени
  FILE_SEARCH_NO_PACKS       = 8,  //не искать в паках
  FILE_SEARCH_SUBDIRS        = 16, //искать в подкаталогах
  FILE_SEARCH_FULL_PATHS     = 32, //выводить полные пути
  FILE_SEARCH_FILES_AND_DIRS = FILE_SEARCH_FILES|FILE_SEARCH_DIRS
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим изменения файловой позиции
///////////////////////////////////////////////////////////////////////////////////////////////////
enum FileSeekMode
{
  FILE_SEEK_SET, //установка позиции от начала файла
  FILE_SEEK_CUR, //установка позиции от текущего положения файлового указателя
  FILE_SEEK_END  //установка позиции от конца файла
};

typedef size_t filesize_t, filemode_t;
typedef time_t filetime_t;
typedef int    filepos_t;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о файле
///////////////////////////////////////////////////////////////////////////////////////////////////
struct FileInfo
{
  filetime_t time_create;  //время создания файла
  filetime_t time_access;  //время последнего доступа к файлу
  filetime_t time_modify;  //время последней модификации файла
  filesize_t size;         //размер файла
  bool       is_dir;       //является ли файл директорией
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Хэш суммы содержимого файла
///////////////////////////////////////////////////////////////////////////////////////////////////
struct FileHash
{
  size_t        crc32;    //хэш-сумма CRC32
  unsigned char md5 [16]; //хэш-сумма MD5
};

/*
    Импортируемые интерфейсы файловой системы
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс пользовательской файловой системы
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICustomFileSystem
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с файлом
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef void* file_t;

    virtual file_t     FileOpen   (const char* name,filemode_t mode_flags,size_t buffer_size) = 0;
    virtual void       FileClose  (file_t) = 0;
    virtual size_t     FileBufferSize (file_t) { return 0; } //ret (size_t)-1 - буферизация невозможна
    virtual size_t     FileRead   (file_t,void* buf,size_t size) = 0;
    virtual size_t     FileWrite  (file_t,const void* buf,size_t size) = 0;
    virtual void       FileRewind (file_t) = 0;
    virtual filepos_t  FileSeek   (file_t,filepos_t pos) = 0;
    virtual filepos_t  FileTell   (file_t) = 0;
    virtual filesize_t FileSize   (file_t) = 0;
    virtual void       FileResize (file_t,filesize_t new_size) = 0; 
    virtual bool       FileEof    (file_t) = 0;    
    virtual void       FileFlush  (file_t) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление расположением файлов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Remove (const char* file_name) = 0;
    virtual void Rename (const char* file_name,const char* new_name) = 0;
    virtual void Mkdir  (const char* dir_name) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение информации о файле
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool IsFileExist (const char* file_name) = 0;
    virtual bool GetFileInfo (const char* file_name,FileInfo& info) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск файла (Search возвращает количество найденных файлов)
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef CallbackHandler<const char*,const FileInfo&> FileSearchHandler;

    virtual void Search (const char* wc_mask,const FileSearchHandler& handler) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;
};

/*
    Классы для работы с файлом
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файл
///////////////////////////////////////////////////////////////////////////////////////////////////
class File
{
  friend class FileSystem;
  public:
    File  ();
    File  (const File&);
    ~File ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим работы файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    filemode_t Mode        () const;
    bool       CanRead     () const;
    bool       CanWrite    () const;
    bool       CanResize   () const;
    bool       CanSeek     () const;
    bool       CanRewind   () const;
    bool       IsReadOnly  () const;
    bool       IsWriteOnly () const;
    bool       IsClosed    () const;
    bool       IsBuffered  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение / запись
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Read  (void* buf,size_t size);
    size_t Write (const void* buf,size_t size);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файловый указатель
///////////////////////////////////////////////////////////////////////////////////////////////////
    void      Rewind ();
    filepos_t Seek   (filepos_t pos,FileSeekMode mode = FILE_SEEK_SET);
    filepos_t Tell   () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размер файла / проверка на конец файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    filesize_t Size   () const;
    void       Resize (filesize_t new_size); 
    bool       Eof    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс буферов на диск
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Flush ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Закрытие файла
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Close ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение двух файлов на эквивалентность
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const File&) const;
    bool operator != (const File&) const;

  protected:
    File (FileImpl*);

  private:
    FileImplPtr impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Стандартный именованный файл
///////////////////////////////////////////////////////////////////////////////////////////////////
class StdFile: public File
{
  public:
    StdFile (const char* file_name,filemode_t mode_flags);
    StdFile (const char* file_name,filemode_t mode_flags,size_t buffer_size);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Стандартный именованный файл для чтения
///////////////////////////////////////////////////////////////////////////////////////////////////
class InputFile: public StdFile
{
  public:
    explicit InputFile (const char* file_name);
             InputFile (const char* file_name,size_t buffer_size);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Стандартный именованный файл для записи
///////////////////////////////////////////////////////////////////////////////////////////////////
class OutputFile: public StdFile
{
  public:
    explicit OutputFile (const char* file_name);
             OutputFile (const char* file_name,size_t buffer_size);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Стандартный именованный файл для дозаписи
///////////////////////////////////////////////////////////////////////////////////////////////////
class AppendFile: public StdFile
{
  public:
    explicit AppendFile (const char* file_name);
             AppendFile (const char* file_name,size_t buffer_size);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файл в памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
class MemFile: public File
{
  public:
    MemFile (void* buf,size_t size,filemode_t mode_flags=FILE_MODE_READ_WRITE);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Пользовательский файл
///////////////////////////////////////////////////////////////////////////////////////////////////
class CustomFile: public File
{
  public:
    CustomFile (ICustomFileSystem* file_system,const char* file_name,filemode_t mode);
    CustomFile (ICustomFileSystem*        file_system,
                ICustomFileSystem::file_t handle,
                filemode_t                mode,
                bool                      auto_close = false);
};

/*
    Классы обслуживающие поиск файлов
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Элемент списка файлов
///////////////////////////////////////////////////////////////////////////////////////////////////
struct FileListItem
{
  const char* name; //имя файла
  FileInfo    info; //информация о файле
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Итератор обхода списка файлов
///////////////////////////////////////////////////////////////////////////////////////////////////
class FileListIterator
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы и присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    FileListIterator ();
    FileListIterator (const FileList&);

    FileListIterator& operator = (const FileList&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Переход по файлам
///////////////////////////////////////////////////////////////////////////////////////////////////
    FileListIterator& operator ++ ();
    FileListIterator& operator -- ();
    FileListIterator  operator ++ (int);
    FileListIterator  operator -- (int);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение информации о файле
///////////////////////////////////////////////////////////////////////////////////////////////////
    const FileListItem* operator -> () const;
    const FileListItem& operator *  () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка корректности итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    operator bool () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const FileListIterator&) const;
    bool operator != (const FileListIterator&) const;
    bool operator <  (const FileListIterator&) const;
    bool operator >  (const FileListIterator&) const;
    bool operator <= (const FileListIterator&) const;
    bool operator >= (const FileListIterator&) const;          

  private:
    FileListImplPtr list_impl;
    size_t          pos;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список файлов
///////////////////////////////////////////////////////////////////////////////////////////////////
class FileList
{
  friend class FileListIterator;
  friend class FileListBuilder;
  public:
    typedef FileListIterator Iterator;
    typedef FileListItem     ItemType;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FileList ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество файлов / информация об i-м файле
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t          Size () const;
    const ItemType& Item (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итератора перебора списка
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator GetIterator () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение двух списков на эквивалентность
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const FileList&) const;
    bool operator != (const FileList&) const;

  private:
    FileList (FileListImpl*);

  private:
    FileListImplPtr impl;
};

/*
    Классы обеспечивающие управление файловой системой
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Файловая система
///////////////////////////////////////////////////////////////////////////////////////////////////
class FileSystem
{
  public:
    typedef CallbackHandler<const char*>                     LogHandler;
    typedef CallbackFunction<ICustomFileSystem*,const char*> PackFileCreater;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего каталога
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void        SetCurrentDir (const char* path);
    static const char* GetCurrentDir ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление путей поиска
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void AddSearchPath        (const char* path);
    static void AddSearchPath        (const char* path,const LogHandler& log_handler);
    static void RemoveSearchPath     (const char* path);
    static void RemoveAllSearchPaths ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление пользовательских типов пак-файлов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterPackFile   (const char* extension,const PackFileCreater& creater);
    static void UnregisterPackFile (const char* extension);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Монтирование пользовательской файловой системы
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Mount       (const char* path_prefix,ICustomFileSystem* file_system);
    static void Unmount     (const char* path_prefix);
    static void Unmount     (ICustomFileSystem* file_system);
    static void UnmountAll  ();
    static bool IsPathMount (const char* path); //проверка: смонтирован ли путь

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление / переименование файла, создание каталога
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Remove (const char* file_name);
    static void Rename (const char* file_name,const char* new_name);
    static void Mkdir  (const char* dir_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о файле
///////////////////////////////////////////////////////////////////////////////////////////////////
    static bool       GetFileInfo (const char* file_name,FileInfo& info);
    static bool       IsFileExist (const char* file_name);
    static bool       IsDir       (const char* file_name);
    static filetime_t GetFileTime (const char* file_name);
    static filesize_t GetFileSize (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рассчёт хэш сумм содержимого файла
///////////////////////////////////////////////////////////////////////////////////////////////////        
    static void GetFileHash (File& file,FileHash& out_hash_value);
    static void GetFileHash (const char* file_name,FileHash& out_hash_value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о файле
///////////////////////////////////////////////////////////////////////////////////////////////////
    static FileList Search (const char* wc_mask,size_t flags=FILE_SEARCH_FILES_AND_DIRS);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка размера буфера файла по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void   SetDefaultFileBufferSize (size_t buffer_size);
    static size_t GetDefaultFileBufferSize ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Закрытие всех открытых файлов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void CloseAllFiles ();    
};

}

#endif
