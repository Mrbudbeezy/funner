#ifndef __COMMONLIB_ETC__
#define __COMMONLIB_ETC__

#include <math/mathlib.h>
#include <common/callback.h>
#include <stl/string>

namespace common
{

//forward declarations
class Var;
class Etc;
class EtcBranch;
class VarValidatorFactory;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
enum VarType
{
  VAR_STRING,
  VAR_INTEGER,
  VAR_BOOL,
  VAR_FLOAT,
  VAR_VEC2F,
  VAR_VEC2I,  
  VAR_VEC3F,
  VAR_VEC3I,
  VAR_VEC4F,
  VAR_VEC4I,
  
  VAR_TYPES_NUM
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///События связанные с переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
enum VarEvent
{
  VAR_ON_SET,    //изменение переменной
  VAR_ON_GET,    //взятие значения переменной

  VAR_EVENTS_NUM
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Переменная
///////////////////////////////////////////////////////////////////////////////////////////////////
class Var
{
  friend class Etc;  
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* name  () const; //имя переменной
    VarType     type  () const; //тип переменной

///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение значения переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char*        value (char* buf=0,size_t buf_size=(size_t)-1) const; //полное значение переменной
    const char*        gets  () const;
    int                geti  () const;
    float              getf  () const;
    const math::vec2f& get2f () const;
    const math::vec2i& get2i () const;
    const math::vec3f& get3f () const;
    const math::vec3i& get3i () const;
    const math::vec4f& get4f () const;
    const math::vec4i& get4i () const;
    bool               test  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка значения переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool set (const char* value);
    bool set (int value);
    bool set (bool value);
    bool set (float value);
    bool set (const math::vec2f& value);
    bool set (const math::vec2i& value);
    bool set (const math::vec3f& value);
    bool set (const math::vec3i& value);
    bool set (const math::vec4f& value);
    bool set (const math::vec4i& value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Биндинг переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
    void bind   (char* buf,size_t buf_size=-1);
    void bind   (stl::string&);
    void bind   (int&);
    void bind   (bool&);
    void bind   (float&);
    void bind   (math::vec2f&);
    void bind   (math::vec2i&);
    void bind   (math::vec3f&);
    void bind   (math::vec3i&);
    void bind   (math::vec4f&);
    void bind   (math::vec4i&);
    void unbind ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработчики событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef CallbackHandler<Var&> EventHandler;

    void attach (VarEvent event,const EventHandler& handler);
    void detach (VarEvent event,const EventHandler& handler);
    void detach (VarEvent event);
    void detach ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Верификация
///////////////////////////////////////////////////////////////////////////////////////////////////
    void verify (); //no verify
    void verify (int min,int max);
    void verify (float min,float max);
    void verify (const math::vec2i& min,const math::vec2i& max);
    void verify (const math::vec3i& min,const math::vec3i& max);
    void verify (const math::vec4i& min,const math::vec4i& max);
    void verify (const math::vec2f& min,const math::vec2f& max);
    void verify (const math::vec3f& min,const math::vec3f& max);
    void verify (const math::vec4f& min,const math::vec4f& max);
    void verify (size_t count,const char** values);
    void verify (const char* values_string,const char* delimiters=" \t",const char* spaces=" \t");

  private:
    struct Impl;

    Var ();
    Var (const Var&);
    Var (Impl*);
    ~Var ();

    Var& operator = (const Var&);
    
    static Var* create  (Etc&,const char*,const char*);
    void        release ();
    
    static VarValidatorFactory& get_validator_factory (Etc&);
    
  private:
    mutable Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
class Etc
{
  friend class Var;
  friend class EtcBranch;
  public:
    typedef Var::EventHandler EventHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////  
    Etc  ();
    ~Etc ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к переменной
///////////////////////////////////////////////////////////////////////////////////////////////////    
    Var* find        (const char* name);
    bool present     (const char* name);
    Var& var         (const char* name); //создаёт переменную в случае её отстутствия
    Var& operator [] (const char* name) { return var (name); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление переменной / очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void remove (const char*);
    void clear  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение ветки переменных
///////////////////////////////////////////////////////////////////////////////////////////////////    
    EtcBranch branch (const char* prefix);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор переменных
///////////////////////////////////////////////////////////////////////////////////////////////////    
   void traverse (const EventHandler&);
   void traverse (const char* wc_mask,const EventHandler&);
   
  private:
    static Var* create_var  (Etc&,const char*,const char*);
    static void destroy_var (Var*);

    VarValidatorFactory& get_validator_factory ();

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ветка переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
class EtcBranch
{
  friend class Etc;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Доступ к переменной
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool present     (const char* name);
    Var* find        (const char* name);
    Var& var         (const char* name);
    Var& operator [] (const char* name) { return var (name); }
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление переменной
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void remove (const char* name);
    void clear  ();
    
  private:
    EtcBranch (Etc&,const char*);

  private:
    Etc&        etc;
    stl::string prefix;
    size_t      hash;
};

}

#endif
