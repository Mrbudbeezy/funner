#ifndef TOOLS_UI_CUSTOM_WINDOW_SYSTEM_HEADER
#define TOOLS_UI_CUSTOM_WINDOW_SYSTEM_HEADER

#include <stl/string_fwd>
#include <xtl/functional_fwd>

namespace tools
{

namespace ui
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый объект
///////////////////////////////////////////////////////////////////////////////////////////////////
class IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~IObject () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Пользовательская оконная система
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICustomWindowSystem: virtual public IObject
{
  public:
    typedef xtl::function<void (const char* message)> LogFunction;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Выполнение буфера команд на стороне оконной системы
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Execute (const char* name, const void* buffer, size_t buffer_size) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка функции протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void               SetLogHandler (const LogFunction& log) = 0;
    virtual const LogFunction& GetLogHandler () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель изменений сетки свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
class IPropertyListener
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///События
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnAddProperty    (const char* name) = 0;
    virtual void OnChangeProperty (const char* name) = 0;
    virtual void OnRemoveProperty (const char* name) = 0;

  protected:
    virtual ~IPropertyListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Пользовательское дочернее окно
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICustomChildWindow: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление размерами формы
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetPosition (size_t x, size_t y) = 0;
    virtual void SetSize     (size_t width, size_t height) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка родительского окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetParent (const void* parent_window_handle) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление видимостью окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Show (bool state) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс приложения, используемый при работе оконной системы
///////////////////////////////////////////////////////////////////////////////////////////////////
class IApplicationServer: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Выполнение команды на стороне приложения
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void ExecuteCommand (const char* command) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение / установка значения свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetProperty (const char* name, const stl::string& value) = 0;
    virtual void GetProperty (const char* name, stl::string& value) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия свойства / проверка режима "только чтения" свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool IsPropertyPresent  (const char* name) = 0;
    virtual bool IsPropertyReadOnly (const char* name) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация слушателей событий свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void RegisterPropertyListener       (const char* name_wc_mask, IPropertyListener* listener) = 0;
    virtual void UnregisterPropertyListener     (const char* name_wc_mask, IPropertyListener* listener) = 0;
    virtual void UnregisterAllPropertyListeners (const char* name_wc_mask) = 0;
    virtual void UnregisterAllPropertyListeners () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание пользовательского дочернего окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ICustomChildWindow* CreateChildWindow (const char* init_string) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер оконных систем
///////////////////////////////////////////////////////////////////////////////////////////////////
class WindowSystemManager
{
  public:
    typedef xtl::function<ICustomWindowSystem* (const char* profile, IApplicationServer* application)> WindowSystemCreater;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация пользовательских оконных систем
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterWindowSystem       (const char* profile, const WindowSystemCreater& creater);
    static void UnregisterWindowSystem     (const char* profile);
    static void UnregisterAllWindowSystems ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация приложений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterApplicationServer       (const char* application_server_name, IApplicationServer* server);
    static void UnregisterApplicationServer     (const char* application_server_name);
    static void UnregisterAllApplicationServers ();
    
};

}

}

#endif
