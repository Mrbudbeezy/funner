#ifndef TOOLS_UI_WINDOWS_FORMS_SHARED_HEADER
#define TOOLS_UI_WINDOWS_FORMS_SHARED_HEADER

#include <stl/string>

#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/function.h>
#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>
#include <xtl/shared_ptr.h>

#include <common/file.h>
#include <common/parser.h>
#include <common/component.h>

#include <script/shell.h>
#include <script/environment.h>
#include <script/bind.h>

#include <tools/ui/custom_window_system.h>

#using <mscorlib.dll>
#using <System.dll>
#using <System.Windows.Forms.dll>

#include <msclr/gcroot.h>

using namespace System;
using namespace System::Windows::Forms;

namespace tools
{

namespace ui
{

namespace windows_forms
{

typedef xtl::com_ptr<IApplicationServer> ApplicationServerPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс формы
///////////////////////////////////////////////////////////////////////////////////////////////////
class ToolForm: public xtl::reference_counter, public xtl::dynamic_cast_root
{
  public:
    typedef msclr::gcroot<Form^> FormPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ToolForm (IApplicationServer* server, const FormPtr& form);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение текста формы
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetText (const stl::string& text);
    stl::string Text    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление видимостью формы
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Show ();
    void Hide ();
    void SetVisible (bool state);
    bool IsVisible ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация шлюзов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterInvokers (script::Environment&);

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение сервера приложения
///////////////////////////////////////////////////////////////////////////////////////////////////
    IApplicationServer& Server () { return *application_server; }

  private:
    ApplicationServerPtr application_server; //сервер приложения
    FormPtr              form;               //связанная форма
};

typedef xtl::intrusive_ptr<ToolForm> ToolFormPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание форм
///////////////////////////////////////////////////////////////////////////////////////////////////
ToolFormPtr create_main_form (IApplicationServer* server); //создание главной формы

///////////////////////////////////////////////////////////////////////////////////////////////////
///Оконная система на базе Windows Forms
///////////////////////////////////////////////////////////////////////////////////////////////////
class WindowSystem: public ICustomWindowSystem, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    WindowSystem  (IApplicationServer*);
    ~WindowSystem ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выполнение команды на стороне оконной системы
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ExecuteCommand (const char* command);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  ();
    void Release ();
    
  private:
    void RegisterInvokers      ();
    void LoadConfiguration     (const char* file_name_mask);
    void LoadConfigurationFile (const char* file_name, common::ParseLog& log);
//    void ParseConfiguration    (Parser::Iterator, ParseLog& log);
//    void ParseMenuStrip        (Parser::Iterator, ParseLog& log);

  private:
    typedef xtl::shared_ptr<script::Environment> ShellEnvironmentPtr;        

  private:
    ApplicationServerPtr application_server; //сервер приложения
    ToolFormPtr          main_form;          //главная форма приложения
    ShellEnvironmentPtr  shell_environment;  //окружение скриптовой среды
    script::Shell        shell;              //скриптовый интерпретатор
};

}

}

}

#endif
