#ifndef TOOLS_UI_WINDOWS_FORMS_PLUGIN_API_HEADER
#define TOOLS_UI_WINDOWS_FORMS_PLUGIN_API_HEADER

#if !defined (_MSC_VER) || _MSC_VER < 1400
  #error "Microsoft Visual C/C++ 8.0 or higher required"
#endif

#using <System.dll>
#using <System.Windows.Forms.dll>

namespace tools
{

namespace ui
{

namespace windows_forms
{

//forward declarations
interface IPropertyListener;
interface IApplicationServer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс плагина
///  Каждый плагин должен иметь функцию IPlugin^ CreatePlugin (IApplicationServer^) в корневом пространстве имён
///  !!!продумать имя пространства имён с CreatePlugin!!
///////////////////////////////////////////////////////////////////////////////////////////////////
///ввести свойства!!!
interface IPlugin
{
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество доступных типов форм / получение имени типа формы
///////////////////////////////////////////////////////////////////////////////////////////////////
    System::UInt32  GetFormTypesCount ();
    System::String^ GetFormTypeName   (System::UInt32 type_index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание формы
///////////////////////////////////////////////////////////////////////////////////////////////////
    System::Windows::Forms::Form^ CreateForm (const System::String^ form_type);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс приложения для дополнительных компонентов Windows Forms
///////////////////////////////////////////////////////////////////////////////////////////////////
interface IApplicationServer
{
///////////////////////////////////////////////////////////////////////////////////////////////////
///Выполнение команды на стороне приложения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ExecuteCommand (const System::String^ command);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение / установка значения свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetProperty (const System::String^ name, const System::String^ value);
    void GetProperty (const System::String^ name, System::String^ value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия свойства / проверка режима "только чтения" свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
    System::Boolean IsPropertyPresent  (const System::String^ name);
    System::Boolean IsPropertyReadOnly (const System::String^ name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация слушателей событий свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RegisterPropertyListener       (const System::String^ name_wc_mask, IPropertyListener^ listener);
    void UnregisterPropertyListener     (const System::String^ name_wc_mask, IPropertyListener^ listener);
    void UnregisterAllPropertyListeners (const System::String^ name_wc_mask);
    void UnregisterAllPropertyListeners ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Событие добавления нового свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
//    event EventHandler^ ApplicationExit;
//    event EventHandler^ 

//  ввести события

};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель изменений сетки свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
interface IPropertyListener
{
///////////////////////////////////////////////////////////////////////////////////////////////////
///События
///////////////////////////////////////////////////////////////////////////////////////////////////
    void OnAddProperty    (const System::String^ name);
    void OnChangeProperty (const System::String^ name);
    void OnRemoveProperty (const System::String^ name);
};

}

}

}

#endif
