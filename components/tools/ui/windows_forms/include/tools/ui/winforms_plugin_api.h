#ifndef TOOLS_UI_WINDOWS_FORMS_PLUGIN_API_HEADER
#define TOOLS_UI_WINDOWS_FORMS_PLUGIN_API_HEADER

#if !defined (_MSC_VER) || _MSC_VER < 1400
  #error "Microsoft Visual C/C++ 8.0 or higher required"
#endif

#using <System.dll>
#using <System.Windows.Forms.dll>
#using <System.Xml.dll>

namespace tools
{

namespace ui
{

namespace windows_forms
{

//forward declarations
interface class IPropertyListener;
interface class IOutputListener;
interface class IApplicationServer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс плагина
///  Каждый плагин должен иметь класс Plugin в пространстве имён tools::ui::windows_forms, 
///  содержащий статический метод void InitPlugin (IApplicationServer^)
///////////////////////////////////////////////////////////////////////////////////////////////////
///ввести свойства!!!
public interface class IPlugin
{
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание формы
///////////////////////////////////////////////////////////////////////////////////////////////////
    System::Windows::Forms::Control^ CreateControl (const System::String^ init_string);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка xml конфигурации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadConfiguration (System::Xml::XmlNode^ xml_configuration);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс приложения для дополнительных компонентов Windows Forms
///////////////////////////////////////////////////////////////////////////////////////////////////
public interface class IApplicationServer
{
///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление плагина
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddPlugin (const System::String^ plugin_name, IPlugin^ plugin);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выполнение команды на стороне приложения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ExecuteCommand (const System::String^ command);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение / установка значения свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetProperty (const System::String^ name, const System::String^ value);
    void GetProperty (const System::String^ name, System::String^% value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия свойства / проверка режима "только чтения" свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
    System::Boolean IsPropertyPresent  (const System::String^ name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация слушателей событий свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RegisterPropertyListener       (const System::String^ name_wc_mask, IPropertyListener^ listener);
    void UnregisterPropertyListener     (const System::String^ name_wc_mask, IPropertyListener^ listener);
    void UnregisterAllPropertyListeners (const System::String^ name_wc_mask);
    void UnregisterAllPropertyListeners ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация слушателей сообщений вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RegisterOutputListener       (IOutputListener^ listener);
    void UnregisterOutputListener     (IOutputListener^ listener);
    void UnregisterAllOutputListeners ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель изменений сетки свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
public interface class IPropertyListener
{
///////////////////////////////////////////////////////////////////////////////////////////////////
///События
///////////////////////////////////////////////////////////////////////////////////////////////////
    void OnAddProperty    (const System::String^ name);
    void OnChangeProperty (const System::String^ name);
    void OnRemoveProperty (const System::String^ name);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель сообщений вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
public interface class IOutputListener
{
///////////////////////////////////////////////////////////////////////////////////////////////////
///События
///////////////////////////////////////////////////////////////////////////////////////////////////
    void OnMessage (const System::String^ message);
};

}

}

}

#endif
