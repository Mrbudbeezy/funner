#ifndef STORE_STORE_HEADER
#define STORE_STORE_HEADER

#include <store/product.h>
#include <store/transaction.h>

namespace common
{

//forward declaration
class PropertyMap;

}

namespace store
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Магазин
///////////////////////////////////////////////////////////////////////////////////////////////////
class Store
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор / копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void ()> OnInitializedCallback;

    Store  (const char* store_name, const OnInitializedCallback& callback = OnInitializedCallback ());
    Store  (const Store& source);
    ~Store ();

    Store& operator = (const Store& source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Description () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Можно ли осуществлять покупки
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool CanBuyProducts () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение информации о товарах (products_ids - разделенный пробелами список идентификаторов продуктов,
///products ответа может содержать не все запрошенные продукты)
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const ProductList& products)> LoadProductsCallback;

    void LoadProducts (const char* product_ids, const LoadProductsCallback& callback) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Покупка / восстановление покупок
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const Transaction&)> PurchaseCallback;
    
    xtl::connection RegisterTransactionUpdateHandler (const PurchaseCallback&);
    Transaction     BuyProduct                       (const char* product_id, size_t count, const PurchaseCallback& callback, const common::PropertyMap& properties = common::PropertyMap ()) const;
    Transaction     BuyProduct                       (const char* product_id, size_t count, const common::PropertyMap& properties = common::PropertyMap ()) const;
    void            RestorePurchases                 () const;    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Store&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Store&, Store&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Магазин
///////////////////////////////////////////////////////////////////////////////////////////////////
class IStore
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~IStore () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Инициализация
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Initialize (const Store::OnInitializedCallback& callback) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание магазина
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* Description () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Можно ли осуществлять покупки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool CanBuyProducts () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение информации о товарах (products_ids - разделенный пробелами список идентификаторов продуктов,
///products ответа может содержать не все запрошенные продукты)
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void LoadProducts (const char* product_ids, const Store::LoadProductsCallback& callback) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Покупка / восстановление покупок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual xtl::connection RegisterTransactionUpdateHandler (const Store::PurchaseCallback&) = 0;
    virtual void            RestorePurchases                 () = 0;
    virtual Transaction     BuyProduct                       (const char* product_id, size_t count, const common::PropertyMap& properties) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер магазинов
///////////////////////////////////////////////////////////////////////////////////////////////////
class StoreManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация создателей магазинов
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<IStore* (const char* store_name)> CreateStoreHandler;

    static void RegisterStore       (const char* id, const char* store_name_mask, const CreateStoreHandler& handler);
    static void UnregisterStore     (const char* id);
    static void UnregisterAllStores ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия магазина
///////////////////////////////////////////////////////////////////////////////////////////////////
    static bool IsStoreRegistered (const char* store_name);
};

}

#endif
