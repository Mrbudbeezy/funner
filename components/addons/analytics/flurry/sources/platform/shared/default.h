#ifndef ANALYTICS_FLURRY_DEFAULT_PLATFORM_HEADER
#define ANALYTICS_FLURRY_DEFAULT_PLATFORM_HEADER

#include <stl/string>

#include <common/property_map.h>

#include <analytics/flurry.h>

namespace analytics
{

namespace flurry
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Default platform
///////////////////////////////////////////////////////////////////////////////////////////////////
class DefaultPlatform
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Is analytics supported on current platform
///////////////////////////////////////////////////////////////////////////////////////////////////
    static bool IsSupported ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Get version name of underlying library
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void GetReleaseVersion (stl::string& version);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Start analytics
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void StartSession (const char* api_key);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Set analytics additional params
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetUserId   (const char* user_id);
    static void SetAge      (size_t age);
    static void SetGender   (Gender gender);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Events tracking
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void LogEvent      (const char* event, const common::PropertyMap& parameters, bool timed);
    static void EndTimedEvent (const char* event, const common::PropertyMap& parameters);
    static void LogPageView   ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Logging management
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetDebugLogEnabled (bool state);
    static void SetLogLevel        (LogLevel level);
};

}

}

#endif
