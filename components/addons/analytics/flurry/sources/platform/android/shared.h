#include <xtl/bind.h>
#include <xtl/common_exceptions.h>
#include <xtl/function.h>

#include <common/component.h>
#include <common/singleton.h>

#include <syslib/platform/android.h>

#include <shared/android.h>

namespace analytics
{

namespace flurry
{

namespace android
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Flurry
///////////////////////////////////////////////////////////////////////////////////////////////////
class FlurryImpl
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FlurryImpl  ();
    ~FlurryImpl ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поддерживается ли аналитика на данной платформе
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsSupported ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени версии используемой библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetReleaseVersion (stl::string& version);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Запуск аналитики
///////////////////////////////////////////////////////////////////////////////////////////////////
    void StartSession (const char* api_key);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка дополнительных параметров аналитики
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetUserId   (const char* user_id);
    void SetAge      (size_t age);
    void SetGender   (Gender gender);
    void SetUseHttps (bool use_https);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Трекинг событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LogEvent      (const char* event, const common::PropertyMap& parameters, bool timed);
    void EndTimedEvent (const char* event, const common::PropertyMap& parameters);
    void LogPageView   ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление протоколированием
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetDebugLogEnabled (bool state);
    void SetLogLevel        (LogLevel level);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Инициализация java-биндинга
///////////////////////////////////////////////////////////////////////////////////////////////////
    void InitJavaBindings (JNIEnv* env);

  private:
    FlurryImpl (const FlurryImpl&);               //no impl
    FlurryImpl& operator = (const FlurryImpl&);   //no impl

  private:
    struct Impl;
    Impl* impl;
};

typedef common::Singleton<FlurryImpl> FlurrySingleton;

}

}

}
