#ifndef ANALYTICS_FLURRY_HEADER
#define ANALYTICS_FLURRY_HEADER

#include <cstddef>

namespace common
{

//forward declaration
class PropertyMap;

}

namespace analytics
{

namespace flurry
{

enum Gender
{
  Gender_Male,
  Gender_Female
};

enum LogLevel
{
  LogLevel_None,
  LogLevel_CriticalOnly,
  LogLevel_Debug,
  LogLevel_All
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Flurry
///////////////////////////////////////////////////////////////////////////////////////////////////
class Flurry
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Поддерживается ли аналитика на данной платформе
///////////////////////////////////////////////////////////////////////////////////////////////////
    static bool IsSupported ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени версии используемой библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const char* GetReleaseVersion ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Запуск аналитики
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void StartSession (const char* api_key);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка дополнительных параметров аналитики
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetUserId   (const char* user_id);
    static void SetAge      (size_t age);
    static void SetGender   (Gender gender);
    static void SetUseHttps (bool use_https);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Трекинг событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void LogEvent      (const char* event, bool timed = false);
    static void LogEvent      (const char* event, const common::PropertyMap& parameters, bool timed = false);
    static void EndTimedEvent (const char* event);
    static void EndTimedEvent (const char* event, const common::PropertyMap&);
    static void LogPageView   ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление протоколированием
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void SetDebugLogEnabled (bool state);
    static void SetLogLevel        (LogLevel level);
};

}

}

#endif
