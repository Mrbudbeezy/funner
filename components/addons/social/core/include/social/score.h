#ifndef SOCIAL_SCORE_HEADER
#define SOCIAL_SCORE_HEADER

#include <cstddef>

#include <social/collection.h>

namespace common
{

//forward declaration
class PropertyMap;

}

namespace social
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Достижение в таблице рекордов
///////////////////////////////////////////////////////////////////////////////////////////////////
class Score
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор / копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Score  ();
    Score  (const Score&);
    ~Score ();

    Score& operator = (const Score&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор пользователя, которому принадлежит достижение
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* UserId    () const;
    void        SetUserId (const char* user_id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор таблицы рекордов, которой принадлежит достижение
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* LeaderboardId    () const;
    void        SetLeaderboardId (const char* leaderboard_id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Данные, ассоциированные с достижением
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* UserData    () const;
    void        SetUserData (const char* user_data);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Значение
///////////////////////////////////////////////////////////////////////////////////////////////////
    double Value    () const;
    void   SetValue (double value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текстовое представление значения
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* FormattedValue    () const;
    void        SetFormattedValue (const char* formatted_value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ранг в таблице
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Rank    () const;
    void   SetRank (size_t rank);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Другие свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const common::PropertyMap& Properties    () const;
          common::PropertyMap& Properties    ();
    void                       SetProperties (const common::PropertyMap& properties);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Низкоуровневый дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    const void* Handle    () const;
    void        SetHandle (const void* handle, const ReleaseHandleFunction& release_function = ReleaseHandleFunction ());

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Score&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Score&, Score&);

typedef Collection<Score> ScoreList;

}

#endif
