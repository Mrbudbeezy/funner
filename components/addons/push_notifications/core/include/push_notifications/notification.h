#ifndef PUSH_NOTIFICATIONS_NOTIFICATION_HEADER
#define PUSH_NOTIFICATIONS_NOTIFICATION_HEADER

#include <xtl/functional_fwd>

namespace common
{

//forward declaration
class PropertyMap;

}

namespace push_notifications
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сообщение
///////////////////////////////////////////////////////////////////////////////////////////////////
class Notification
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор / копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Notification  ();
    Notification  (const Notification&);
    ~Notification ();

    Notification& operator = (const Notification&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const common::PropertyMap& Properties    () const;
          common::PropertyMap& Properties    ();
    void                       SetProperties (const common::PropertyMap& properties);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Notification&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Notification&, Notification&);

}

#endif
