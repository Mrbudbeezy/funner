#ifndef PUSH_NOTIFICATIONS_CENTER_HEADER
#define PUSH_NOTIFICATIONS_CENTER_HEADER

#include <push_notifications/notification.h>

namespace common
{

//forward declaration
class PropertyMap;

}

namespace push_notifications
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Центр обработки пуш-сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
class PushNotificationsCenter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор / копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    PushNotificationsCenter  (const char* center_name);
    PushNotificationsCenter  (const PushNotificationsCenter& source);
    ~PushNotificationsCenter ();

    PushNotificationsCenter& operator = (const PushNotificationsCenter& source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Description () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация на пуш-сообщения
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (bool success, const char* status, const char* token, const common::PropertyMap& properties)> RegisterCallback;

    void RegisterForNotifications (const RegisterCallback& callback, const common::PropertyMap& properties = common::PropertyMap ()) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на пуш-сообщения
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const Notification&)> NotificationsHandler;
    
    xtl::connection RegisterNotificationsHandler (const NotificationsHandler&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (PushNotificationsCenter&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (PushNotificationsCenter&, PushNotificationsCenter&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Центр обработки пуш-сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
class IPushNotificationsCenter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~IPushNotificationsCenter () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* Description () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация на пуш-сообщения
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void RegisterForNotifications (const PushNotificationsCenter::RegisterCallback& callback, const common::PropertyMap& properties) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на пуш-сообщения
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual xtl::connection RegisterNotificationsHandler (const PushNotificationsCenter::NotificationsHandler&) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер центров обработки пуш-сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
class PushNotificationsCentersManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация создателей центров пуш-сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<IPushNotificationsCenter* (const char* center_name)> CreateCenterHandler;

    static void RegisterCenter       (const char* id, const char* center_name_mask, const CreateCenterHandler& handler);
    static void UnregisterCenter     (const char* id);
    static void UnregisterAllCenters ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия центра пуш-сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static bool IsCenterRegistered (const char* center_name);
};

}

#endif
