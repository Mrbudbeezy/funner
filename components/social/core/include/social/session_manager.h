#ifndef SOCIAL_SESSION_MANAGER_HEADER
#define SOCIAL_SESSION_MANAGER_HEADER

#include <cstddef>

#include <xtl/functional_fwd>

#include <social/achievement.h>
#include <social/common.h>
#include <social/leaderboard.h>
#include <social/user.h>

namespace common
{

//forward declaration
class PropertyMap;

}

namespace social
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер сессии
///////////////////////////////////////////////////////////////////////////////////////////////////
class ISessionManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~ISessionManager () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание сессии
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* GetDescription () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Показ стандартных окон
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void ShowWindow (const char* window_name, const common::PropertyMap& properties) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение залогиненного пользователя
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual User& CurrentUser () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сессия
///////////////////////////////////////////////////////////////////////////////////////////////////
class Session
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор / копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<ISessionManager* (const common::PropertyMap& config)> CreateSessionHandler;
    
    Session (const CreateSessionHandler& creator);
    Session (const Session& source);
    ~Session ();

    Session& operator = (const Session& source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание сессии
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetDescription () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Логин
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LogIn      (const common::PropertyMap& config);
    void LogOut     ();
    bool IsLoggedIn ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Показ стандартных окон
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ShowWindow (const char* window_name, const common::PropertyMap& properties = common::PropertyMap ());

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение залогиненного пользователя
///////////////////////////////////////////////////////////////////////////////////////////////////
    User& CurrentUser ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка пользователя по идентификатору
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadUser (const char* id, const IUserManager::LoadUserCallback& callback, const common::PropertyMap& properties = common::PropertyMap ());

///////////////////////////////////////////////////////////////////////////////////////////////////
///Аватар
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadUserPicture (const User& user, const IUserManager::LoadPictureCallback& callback, const common::PropertyMap& properties = common::PropertyMap ());

///////////////////////////////////////////////////////////////////////////////////////////////////
///Друзья
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadFriendsIds (const User& id, const IUserManager::LoadFriendsIdsCallback& callback, const common::PropertyMap& properties = common::PropertyMap ());
    void LoadFriends    (const User& id, const IUserManager::LoadFriendsCallback& callback, const common::PropertyMap& properties = common::PropertyMap ());

///////////////////////////////////////////////////////////////////////////////////////////////////
///Достижения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadAchievements       (const IAchievementManager::LoadAchievementsCallback& callback, const common::PropertyMap& properties = common::PropertyMap ());
    void LoadAchievementPicture (const Achievement& achievement, const IAchievementManager::LoadPictureCallback& callback, const common::PropertyMap& properties = common::PropertyMap ());
    void ReportAchievement      (const Achievement& achievement, const IAchievementManager::ReportCallback& callback, const common::PropertyMap& properties = common::PropertyMap ());

///////////////////////////////////////////////////////////////////////////////////////////////////
///Таблицы рекордов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadLeaderboardsIds (const ILeaderboardManager::LoadLeaderboardsCallback& callback, const common::PropertyMap& properties = common::PropertyMap ());
    void LoadLeaderboard     (const char* leaderboard_id, const ILeaderboardManager::LoadLeaderboardCallback& callback, const common::PropertyMap& properties = common::PropertyMap ());
    void LoadLeaderboard     (const char* leaderboard_id, const char* user_id, const ILeaderboardManager::LoadLeaderboardCallback& callback, const common::PropertyMap& properties = common::PropertyMap ());
    void ReportScore         (const Score& score, const ILeaderboardManager::ReportScoreCallback& callback, const common::PropertyMap& properties = common::PropertyMap ());

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер сессий
///////////////////////////////////////////////////////////////////////////////////////////////////
class SessionManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация создателей сессий
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<Session (const char* name)> CreateSessionHandler;

    static void RegisterSession       (const char* name, const CreateSessionHandler& handler);
    static void UnregisterSession     (const char* name);
    static void UnregisterAllSessions ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия сессии
///////////////////////////////////////////////////////////////////////////////////////////////////
    static bool IsSessionRegistered (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание сессии по имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Session CreateSession (const char* name);
};

}

#endif
