#ifndef SOCIAL_USER_HEADER
#define SOCIAL_USER_HEADER

#include <xtl/functional_fwd>

#include <social/collection.h>
#include <social/common.h>

namespace common
{

//forward declaration
class PropertyMap;
template<class T> class BasicStringArray;

}

namespace social
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Пользователь
///////////////////////////////////////////////////////////////////////////////////////////////////
class User
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор / копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    User ();
    User (const User&);
    ~User ();

    User& operator = (const User&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Id    () const;
    void        SetId (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ник
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Nickname    () const;
    void        SetNickname (const char* nickname);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Является ли другом текущего пользователя
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsFriend  () const;
    void SetFriend (bool is_friend);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Другие свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
    const common::PropertyMap& Properties    () const;
          common::PropertyMap& Properties    ();
    void                       SetProperties (const common::PropertyMap& properties);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Низкоуровневый дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    const void* Handle    () const;
    void        SetHandle (const void* handle);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (User&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (User&, User&);

typedef Collection<User> UserList;

typedef xtl::function<void (const User& user, OperationStatus status, const char* error)>            LoadUserCallback;
typedef xtl::function<void (const media::Image& picture, OperationStatus status, const char* error)> LoadUserPictureCallback;
typedef xtl::function<void (const common::BasicStringArray<char>&, OperationStatus status, const char* error)>  LoadFriendsIdsCallback;
typedef xtl::function<void (const UserList& users, OperationStatus status, const char* error)>       LoadFriendsCallback;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер пользователей
///////////////////////////////////////////////////////////////////////////////////////////////////
class IUserManager: public virtual ISessionManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка пользователя по идентификатору
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void LoadUser (const char* id, const LoadUserCallback& callback, const common::PropertyMap& properties) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Аватар
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void LoadUserPicture (const User& user, const LoadUserPictureCallback& callback, const common::PropertyMap& properties) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Друзья
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void LoadFriendsIds (const User& user, const LoadFriendsIdsCallback& callback, const common::PropertyMap& properties) = 0;
    virtual void LoadFriends    (const User& user, const LoadFriendsCallback& callback, const common::PropertyMap& properties) = 0;
};

}

#endif
