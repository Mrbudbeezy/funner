#ifndef UTILITY_CRYPTO_HEADER
#define UTILITY_CRYPTO_HEADER

namespace plarium
{

namespace utility
{

enum CryptoOperation
{
  CryptoOperation_Encrypt,
  CryptoOperation_Decrypt
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///AES crypto context
///////////////////////////////////////////////////////////////////////////////////////////////////
class AesContext
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructor / destructor
///////////////////////////////////////////////////////////////////////////////////////////////////
    AesContext  (CryptoOperation operation, const void* key, size_t key_bits);
    ~AesContext ();

//////////////////////////////////////////////////////////////////////////////////////////////////
///Size of one block
///////////////////////////////////////////////////////////////////////////////////////////////////
    static size_t BlockSize ();

//////////////////////////////////////////////////////////////////////////////////////////////////
///Encryption / decryption
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (size_t blocks_count, const void* src_buffer, void* dst_buffer);

  private:
    AesContext (const AesContext&);             //no impl
    AesContext& operator = (const AesContext&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

void aes (CryptoOperation operation, const void* key, size_t key_bits, size_t blocks_count, const void* src_buffer, void* dst_buffer);

///////////////////////////////////////////////////////////////////////////////////////////////////
///AES-OFB crypto context
///////////////////////////////////////////////////////////////////////////////////////////////////
class AesOfbContext
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructor / destructor
///////////////////////////////////////////////////////////////////////////////////////////////////
    AesOfbContext  (const void* key, size_t key_bits, const unsigned char iv [16]);
    ~AesOfbContext ();

//////////////////////////////////////////////////////////////////////////////////////////////////
///Encryption / decryption
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (size_t data_size, const void* src_buffer, void* dst_buffer);

  private:
    AesOfbContext (const AesOfbContext&);             //no impl
    AesOfbContext& operator = (const AesOfbContext&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

void aes_ofb (const void* key, size_t key_bits, size_t data_size, const void* src_buffer, void* dst_buffer, const unsigned char iv [16]);

}

}

#endif
