#ifndef SYSTEM_TCP_CLIENT_HEADER
#define SYSTEM_TCP_CLIENT_HEADER

namespace plarium
{

namespace system
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///TCP client
///////////////////////////////////////////////////////////////////////////////////////////////////
class TcpClient
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructor / destructor
///////////////////////////////////////////////////////////////////////////////////////////////////
    TcpClient  ();
    ~TcpClient ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Connection
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Connect (const unsigned char (&address)[4], unsigned short port);
    void Close   ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Data sending
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Send (const void* buffer, size_t size);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Data receiving
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Receive (void* buffer, size_t size);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Socket state
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsConnected () const;

  private:
    TcpClient  (const TcpClient&);               //no impl
    TcpClient& operator = (const TcpClient&);    //no impl

  private:
    struct Impl;
    Impl* impl;
};

}

}

#endif
