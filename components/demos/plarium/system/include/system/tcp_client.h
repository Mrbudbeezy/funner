#ifndef SYSTEM_TCP_CLIENT_HEADER
#define SYSTEM_TCP_CLIENT_HEADER

#include <cstddef>

namespace plarium
{

namespace system
{

//forward declaration
class TcpClient;

///////////////////////////////////////////////////////////////////////////////////////////////////
///TCP client event listener
///////////////////////////////////////////////////////////////////////////////////////////////////
class ITcpClientListener
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Connection disconnected
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnDisconnect (TcpClient& sender) = 0;

  protected:
    virtual ~ITcpClientListener () {}

};

///////////////////////////////////////////////////////////////////////////////////////////////////
///TCP client
///////////////////////////////////////////////////////////////////////////////////////////////////
class TcpClient
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructor / destructor
///////////////////////////////////////////////////////////////////////////////////////////////////
    TcpClient  ();
    ~TcpClient ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Connection
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Connect    (const char* host, unsigned short port);
    void Disconnect ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Data sending (returns amoutn of sent data)
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Send (const void* buffer, size_t size, size_t timeout_in_milliseconds);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Data receiving (returns amoutn of received data)
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Receive (void* buffer, size_t size, size_t timeout_in_milliseconds);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Socket state
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsConnected () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Event listening
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                SetListener (ITcpClientListener* listener);
    ITcpClientListener* Listener    () const;

  private:
    TcpClient  (const TcpClient&);               //no impl
    TcpClient& operator = (const TcpClient&);    //no impl

  private:
    struct Impl;
    Impl* impl;
};

}

}

#endif
