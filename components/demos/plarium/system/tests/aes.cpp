#include "shared.h"

using namespace plarium::utility;

const size_t BLOCK_SIZE = 16;

struct Test
{
  size_t              key_size;
  size_t              blocks_count;
  const unsigned char key [32];
  const unsigned char source [BLOCK_SIZE * 2];
  const unsigned char result [BLOCK_SIZE * 2];
};

Test TESTS [] = {
 { 16,
   1,
   { 0xa2, 0x62, 0xe1, 0xab, 0xd5, 0xbc, 0x42, 0xad, 0x30, 0x04, 0x42, 0xd0, 0x8b, 0xc2, 0x53, 0x48 },
   { 0xb6, 0xce, 0xd4, 0x1d, 0xed, 0xa1, 0x87, 0xa7, 0xea, 0xe5, 0x5d, 0x49, 0x7d, 0x7d, 0x73, 0x24 },
   { 0x91, 0x51, 0x37, 0x15, 0x9d, 0x58, 0xf6, 0xd7, 0x0c, 0x2c, 0x40, 0x3a, 0x87, 0x34, 0x6a, 0xbc }
 },
 { 24,
   1,
   { 0x0d, 0xd7, 0xb8, 0x1d, 0x02, 0x2a, 0xe6, 0xbd, 0x1b, 0x5a, 0xaa, 0xca, 0x5d, 0xb8, 0x88, 0xcb, 0x5b, 0xb0, 0x64, 0x96, 0xf6, 0x03, 0xf8, 0xf9 },
   { 0x40, 0xd8, 0x83, 0x42, 0x74, 0x49, 0xc5, 0x59, 0x35, 0x39, 0x47, 0x06, 0xf2, 0x71, 0x91, 0x0b },
   { 0xd7, 0x66, 0x0e, 0x7a, 0x43, 0x9d, 0x1a, 0xfe, 0x1f, 0x47, 0x0a, 0x43, 0xc5, 0xa4, 0x65, 0x3d }
 },
 { 32,
   2,
   { 0x71, 0x55, 0x90, 0x9c, 0x80, 0x95, 0xc9, 0x76, 0x26, 0x86, 0x85, 0xe1, 0xed, 0x98, 0x89, 0xc4, 0x2f, 0x15, 0x05, 0x40, 0xf7, 0x04, 0x66, 0x91, 0xb2, 0x71, 0xbb, 0x4b, 0x68, 0x21, 0xd2, 0xf4 },
   { 0xb2, 0xe2, 0x1f, 0xdf, 0x7a, 0xa6, 0x2a, 0x8b, 0xdb, 0x54, 0x37, 0x43, 0x75, 0xc5, 0x8a, 0xb4, 0xb2, 0xe2, 0x1f, 0xdf, 0x7a, 0xa6, 0x2a, 0x8b, 0xdb, 0x54, 0x37, 0x43, 0x75, 0xc5, 0x8a, 0xb4 },
   { 0x41, 0x15, 0xe3, 0xc6, 0x45, 0xc1, 0x9f, 0x02, 0xf5, 0x43, 0xac, 0x9e, 0x03, 0x92, 0x3c, 0xb6, 0x41, 0x15, 0xe3, 0xc6, 0x45, 0xc1, 0x9f, 0x02, 0xf5, 0x43, 0xac, 0x9e, 0x03, 0x92, 0x3c, 0xb6 }
 }
};

int main ()
{
  printf ("Results of aes_test:\n");

  printf ("One-time crypto results:\n");

  unsigned char buffer [BLOCK_SIZE * 2], decrypt_buffer [BLOCK_SIZE * 2];

  for (size_t i = 0, count = sizeof (TESTS) / sizeof (*TESTS); i < count; i++)
  {
    aes (CryptoOperation_Encrypt, TESTS [i].key, TESTS [i].key_size * 8, TESTS [i].blocks_count, TESTS [i].source, buffer);

    printf ("Crypto %d correct - %c\n", i, memcmp (buffer, TESTS [i].result, TESTS [i].blocks_count * BLOCK_SIZE) ? 'n' : 'y');

    aes (CryptoOperation_Decrypt, TESTS [i].key, TESTS [i].key_size * 8, TESTS [i].blocks_count, buffer, decrypt_buffer);

    printf ("Decrypt correct - %c\n", memcmp (TESTS [i].source, decrypt_buffer, TESTS [i].blocks_count * BLOCK_SIZE) ? 'n' : 'y');
  }

  printf ("Context usage crypto results:\n");

  for (size_t i = 0, count = sizeof (TESTS) / sizeof (*TESTS); i < count; i++)
  {
    AesContext context (CryptoOperation_Encrypt, TESTS [i].key, TESTS [i].key_size * 8);

    context.Update (TESTS [i].blocks_count, TESTS [i].source, buffer);

    printf ("Crypto %d correct - %c\n", i, memcmp (buffer, TESTS [i].result, TESTS [i].blocks_count * BLOCK_SIZE) ? 'n' : 'y');

    AesContext decrypt_context (CryptoOperation_Decrypt, TESTS [i].key, TESTS [i].key_size * 8);

    decrypt_context.Update (TESTS [i].blocks_count, buffer, decrypt_buffer);

    printf ("Decrypt correct - %c\n", memcmp (TESTS [i].source, decrypt_buffer, TESTS [i].blocks_count * BLOCK_SIZE) ? 'n' : 'y');
  }

  return 0;
}
