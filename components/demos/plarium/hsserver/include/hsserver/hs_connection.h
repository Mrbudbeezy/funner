#ifndef HSSERVER_CONNECTION_HEADER
#define HSSERVER_CONNECTION_HEADER

#include <cstddef>

namespace plarium
{

namespace hsserver
{

//forward declaration
class HsConnection;

///////////////////////////////////////////////////////////////////////////////////////////////////
///HS Connection events listener
///////////////////////////////////////////////////////////////////////////////////////////////////
class IHsConnectionListener
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///New message
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnMessageReceived (HsConnection* sender, unsigned short plugin_id, const char* event) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Connection disconnected
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnDisconnect (HsConnection* sender) = 0;

  protected:
    virtual ~IHsConnectionListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///HS Server Connection
///////////////////////////////////////////////////////////////////////////////////////////////////
class HsConnection
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructor / destructor
///////////////////////////////////////////////////////////////////////////////////////////////////
    HsConnection  ();
    ~HsConnection ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Connection
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Connect (const unsigned char (&address)[4], unsigned short port);
    void Close   ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Sending events
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SendMessage (unsigned short plugin_id, const char* message);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Event listening
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                   SetListener (IHsConnectionListener* listener);
    IHsConnectionListener* Listener    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Keep alive options (0 - disabled, default - 10000)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetKeepAliveInterval (size_t milliseconds);
    size_t KeepAliveInterval    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Sending options
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                 SetCompressionEnabled   (bool state);
    void                 SetCompressionThreshold (size_t threshold);
    void                 SetEncryptionEnabled    (bool state);
    void                 SetEncryptionKey        (const unsigned char* key, size_t key_bits);
    bool                 IsCompressionEnabled    () const;
    size_t               CompressionThreshold    () const;
    bool                 IsEncrypionEnabled      () const;
    const unsigned char* EncryptionKey           () const;
    size_t               EncryptionKeySize       () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Connection state
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsConnected () const;

  private:
    HsConnection (const HsConnection&);               //no impl
    HsConnection& operator = (const HsConnection&);   //no impl

  private:
    struct Impl;
    Impl* impl;
};

}

}

#endif
