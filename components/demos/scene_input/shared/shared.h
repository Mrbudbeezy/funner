#ifndef DEMOS_RENDER2D_SHARED_HEADER
#define DEMOS_RENDER2D_SHARED_HEADER

#include <cstdio>

#include <stl/auto_ptr.h>
#include <stl/iterator>
#include <stl/queue>
#include <stl/vector>

#include <xtl/connection.h>
#include <xtl/function.h>
#include <xtl/bind.h>
#include <xtl/ref.h>
#include <xtl/shared_ptr.h>

#include <common/log.h>
#include <common/parser.h>
#include <common/property_map.h>
#include <common/strlib.h>
#include <common/time.h>

#include <syslib/window.h>

#include <sg/camera.h>
#include <sg/input.h>
#include <sg/scene.h>
#include <sg/sprite.h>

#include <input/scene_input.h>

#include <render/scene_render_client.h>

using namespace scene_graph;
using namespace scene_graph::controllers;
using namespace render;
using namespace input;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Общий код для работы тестов двумерного рендера
///////////////////////////////////////////////////////////////////////////////////////////////////
class TestApplication
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    TestApplication  ();
    ~TestApplication ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение объектов приложения
///////////////////////////////////////////////////////////////////////////////////////////////////
    render::scene::client::Client& Render ();
    SceneInputManager& InputManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LoadResources ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение цели рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    render::scene::client::RenderTarget& RenderTarget ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение окна приложения
///////////////////////////////////////////////////////////////////////////////////////////////////
    syslib::Window& Window ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перерисовка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void PostRedraw ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Запуск приложения
///////////////////////////////////////////////////////////////////////////////////////////////////
    int Run ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка idle-функции
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (TestApplication&)> IdleFunction;

    void SetIdleHandler (const IdleFunction&);

  private:
    TestApplication (const TestApplication&); //no impl
    TestApplication& operator = (const TestApplication&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

#endif
