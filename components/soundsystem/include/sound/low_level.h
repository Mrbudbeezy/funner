#ifndef SOUND_SYSTEM_LOW_LEVEL_HEADER
#define SOUND_SYSTEM_LOW_LEVEL_HEADER

#include <mathlib.h>
#include <xtl/functional_fwd>

namespace sound
{

namespace low_level
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник звука
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Source
{
  math::vec3f position;            //позиция
  math::vec3f direction;           //направление
  math::vec3f velocity;            //скорость
  float       gain;                //громкость
  float       minimum_gain;        //минимальная громкость
  float       maximum_gain;        //максимальная громкость
  float       inner_angle;         //угол внутреннего конуса излучения
  float       outer_angle;         //угол внешнего конуса излучения
  float       outer_gain;          //громкость внутри внешнего конуса
  float       reference_distance;  //расстояние, с которого громкость равна volume
//Настройки эффектов звука
//  float        air_absorption;      //поглощение воздухом
//  float        outer_gain_hf;       //параметр фильтра высокой частоты для внешнего конуса
//  float        room_rolloff_factor; //количество поглощения на выходе к фильтру
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Cлушатель
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Listener 
{
  math::vec3f position;    //позиция
  math::vec3f direction;   //направление
  math::vec3f up;          //направление вверх
  math::vec3f velocity;    //скорость
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация об устройстве
///////////////////////////////////////////////////////////////////////////////////////////////////
struct SystemInfo
{
  size_t channels_count;          //количество поддерживаемых каналов
  size_t eax_major_version;       //старшая часть версии EAX
  size_t eax_minor_version;       //младшая часть версии EAX
//  size_t max_aux_sends;           //максимальное количество подключённых к источнику фильтров
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Низкоуровневая система воспроизведения звука
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ICustomSoundSystem
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* Name () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение информации об устройстве
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void GetInfo (SystemInfo&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество микшируемых каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t ChannelsCount () = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего проигрываемого звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void        SetSample (size_t channel, const char* sample_name) = 0;
    virtual const char* GetSample (size_t channel) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка цикличности проигрывания канала
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool IsLooped (size_t channel) = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка параметров источника
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetSource (size_t channel, const Source&) = 0;
    virtual void GetSource (size_t channel, Source&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление проигрыванием
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void  Play  (size_t channel, bool looping = false) = 0;
    virtual void  Pause (size_t channel) = 0;
    virtual void  Stop  (size_t channel) = 0;
    virtual void  Seek  (size_t channel, float time_in_seconds) = 0;
    virtual float Tell  (size_t channel) = 0;
    virtual bool  IsPlaying (size_t channel) = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка уровня громкости для устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void  SetVolume (float gain) = 0;
    virtual float GetVolume () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блокировка проигрывания звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetMute (bool state) = 0;
    virtual bool IsMuted () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка параметров слушателя
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetListener (const Listener&) = 0;
    virtual void GetListener (Listener&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка функции отладочного протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* message)> LogHandler;

    virtual void              SetDebugLog (const LogHandler&) = 0;
    virtual const LogHandler& GetDebugLog () = 0;

  protected:    
    virtual ~ICustomSoundSystem () {}    
};

}

}

#endif
