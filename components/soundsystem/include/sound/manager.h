#ifndef SOUND_MANAGER_HEADER
#define SOUND_MANAGER_HEADER

#include <xtl/functional_fwd>
#include <stl/auto_ptr.h>
#include <mathlib.h>

namespace syslib
{

//forward declarations
class Window;

}

namespace sound
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поведение системы при сворачивании окна
///////////////////////////////////////////////////////////////////////////////////////////////////
enum WindowMinimizeAction
{
  WindowMinimizeAction_Ignore, //не реагировать
  WindowMinimizeAction_Mute,   //отключать звук
  WindowMinimizeAction_Pause,  //приостанавливать проигрывание всех звуков
  
  WindowMinimizeAction_Default = WindowMinimizeAction_Ignore
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///События излучателя звука
///////////////////////////////////////////////////////////////////////////////////////////////////
enum EmitterEvent
{
  EmitterEvent_OnDestroy,          //вызывается непосредственно перед удалением излучателя
  EmitterEvent_OnActivate,         //излучатель активирован
  EmitterEvent_OnDeactivate,       //излучателя деактивирован
  EmitterEvent_OnUpdateVolume,     //изменена громкость звука
  EmitterEvent_OnUpdateProperties, //изменены параметры излучателя звука
  
  EmitterEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Излучатель звука
///////////////////////////////////////////////////////////////////////////////////////////////////
class Emitter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Emitter  (const char* source_name);
    ~Emitter ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Source () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка добавочной громкости звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetVolume (float volume);
    float Volume    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка динамических параметров излучателя
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetPosition  (const math::vec3f&);
    void SetDirection (const math::vec3f&);
    void SetVelocity  (const math::vec3f&);

    const math::vec3f& Position  () const;
    const math::vec3f& Direction () const;
    const math::vec3f& Velocity  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление активностью
///  - первый вызов Activate генерирует событие EmitterEvent_OnActivate
///  - последний вызов Deactivate генерирует событие EmitterEvent_OnDeactivate
///  - излучатель является активным до тех пор, пока проигрывается хотя бы в одном менеджере
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Activate   ();
    void Deactivate ();
    bool IsActive   () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (Emitter&, EmitterEvent)> EventHandler;

    xtl::connection RegisterEventHandler (EmitterEvent, const EventHandler&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель
///////////////////////////////////////////////////////////////////////////////////////////////////
  //возможно следует вынести эту структуру в отдельный файл, подключаемый отсюда и из sound/device.h
struct Listener
{
  math::vec3f position;    //позиция
  math::vec3f direction;   //направление
  math::vec3f up;          //направление вверх
  math::vec3f velocity;    //скорость  
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер проигрывания звуков
///////////////////////////////////////////////////////////////////////////////////////////////////
class SoundManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SoundManager  (syslib::Window& target_window, const char* target_configuration, const char* init_string="");
    ~SoundManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск конфигурации (делегирование от low_level::SoundDeviceSystem)
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const char* FindConfiguration (const char* driver_mask, const char* device_mask);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка поведения при сворачивании окна
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                        SetWindowMinimizeAction (WindowMinimizeAction action);
    sound::WindowMinimizeAction WindowMinimizeAction    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Уровень громкости
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetVolume (float volume);
    float Volume    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блокировка проигрывания звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetMute (bool state);
    bool IsMuted () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проигрывание звуков
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  PlaySound           (Emitter& emitter, float normalized_offset=0.0f); //normalized_offset in [0;1]
    void  StopSound           (Emitter& emitter);
    float GetNormalizedOffset (Emitter&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Применение операции ко всем слушателям
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (Emitter&)>       EmitterHandler;
    typedef xtl::function<void (const Emitter&)> ConstEmitterHandler;

    void ForEachEmitter (const EmitterHandler&);
    void ForEachEmitter (const ConstEmitterHandler&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Применение операции ко всем слушателям c заданным типом
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ForEachEmitter (const char* type, const EmitterHandler&);
    void ForEachEmitter (const char* type, const ConstEmitterHandler&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка слушателя
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                   SetListener (const Listener&);
    const sound::Listener& Listener    () const;

  private:
    SoundManager (const SoundManager&); //no impl
    SoundManager& operator = (const SoundManager&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

#endif
