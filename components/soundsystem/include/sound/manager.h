#ifndef SOUND_MANAGER_HEADER
#define SOUND_MANAGER_HEADER

#include <xtl/functional_fwd>

namespace syslib
{

//forward declarations
class Window;

}

namespace sound
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поведение системы при сворачивании окна
///////////////////////////////////////////////////////////////////////////////////////////////////
enum MinimizeWindowAction
{
  MinimizeWindowAction_Ignore, //не реагировать
  MinimizeWindowAction_Mute,   //отключать звук
  MinimizeWindowAction_Pause,  //приостанавливать проигрывание всех звуков
  
  MinimizeWindowAction_Default = MinimizeWindowAction_Ignore
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///События излучателя звука
///////////////////////////////////////////////////////////////////////////////////////////////////
enum EmitterEvent
{
  EmitterEvent_OnPlay,         //началось проигрывание звука
  EmitterEvent_OnPause,        //проигрывание звука приостановлено
  EmitterEvent_OnStop,         //проигрывание звука остановлено
  EmitterEvent_OnSeek,         //изменено положение проигрывания звука
  EmitterEvent_OnChangeVolume, //изменена громкость звука
  EmitterEvent_OnChangeSource, //изменены параметры излучателя звука
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Излучатель звука
///////////////////////////////////////////////////////////////////////////////////////////////////
class Emitter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Emitter  (const SoundManager&); //????????
    ~Emitter ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                      SetSource (media::SoundSource&);
    void                      SetSource (const char* name);
    const media::SoundSource& Source    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка добавочной громкости звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetVolume (float volume);
    float Volume    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние проигрывания
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsPlaying () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Продолжительность проигрываемого звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    float Duration () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка динамических параметров излучателя
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetPosition  (const math::vec3f&);
    void SetDirection (const math::vec3f&);
    void SetVelocity  (const math::vec3f&);

    const math::vec3f& Position  () const;
    const math::vec3f& Direction () const;
    const math::vec3f& Velocity  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление проигрыванием
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  Play  ();
    void  Pause ();
    void  Stop  ();
    void  Seek  (float position);
    float Tell  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::signal<void (Emitter&, EmitterEvent)> EventHandler;

    xtl::connection RegisterEventHandler (EmitterEvent, const EventHandler&);

  private:
    struct Impl;
    xtl::intrusive_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Группа проигрываемых звуков
///////////////////////////////////////////////////////////////////////////////////////////////////
class EmitterGroup
{
  public:
    EmitterGroup  (SoundManager& manager, const char* group_name);
    ~EmitterGroup ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество излучателей в группе / проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t EmittersCount () const;
    bool   IsEmpty       () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка добавочной громкости звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetVolume (float volume);
    float Volume    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление проигрыванием
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  Play  ();
    void  Pause ();
    void  Stop  ();    

  private:
    struct Impl;
    xtl::intrusive_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слушатель
///////////////////////////////////////////////////////////////////////////////////////////////////
  //возможно следует вынести эту структуру в отдельный файл, подключаемый отсюда и из sound/device.h
struct Listener
{
  math::vec3f position;    //позиция
  math::vec3f direction;   //направление
  math::vec3f up;          //направление вверх
  math::vec3f velocity;    //скорость  
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер проигрывания звуков
///////////////////////////////////////////////////////////////////////////////////////////////////
class SoundManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SoundManager  ();
    ~SoundManager ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с окном
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                  SetWindow (syslib::Window&);
    const syslib::Window& Window    () const;
          syslib::Window& Window    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выбор конфигурации устройства воспроизведения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetDevice (const char* configuration, const char* init_string="");

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск конфигурации (делегирование от low_level::SoundDeviceSystem)
///////////////////////////////////////////////////////////////////////////////////////////////////    
    const char* FindConfiguration (const char* driver_mask, const char* device_mask);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Уровень громкости
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetVolume (float volume);
    float Volume    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блокировка проигрывания звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetMute (bool state);
    bool IsMuted () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание излучателей звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    Emitter CreateEmitter ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение группы звуков
///////////////////////////////////////////////////////////////////////////////////////////////////
    EmitterGroup GetGroup (const char* group_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка слушателя
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                   SetListener (const Listener&);
    const sound::Listener& Listener    () const;

  private:
    SoundManager (const SoundManager&); //no impl
    SoundManager& operator = (const SoundManager&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
