#ifndef SOUND_SYSTEM_SOUND_DEVICE_HEADER
#define SOUND_SYSTEM_SOUND_DEVICE_HEADER

#include <mathlib.h>
#include <xtl/functional_fwd>

namespace soundsystem
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник звука
///////////////////////////////////////////////////////////////////////////////////////////////////
class Source
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Ассоциирование с звуковым файлом
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachFile (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Громкость
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetGain (float gain);
    float Gain    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Предельные значения громкости
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetMinimumGain (float min_gain);
    float MinimumGain    () const;
    void  SetMaximumGain (float max_gain);
    float MaximumGain    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конус излучения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetInnerAngle (float inner_angle);
    float InnerAngle    () const;
    void  SetOuterAngle (float outer_angle);
    float OuterAngle    () const;
    void  SetOuterGain  (float outer_gain);
    float OuterGain     () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Расстояние, с которого громкость источника равна Gain 
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetReferenceDistance (float reference_distance);
    float ReferenceDistance    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Положение
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetPosition  (const math::vec3f&);
    const math::vec3f& Position     () const;
    void               SetDirection (const math::vec3f&);
    const math::vec3f& Direction    () const;
    void               SetVelocity  (const math::vec3f&);
    const math::vec3f& Velocity     () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проигрывание
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Play  ();
    void Pause ();
    void Stop  ();
    void Seek  (float  time);
    void Seek  (size_t samples);
    float  Tell () const;
    size_t Tell () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Зацикленность
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetLooping (bool is_looping);
    bool IsLooping  () const;

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Source  ();
    ~Source ();

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Cлушатель
///////////////////////////////////////////////////////////////////////////////////////////////////
class Listener 
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetPosition  (const math::vec3f&);
    const math::vec3f& Position     () const;
    void               SetDirection (const math::vec3f&);
    const math::vec3f& Direction    () const;
    void               SetUp        (const math::vec3f&);
    const math::vec3f& Up           () const;
    void               SetVelocity  (const math::vec3f&);
    const math::vec3f& Velocity     () const;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Громкость
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetGain (float gain);
    float Gain    () const;

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Source  ();
    ~Source ();

  private:
    struct Impl;
    Impl* impl;
};

struct SoundDeviceInfo
{
  size_t hardware_channels;
  size_t maximum_channels;
  float  eax_version;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Устройство воспроизведения звука
///////////////////////////////////////////////////////////////////////////////////////////////////
class ICustomSoundDevice
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~SoundDevice () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Лог
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* message)> LogFunc;

    virtual void SetLogFunc (const LogFunc&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с каналами
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Source* CreateSource  () = 0;
    virtual void    ReleaseSource (Source&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тишина
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void  Mute    () = 0;
    virtual void  UnMute  () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение слушателя
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Listener& GetListener () const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* Name () const = 0;
};

}

#endif
