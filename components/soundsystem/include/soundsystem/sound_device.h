#ifndef SOUND_SYSTEM_SOUND_DEVICE_HEADER
#define SOUND_SYSTEM_SOUND_DEVICE_HEADER

#include <mathlib.h>
#include <xtl/functional_fwd>

namespace soundsystem
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник звука
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Source
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
    float gain;                //громкость
    float minimum_gain;        //минимальная громкость
    float maximum_gain;        //максимальная громкость
    float inner_angle;         //угол внутреннего конуса излучения
    float outer_angle;         //угол внешнего конуса излучения
    float outer_gain;          //громкость внутри внешнего конуса
    float reference_distance;  //расстояние, с которого громкость равна gain
    bool  is_looping;          //зацикленность
    math::vec3f& position;     //позиция
    math::vec3f& direction;    //направление
    math::vec3f& velocity;     //скорость

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Source  ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Cлушатель
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Listener 
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства
///////////////////////////////////////////////////////////////////////////////////////////////////
    math::vec3f& position;    //позиция
    math::vec3f& direction;   //направление
    math::vec3f& up;          //направление вверх
    math::vec3f& velocity;    //скорость
    float        gain;        //громкость

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Source  ();
};

struct SoundDeviceInfo
{
  size_t hardware_channels;
  size_t maximum_channels;
  float  eax_version;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Устройство воспроизведения звука
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ICustomSoundDevice
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~SoundDevice () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Лог
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* message)> LogFunc;

    virtual void SetLogFunc (const LogFunc&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с каналами
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Source* GetSource  (size_t index) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ассоциирование с звуковым файлом
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AttachFile (size_t source_index, const char* file_name) = 0;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Проигрывание
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Play   (size_t source_index) = 0;
    virtual void Pause  (size_t source_index) = 0;
    virtual void Stop   (size_t source_index) = 0;
    virtual void Seek   (size_t source_index, float  time) = 0;
    virtual void Seek   (size_t source_index, size_t samples) = 0;
    virtual float  Tell (size_t source_index) const = 0;
    virtual size_t Tell (size_t source_index) const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тишина
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void  Mute    () = 0;
    virtual void  UnMute  () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение слушателя
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Listener& GetListener () const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация об устройстве
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual SoundDeviceInfo& Info () const = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* Name () const = 0;
};

}

#endif
