#ifndef ENGINE_CONFIG_HEADER
#define ENGINE_CONFIG_HEADER

#include <stl/string_fwd>

#include <xtl/functional_fwd>

namespace engine
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реестр настроек
///////////////////////////////////////////////////////////////////////////////////////////////////
class Config
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор/деструктор/копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Config  ();
    Config  (const Config& source);
    ~Config ();

    Config& operator = (const Config& source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение/удаление переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetVar     (const char* name, const char* value);
    const char* GetVar     (const char* name) const;
    void        RemoveVars (const char* var_name_mask);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вычисление строки с заменами на основе установленных переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        Eval (const char* value, stl::string& result) const;
    stl::string Eval (const char* value) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обход всех переменных / переменных по маске
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* var_name, const char* value)> EnumHandler;

    void EnumerateVars (const EnumHandler& handler) const;
    void EnumerateVars (const char* var_name_mask, const EnumHandler& handler) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вызов обработчиков сохранения переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Save ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация обработчиков сохранения переменных
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void ()> SaveHandler;

    xtl::connection RegisterSaveHandler (const SaveHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Config& source);

  private:
    struct Impl;
    Impl*  impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Config& source1, Config& source2);

}

#endif

