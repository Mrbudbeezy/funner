#ifndef ENGINE_SUBSYSTEM_MANAGER_HEADER
#define ENGINE_SUBSYSTEM_MANAGER_HEADER

#include <stl/auto_ptr.h>

#include <xtl/functional_fwd>

#include <common/parse_tree.h>

namespace engine
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсистема движка               
///////////////////////////////////////////////////////////////////////////////////////////////////
class ISubsystem
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~ISubsystem () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контроллер подсистемы
///////////////////////////////////////////////////////////////////////////////////////////////////
class ISubsystemControl
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя подсистемы
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* Name () = 0;

  protected:
    virtual ~ISubsystemControl () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер подсистем
///////////////////////////////////////////////////////////////////////////////////////////////////
class SubsystemManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SubsystemManager  ();
    ~SubsystemManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetName (const char* name);
    const char* Name    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Запуск подсистем
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Start (const common::ParseNode& configuration_root);
    void Start (const char* configuration_file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор подсистем
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t             SubsystemsCount () const;
    ISubsystemControl& Subsystem       (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление подсистем
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddSubsystem        (const char* name, ISubsystem* subsystem);
    void AddSubsystem        (ISubsystem* subsystem);
    void RemoveSubsystem     (ISubsystem* subsystem);
    void RemoveSubsystems    (const char* wc_mask);
    void RemoveAllSubsystems ();

  private:
    SubsystemManager (const SubsystemManager&);
    SubsystemManager& operator = (const SubsystemManager&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер запуска подсистем
///////////////////////////////////////////////////////////////////////////////////////////////////
class StartupManager
{
  public:
    typedef xtl::function<void (common::ParseNode& configuration_node, SubsystemManager& manager)> StartupHandler;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление/удаление обработчиков
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterStartupHandler       (const char* configuration_node_name, const StartupHandler& startup_handler);
    static void UnregisterStartupHandler     (const char* configuration_node_name);
    static void UnregisterAllStartupHandlers ();
};

}

#endif
