#include "shared.h"

#include <common/time.h>

using namespace script;

namespace
{

const char* COMMON_TIMER_LIBRARY = "Common.Timer";

///////////////////////////////////////////////////////////////////////////////////////////////////
///Таймер
///////////////////////////////////////////////////////////////////////////////////////////////////
class Timer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Timer ()
    {
      Reset ();
    }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс времени
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  Reset ()
    {
      start_time = common::milliseconds ();
    }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение прошедшего с последнего сброса времени
///////////////////////////////////////////////////////////////////////////////////////////////////
    float SecondsEllapsed ()
    {
      return (common::milliseconds () - start_time) / 1000.f;
    }

  private:
    size_t start_time;
};

}

Timer create_timer ()
{
  return Timer ();
}

namespace engine
{

void bind_common_timer (script::Environment& environment)
{
  InvokerRegistry& lib = environment.CreateLibrary (COMMON_TIMER_LIBRARY);

    //регистрация функций создания

  lib.Register ("Create", make_invoker (&create_timer));

    //регистрация операций

  lib.Register ("Reset",               make_invoker (&Timer::Reset));
  lib.Register ("get_SecondsEllapsed", make_invoker (&Timer::SecondsEllapsed));

    //регистрация типов данных

  environment.RegisterType<Timer> (COMMON_TIMER_LIBRARY);
}

}
