#ifndef RENDER_VIEWPORT_HEADER
#define RENDER_VIEWPORT_HEADER

#include <render/layers.h>

namespace render
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class Viewport
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Viewport  ();
    Viewport  (const Viewport&);
    ~Viewport ();

    Viewport& operator = (const Viewport&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t      Width  () const;
    size_t      Height () const;
    size_t      Left   () const;
    size_t      Right  () const;
    size_t      Top    () const;
    size_t      Bottom () const;
    const Rect& Area   () const;

    void SetOrigin (size_t left, size_t top);
    void SetSize   (size_t width, size_t height);
    void SetArea   (const Rect&);
    void SetArea   (size_t left, size_t top, size_t width, size_t height);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка номера слоя и номера mip-уровня текстуры, на которые производится отрисовка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetTargetLayer    (size_t index);
    void   SetTargetMipLevel (size_t mip_level);
    size_t TargetLayer       () const;
    size_t TargetMipLevel    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Использует ли область вывода буфер попиксельно отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetDepthStencilBufferState (bool state);
    bool DepthStencilBufferState    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Камера, связанная с областью вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          SetCamera (const Camera&);
    const Camera& Camera    () const;
          Camera& Camera    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление активностью области вывода (неакивные области не обновляются)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetActive  (bool state);
    bool IsActive   () const;
    void Activate   () { SetActive (true); }
    void Deactivate () { SetActive (false); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновляемые слои
///////////////////////////////////////////////////////////////////////////////////////////////////
    const LayerSet& Layers () const;
          LayerSet& Layers ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Viewport&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Viewport&, Viewport&);

}

#endif
