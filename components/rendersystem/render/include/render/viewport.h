#ifndef RENDER_VIEWPORT_HEADER
#define RENDER_VIEWPORT_HEADER

namespace render
{

//???
//+clear flags

///////////////////////////////////////////////////////////////////////////////////////////////////
///Область вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class Viewport
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Viewport  ();
    ~Viewport ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Width  () const;
    size_t Height () const;
    size_t Left   () const;
    size_t Right  () const;
    size_t Top    () const;
    size_t Bottom () const;
    
    void SetOrigin (size_t left, size_t top);
    void SetSize   (size_t width, size_t height);
    void SetRect   (size_t left, size_t top, size_t width, size_t height); //???

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
      ///убрать!!
    void ClearRenderTarget (const math::vec4f& color);
    void ClearDepthStencil (size_t clear_flags, float depth_component, size_t stencil_index);
    void Clear             (size_t clear_flags, const math::vec4f& color, float depth_component, size_t stencil_index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка параметров автоматической очистки области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
      //???
    void               SetAutoClearBuffers (size_t clear_flags);
    void               SetAutoClearColor   (const math::vec4f& clear_color);
    void               SetAutoClearDepth   (float depth_component);
    void               SetAutoClearStencil (size_t stencil_index);
    size_t             AutoClearBuffers    () const;
    const math::vec4f& ClearColor          () const;
    float              ClearDepth          () const;
    size_t             ClearStencil        () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка активной камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                  SetCamera (const Camera&);
    const render::Camera& Camera    () const;
          render::Camera& Camera    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление области вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (RenderTarget& render_target);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Viewport&);

         //???
      //+zorder
      //+material scheme / technique
      //+visibility mask
      //+bool flags: skies, shadows, overlays

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Viewport&, Viewport&);

}

#endif


