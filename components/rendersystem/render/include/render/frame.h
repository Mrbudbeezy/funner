#ifndef RENDER_FRAME_HEADER
#define RENDER_FRAME_HEADER

#include <render/entity.h>
#include <render/light.h>

namespace render
{

//???revision id in frame???

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список объектов на отрисовку
///////////////////////////////////////////////////////////////////////////////////////////////////
class Frame
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Frame  (const RenderTarget& render_target, const Viewport&, const Camera& camera); //параметры???
    ~Frame ();    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текущий буфер отрисовки, камера и обасть вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    const render::RenderTarget& RenderTarget () const;
    const render::Camera&       Camera   () const;
    const render::Viewport&     Viewport () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка области отсечения
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetScissor (const Rect& rect);
    const Rect& Scissor    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление объектов в кадр
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddEntity  (const Entity&);
    void AddLight   (const Light&);
    void AddText    (const math::vec3f& position, const wchar_t* message, const Font& font);
    void AddText    (const math::vec3f& position, const wchar_t* message, const Font& font, const math::vec4f& color);
    void AddText    (const math::vec3f& position, const wchar_t* message, const Font& font, const Material& material);
    void AddRect    (const math::vec3f& from, const math::vec3f& to, const math::vec4f& color);
    void AddRect    (const math::vec3f& from, const math::vec3f& to, const Material& material);
    void AddPoint   (const math::vec3f& position, const math::vec4f& color);
    void AddLine    (const math::vec3f& from, const math::vec3f& to, const math::vec4f& color);
    void AddPointer (const math::vec3f& from, const math::vec3f& to, const math::vec4f& color);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление вложенного кадра 
///////////////////////////////////////////////////////////////////////////////////////////////////
 //   void AddFrame (const Frame&, int render_order); //prerender: sort_order < 0, postrender: sort_order > 0

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

  private:    
    Frame  (const Frame&); //no impl
    Frame& operator = (const Frame&); //no impl

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
