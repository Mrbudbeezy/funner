#ifndef RENDER_LIGHT_HEADER
#define RENDER_LIGHT_HEADER

//??продумать noShadows, noSpecular???

namespace render
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///“ип источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
enum LightType
{
  LightType_Point,  //точечный источник света
  LightType_Direct, //направленный цилиндрический источник света
  LightType_Spot,   //направленный конусоидальный источник света

  LightType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///»сточник света
///////////////////////////////////////////////////////////////////////////////////////////////////
class Light
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
/// онструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////  
    Light  ();
    Light  (const Light&);
    ~Light ();
    
    Light& operator = (const Light&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///“ип источника света
///////////////////////////////////////////////////////////////////////////////////////////////////  
    void      SetType (LightType type);
    LightType Type    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕоложение и направление источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetPosition  (const math::vec3f& position);
    void               SetDirection (const math::vec3f& direction);
    const math::vec3f& Position     () const;
    const math::vec3f& Direction    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///÷вет источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetLightColor (const math::vec3f& color);
    const math::vec3f& LightColor    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///«атухание (constant, linear, quadratic)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetAttenuation (const math::vec3f& multiplier);
    const math::vec3f& Attenuation    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕараметры источника света
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  SetRange          (float range);                            //рассто€ние действи€ источника света
    void  SetExponent       (float exponent);                         //экспонента затухани€ направленных источников света
    void  SetDirectRadiuses (float inner_radius, float outer_radius); //радиус затухани€ (дл€ direct-light)    
    void  SetInnerRadius    (float radius);
    void  SetOuterRadius    (float radius);    
    void  SetSpotAngles     (float inner_angle, float outer_angle);   //углы затухани€ (дл€ spot-light)
    void  SetInnerAngle     (float angle);
    void  SetOuterAngle     (float angle);
    float Range             () const;
    float Exponent          () const;
    float InnerRadius       () const;
    float OuterRadius       () const;
    float InnerAngle        () const;
    float OuterAngle        () const;        

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
