#ifndef RENDER_MEDIA_HEADER
#define RENDER_MEDIA_HEADER

#include <xtl/functional_fwd>

//+доделать временные каналы!!!

namespace render
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс для всех загружаемых ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
class IResource
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Номер текущей ревизии ресурса
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Revision () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Возможно ли совместное использование ресурса несколькоми объектами (Entity)
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool IsShareable () = 0; //??имя

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;    
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс загрузчика меша
///////////////////////////////////////////////////////////////////////////////////////////////////
class IMesh: virtual public IResource
{
  public:
    typedef xtl::shared_ptr<media::Mesh> MeshPtr;  

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение меша
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual MeshPtr Mesh () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс загрузчика материала
///////////////////////////////////////////////////////////////////////////////////////////////////
class IMaterial: virtual public IResource
{
  public:
    typedef media::Material::Pointer MaterialPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual MaterialPtr Material () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс загрузчика гарнитуры шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
class IFont: virtual public IResource
{
  public:
    typedef xtl::shared_ptr<media::FontFace> FontPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IFont* Font () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс загрузчика изображения
///////////////////////////////////////////////////////////////////////////////////////////////////
class IImage: virtual public IResource
{
  public:
    typedef xtl::shared_ptr<media::Image>    ImagePtr;
//    typedef xtl::shared_ptr<media::DdsImage> DdsImage;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение изображения
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ImagePtr Image () = 0;
//    virtual DdsImage CompressedImage () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс загрузчика видео
///////////////////////////////////////////////////////////////////////////////////////////////////
class IVideo: virtual public IResource
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение параметров раскадровки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t FrameWidth  () = 0; //получение ширины кадра
    virtual size_t FrameHeight () = 0; //получение высоты кадра
    virtual size_t FramesCount () = 0; //получение количества кадров

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение частоты обновления кадров
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t FramesPerSecond () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение изображения
///////////////////////////////////////////////////////////////////////////////////////////////////      
    virtual xtl::shared_ptr<media::Image> Image (size_t image_number) = 0;  
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс загрузчика анимированного изображения
///////////////////////////////////////////////////////////////////////////////////////////////////
class IAnimatedImage: virtual public IResource
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение параметров раскадровки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t FrameWidth  () = 0; //получение ширины кадра
    virtual size_t FrameHeight () = 0; //получение высоты кадра
    virtual size_t FirstFrame  () = 0; //получение индекса первого кадра
    virtual size_t FramesCount () = 0; //получение количества кадров

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение частоты обновления кадров
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t FramesPerSecond () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение изображения
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual xtl::shared_ptr<media::Image> Image () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс динамического изображения
///////////////////////////////////////////////////////////////////////////////////////////////////
class IDynamicImage: virtual public IResource
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление динамически обновляемых областей вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t    ViewportsCount () = 0;
    virtual Viewport& Viewport       (size_t index) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Модель
///////////////////////////////////////////////////////////////////////////////////////////////////
class Model
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Model  ();
    Model  (const Model&);
    ~Model ();

    Model& operator = (const Model&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка уровней детализации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void    SetLodsCount (size_t lods_count);
    size_t  LodsCount    () const;
    void    SetSource    (size_t lod, IMesh*);
    IMesh*  Source       (size_t lod) const;

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
class Material
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Material  ();
    Material  (const char* name);
    Material  (IMaterial* source);
    Material  (const Material&);
    ~Material ();

    Material& operator = (const Material&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка загрузчика материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    void       SetSource (IMaterial*);
    void       SetSource (const char* name);
    IMaterial* Source    () const;

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Шрифт
///////////////////////////////////////////////////////////////////////////////////////////////////
class Font
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Font  ();
    Font  (const char* name);
    Font  (IFont* face);
    Font  (const Font&);
    ~Font ();

    Font& operator = (const Font&);  
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка загрузчика шрифта
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetSource (IFont* face);
    void   SetSource (const char* name);
    IFont* Source    () const;

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Типы ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ResourceType
{
  ResourceType_Mesh,           //меш
  ResourceType_Material,       //материал
  ResourceType_Font,           //шрифт
  ResourceType_Image,          //изображение
  ResourceType_AnimatedImage,  //анимированное изображение
  ResourceType_Video,          //видео
  ResourceType_DynamicImage,   //динамическое изображение
  
  ResourceType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
class ResourceLibrary
{
  public:
    typedef xtl::function<IMesh*  (const char* name)>         MeshLoader;
    typedef xtl::function<IMaterial* (const char* name)>      MaterialLoader;
    typedef xtl::function<IFont* (const char* name)>          FontLoader;
    typedef xtl::function<IImage* (const char* name)>         ImageLoader;
    typedef xtl::function<IVideo* (const char* name)>         VideoLoader;
    typedef xtl::function<IAnimatedImage* (const char* name)> AnimatedImageLoader;
    typedef xtl::function<IDynamicImage* (const char* name)>  DynamicImageLoader;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Определение типа ресурса
///////////////////////////////////////////////////////////////////////////////////////////////////
    static render::ResourceType ResourceType (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка ресурсов
///////////////////////////////////////////////////////////////////////////////////////////////////
    static IMesh*          LoadMesh          (const char* name) const;
    static IMaterial*      LoadMaterial      (const char* name) const;
    static IFont*          LoadFont          (const char* name) const;
    static IImage*         LoadImage         (const char* name) const;
    static IVideo*         LoadVideo         (const char* name) const;
    static IAnimatedImage* LoadAnimatedImage (const char* name) const;
    static IDynamicImage*  LoadDynamicImage  (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация загрузчиков
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterLoader       (const char* re_pattern, const MeshLoader& loader);
    static void RegisterLoader       (const char* re_pattern, const ImageLoader& loader);
    static void RegisterLoader       (const char* re_pattern, const VideoLoader& loader);
    static void RegisterLoader       (const char* re_pattern, const AnimatedImageLoader& loader);
    static void RegisterLoader       (const char* re_pattern, const DynamicImageLoader& loader);
    static void UnregisterLoader     (const char* re_pattern);
    static void UnregisterAllLoaders ();
};

}

#endif
