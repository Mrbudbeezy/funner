#ifndef RENDER_CAMERA_HEADER
#define RENDER_CAMERA_HEADER

namespace render
{

typedef xtl::function<void (Frame&)> DrawFrameHandler;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Камера
///////////////////////////////////////////////////////////////////////////////////////////////////
class Camera
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Camera  ();
    Camera  (const Camera&);
    ~Camera ();

    Camera& operator = (const Camera&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка видовой матрицы
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetViewTM (const math::mat4f&);
    const math::mat4f& ViewTM    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка матрицы проецирования
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void               SetProjectionTM (const math::mat4f&);
    const math::mat4f& ProjectionTM    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация обработчика перерисовки камеры
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                    SetUpdateHandler (const DrawFrameHandler&);
    const DrawFrameHandler& UpdateHandler    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (RenderTarget& render_target, Viewport& viewport);

    //+suppress view id
    //+relative viewtm/projectiontm????

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
