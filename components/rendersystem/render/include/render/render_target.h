#ifndef RENDER_RENDER_TARGET_HEADER
#define RENDER_RENDER_TARGET_HEADER

namespace render
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Целевой буфер отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class RenderTarget
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размеры целевого буфера отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Width  () const;
    size_t Height () const;
    
      //+параметры целевого буфера: количество битов на пиксель и т.п.???

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с областями вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddViewport        (const Viewport&);
    void   RemoveViewport     (size_t viewport_index);
    void   RemoveAllViewports ();

    size_t          ViewportsCount () const;
    const Viewport& Viewport       (size_t viewport_index) const; 
          Viewport& Viewport       (size_t viewport_index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление активностью целевого буфера отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetActive  (bool state);
    bool IsActive   () const;
    void Activate   () { SetActive (true); }
    void Deactivate () { SetActive (false); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Захват изображения (screen-shot)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CaptureImage (const char* file_name);
    void CaptureImage (media::Image&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление целевого буфера отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация обработчиков событий
///////////////////////////////////////////////////////////////////////////////////////////////////
//    typedef xtl::function<void (RenderTargetEvent event_id

//    xtl::connection RegisterEventHandler (RenderTargetEvent event_id, const EventHandler& handler);
    //?????

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (RenderTarget&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (RenderTarget&, RenderTarget&);

}

#endif

