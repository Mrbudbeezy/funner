#ifndef RENDER_ENTITY_HEADER
#define RENDER_ENTITY_HEADER

namespace render
{

//???возможно следует сделать sharebale объект skeleton

///////////////////////////////////////////////////////////////////////////////////////////////////
///Отрисовываемый объект
///////////////////////////////////////////////////////////////////////////////////////////////////
class Entity
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Entity  ();
    Entity  (const Entity&);
    ~Entity ();

    Entity& operator = (const Entity&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка положения и направления
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetPosition    (const math::vec3f&);
    void               SetOrientation (const math::quatf&);
    const math::vec3f& Position       () const;
    const math::quatf& Orientation    () const;
      //подумать, нужен ли scale???

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка матриц соединений
///////////////////////////////////////////////////////////////////////////////////////////////////
      //подумать, нужны ли матрицы???
    size_t             JointsCount () const;
    const math::quatf* Joints      () const;
          math::quatf* Joints      ();
    const math::quatf& Joint       (size_t joint_index) const;
          math::quatf& Joint       (size_t joint_index); 

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка модели
///////////////////////////////////////////////////////////////////////////////////////////////////
    void         SetModel (const Model&);
    void         SetModel (const char* name);
    const Model& Model    () const;

//    void SetTime (size_t index, float time);

  private:
    struct Impl;
    Impl* impl; 
};

}

#endif
