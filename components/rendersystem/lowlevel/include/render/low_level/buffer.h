#ifndef RENDER_LOW_LEVEL_BUFFER_HEADER
#define RENDER_LOW_LEVEL_BUFFER_HEADER

#include <render/low_level/object.h>

namespace render
{

namespace low_level
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим использования буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum BufferUsageMode
{
  BufferUsageMode_Default,  //тип буфера выбирается в соответствии с предпочтениями устройства отрисовки
  BufferUsageMode_Static,   //созданный буфер не может быть изменён
  BufferUsageMode_Dynamic,  //буфер может меняться каждый кадр
  BufferUsageMode_Stream,   //буфер создан для обмена CPU<->GPU
    //добавить SystemMemory
  
  BufferUsageMode_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги биндинга буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum BufferBindFlag
{
  BufferBindFlag_VertexBuffer = 1,  //буфер может быть присоединён как вершинный буфер
  BufferBindFlag_IndexBuffer  = 2,  //буфер может быть присоединён как индексный буфер
  BufferBindFlag_Texture      = 4,  //буфер может быть присоединён как текстура
  BufferBindFlag_RenderTarget = 8,  //буфер может выступать в качестве целевого буфера отрисовки
  BufferBindFlag_DepthStencil = 16, //буфер может выступать в качестве dpeth-stencil буфера отрисовки
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги доступа к буферу
///////////////////////////////////////////////////////////////////////////////////////////////////
enum BufferAccessFlag
{
  BufferAccessFlag_Read  = 1, //доступ на чтение
  BufferAccessFlag_Write = 2 //доступ на запись
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
struct BufferDesc
{
  size_t          size;         //размер буфера
  BufferUsageMode usage_mode;   //режим использования буфера
  size_t          bind_flags;   //флаги биндинга буфера
  size_t          access_flags; //флаги доступа к буферу
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class IBuffer: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void GetDesc (BufferDesc&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение / запись из буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetData (size_t offset, size_t size, const void* data) = 0;
    virtual void GetData (size_t offset, size_t size, void* data) = 0;
};

}

}

#endif
