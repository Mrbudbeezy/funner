#ifndef RENDER_LOW_LEVEL_BUFFER_HEADER
#define RENDER_LOW_LEVEL_BUFFER_HEADER

#include <render/low_level/object.h>

namespace render
{

namespace low_level
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим использования буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum BufferUsageMode
{
  BufferUsageMode_Default,  //тип буфера выбирается в соответствии с предпочтениями устройства отрисовки
  BufferUsageMode_Static,   //созданный буфер не может быть изменён
  BufferUsageMode_Dynamic,  //буфер может меняться каждый кадр
  BufferUsageMode_Stream,   //буфер создан для обмена CPU<->GPU
  
  BufferUsageMode_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
enum BufferType
{
  BufferType_VertexBuffer, //вершинный буфер
  BufferType_IndexBuffer,  //индексный буфер
  BufferType_Texture,      //текстура
  BufferType_ColorBuffer,  //буфер цвета
  BufferType_DepthStencil, //буфер глубина/трафарет

  BufferType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Флаги доступа к буферу
///////////////////////////////////////////////////////////////////////////////////////////////////
enum BufferAccessFlag
{
  BufferAccessFlag_Read  = 1, //доступ на чтение
  BufferAccessFlag_Write = 2 //доступ на запись
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
struct BufferDesc
{
  size_t          size;         //размер буфера
  BufferUsageMode usage_mode;   //режим использования буфера
  size_t          access_flags; //флаги доступа к буферу
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class IBuffer: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размер буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t GetSize () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual BufferType GetType () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Параметры буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void GetDesc (BufferDesc&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Чтение / запись из буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetData (size_t offset, size_t size, const void* data) = 0;
    virtual void GetData (size_t offset, size_t size, void* data) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование данных между буферами
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void CopyTo   (size_t source_offset, size_t size, IBuffer& destination, size_t destination_offset) = 0;
            void CopyFrom (IBuffer& source, size_t source_offset, size_t size, size_t destination_offset);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Основные виды используемых буферов
///  Потомки введены только для статического контроля типов
///////////////////////////////////////////////////////////////////////////////////////////////////
class IVertexBuffer:  virtual public IBuffer {};
class IIndexBuffer:   virtual public IBuffer {};

#include <render/low_level/detail/buffer.inl>

}

}

#endif
