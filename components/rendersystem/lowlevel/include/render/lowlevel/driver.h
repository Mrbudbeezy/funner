#ifndef RENDER_LOW_LEVEL_DRIVER_HEADER
#define RENDER_LOW_LEVEL_DRIVER_HEADER

#include <render/lowlevel/common.h>
#include <render/lowlevel/frame_buffer.h>

namespace render
{

namespace low_level
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор видео-режима
///////////////////////////////////////////////////////////////////////////////////////////////////
struct OutputModeDesc
{
  size_t width;        //ширина фрейм-буфера
  size_t height;       //высота фрейм-буфера
  size_t color_bits;   //количество бит на цвет
  size_t refresh_rate; //частота обновления монитора (0-default)  
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Устройство вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class IOutput: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени / описания устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* GetName        () = 0;
    virtual const char* GetDescription () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение списка видео-режимов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t GetModesCount () = 0;
    virtual void   GetModeDesc   (size_t mode_index, OutputModeDesc& mode_desc) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего видео-режима
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetCurrentMode (const OutputModeDesc&) = 0;
    virtual void GetCurrentMode (OutputModeDesc&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление гамма-коррекцией
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetGammaRamp (const Color3f table [256]) = 0;
    virtual void GetGammaRamp (Color3f table [256]) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Метод обмена заднего и переднего буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum SwapMethod
{
  SwapMethod_Discard, //состояние заднего буфера после обмена не определено
  SwapMethod_Flip,    //обмен местами заднего и переднего буфера
  SwapMethod_Copy,    //копирование заднего буфера в передний
  
  SwapMethod_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор цепочки обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
struct SwapChainDesc
{
  FrameBufferDesc frame_buffer;  //дескриптор буфера кадра
  size_t          samples_count; //количество sample'ов (0=multisample off)
  size_t          buffers_count; //количество буферов в цепочке обмена (0=default 2 buffers)
  SwapMethod      swap_method;   //метод обмена заднего и переднего буферов  
  bool            vsync;         //необходимо ли использовать VSync
  void*           window_handle; //дескриптор окна отрисовки
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цепочка обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
class ISwapChain: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void GetDesc (SwapChainDesc&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение устройства вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IOutput* GetOutput () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен текущего заднего буфера и переднего буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Present () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / взятие состояния full-screen mode
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetFullscreenState (bool state) = 0;
    virtual bool GetFullscreenState () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение фрейм-буферов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t        GetBuffersCount () = 0;
    virtual IFrameBuffer* GetBuffer       (size_t index) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Драйвер устройства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class IDriver: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя драйвера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* GetName () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных устройств вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t   GetOutputsCount () = 0;
    virtual IOutput* GetOutput       (size_t index) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание цепочки обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ISwapChain* CreateSwapChain (IOutput* target_output, const SwapChainDesc& desc) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание устройства отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IDevice* CreateDevice (ISwapChain* swap_chain, const char* init_string = "") = 0;
};

}

}

#endif
