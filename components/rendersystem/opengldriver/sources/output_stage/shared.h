#ifndef RENDER_GL_DRIVER_OUTPUT_STAGE_SHARED_HEADER
#define RENDER_GL_DRIVER_OUTPUT_STAGE_SHARED_HEADER

#include <memory.h>

#include <shared/output_stage.h>
#include <shared/object.h>
#include <shared/trackable.h>
#include <shared/platform/swap_chain_manager.h>

#include <xtl/intrusive_ptr.h>
#include <xtl/bind.h>

#include <common/exception.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буфер кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
class FrameBuffer: virtual public IFrameBuffer, public Object, public Trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка буфера в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Bind () = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение менеджера контекстов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ContextManager& GetContextManager () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание буферов кадра
///////////////////////////////////////////////////////////////////////////////////////////////////
    static FrameBuffer* Create (const ContextManager&, ISwapChain*);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние подуровня смешивания цветов
///////////////////////////////////////////////////////////////////////////////////////////////////
class BlendState: virtual public IBlendState, public Object, public Trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    BlendState  (const ContextManager&, const BlendDesc&);
    ~BlendState ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение менеджера контекстов
///////////////////////////////////////////////////////////////////////////////////////////////////
    ContextManager& GetContextManager () { return context_manager; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/изменение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetDesc (const BlendDesc&);
    void GetDesc (BlendDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка состояния в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind ();

  private:
    ContextManager context_manager; //менеджер контекстов
    BlendDesc      desc;            //дескриптор подуровня
    int            display_list;    //список команд конфигурации OpenGL
};

}

}

}

#endif
