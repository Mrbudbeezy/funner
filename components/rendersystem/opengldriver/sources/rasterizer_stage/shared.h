#ifndef RENDER_GL_DRIVER_RASTERIZER_STAGE_SHARED_HEADER
#define RENDER_GL_DRIVER_RASTERIZER_STAGE_SHARED_HEADER

#include <shared/rasterizer_stage.h>

#include <xtl/trackable_ptr.h>
#include <xtl/intrusive_ptr.h>

#include <common/exception.h>
#include <common/hash.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Элементы таблицы локальных данных контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
enum RasterizerStageCache
{
  RasterizerStageCache_ViewportScissorHash, //хэш состояния областей отсечения
  RasterizerStageCache_RasterizerStateHash, //хэш состояния подуровня растеризации
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор растеризатора
///////////////////////////////////////////////////////////////////////////////////////////////////
class RasterizerState : virtual public IRasterizerState, public ContextObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RasterizerState  (const ContextManager& manager, const RasterizerDesc& desc);
    ~RasterizerState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка состояния в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение/получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetDesc (const RasterizerDesc&);
    void GetDesc (RasterizerDesc&);

  private:
    RasterizerDesc desc;         //дескриптор состояния
    size_t         desc_hash;    //хэш дескриптора состояния
    int            display_list; //номер списка команд конфигурации состояния в OpenGL
};

}

}

}

#endif
