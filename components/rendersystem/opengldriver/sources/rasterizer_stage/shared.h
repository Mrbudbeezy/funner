#ifndef RENDER_GL_DRIVER_RASTERIZER_STAGE_SHARED_HEADER
#define RENDER_GL_DRIVER_RASTERIZER_STAGE_SHARED_HEADER

#include <shared/rasterizer_stage.h>

#include <common/exception.h>
#include <common/hash.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор растеризатора
///////////////////////////////////////////////////////////////////////////////////////////////////
class RasterizerState : virtual public IRasterizerState, public ContextObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    RasterizerState  (const ContextManager& manager);
    ~RasterizerState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Биндинг состояния
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение/получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetDesc (const RasterizerDesc& in_desc);
    void GetDesc (RasterizerDesc&       target_desc)   {target_desc = desc;}

  private:
    RasterizerDesc desc;
    int            display_list;   //номер первого списка команд конфигурации OpenGL (всего списков OpenGLTextureTarget_Num)
};

}

}

}

#endif
