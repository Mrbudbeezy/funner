#ifndef RENDER_GL_DRIVER_SHADER_STAGE_SHARED_HEADER
#define RENDER_GL_DRIVER_SHADER_STAGE_SHARED_HEADER

#include <shared/shader_stage.h>
#include <shared/input_stage.h>

#include <common/exception.h>

#include <xtl/trackable_ptr.h>
#include <xtl/uninitialized_storage.h>

namespace render
{

namespace low_level
{

namespace opengl
{

typedef xtl::trackable_ptr<IBindableBuffer> ConstantBufferPtr;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описание расположения параметров
///////////////////////////////////////////////////////////////////////////////////////////////////
class ShaderParametersLayout : virtual public IShaderParametersLayout, public ContextObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderParametersLayout (const ContextManager& manager);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение/получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetDesc (const ShaderParametersLayoutDesc& in_desc);
    void GetDesc (ShaderParametersLayoutDesc& target_desc);

  private:
    ShaderParametersLayoutDesc desc;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Шейдер
///////////////////////////////////////////////////////////////////////////////////////////////////
class Shader : virtual public IShader, public ContextObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Биндинг
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Bind (ConstantBufferPtr* constant_buffers, ShaderParametersLayout* shader_parameters_layout) = 0;

  protected:
    Shader (const ContextManager& manager) : ContextObject (manager) {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Шейдер менеджер
///////////////////////////////////////////////////////////////////////////////////////////////////
class ShaderManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
   virtual ~ShaderManager () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество поддерживаемых профилей
///////////////////////////////////////////////////////////////////////////////////////////////////
   virtual size_t GetProfilesCount () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имена поддерживаемых профилей
///////////////////////////////////////////////////////////////////////////////////////////////////
   virtual const char* GetProfile (size_t index) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание шейдера
///////////////////////////////////////////////////////////////////////////////////////////////////
   virtual Shader* CreateShader (size_t shaders_count, const ShaderDesc* shader_descs, const LogFunction& error_log) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание шейдер менеджеров
///////////////////////////////////////////////////////////////////////////////////////////////////
ShaderManager* create_glsl_shader_manager (const ContextManager& manager);

}

}

}

#endif
