#ifndef RENDER_GL_DRIVER_SHADER_STAGE_SHARED_HEADER
#define RENDER_GL_DRIVER_SHADER_STAGE_SHARED_HEADER

#include <shared/shader_stage.h>

#include <common/exception.h>
#include <common/hash.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор растеризатора
///////////////////////////////////////////////////////////////////////////////////////////////////
class ShaderParametersLayout : virtual public IShaderParametersLayout, public ContextObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderParametersLayout (const ContextManager& manager);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Биндинг состояния
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Изменение/получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetDesc (const ShaderParametersLayoutDesc& in_desc);

  private:
    ShaderParametersLayoutDesc desc;
    int                        display_list;   //номер первого списка команд конфигурации OpenGL (всего списков OpenGLTextureTarget_Num)
};

}

}

}

#endif
