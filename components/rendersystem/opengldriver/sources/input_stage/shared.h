#ifndef RENDER_GL_DRIVER_INPUT_STAGE_SHARED_HEADER
#define RENDER_GL_DRIVER_INPUT_STAGE_SHARED_HEADER

#include <shared/buffer.h>
#include <shared/input_stage.h>
#include <common/exception.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вершинный буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class VertexBuffer: virtual public IVertexBuffer, virtual public IIndexBuffer, public Buffer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание и уничтожение
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexBuffer ();
    ~VertexBuffer ();
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размер
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetSize () const;
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип
///////////////////////////////////////////////////////////////////////////////////////////////////
    BufferType GetType ();
///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (BufferDesc&);
///////////////////////////////////////////////////////////////////////////////////////////////////
///Данные
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetData (size_t offset, size_t size, const void* data);
    void GetData (size_t offset, size_t size, void* data);
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование данных между буферами
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CopyTo  (size_t src_offset, size_t size, VertexBuffer& dst, size_t dst_offset);
};

class IndexBuffer: virtual public IVertexBuffer, virtual public IIndexBuffer, public Buffer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание и уничтожение
///////////////////////////////////////////////////////////////////////////////////////////////////
    IndexBuffer ();
    ~IndexBuffer ();
///////////////////////////////////////////////////////////////////////////////////////////////////
///Размер
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetSize () const;
///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип
///////////////////////////////////////////////////////////////////////////////////////////////////
    BufferType GetType ();
///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (BufferDesc&);
///////////////////////////////////////////////////////////////////////////////////////////////////
///Данные
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetData (size_t offset, size_t size, const void* data);
    void GetData (size_t offset, size_t size, void* data);
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование данных между буферами
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CopyTo  (size_t src_offset, size_t size, VertexBuffer& dst, size_t dst_offset);
};

}

}

}

#endif
