#ifndef RENDER_GL_DRIVER_INPUT_STAGE_SHARED_HEADER
#define RENDER_GL_DRIVER_INPUT_STAGE_SHARED_HEADER

#include <shared/input_stage.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вершинный буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class Buffer: virtual public IBuffer, public ContextObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Buffer ();
    ~Buffer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (BufferDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с данными буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetData (size_t offset, size_t size, const void* data);
    void GetData (size_t offset, size_t size, void* data);
///////////////////////////////////////////////////////////////////////////////////////////////////
///Виртуальные функции, на будущее
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void  Bind() = 0;
    virtual void* GetDataPtr() = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буфер видеоданных с хранением в системной памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
class SysMemBuffer: public Buffer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SysMemBuffer();
    ~SysMemBuffer();
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (BufferDesc&);
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с данными буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetData (size_t offset, size_t size, const void* data);
    void GetData (size_t offset, size_t size, void* data);
///////////////////////////////////////////////////////////////////////////////////////////////////
///Виртуальные функции, свободный указатель на данные и бинд буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void  Bind();
    void* GetDataPtr();    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Импль
///////////////////////////////////////////////////////////////////////////////////////////////////
  private:
    struct Impl;
    auto_ptr<Impl> impl;
};

}

}

}

#endif
