#ifndef RENDER_GL_DRIVER_INPUT_STAGE_SHARED_HEADER
#define RENDER_GL_DRIVER_INPUT_STAGE_SHARED_HEADER

#include <shared/input_stage.h>
#include <shared/context_object.h>
#include <shared/object.h>
#include <common/exception.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вершинный буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class Buffer: virtual public IBuffer, public ContextObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Buffer(const ContextManager&, const BufferDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (BufferDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка буфера  контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Bind () = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Указатель на данные буфера (для буферов в системной памяти) / смещение от начала буфера (для аппаратных буферов)
///////////////////////////////////////////////////////////////////////////////////////////////////    
    virtual void* GetDataPointer () = 0;
 
  protected:
    BufferDesc  buffer_desc; // дескриптор буфера
    
    void SetDesc (const BufferDesc&);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буфер с хранением в системной памяти
///////////////////////////////////////////////////////////////////////////////////////////////////
class SystemMemoryBuffer: public Buffer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SystemMemoryBuffer  (const ContextManager&, const BufferDesc&);
    ~SystemMemoryBuffer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с данными буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetData (size_t offset, size_t size, const void* data);
    void GetData (size_t offset, size_t size, void* data);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка буфера в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Указатель на данные буфера
///////////////////////////////////////////////////////////////////////////////////////////////////    
    void* GetDataPointer ();

  private:
    void*       buffer;     // указатель на буфер в системной памяти
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Буфер с хранением в видеопамяти с использованием расширения GL_ARB_vertex_buffer_object
///////////////////////////////////////////////////////////////////////////////////////////////////
class VboBuffer: public Buffer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    VboBuffer  (const ContextManager&, GLenum target, const BufferDesc&);
    ~VboBuffer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с данными буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetData (size_t offset, size_t size, const void* data);
    void GetData (size_t offset, size_t size, void* data);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка буфера в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Cмещение от начала буфера (для аппаратных буферов)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void* GetDataPointer ();

  private:
    GLenum      target;     //целевой тип аппаратного буфера (GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER)
    GLuint      buffer_id;  //номер буфера в контексте OpenGL
};

}

}

}

#endif
