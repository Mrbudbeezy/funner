#ifndef RENDER_GL_DRIVER_WIN32_SHARED_HEADER
#define RENDER_GL_DRIVER_WIN32_SHARED_HEADER

#define _WIN32_WINNT 0x0501 //for ChangeDisplaySettings

#include <windows.h>
#include <gl/glew.h>
#include <gl/wglew.h>

#include <shared/platform/output_manager.h>
#include <shared/platform/swap_chain.h>
#include <shared/platform/context.h>
#include <shared/object.h>
#include <shared/property_list.h>
#include <shared/trackable.h>

#include <xtl/intrusive_ptr.h>
#include <xtl/reference_counter.h>
#include <xtl/bind.h>

#include <stl/vector>
#include <stl/string>

#include <common/exception.h>
#include <common/strlib.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Устройство вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class Output: virtual public IOutput, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Output  (const DISPLAY_DEVICE&);
    ~Output ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetName ();
    const char* GetWinName () { return win_name.c_str (); }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение списка видео-режимов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetModesCount ();
    void   GetModeDesc   (size_t mode_index, OutputModeDesc& mode_desc);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего видео-режима
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetCurrentMode (const OutputModeDesc&);
    void GetCurrentMode (OutputModeDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление гамма-коррекцией
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetGammaRamp (const Color3f table [256]);
    void GetGammaRamp (Color3f table [256]);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение экранных координат и размеров устройства вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetScreenRect (Rect&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список свойств устройства вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPropertyList* GetProperties ();

  private:    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескприптора контекста устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    HDC GetDC ();    
    
  private:
    typedef stl::vector<OutputModeDesc> OutputModeArray;

  private:
    stl::string     name;        //имя устройства
    stl::string     win_name;    //имя устройства в Windows
    PropertyList    properties;  //свойства устройства
    OutputModeArray modes;       //режимы работы устройства
    HDC             hDC;         //хэндл контекста устройства
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цепочка обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
class SwapChain: virtual public ISwapChain, public Object, public Trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SwapChain  (IOutput* output, const SwapChainDesc& desc);
    ~SwapChain ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (SwapChainDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение устройства вывода с максимальным размером области перекрытия
///////////////////////////////////////////////////////////////////////////////////////////////////
    IOutput* GetContainingOutput ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен текущего заднего буфера и переднего буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Present ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / взятие состояния full-screen mode
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetFullscreenState (bool state);
    bool GetFullscreenState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст устройства вывода / WGLEW контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
    HDC                 GetDC           () const { return output_context; }
    const WGLEWContext* GetWGLEWContext () const { return &wglew_context; }

  private:
    typedef xtl::com_ptr<IOutput> OutputPtr;

  private:
    WGLEWContext     wglew_context;  //контекст WGLEW
    HWND             output_window;  //окно вывода
    HDC              output_context; //контекст вывода
    OutputPtr        output;         //указатель на устройство вывода    
    SwapChainDesc    desc;           //дескриптор цепочки обмена    
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Захват нитью контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
class ThreadLock
{
  public:
    ThreadLock  ();
    ~ThreadLock ();

    static void Lock     ();
    static void Unlock   ();
    static bool IsLocked ();

  private:
    ThreadLock (const ThreadLock&); //no impl
    ThreadLock& operator = (const ThreadLock&); //no impl
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка текущих ошибок
///////////////////////////////////////////////////////////////////////////////////////////////////
void check_errors (const char* source);
void raise_error  (const char* source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дополнительные функции инициализации Windows OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
void init_wglew_context       (const SwapChainDesc& swap_chain_desc, WGLEWContext* wglew_context); //инициализация контекста wglew
void set_current_glew_context (const GLEWContext*, const WGLEWContext* context);                   //установка текущего контекста GLEW/WGLEW
void set_pixel_format         (HDC device_context, const SwapChainDesc& swap_chain_desc);          //установка формата пикселей
void get_pixel_format         (HDC device_context, SwapChainDesc& swap_chain_desc);                //получение формата пикселей

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение контекста GLEW/WGLEW (имя функции выбрано исходя из требований GLEW)
///////////////////////////////////////////////////////////////////////////////////////////////////
const GLEWContext*  glewGetContext  ();
const WGLEWContext* wglewGetContext ();

}

}

}

#endif
