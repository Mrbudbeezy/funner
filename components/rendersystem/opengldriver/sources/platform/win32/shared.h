#ifndef RENDER_GL_DRIVER_WIN32_SHARED_HEADER
#define RENDER_GL_DRIVER_WIN32_SHARED_HEADER

#define _WIN32_WINNT 0x0501 //for ChangeDisplaySettings

#include <windows.h>
#include <gl/glew.h>
#include <gl/wglew.h>

#include <shared/output_manager.h>
#include <shared/context_manager.h>
#include <shared/object.h>
#include <shared/property_list.h>
#include <shared/context.h>

#include <xtl/intrusive_ptr.h>

#include <stl/vector>
#include <stl/string>

#include <common/exception.h>
#include <common/strlib.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Устройство вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class Output: virtual public IOutput, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Output  (const DISPLAY_DEVICE&);
    ~Output ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение списка видео-режимов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetModesCount ();
    void   GetModeDesc   (size_t mode_index, OutputModeDesc& mode_desc);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего видео-режима
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetCurrentMode (const OutputModeDesc&);
    void GetCurrentMode (OutputModeDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление гамма-коррекцией
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetGammaRamp (const Color3f table [256]);
    void GetGammaRamp (Color3f table [256]);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение хэндла контекста устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    HDC GetDC ();

//////////////////////////////////////////////////////////////////////////////////////////////////
///Список свойств устройства вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPropertyList* GetProperties ();
    
  private:
    typedef stl::vector<OutputModeDesc> OutputModeArray;

  private:
    stl::string     name;        //имя устройства
    stl::string     win_name;    //имя устройства в Windows
    PropertyList    properties;  //свойства устройства
    OutputModeArray modes;       //режимы работы устройства
    HDC             hDC;         //хэндл контекста устройства
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цепочка обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
class SwapChain: virtual public ISwapChain, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SwapChain  (OutputManager&, const SwapChainDesc& desc);
    ~SwapChain ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (SwapChainDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение устройства вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    IOutput* GetOutput ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен текущего заднего буфера и переднего буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Present ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / взятие состояния full-screen mode
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetFullscreenState (bool state);
    bool GetFullscreenState ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст устройства вывода / WGLEW контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
    HDC                 GetDC           () const { return device_context; }
    const WGLEWContext* GetWGLEWContext () const { return &wglew_context; }

  private:
    typedef xtl::com_ptr<Output> OutputPtr;

  private:
    OutputPtr     output;                //указатель на устройство вывода
    HWND          output_window;         //окно вывода
    HDC           output_device_context; //контекст устройства вывода
    WGLEWContext  wglew_context;         //контекст WGLEW
    SwapChainDesc desc;                  //дескриптор цепочки обмена
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка текущих ошибок
///////////////////////////////////////////////////////////////////////////////////////////////////
void check_errors (const char* source);
void raise_error  (const char* source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Дополнительные функции инициализации Windows OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
HWND  create_dummy_window        (HWND parent);        //создание вспомогательного окна
HDC   get_device_context         (HWND window);        //получение контекста окна
HGLRC create_opengl_context      (HDC device_context); //создание контекста OpenGL
void  init_wglew_context         (const SwapChainDesc& swap_chain_desc, WGLEWContext* wglew_context); //инициализация контекста wglew
void  set_current_opengl_context (HDC device_context, HGLRC gl_context);                              //установка текущего контекста OpenGL
void  set_current_glew_context   (const GLEWContext*, const WGLEWContext* context);                   //установка текущего контекста GLEW/WGLEW
void  set_pixel_format           (HDC device_context, const SwapChainDesc& swap_chain_desc);          //установка формата пикселей
void  get_pixel_format           (HDC device_context, SwapChainDesc& swap_chain_desc);                //получение формата пикселей

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение контекста WGLEW (имя функции выбрано исходя из требований WGLEW)
///////////////////////////////////////////////////////////////////////////////////////////////////
const WGLEWContext* wglewGetContext ();

}

}

}

#endif
