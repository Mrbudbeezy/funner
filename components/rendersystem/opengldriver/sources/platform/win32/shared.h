#ifndef RENDER_GL_DRIVER_WIN32_SHARED_HEADER
#define RENDER_GL_DRIVER_WIN32_SHARED_HEADER

#include <windows.h>

#include <shared/output_manager.h>
#include <shared/context_manager.h>
#include <shared/object.h>
#include <shared/property_list.h>

#include <xtl/intrusive_ptr.h>

#include <stl/vector>
#include <stl/string>

#include <common/exception.h>
#include <common/strlib.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Устройство вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class Output: virtual public IOutput, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Output  (const DISPLAY_DEVICE&);
    ~Output ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetName ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение списка видео-режимов
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetModesCount ();
    void   GetModeDesc   (size_t mode_index, OutputModeDesc& mode_desc);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего видео-режима
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetCurrentMode (const OutputModeDesc&);
    void   GetCurrentMode (OutputModeDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление гамма-коррекцией
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetGammaRamp (const Color3f table [256]);
    void GetGammaRamp (Color3f table [256]);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение хэндла контекста устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    HDC GetDC ();

//////////////////////////////////////////////////////////////////////////////////////////////////
///Список свойств устройства вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPropertyList* GetProperties ();
    
  private:
    typedef stl::vector<OutputModeDesc> OutputModeArray;

  private:
    stl::string     name;        //имя устройства
    stl::string     win_name;    //имя устройства в Windows
    PropertyList    properties;  //свойства устройства
    OutputModeArray modes;       //режимы работы устройства
    HDC             hDC;         //хэндл контекста устройства
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цепочка обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
class SwapChain: virtual public ISwapChain, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SwapChain  ();
    ~SwapChain ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (SwapChainDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение устройства вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    IOutput* GetOutput ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен текущего заднего буфера и переднего буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Present ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка / взятие состояния full-screen mode
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetFullscreenState (bool state);
    bool GetFullscreenState ();

  private:
    Output*       output;  //указатель на устройство вывода
    HDC           hDC;     //контекст устройства вывода
    SwapChainDesc desc;    //дескриптор цепочки обмена
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка текущих ошибок
///////////////////////////////////////////////////////////////////////////////////////////////////
void check_errors (const char* source);
void raise_error  (const char* source);

}

}

}

#endif
