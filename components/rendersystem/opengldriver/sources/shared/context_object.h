#ifndef RENDER_GL_DRIVER_CONTEXT_OBJECT_HEADER
#define RENDER_GL_DRIVER_CONTEXT_OBJECT_HEADER

#include <shared/object.h>
#include <shared/trackable.h>
#include <shared/context_manager.h>

#include <common/exception.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекстный объект (врапперы для работы с ContextManager, упрощение иерархии классов и т.д.)
///////////////////////////////////////////////////////////////////////////////////////////////////
class ContextObject: public Object, public Trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ContextObject (const ContextManager&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка совместимости
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsCompatible (const ContextManager&) const;
    bool IsCompatible (const ContextObject&) const;  

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер контекстов
///////////////////////////////////////////////////////////////////////////////////////////////////
          ContextManager& GetContextManager ()       { return context_manager; }
    const ContextManager& GetContextManager () const { return context_manager; }

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Активация текущего контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    void MakeContextCurrent () const;
    bool IsContextCurrent   () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с таблицей локальных данных контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetContextData   (ContextDataTable table_id, size_t element_id, size_t value);
    size_t GetContextData   (ContextDataTable table_id, size_t element_id) const;
    void   ClearContextData (ContextDataTable table_id);
    void   ClearContextData ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Определение поддержки расширения контекстом
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsSupported (size_t context_id, GlExtension extension_id) const;
    bool IsSupported (GlExtension extension_id) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Протоколирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LogPrintf  (const char* format, ...) const;
    void LogVPrintf (const char* format, va_list args) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка ошибок OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CheckErrors (const char* source) const;
    void RaiseError  (const char* source) const;

  private:
    ContextManager context_manager;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Приведение типов объектов с проверкой совместимости
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class DstT, class SrcT>
DstT* cast_object (const ContextManager& owner, SrcT* ptr, const char* source, const char* argument_name);

template <class DstT, class SrcT>
DstT* cast_object (const ContextObject& owner, SrcT* ptr, const char* source, const char* argument_name);

#include <shared/detail/context_object.inl>

}

}

}

#endif
