#ifndef RENDER_GL_DRIVER_CONTEXT_STATE_HEADER
#define RENDER_GL_DRIVER_CONTEXT_STATE_HEADER

#include <shared/trackable.h>
#include <shared/platform/context.h>

namespace render
{

namespace low_level
{

namespace opengl
{

//forward declaration
class ContextState;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект, выбираемый в контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
class ContextObject: public Trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработчик события выбора объекта в контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Bind (ContextState&) {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слоты состояния контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ContextSlot
{
  ContextSlot_TEST, //убрать!!! введено для тестирования
  
  ContextSlot_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние контекста (политика копирования - подсчёт ссылок)
///////////////////////////////////////////////////////////////////////////////////////////////////
class ContextState
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    ContextState  (ISwapChain* swap_chain);
    ContextState  (const ContextState&);
    ~ContextState ();

    ContextState& operator = (const ContextState&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выбор объекта в контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
    void           SetObject (ContextSlot slot, ContextObject* object);
    void           SetObject (ContextSlot slot, IObject* object);
    ContextObject* GetObject (ContextSlot slot) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст
///////////////////////////////////////////////////////////////////////////////////////////////////
          Context& GetContext ();
    const Context& GetContext () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка состояния OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Check (const char* source);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (ContextState&);
    
  private:
    void ResetSlot (ContextSlot);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (ContextState&, ContextState&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Транзакция захвата контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
class ContextLock
{
  public:
    ContextLock  (ContextState&);
    ~ContextLock ();

  private:
    ContextLock (const ContextLock&); //no impl
    ContextLock& operator = (const ContextLock&); //no impl

  private:
    ContextState* context_state;
};

#include <shared/detail/context_lock.inl>

}

}

}

#endif
