#ifndef RENDER_GL_DRIVER_INPUT_STAGE_HEADER
#define RENDER_GL_DRIVER_INPUT_STAGE_HEADER

#include <stl/auto_ptr.h>
#include <render/low_level/device.h>
#include <shared/context_manager.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Входной уровень конвейера OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
class InputStage
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    InputStage  (ContextManager&);
    ~InputStage ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание ресурсов уровня
///////////////////////////////////////////////////////////////////////////////////////////////////
    IInputLayout* CreateInputLayoutState (const InputLayoutDesc& desc);
    IBuffer*      CreateVertexBuffer     (const BufferDesc& desc);
    IBuffer*      CreateIndexBuffer      (const BufferDesc& desc);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление конфигурацией входных данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          SetInputLayout  (IInputLayout* state);
    IInputLayout* GetInputLayout  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление вершинными буферами
///////////////////////////////////////////////////////////////////////////////////////////////////
    void     SetVertexBuffer (size_t vertex_buffer_slot, IBuffer* buffer);
    IBuffer* GetVertexBuffer (size_t vertex_buffer_slot) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление индексным буфером
///////////////////////////////////////////////////////////////////////////////////////////////////
    void     SetIndexBuffer (IBuffer* buffer);
    IBuffer* GetIndexBuffer () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение адреса начала массива индексов и типа индексов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const void* GetIndices   () const;
    GLenum      GetIndexType () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка состояния уровня в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind (size_t base_vertex, size_t base_index);

  private:
    InputStage (const InputStage&); //no impl
    InputStage& operator = (const InputStage&); //no impl

  private:  
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
