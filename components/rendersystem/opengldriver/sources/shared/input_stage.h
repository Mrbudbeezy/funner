#ifndef RENDER_GL_DRIVER_INPUT_STAGE_HEADER
#define RENDER_GL_DRIVER_INPUT_STAGE_HEADER

#include <render/low_level/buffer.h>
#include <stl/auto_ptr.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Входной уровень конвейера OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
class InputStage
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    InputStage  (ContextManager&);
    ~InputStage ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание ресурсов уровня
///////////////////////////////////////////////////////////////////////////////////////////////////
    IInputLayoutState* CreateInputLayoutState (const InputLayoutDesc& desc);
    IVertexBuffer*     CreateVertexBuffer     (const BufferDesc& desc);
    IIndexBuffer*      CreateIndexBuffer      (const BufferDesc& desc);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление конфигурацией входных данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    void               SetInputLayout  (IInputLayoutState* state);
    IInputLayoutState* GetInputLayout  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление вершинными буферами
///////////////////////////////////////////////////////////////////////////////////////////////////
    void           SetVertexBuffer (size_t vertex_buffer_slot, IVertexBuffer* buffer);
    IVertexBuffer* GetVertexBuffer (size_t vertex_buffer_slot) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление индексным буфером
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          SetIndexBuffer (IIndexBuffer* buffer);
    IIndexBuffer* GetIndexBuffer () const;

  private:
    InputStage (const InputStage&); //no impl
    InputStage& operator = (const InputStage&); //no impl

  private:  
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
