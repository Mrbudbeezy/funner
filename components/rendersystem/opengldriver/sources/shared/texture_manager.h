#ifndef RENDER_GL_DRIVER_TEXTURE_MANAGER_HEADER
#define RENDER_GL_DRIVER_TEXTURE_MANAGER_HEADER

#include <render/low_level/texture.h>
#include <stl/auto_ptr.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Способности менеджера текстур
///////////////////////////////////////////////////////////////////////////////////////////////////
enum TextureManagerCapability
{
  TextureManagerCapability_Texture3D,       //создание трёхмерных текстур
  TextureManagerCapability_TextureCubeMap,  //создание кубических карт
  TextureManagerCapability_GenerateMipmaps, //генерация мип-уровней
  TextureManagerCapability_Compression,     //сжатие текстур
  
  TextureManagerCapability_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер текстур
///////////////////////////////////////////////////////////////////////////////////////////////////
class TextureManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    TextureManager  ();
    ~TextureManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Биндинг
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind (size_t sampler_slot, ITexture* texture);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
    ITexture* CreateTexture (const TextureDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Настройки работы с расширениями
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetCapability (TextureManagerCapability capability, bool state);
    bool GetCapability (TextureManagerCapability capability) const;

  private:
    TextureManager (const TextureManager&);             //no impl
    TextureManager& operator = (const TextureManager&); //no impl
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
