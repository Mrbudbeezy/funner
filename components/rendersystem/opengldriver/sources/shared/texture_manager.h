#ifndef RENDER_GL_DRIVER_TEXTURE_MANAGER_HEADER
#define RENDER_GL_DRIVER_TEXTURE_MANAGER_HEADER

#include <render/low_level/device.h>
#include <shared/context_manager.h>
#include <stl/auto_ptr.h>

namespace render
{

namespace low_level
{

namespace opengl
{

//implementation forwards
struct TextureExtesions;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Внутренний дескриптор OpenGL текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
struct BindableTextureDesc
{
  GLenum target; //тип текстуры
  size_t id;     //идентификатор текстуры  
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текстура с возможностью установки в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
class IBindableTexture: virtual public ITexture
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение внутреннего дескриптора OpenGL текстуры
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void GetDesc (BindableTextureDesc& desc) = 0;

    using ITexture::GetDesc;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текстуры в контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Bind () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер текстур
///////////////////////////////////////////////////////////////////////////////////////////////////
class TextureManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    TextureManager  (const ContextManager&);
    ~TextureManager ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Биндинг текстур и сэмплеров
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Bind ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание текстуры и сэмплера
///////////////////////////////////////////////////////////////////////////////////////////////////
    IBindableTexture* CreateTexture (const TextureDesc&);
    ISamplerState*    CreateSamplerState (const SamplerDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущей текстуры и сэмплера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void           SetTexture (size_t sampler_slot, ITexture* texture);
    void           SetSampler (size_t sampler_slot, ISamplerState* state);
    ITexture*      GetTexture (size_t sampler_slot) const;
    ISamplerState* GetSampler (size_t sampler_slot) const;

  private:
    TextureManager (const TextureManager&);             //no impl
    TextureManager& operator = (const TextureManager&); //no impl
    
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
