#ifndef RENDER_GL_DRIVER_CONTEXT_MANAGER_HEADER
#define RENDER_GL_DRIVER_CONTEXT_MANAGER_HEADER

#include <render/low_level/driver.h>
#include <shared/extensions.h>
#include <gl/glew.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение контекста GLEW (имя функции выбрано исходя из требований GLEW)
///////////////////////////////////////////////////////////////////////////////////////////////////
const GLEWContext* glewGetContext ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор таблицы локальных данных контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ContextDataTable
{
  ContextDataTable_InputStage,
  ContextDataTable_ShaderStage,
  ContextDataTable_RasterizerStage,
  ContextDataTable_OutputStage,
  ContextDataTable_TextureManager,
  
  ContextDataTable_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество элементов в каждой из таблиц локальных данных контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
const size_t CONTEXT_DATA_TABLE_SIZE = 64;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер контекстов OpenGL (политика копирования - подсчёт ссылок)
///////////////////////////////////////////////////////////////////////////////////////////////////
class ContextManager
{
  public:
    typedef xtl::function<void (const char*)> LogHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    ContextManager  (const LogHandler& log_handler, const char* init_string="");
    ContextManager  (const ContextManager&);
    ~ContextManager ();

    ContextManager& operator = (const ContextManager&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание / удаление контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t CreateContext (ISwapChain*);
    void   DeleteContext (size_t context_id);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание совместимой цепочки обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
    ISwapChain* CreateCompatibleSwapChain (size_t context_id);
    ISwapChain* CreateCompatibleSwapChain (ISwapChain*);
    ISwapChain* CreateCompatibleSwapChain (ISwapChain*, const SwapChainDesc&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выбор текущего контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetContext       (size_t context_id, ISwapChain* draw_swap_chain, ISwapChain* read_swap_chain);
    ISwapChain* GetDrawSwapChain () const;
    ISwapChain* GetReadSwapChain () const;
    size_t      GetContextId     () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Активация текущего контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    void MakeContextCurrent () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с таблицей локальных данных текущего контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    void   SetContextData   (ContextDataTable table_id, size_t element_id, size_t value);
    size_t GetContextData   (ContextDataTable table_id, size_t element_id) const;
    void   ClearContextData (ContextDataTable table_id);
    void   ClearContextData ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение информации о текущей реализации OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetExtensions () const;
    const char* GetVersion    () const;
    const char* GetVendor     () const;
    const char* GetRenderer   () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Определение поддержки расширения контекстом
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsSupported (size_t context_id, const Extension& extension) const;
    bool IsSupported (const Extension& extension) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка совместимости контекста и цепочки обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsCompatible (size_t context_id, ISwapChain* swap_chain) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка совместимости менеджеров контекстов
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsCompatible (const ContextManager&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Протоколирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    void LogPrintf  (const char* format, ...) const;
    void LogVPrintf (const char* format, va_list args) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка ошибок OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CheckErrors (const char* source) const;
    void RaiseError  (const char* source) const;

  private:
    struct Impl;
    Impl* impl;
};

}

}

}

#endif
