#ifndef RENDER_GL_DRIVER_CONTEXT_HEADER
#define RENDER_GL_DRIVER_CONTEXT_HEADER

#include <gl/glew.h>
#include <stl/auto_ptr.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Контекст OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
class Context
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Context  (ISwapChain*);
    ~Context ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка транзакции работы контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Lock     ();
    void Unlock   ();
    bool IsLocked () const;

  private:
    Context (const Context&); //no impl
    Context& operator = (const Context&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Транзакция работы контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
class ContextScope
{
  public:
    ContextScope  (Context&);
    ~ContextScope ();

  private:
    ContextScope (const ContextScope&); //no impl
    ContextScope& operator = (const ContextScope&); //no impl

  private:
    Context& context;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение контекста GLEW (имя функции выбрано исходя из требований GLEW)
///////////////////////////////////////////////////////////////////////////////////////////////////
const GLEWContext* glewGetContext ();

}

}

}

#endif
