#ifndef RENDER_GL_DRIVER_OUTPUT_MANAGER_HEADER
#define RENDER_GL_DRIVER_OUTPUT_MANAGER_HEADER

#include <render/low_level/driver.h>
#include <shared/trackable.h>
#include <stl/auto_ptr.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
/// ласс, инкапсулирующий работу с низкоуровневыми устройствами вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
class OutputManager: public Trackable
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
/// онструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    OutputManager  ();
    ~OutputManager ();
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕеречисление доступных устройств вывода
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t   GetOutputsCount () const;
    IOutput* GetOutput       (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///ѕоиск устройства вывода, перекрытие которого с окном максимально
///////////////////////////////////////////////////////////////////////////////////////////////////
    IOutput* FindContainingOutput (void* window_handle) const;

  private:
    OutputManager (const OutputManager&); //no impl
    OutputManager& operator = (const OutputManager&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
