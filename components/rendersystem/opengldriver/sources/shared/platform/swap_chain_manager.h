#ifndef RENDER_GL_DRIVER_SWAP_CHAIN_MANAGER_HEADER
#define RENDER_GL_DRIVER_SWAP_CHAIN_MANAGER_HEADER

#include <render/low_level/driver.h>
#include <shared/platform/output_manager.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Описане PBuffer'а
///////////////////////////////////////////////////////////////////////////////////////////////////
struct PBufferDesc: public SwapChainDesc
{
  size_t width;  //ширина буфера
  size_t height; //высота буфера
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///PBuffer
///////////////////////////////////////////////////////////////////////////////////////////////////
class IPBuffer: virtual public ISwapChain
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void GetDesc (PBufferDesc&) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер цепочек обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
class SwapChainManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание цепочки обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
    static ISwapChain* CreateSwapChain (OutputManager& output_manager, const SwapChainDesc& swap_chain_desc);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание PBuffer'а
///////////////////////////////////////////////////////////////////////////////////////////////////
    static IPBuffer* CreatePBuffer (ISwapChain* source_chain, const PBufferDesc& pbuffer_desc);
};

}

}

}

#endif
