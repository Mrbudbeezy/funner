#ifndef RENDER_GL_DRIVER_OBJECT_HEADER
#define RENDER_GL_DRIVER_OBJECT_HEADER

#include <render/low_level/object.h>
#include <xtl/reference_counter.h>

#ifdef _MSC_VER
  #pragma warning (disable : 4250) //'class1' : inherits 'class2::member' via dominance
#endif

namespace render
{

namespace low_level
{

namespace opengl
{

//forward declarations
class Device;

//+logobject

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый объект семейства низкоуровневых средств отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class Object: virtual public IObject, public xtl::reference_counter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Object () {}
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  ();
    void Release ();

//////////////////////////////////////////////////////////////////////////////////////////////////
///По умолчанию объекты не имеют списка свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    IPropertyList* GetProperties ();

  private:
    Object (const Object&); //no impl
    Object& operator = (const Object&); //no impl
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект, созданный устройством отрисовки
///////////////////////////////////////////////////////////////////////////////////////////////////
class DeviceObject: virtual public IDeviceObject, public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    DeviceObject (Device* device);
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Указатель на устройство отрисовки, которому принадлежит ресурс
///////////////////////////////////////////////////////////////////////////////////////////////////
    IDevice* GetDevice ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка совместимости объеков
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsCompatible (IObject*);
    bool IsCompatible (DeviceObject*);
    
  private:
    Device* device;
};

}

}

}

#endif
