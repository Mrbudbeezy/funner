#ifndef RENDER_GL_DRIVER_PROPERTY_LIST_HEADER
#define RENDER_GL_DRIVER_PROPERTY_LIST_HEADER

#include <render/low_level/debug.h>
#include <stl/auto_ptr.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список свойств объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
class PropertyList: virtual public IPropertyList
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    PropertyList ();
    ~PropertyList ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetSize ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение ключа и его значения
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetKey   (size_t index);
    const char* GetValue (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / удаление свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddProperty   (const char* key, const char* value);
    void   RemovePropery (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление всех свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

  private:
    PropertyList (const PropertyList&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Список свойств по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
class DefaultPropertyList: virtual public IPropertyList
{
  public:    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество свойств
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t GetSize ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение ключа и его значения
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* GetKey   (size_t index);
    const char* GetValue (size_t index);
};

}

}

}

#endif
