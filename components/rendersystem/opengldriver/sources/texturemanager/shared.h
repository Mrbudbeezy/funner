#ifndef RENDER_GL_DRIVER_TEXTURE_SHARED_HEADER
#define RENDER_GL_DRIVER_TEXTURE_SHARED_HEADER

#include <render/low_level/texture.h>

class Texture : virtual public ITexture, public Buffer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Texture (const TextureDesc& texture_desc) : texture_description (texture_desc) {}
    virtual ~Texture () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение дескриптора
///////////////////////////////////////////////////////////////////////////////////////////////////
    void GetDesc (TextureDesc& texture_desc) {texture_desc = texture_description;}

  private:
    TextureDesc texture_description;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Одномерная текстура
///////////////////////////////////////////////////////////////////////////////////////////////////
class 1DTexture : public Texture
{
  public:
    1DTexture (const TextureDesc& texture_desc) : Texture (texture_desc) {}
    ~1DTexture () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация копирования данных между буферами без проверки границ
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CopyToImpl (size_t source_offset, size_t size, IBuffer& destination, size_t destination_offset);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Одномерная текстура
///////////////////////////////////////////////////////////////////////////////////////////////////
class 2DTexture : public Texture
{
  public:
    2DTexture (const TextureDesc& texture_desc) : Texture (texture_desc) {}
    ~2DTexture () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация копирования данных между буферами без проверки границ
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CopyToImpl (size_t source_offset, size_t size, IBuffer& destination, size_t destination_offset);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Одномерная текстура
///////////////////////////////////////////////////////////////////////////////////////////////////
class 3DTexture : public Texture
{
  public:
    3DTexture (const TextureDesc& texture_desc) : Texture (texture_desc) {}
    ~3DTexture () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация копирования данных между буферами без проверки границ
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CopyToImpl (size_t source_offset, size_t size, IBuffer& destination, size_t destination_offset);
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Одномерная текстура
///////////////////////////////////////////////////////////////////////////////////////////////////
class CubemapTexture : public Texture
{
  public:
    CubemapTexture (const TextureDesc& texture_desc) : Texture (texture_desc) {}
    ~CubemapTexture () {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация копирования данных между буферами без проверки границ
///////////////////////////////////////////////////////////////////////////////////////////////////
    void CopyToImpl (size_t source_offset, size_t size, IBuffer& destination, size_t destination_offset);
};

#endif
