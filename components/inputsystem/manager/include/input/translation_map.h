#ifndef INPUT_SYSTEM_TRANSLATION_MAP_HEADER
#define INPUT_SYSTEM_TRANSLATION_MAP_HEADER

#include <xtl/functional_fwd>

namespace input
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Таблица трансляции команд низкоуровневых устройств ввода в клиентские события
///////////////////////////////////////////////////////////////////////////////////////////////////
class TranslationMap
{
  public:
    typedef xtl::function<void (const char* event)> EventHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    TranslationMap  ();
    TranslationMap  (const char* file_name);
    TranslationMap  (const TranslationMap&);
    ~TranslationMap ();
    
    TranslationMap& operator = (const TranslationMap&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация трансляторов
///  (замены аргументов в клиентской подстановке через {1}, {2}, ...)
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Add    (const char* input_event, const char* client_event_replacement);
    void   Remove (size_t input_event);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка клиентского обработчика оттранслированных событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    void                SetHandler (const EventHandler&);
    const EventHandler& Handler    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработка события
///////////////////////////////////////////////////////////////////////////////////////////////////
    void ProcessEvent (const char* event) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка / сохранение таблицы
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);
    void Save (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (TranslationMap&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (TranslationMap&, TranslationMap&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер таблиц трансляции
///////////////////////////////////////////////////////////////////////////////////////////////////
class TranslationMapManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Работа с пользовательскими функциями загрузки и сохранения
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* file_name,       TranslationMap&)> LoadHandler;
    typedef xtl::function<void (const char* file_name, const TranslationMap&)> SaveHandler;

    static void RegisterLoader       (const char* extension, const LoadHandler& handler);
    static void RegisterSaver        (const char* extension, const SaveHandler& handler);
    static void UnregisterLoader     (const char* extension);
    static void UnregisterSaver      (const char* extension);
    static void UnregisterAllLoaders ();
    static void UnregisterAllSavers  ();
    static void UnregisterAll        ();
};

}

#endif
