#ifndef INPUT_SYSTEM_EVENTS_DETECTOR_HEADER
#define INPUT_SYSTEM_EVENTS_DETECTOR_HEADER

#include <input/translation_map.h>
#include <input/event_source.h>

namespace input
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Определитель событий
///////////////////////////////////////////////////////////////////////////////////////////////////
class EventsDetector
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Фильтр
///////////////////////////////////////////////////////////////////////////////////////////////////
    class Filter
    {
      public:
        virtual const char* Action      () = 0;
        virtual const char* EventMask   () = 0;
        virtual const char* Replacement () = 0;
    };

    typedef xtl::iterator<Filter> Iterator;    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
   EventsDetector  ();
   EventsDetector  (const char* file_name);
   EventsDetector  (const EventDetector&);
   ~EventsDetector ();

   EventsDetector& operator = (const EventsDetector&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация соответствий
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Add    (const char* action, const char* input_event_mask, const char* replacement);
    void Remove (const char* action, const char* input_event_mask);
    void Remove (const Iterator&);
    void Remove (const char* action);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перебор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator CreateIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Определение события для указанного тэга в таблице трансляции
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* action, const char* event, const char* replacement)> EventHandler;

    xtl::connection Detect (const EventSource& source, const char* action, const EventHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сохранение / загрузка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);
    void Save (const char* file_name);

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
