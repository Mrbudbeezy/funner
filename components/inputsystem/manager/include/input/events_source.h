#ifndef INPUT_SYSTEM_EVENTS_SOURCE_HEADER
#define INPUT_SYSTEM_EVENTS_SOURCE_HEADER

#include <xtl/functional_fwd>

namespace input
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник событий ввода
///////////////////////////////////////////////////////////////////////////////////////////////////
class EventsSource
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструксторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    EventsSource  ();
    EventsSource  (const char* driver_mask, const char* device_name_mask);
    EventsSource  (const EventsSource&);
    ~EventsSource ();

    EventsSource& operator = (const EventsSource&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о подключении
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool        IsConnected () const;
    const char* DriverName  () const;
    const char* DeviceName  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подключение к устройству ввода
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Connect    (const char* driver_mask, const char* device_name);
    void Disconnect ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник событий ввода
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* event)> EventHandler;

    xtl::connection RegisterHandler (const EventHandler&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (EventsSource&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (EventsSource&, EventsSource&);

}

#endif
