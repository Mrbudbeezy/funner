#ifndef SOUND_SYSTEM_LOW_LEVEL_HEADER
#define SOUND_SYSTEM_LOW_LEVEL_HEADER

#include <exception>

#include <mathlib.h>
#include <xtl/functional_fwd>

#include <sound/listener.h>

#include <media/sound.h>

namespace sound
{

namespace low_level
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим работы seek
///////////////////////////////////////////////////////////////////////////////////////////////////
enum SeekMode
{
  SeekMode_Clamp,   //обрезание по длине проигрывания
  SeekMode_Repeat   //остато от деления на длину проигрывания
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Источник звука
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Source
{
  math::vec3f position;            //позиция
  math::vec3f direction;           //направление
  math::vec3f velocity;            //скорость
  float       gain;                //громкость
  float       minimum_gain;        //минимальная громкость
  float       maximum_gain;        //максимальная громкость
  float       inner_angle;         //угол внутреннего конуса излучения
  float       outer_angle;         //угол внешнего конуса излучения
  float       outer_gain;          //громкость внутри внешнего конуса
  float       reference_distance;  //расстояние, с которого громкость равна volume
  float       maximum_distance;    //расстояние незатухания громкости
//Настройки эффектов звука
//  float        air_absorption;      //поглощение воздухом
//  float        outer_gain_hf;       //параметр фильтра высокой частоты для внешнего конуса
//  float        room_rolloff_factor; //количество поглощения на выходе к фильтру
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Характеристики устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Capabilities
{
  size_t channels_count;          //количество поддерживаемых каналов
  size_t eax_major_version;       //старшая часть версии EAX
  size_t eax_minor_version;       //младшая часть версии EAX
  size_t efx_major_version;       //старшая часть версии EFX
  size_t efx_minor_version;       //младшая часть версии EFX
  size_t max_aux_sends;           //максимальное количество подключённых к источнику фильтров
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Исключение: устройство перешло в некорректное состояние
///////////////////////////////////////////////////////////////////////////////////////////////////
struct LostDeviceException: public std::exception
{
  const char* what () const throw () { return "LostDeviceException"; }
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Низкоуровневая система воспроизведения звука
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ISoundDevice
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* Name () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение информации об устройстве
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void GetCapabilities (Capabilities&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество микшируемых каналов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t ChannelsCount () = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего проигрываемого звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void                      SetSample (size_t channel, const media::SoundSample& sample) = 0;
    virtual const media::SoundSample& GetSample (size_t channel) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка цикличности проигрывания канала
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool IsLooped (size_t channel) = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка параметров источника
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetSource (size_t channel, const Source&) = 0;
    virtual void GetSource (size_t channel, Source&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление проигрыванием
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void  Play  (size_t channel, bool looping = false) = 0;
    virtual void  Pause (size_t channel) = 0;
    virtual void  Stop  (size_t channel) = 0;
    virtual void  Seek  (size_t channel, float time_in_seconds, SeekMode seek_mode) = 0;
    virtual float Tell  (size_t channel) = 0;
    virtual bool  IsPlaying (size_t channel) = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка уровня громкости для устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void  SetVolume (float gain) = 0;
    virtual float GetVolume () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Блокировка проигрывания звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetMute (bool state) = 0;
    virtual bool IsMuted () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка параметров слушателя
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetListener (const Listener&) = 0;
    virtual void GetListener (Listener&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка параметров устройства
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* GetParamsNames  () = 0; //возвращение строку имён параметров устройства, разделитель - пробел
    virtual bool        IsIntegerParam  (const char* name) = 0;
    virtual bool        IsStringParam   (const char* name) = 0;
    virtual void        SetIntegerParam (const char* name, int value) = 0;
    virtual int         GetIntegerParam (const char* name) = 0;
    virtual void        SetStringParam  (const char* name, const char* value) = 0;
    virtual const char* GetStringParam  (const char* name) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка функции отладочного протоколирования
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (const char* message)> LogHandler;

    virtual void              SetDebugLog (const LogHandler&) = 0;
    virtual const LogHandler& GetDebugLog () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Управление подсчётом ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:    
    virtual ~ISoundDevice () {}    
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Система управления устройствами воспроизведения звука
///////////////////////////////////////////////////////////////////////////////////////////////////
class SoundSystem
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация драйверов
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<ISoundDevice* (const char* driver_name,
                                         const char* device_name,
                                         const char* init_string)> CreateDeviceHandler;

    static void RegisterDriver       (const char* driver_name, const CreateDeviceHandler& creater);
    static void UnregisterDriver     (const char* driver_name);
    static void UnregisterAllDrivers ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация конфигураций
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const char* RegisterConfiguration       (const char* driver_name, const char* device_name);
    static void        UnregisterConfiguration     (const char* configuration_name);
    static void        UnregisterConfiguration     (const char* driver_name, const char* device_name);
    static void        UnregisterAllConfigurations (const char* driver_mask, const char* device_mask);
    static void        UnregisterAllConfigurations ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление доступных конфигураций
///////////////////////////////////////////////////////////////////////////////////////////////////
    static size_t      GetConfigurationsCount ();
    static const char* GetConfiguration       (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск конфигурации
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const char* FindConfiguration (const char* driver_mask, const char* device_mask); //в случае неудачи - 0

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание устройства воспроизведения звука
///////////////////////////////////////////////////////////////////////////////////////////////////
    static ISoundDevice* CreateDevice (const char* driver_name, const char* device_name, const char* init_string);
    static ISoundDevice* CreateDevice (const char* configuration_name, const char* init_string = "");
};

}

}

#endif
