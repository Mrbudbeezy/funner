#ifndef SYSLIB_APPLICATION_HEADER
#define SYSLIB_APPLICATION_HEADER

#include <xtl/functional_fwd>

namespace syslib
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///События приложения
///////////////////////////////////////////////////////////////////////////////////////////////////
enum ApplicationEvent
{
  ApplicationEvent_OnExit, //получен сигнал завершения приложения
  ApplicationEvent_OnIdle, //очередь сообщений пуста
  
  ApplicationEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Приложение
///////////////////////////////////////////////////////////////////////////////////////////////////
class Application
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обработка сообщений в очереди сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void DoNextEvent ();
    static void DoEvents    ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Запуск обработки очереди сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Run ();
    static bool IsMessageLoop (); //находится ли сейчас приложение в состоянии обработки сообщений

///////////////////////////////////////////////////////////////////////////////////////////////////
///Прекращение обработки очереди сообщений
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Exit        (int code);
    static int  GetExitCode ();  //получение кода завершения

///////////////////////////////////////////////////////////////////////////////////////////////////
///Пауза на заданное количество милисекунд
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void Sleep (size_t milliseconds);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события приложения
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void ()> EventHandler;

    static xtl::connection RegisterEventHandler (ApplicationEvent event, const EventHandler& handler);
};

}

#endif
