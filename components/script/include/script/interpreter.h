#ifndef SCRIPTLIB_INTERPRETER_HEADER
#define SCRIPTLIB_INTERPRETER_HEADER

#include <xtl/functional_fwd>
#include <xtl/intrusive_ptr.h>
#include <common/exception.h>
#include <script/stack.h>

namespace xtl
{

//forward declaration
template <class T> class shared_ptr;

}

namespace script
{

//forward declaration
class Environment;

//////////////////////////////////////////////////////////////////////////////////////////////////
///Исключения
//////////////////////////////////////////////////////////////////////////////////////////////////
struct InterpreterExceptionTag;           //базовое скриптовое исключение
struct RuntimeExceptionTag;               //исключение, возникающее при выполнении скрипта
struct StackExceptionTag;                 //исключение, возникающее при переполнении/"недополнении" стека
struct UndefinedFunctionCallExceptionTag; //попытка вызова незарегистрированной функции

typedef common::DerivedException<common::Exception, InterpreterExceptionTag>              InterpreterException;
typedef common::DerivedException<InterpreterException, StackExceptionTag>                 StackException;
typedef common::DerivedException<InterpreterException, UndefinedFunctionCallExceptionTag> UndefinedFunctionCallException;
typedef common::DerivedException<InterpreterException, RuntimeExceptionTag>               RuntimeException;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерпретатор
///////////////////////////////////////////////////////////////////////////////////////////////////
class IInterpreter
{
  public:
    typedef xtl::function<void (const char*)> LogFunction;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя интерпретатора
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* Name () = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Стек интерпретатора
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IStack& Stack () = 0;    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выполнение команд
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void DoCommands (const char*        buffer_name,  //имя буфера команд
                             const void*        buffer,       //буфер с командами
                             size_t             buffer_size,  //размер буфера
                             const LogFunction& log) = 0;     //функция протоколирования ошибок интерпретации

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия функции в контексте интерпретации
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool HasFunction (const char* name) = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Вызов внутренней функции интерпретатора
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Invoke (size_t arguments_count, size_t results_count) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~IInterpreter () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание интерпретатора lua
///////////////////////////////////////////////////////////////////////////////////////////////////
xtl::com_ptr<IInterpreter> create_lua_interpreter (const xtl::shared_ptr<Environment>& environment);

}

#endif
