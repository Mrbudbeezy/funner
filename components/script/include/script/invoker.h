#ifndef SCRIPTLIB_INVOKER_HEADER
#define SCRIPTLIB_INVOKER_HEADER

namespace xtl
{

//forward declarations
template <class Signature> class function;
class any;

}

namespace script
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс стека аргументов функции-шлюза
///////////////////////////////////////////////////////////////////////////////////////////////////
class IStack
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество аргументов в стеке
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Size () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение параметра из стека
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual float       GetFloat   (int index) = 0;
    virtual int         GetInteger (int index) = 0;
    virtual void*       GetPointer (int index) = 0;
    virtual const char* GetString  (int index) = 0;
    virtual xtl::any&   GetVariant (int index) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Помещение аргументов в стек
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Push (float value) = 0;
    virtual void Push (int value) = 0;
    virtual void Push (void* pointer) = 0; 
    virtual void Push (const char* string) = 0;
    virtual void Push (const xtl::any&) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление аргументов из стека
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Pop (size_t arguments_count) = 0;

  protected:
    virtual ~IStack () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Функция-шлюз между скриптовым движком и C++ кодом
///////////////////////////////////////////////////////////////////////////////////////////////////
class Invoker
{
  public:
    typedef xtl::function<void (IStack&)> Function;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Invoker (const Function& handler, size_t arguments_count, size_t results_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вызов шлюза
///////////////////////////////////////////////////////////////////////////////////////////////////
    void operator () (IStack& stack) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение количества аргументов и результатов вызова функции шлюза
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t ArgumentsCount () const;
    size_t ResultsCount   () const;

  private:
    Function handler;
    size_t   arguments_count;
    size_t   results_count;
};

#include <script/detail/invoker.inl>

}

#endif
