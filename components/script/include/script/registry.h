#ifndef SCRIPT_FUNCTION_REGISTRY_HEADER
#define SCRIPT_FUNCTION_REGISTRY_HEADER

#include <typeinfo>
#include <stl/auto_ptr.h>
#include <xtl/functional_fwd>

namespace script
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реестр функций, импортируемых в скриптовое окружение
///////////////////////////////////////////////////////////////////////////////////////////////////
class FunctionRegistry
{
  public:
    typedef xtl::function<void (IStack&) Function;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FunctionRegistry  ();
    FunctionRegistry  (const FunctionRegistry&);
    ~FunctionRegistry ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    FunctionRegistry& operator = (const FunctionRegistry&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация функций
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Register   (const char* name, const Function& fn);
    void Unregister (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск функции по имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    const Function* Find (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (FunctionRegistry&);
  
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (FunctionRegistry&, FunctionRegistry&);

}

#endif
