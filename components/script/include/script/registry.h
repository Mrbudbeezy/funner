#ifndef SCRIPT_FUNCTION_REGISTRY_HEADER
#define SCRIPT_FUNCTION_REGISTRY_HEADER

#include <typeinfo>
#include <stl/auto_ptr.h>
#include <xtl/functional_fwd>

namespace script
{

class IStack;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Пользовательский аргумент
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
в процессе

class IUserArgument
{
  public:
    virtual 

  protected:
    virtual ~IUserArgument () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс стека аргументов функции
///////////////////////////////////////////////////////////////////////////////////////////////////
class IStack
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество аргументов в стеке
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Size () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение параметра из стека
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual float        GetFloat   (int index) = 0;
    virtual int          GetInteger (int index) = 0;
    virtual void*        GetPointer (int index) = 0;
    virtual const char*  GetString  (int index) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Помещение аргументов в стек
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Push (float value) = 0;
    virtual void Push (int value) = 0;
    virtual void Push (void* pointer) = 0; 
    virtual void Push (const char* string) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление аргументов из стека
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Pop (size_t arguments_count) = 0;

  protected:
    virtual ~IStack () {}
};*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реестр функций, импортируемых в скриптовое окружение
///////////////////////////////////////////////////////////////////////////////////////////////////
class FunctionRegistry
{
  public:
    typedef xtl::function<void (IStack&) Function;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    FunctionRegistry  ();
    FunctionRegistry  (const FunctionRegistry&);
    ~FunctionRegistry ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    FunctionRegistry& operator = (const FunctionRegistry&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация функций
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Register   (const char* name, const Function& fn);
    void Unregister (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск функции по имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    const Function* Find (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (FunctionRegistry&);
  
  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (FunctionRegistry&, FunctionRegistry&);

}

#endif
