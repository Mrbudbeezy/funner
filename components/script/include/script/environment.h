#ifndef SCRIPTLIB_ENVIRONMENT_HEADER
#define SCRIPTLIB_ENVIRONMENT_HEADER

#include <xtl/functional_fwd>
#include <stl/auto_ptr.h>
#include <script/invoker.h>

namespace script
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///События окружения
///////////////////////////////////////////////////////////////////////////////////////////////////
enum EnvironmentEvent
{
  EnvironmentEvent_OnCreateRegistry, //генерируется после создания нового реестра
  EnvironmentEvent_OnRemoveRegistry, //генерируется перед удалением реестра
  
  EnvironmentEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Скриптовое окружение
///////////////////////////////////////////////////////////////////////////////////////////////////
class Environment
{
  public:
    typedef xtl::function<void (EnvironmentEvent event, const char* registry_id, InvokerRegistry& registry)> EventHandler;
    typedef xtl::iterator<InvokerRegistry>        Iterator;
    typedef xtl::iterator<const InvokerRegistry>  ConstIterator;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Environment  ();
    Environment  (const Environment&);
    ~Environment ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Environment& operator = (const Environment&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание итераторов
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      CreateIterator ();
    ConstIterator CreateIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени реестра по итератору
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* RegistryId (const ConstIterator&) const;    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание / удаление / поиск реестров
///////////////////////////////////////////////////////////////////////////////////////////////////
    InvokerRegistry& CreateRegistry (const char* id);
    void             RemoveRegistry (const char* id);   
    InvokerRegistry* FindRegistry   (const char* id) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация обработчиков событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::connection RegisterEventHandler (EnvironmentEvent event, const EventHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Environment&);

  private:  
    struct Impl;

    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Environment&, Environment&);

}

#endif
