#ifndef SCRIPTLIB_LUA_SHARED_HEADER
#define SCRIPTLIB_LUA_SHARED_HEADER

#include <script/interpreter.h>
#include <script/invoker.h>

#include <xtl/any.h>

#include <lua.h>
#include <lualib.h>
#include <lauxlib.h>

namespace script
{

namespace lua
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Стек луа
///////////////////////////////////////////////////////////////////////////////////////////////////
class LuaStack: public IStack
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
    LuaStack (lua_State*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество аргументов в стеке
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение аргументов из стека
///////////////////////////////////////////////////////////////////////////////////////////////////    
    float       GetFloat   (size_t index);
    int         GetInteger (size_t index);
    void*       GetPointer (size_t index);
    const char* GetString  (size_t index);
    const char* GetSymbol  (size_t index);
    xtl::any&   GetVariant (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Помещение аргументов в стек
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Push       (float value);
    void Push       (int value);
    void Push       (void* pointer);
    void Push       (const char* string);
    void Push       (const xtl::any& object);
    void PushSymbol (const char* string);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление аргументов из стека
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Pop (size_t arguments_count);
    
  private:
    lua_State* state;    
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тэг пользовательских данных
///////////////////////////////////////////////////////////////////////////////////////////////////
extern const char* USER_DATA_TAG;

}

}

#endif
