#ifndef SCRIPTLIB_LUA_SHARED_HEADER
#define SCRIPTLIB_LUA_SHARED_HEADER

#include <script/interpreter.h>
#include <script/invoker.h>

#include <xtl/any.h>
#include <xtl/connection.h>
#include <xtl/shared_ptr.h>
#include <xtl/iterator.h>
#include <xtl/bind.h>

#include <lua.h>
#include <lualib.h>
#include <lauxlib.h>

namespace script
{

namespace lua
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Стек луа
///////////////////////////////////////////////////////////////////////////////////////////////////
class LuaStack: public IStack
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
    LuaStack ();
    LuaStack (lua_State*);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Состояние машины Lua
///////////////////////////////////////////////////////////////////////////////////////////////////
    void       SetState (lua_State*);
    lua_State* State    () const { return state; }    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество аргументов в стеке
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение аргументов из стека
///////////////////////////////////////////////////////////////////////////////////////////////////    
    float       GetFloat   (size_t index);
    int         GetInteger (size_t index);
    void*       GetPointer (size_t index);
    const char* GetString  (size_t index);
    const char* GetSymbol  (size_t index);
    xtl::any&   GetVariant (size_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Помещение аргументов в стек
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Push       (float value);
    void Push       (int value);
    void Push       (void* pointer);
    void Push       (const char* string);
    void Push       (const xtl::any& object);
    void PushSymbol (const char* string);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление аргументов из стека
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Pop (size_t arguments_count);
    
  private:
    lua_State* state;    
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерпретатор LUA
///////////////////////////////////////////////////////////////////////////////////////////////////
class LuaInterpreter: public IInterpreter
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    LuaInterpreter  (const xtl::shared_ptr<InvokerRegistry>&);
    ~LuaInterpreter ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя интерпретатора
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Стек аргументов
///////////////////////////////////////////////////////////////////////////////////////////////////
    IStack& Stack ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия функции
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool HasFunction (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выполнение буфера интерпретации луа
///////////////////////////////////////////////////////////////////////////////////////////////////
    void DoCommands (const char* buffer_name, const void* buffer, size_t buffer_size, const LogFunction& log);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вызов функции луа
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Invoke (size_t arguments_count, size_t results_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AddRef  ();
    void Release ();

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация/удаление шлюза
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RegisterInvoker   (const char* invoker_name, Invoker& invoker);
    void UnregisterInvoker (const char* invoker_name);

  private:
    xtl::shared_ptr<InvokerRegistry> registry;                         //реестр шлюзов C++ используемых луа
    lua_State*                       state;                            //состояние машины Lua
    LuaStack                         stack;                            //стек аргументов
    size_t                           ref_count;                        //счётчик активных ссылок
    xtl::auto_connection             on_register_invoker_connection;   //соединение регистрации шлюза
    xtl::auto_connection             on_unregister_invoker_connection; //соединение удаления шлюза
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тэг пользовательских данных
///////////////////////////////////////////////////////////////////////////////////////////////////
extern const char* USER_DATA_TAG;

}

}

#endif
