#ifndef SCRIPTLIB_INVOKER_REGISTRY_HEADER
#define SCRIPTLIB_INVOKER_REGISTRY_HEADER

#include <xtl/functional_fwd>

#include <script/invoker.h>

namespace xtl
{

//forward declarations
template <class T> class iterator;

}

namespace script
{

//forward declaration
class Environment;

///////////////////////////////////////////////////////////////////////////////////////////////////
///События реестра шлюзов
///////////////////////////////////////////////////////////////////////////////////////////////////
enum InvokerRegistryEvent
{
  InvokerRegistryEvent_OnRegisterInvoker,    //срабатывает при добавлении шлюза
  InvokerRegistryEvent_OnUnregisterInvoker,  //срабатывает при удалении шлюза
  
  InvokerRegistryEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реестр шлюзов
///////////////////////////////////////////////////////////////////////////////////////////////////
class InvokerRegistry
{
  public:
    typedef xtl::iterator<Invoker>       Iterator;
    typedef xtl::iterator<const Invoker> ConstIterator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    InvokerRegistry  ();
    InvokerRegistry  (const InvokerRegistry&);
    ~InvokerRegistry ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    InvokerRegistry& operator = (const InvokerRegistry&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Клонирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    InvokerRegistry Clone () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим автоматических перегрузок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetAutoOverloadsMode (bool state);
    bool AutoOverloadsMode    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск шлюза по имени
///////////////////////////////////////////////////////////////////////////////////////////////////
    const Invoker* Find (const char* name) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение итератора
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      CreateIterator ();
    ConstIterator CreateIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение идентификатора шлюза
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* InvokerId (const ConstIterator&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация/удаление шлюзов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Register   (const char* name, const Invoker& invoker);       
    void Register   (const InvokerRegistry& registry); //регистрация копий шлюзов registry        
    void Register   (const Environment& environment, const char* registry_name); //регистрация копий шлюзов registry
    void Register   (const char* name, const char* source_name); //регистрация копии
    void Register   (const char* name, const InvokerRegistry& source_registry, const char* source_name); //регистрация копии
    void Unregister (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация обработчиков событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (InvokerRegistryEvent, const char* invoker_name, Invoker& invoker)> EventHandler;

    xtl::connection RegisterEventHandler (InvokerRegistryEvent event_id, const EventHandler& handler) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (InvokerRegistry&);
    
  private:
    struct Impl;
  
    InvokerRegistry (Impl*);
  
  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (InvokerRegistry&, InvokerRegistry&);

}

#endif
