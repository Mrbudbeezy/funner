#ifndef SCRIPTLIB_STACK_HEADER
#define SCRIPTLIB_STACK_HEADER

namespace xtl
{

//forward declarations
class any;

}

namespace script
{

//forward declarations
class IInterpreter;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ссылка на символ (внутренние объекты интерпретатора: функция, таблица и т.п.)
///////////////////////////////////////////////////////////////////////////////////////////////////
class ISymbol
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя символа
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* Name () = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

  protected:
    virtual ~ISymbol () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс стека аргументов функции-шлюза
///////////////////////////////////////////////////////////////////////////////////////////////////
class IStack
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерпретатор, которому принадлежит стек
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IInterpreter& Interpreter () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество аргументов в стеке
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual unsigned int Size () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение аргумента из стека
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual float       GetFloat   (unsigned int index) = 0;
    virtual ptrdiff_t   GetInteger (unsigned int index) = 0;
    virtual bool        GetBoolean (unsigned int index) = 0;
    virtual void*       GetPointer (unsigned int index) = 0;
    virtual const char* GetString  (unsigned int index) = 0;
    virtual xtl::any&   GetVariant (unsigned int index) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Помещение аргументов в стек
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Push (float value) = 0;
    virtual void Push (ptrdiff_t value) = 0;
    virtual void Push (bool value) = 0;
    virtual void Push (void* pointer) = 0;
    virtual void Push (const char* string) = 0;
    virtual void Push (const xtl::any& variant) = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Помещение/извлечение из стека специальных символов интерпретации (например имён функций)
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void     PushSymbol (const char* symbol) = 0;
    virtual void     PushSymbol (ISymbol*) = 0;
    virtual ISymbol* GetSymbol  (unsigned int index) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление аргументов из стека
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Pop (unsigned int arguments_count) = 0;

  protected:
    virtual ~IStack () {}
};

}

#endif
