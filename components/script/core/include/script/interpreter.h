#ifndef SCRIPTLIB_INTERPRETER_HEADER
#define SCRIPTLIB_INTERPRETER_HEADER

#include <xtl/functional_fwd>
#include <xtl/intrusive_ptr.h>
#include <xtl/exception.h>

#include <script/stack.h>

namespace xtl
{

//forward declaration
class trackable;

}

namespace script
{

//forward declaration
class Environment;

//////////////////////////////////////////////////////////////////////////////////////////////////
///Исключения
//////////////////////////////////////////////////////////////////////////////////////////////////
struct InterpreterException:   virtual public xtl::exception {};        //базовое скриптовое исключение
struct RuntimeException:               public InterpreterException {};  //исключение, возникающее при выполнении скрипта
struct StackException:                 public InterpreterException {};  //исключение, возникающее при переполнении/"недополнении" стека
struct ArgumentException:              public StackException {};        //исключение, возникающее при получении аргумента
struct UndefinedFunctionCallException: public InterpreterException {};  //попытка вызова незарегистрированной функции

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерпретатор
///////////////////////////////////////////////////////////////////////////////////////////////////
class IInterpreter
{
  public:
    typedef xtl::function<void (const char*)> LogFunction;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя интерпретатора
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* Name () = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Стек интерпретатора
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IStack& Stack () = 0;    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выполнение команд
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void DoCommands (const char* buffer_name,      //имя буфера команд
                             const void* buffer,           //буфер с командами
                             size_t      buffer_size) = 0; //размер буфера

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка наличия функции в контексте интерпретации
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool HasFunction (const char* name) = 0;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Вызов внутренней функции интерпретатора
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Invoke (unsigned int arguments_count, unsigned int results_count) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подсчёт ссылок
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef  () = 0;
    virtual void Release () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект, оповещающий об удалении IInterpreter
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual xtl::trackable& GetTrackable () = 0;

  protected:
    virtual ~IInterpreter () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект, оповещающий об удалении IInterpreter
///////////////////////////////////////////////////////////////////////////////////////////////////
xtl::trackable& get_trackable (IInterpreter&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер командных интерпретаторов
///////////////////////////////////////////////////////////////////////////////////////////////////
class InterpreterManager
{
  public:
    typedef xtl::function<IInterpreter* (const Environment& environment)> InterpreterCreater;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация функторов создания
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterInterpreter       (const char* name, const InterpreterCreater& creater);
    static void UnregisterInterpreter     (const char* name);
    static void UnregisterAllInterpreters ();
};

}

#endif
