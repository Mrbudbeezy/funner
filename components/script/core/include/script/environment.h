#ifndef SCRIPTLIB_ENVIRONMENT_HEADER
#define SCRIPTLIB_ENVIRONMENT_HEADER

#include <typeinfo>

#include <xtl/functional_fwd>

#include <script/invoker_registry.h>

namespace script
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///События окружения
///////////////////////////////////////////////////////////////////////////////////////////////////
enum EnvironmentLibraryEvent
{
  EnvironmentLibraryEvent_OnCreate, //генерируется после создания новой библиотеки
  EnvironmentLibraryEvent_OnRemove, //генерируется перед удалением библиотеки
  
  EnvironmentLibraryEvent_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Скриптовое окружение
///////////////////////////////////////////////////////////////////////////////////////////////////
class Environment
{
  public:
    typedef xtl::function<void (EnvironmentLibraryEvent event, const char* library_id, InvokerRegistry& registry)> EventHandler;
    typedef xtl::iterator<InvokerRegistry>        LibraryIterator;
    typedef xtl::iterator<const InvokerRegistry>  ConstLibraryIterator;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Дескриптор типа
///////////////////////////////////////////////////////////////////////////////////////////////////
    class Type
    {
      public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Информация о типе
///////////////////////////////////////////////////////////////////////////////////////////////////        
        virtual const std::type_info& StdType () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Библиотека шлюзов
///////////////////////////////////////////////////////////////////////////////////////////////////        
        virtual InvokerRegistry& Library () = 0;
        
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя библиотеки типа
///////////////////////////////////////////////////////////////////////////////////////////////////        
        virtual const char* Name () = 0;
      
      protected:
        virtual ~Type () {}
    };
    
    typedef xtl::iterator<Type>       TypeIterator;
    typedef xtl::iterator<const Type> ConstTypeIterator;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    Environment  ();
    Environment  (const Environment&);
    ~Environment ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Environment& operator = (const Environment&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание итераторов
///////////////////////////////////////////////////////////////////////////////////////////////////
    LibraryIterator      CreateLibraryIterator ();
    ConstLibraryIterator CreateLibraryIterator () const;
    TypeIterator         CreateTypeIterator    ();
    ConstTypeIterator    CreateTypeIterator    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение имени библиотеки по итератору
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* LibraryId (const ConstLibraryIterator&) const;    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание / удаление библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    InvokerRegistry CreateLibrary (const char* id);
    void            RemoveLibrary (const char* id);
    void            RemoveAllLibraries ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация ассоциаций между C++ RTTI и библиотеками
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RegisterType       (const std::type_info& type, const char* library_id);
    void UnregisterType     (const std::type_info& type);
    void UnregisterAllTypes ();
    
    template <class T> void RegisterType   (const char* library_id);
    template <class T> void UnregisterType ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск библиотеки
///////////////////////////////////////////////////////////////////////////////////////////////////
    InvokerRegistry* FindLibrary   (const char* id) const;
    InvokerRegistry* FindLibrary   (const std::type_info& type) const;
    const char*      FindLibraryId (const std::type_info& type) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск типа
///////////////////////////////////////////////////////////////////////////////////////////////////
    Type* FindType (const std::type_info&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Биндинг библиотек
///////////////////////////////////////////////////////////////////////////////////////////////////
    void BindLibraries (const char* library_mask);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск библиотеки по имени и создание её в случае отсутствия
///////////////////////////////////////////////////////////////////////////////////////////////////
    InvokerRegistry Library (const char* id);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация обработчиков событий
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::connection RegisterEventHandler (EnvironmentLibraryEvent event, const EventHandler& handler);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Environment&);

  private:  
    struct Impl;

  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Environment&, Environment&);

#include <script/detail/environment.inl>

}

#endif
